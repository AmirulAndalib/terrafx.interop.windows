<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.CertAddCertificateContextToStore">
    <summary>The <b>CertAddCertificateContextToStore</b> function adds a certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</summary>
    <param name="hCertStore">Handle of a certificate store.</param>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> structure to be added to the store.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if a matching certificate or a link to a matching certificate already exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> CERT_STORE_ADD_NEWER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists and the NotBefore time of the existing context is equal to or greater than the NotBefore time of the new context being added, the operation fails and <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code. <para>If the NotBefore time of the existing context is less than the NotBefore time of the new context being added, the existing certificate or link is deleted and a new certificate is created and added to the store. If a matching certificate or a link to a matching certificate does not exist, a new link is added.</para><para>If <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTLs) are being compared, the ThisUpdate time is used.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists and the NotBefore time of the existing context is equal to or greater than the NotBefore time of the new context being added, the operation fails and <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code. <para>If the NotBefore time of the existing context is less than the NotBefore time of the new context being added, the existing context is deleted before creating and adding the new context. The new added context inherits properties from the existing certificate.</para><para>If CRLs or CTLs are being compared, the ThisUpdate time is used.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a link to a matching certificate exists, that existing certificate or link is deleted and a new certificate is created and added to the store. If a matching certificate or a link to a matching certificate does not exist, a new link is added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate exists in the store, the existing context is not replaced. The existing context inherits properties from the new certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties from the new certificate are added. The function does not fail, but it does not add a new context. If <i>pCertContext</i> is not <b>NULL</b>, the existing context is duplicated. <para>If a matching certificate or a link to a matching certificate does not exist, a new certificate is added.</para></description>
        </listheader>
      </list>
    </param>
    <param name="ppStoreContext">
      <para>A pointer to a pointer to the copy to be made of the certificate that was added to the store.</para>
      <para>The <i>ppStoreContext</i> parameter can be <b>NULL</b>, indicating that the calling application does not require a copy of the added certificate. If a copy is made, it must be freed by using<see cref="CertFreeCertificateContext" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is returned if CERT_STORE_ADD_NEW is set and the certificate already exists in the store, or if CERT_STORE_ADD_NEWER is set and a certificate exists in the store with a <b>NotBefore</b> date greater than or equal to the <b>NotBefore</b> date on the certificate to be added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A disposition value that is not valid was specified in the <i>dwAddDisposition</i> parameter.</description>
        </listheader>
      </list> <para>Errors from the called functions,<see cref="CertAddEncodedCertificateToStore" /> and<see cref="CertSetCertificateContextProperty" />, can be propagated to this function.</para></returns>
  </member>
  <member name="Windows.CertAddCertificateLinkToStore">
    <summary>The <b>CertAddCertificateLinkToStore</b> function adds a link in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> in a different store. Instead of creating and adding a duplicate of the certificate context, this function adds a link to the original certificate.</summary>
    <param name="hCertStore">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> where the link is to be added.</param>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> structure to be linked.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action if a matching certificate or a link to a matching certificate already exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a link to a matching certificate exists, that existing link is deleted and a new link is created and added to the store. If no matching certificate or link to a matching certificate exists, one is added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists, the existing certificate is used. The function does not fail, but no new link is added. If no matching certificate or link to a matching certificate exists, a new link is added.</description>
        </listheader>
      </list>
    </param>
    <param name="ppStoreContext">A pointer to a pointer to a copy of the link created. The <i>ppStoreContext</i> parameter can be <b>NULL</b> to indicate that a copy of the link is not needed. If a copy of the link is created, that copy must be freed using the <see cref="CertFreeCertificateContext" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For a <i>dwAddDisposition</i> parameter of CERT_STORE_ADD_NEW, the certificate already exists in the store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A disposition value that is not valid was specified in the <i>dwAddDisposition</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertAddCRLContextToStore">
    <summary>The <b>CertAddCRLContextToStore</b> function adds a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context to the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</summary>
    <param name="hCertStore">Handle of a certificate store.</param>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> structure to be added.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, the function compares the <b>ThisUpdate</b> times on the CRLs. If the existing CRL has a <b>ThisUpdate</b> time less than the <b>ThisUpdate</b> time on the new CRL, the old CRL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a <b>ThisUpdate</b> time greater than or equal to the <b>ThisUpdate</b> time on the CRL to be added, the function fails with <see cref="GetLastError" /> returning the CRYPT_E_EXISTS code.<para>If a matching CRL or a link to a matching CRL is not found in the store, a new CRL is added to the store.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are incorporated into the replacement CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, the existing CRL or link is deleted and a new CRL is created and added to the store. If a matching CRL or a link to a matching CRL does not exist, one is added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL exists in the store, the existing context is deleted before creating and adding the new context. The added context inherits properties from the existing CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The function does not fail, but no new CRL is added. If <i>ppCertContext</i> is not <b>NULL</b>, the existing context is duplicated. <para>If a matching CRL or a link to a matching CRL does not exist, a new CRL is added.</para></description>
        </listheader>
      </list>
    </param>
    <param name="ppStoreContext">A pointer to a pointer to the decoded CRL context. This is an optional parameter and can be <b>NULL</b>, indicating that the calling application does not require a copy of the added or existing CRL. If a copy is made, that context must be freed by using<see cref="CertFreeCRLContext" />.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Errors from the called functions<see cref="CertAddEncodedCRLToStore" /> and<see cref="CertSetCRLContextProperty" /> can be propagated to this function.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This error is returned if CERT_STORE_ADD_NEW is set and the CRL already exists in the store or if CERT_STORE_ADD_NEWER is set and a CRL exists in the store with a <b>ThisUpdate</b> date greater than or equal to the <b>ThisUpdate</b> date on the CRL to be added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwAddDisposition</i> parameter specified a disposition value that is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertAddCRLLinkToStore">
    <summary>The <b>CertAddCRLLinkToStore</b> function adds a link in a store to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context in a different store. Instead of creating and adding a duplicate of the CRL, this function adds a link to the original CRL context.</summary>
    <param name="hCertStore">Handle of a certificate store where the link is to be added.</param>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> structure to be linked.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if a matching CRL or a link to a matching CRL exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes no check for an existing matching CRL or link to a matching CRL. A new link is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, the <b>ThisUpdate</b> times on the CRLs are compared. If the existing CRL has a <b>ThisUpdate</b> time less than the <b>ThisUpdate</b> time on the new CRL, the old link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a <b>ThisUpdate</b> time greater than or equal to the <b>ThisUpdate</b> time on the CRL to be added, the function fails with <see cref="GetLastError" /> returning the CRYPT_E_EXISTS code. <para>If a matching CRL or a link to a matching CRL is not found in the store, a new link is added to the store.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a link to the matching CRL exists, that existing link is deleted and a new link is created and added to the store. If a matching CRL or a link to a matching CRL does not exist, a new link is added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, that existing link is used. The function does not fail, but no new link is added. If a matching CRL or link to a CRL does not exist, a new link is added.</description>
        </listheader>
      </list>
    </param>
    <param name="ppStoreContext">A pointer to a pointer of a copy of the link created. The <i>ppStoreContext</i> parameter can be <b>NULL</b> to indicate that a copy of the link is not needed. If a copy of the link is created, that copy must be freed using<see cref="CertFreeCRLContext" />.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For a <i>dwAddDisposition</i> of CERT_STORE_ADD_NEW, the CTL already exists in the store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A disposition value that is not valid was specified in the <i>dwAddDisposition</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertAddCTLContextToStore">
    <summary>The <b>CertAddCTLContextToStore</b> function adds a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</summary>
    <param name="hCertStore">Handle of a certificate store.</param>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure to be added to the store.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, the <b>ThisUpdate</b> times on the CTLs are compared. If the existing CTL has a <b>ThisUpdate</b> time less than the <b>ThisUpdate</b> time on the new CTL, the old CTL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a <b>ThisUpdate</b> time greater than or equal to the <b>ThisUpdate</b> time on the CTL to be added, the function fails with <see cref="GetLastError" /> returning the CRYPT_E_EXISTS code.<para>If a matching CTL or a link to a matching CTL is not found in the store, a new CTL is added to the store.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are incorporated into the replacement CTL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to the store. If a matching CTL or a link to a matching CTL does not exist, one is added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added context inherits properties from the existing CTL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The function does not fail, but no new CTL is added. If <i>ppCertContext</i> is not <b>NULL</b>, the existing context is duplicated.<para>If a matching CTL or a link to a matching CTL does not exist, a new CTL is added.</para></description>
        </listheader>
      </list>
    </param>
    <param name="ppStoreContext">Pointer to a pointer to the decoded CTL <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>. This optional parameter can be <b>NULL</b> indicating that the calling application does not require a copy of the added or existing CTL. If a copy is made, that context must be freed using<see cref="CertFreeCTLContext" />.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Errors from the called functions<see cref="CertAddEncodedCRLToStore" /> and<see cref="CertSetCRLContextProperty" /> can be propagated to this function.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This error is returned if CERT_STORE_ADD_NEW is set and the CTL exists in the store or if CERT_STORE_ADD_NEWER is set and a CTL exists in the store with a <b>ThisUpdate</b> date greater than or equal to the <b>ThisUpdate</b> date on the CTL to be added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An add disposition that is not valid was specified by the <i>dwAddDisposition</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertAddCTLLinkToStore">
    <summary>The <b>CertAddCTLLinkToStore</b> function adds a link in a store to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> in a different store. Instead of creating and adding a duplicate of a CTL context, this function adds a link to the original CTL context.</summary>
    <param name="hCertStore">Handle of the certificate store where the link is to be added.</param>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure to be linked.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, the <b>ThisUpdate</b> times on the CTLs are compared. If the existing CTL has a <b>ThisUpdate</b> time less than the <b>ThisUpdate</b> time on the new CTL, the old CTL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a <b>ThisUpdate</b> time greater than or equal to the <b>ThisUpdate</b> time on the CTL to be added, the function fails with <see cref="GetLastError" /> returning the CRYPT_E_EXISTS code. <para>If a matching CTL or a link to a matching CTL is not found in the store, a new CTL is added to the store.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are incorporated into the replacement CTL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to the store. If a matching CTL or a link to a matching CTL does not exist, one is added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added context inherits properties from the existing CTL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The function does not fail, but no new CTL is added. If <i>ppCertContext</i> is not <b>NULL</b>, the existing context is duplicated.<para>If a matching CTL or a link to a matching CTL does not exist, a new CTL is added.</para></description>
        </listheader>
      </list>
    </param>
    <param name="ppStoreContext">A pointer to a pointer to a copy of the link created. <i>ppStoreContext</i> can be <b>NULL</b> to indicate that a copy of the link is not needed. If a copy of the link is created, that copy must be freed using<see cref="CertFreeCTLContext" />.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For a <i>dwAddDisposition</i> of CERT_STORE_ADD_NEW, the CTL already exists in the store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The add disposition specified by the <i>dwAddDisposition</i> parameter is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertAddEncodedCertificateToStore">
    <summary>
      <para>The <b>CertAddEncodedCertificateToStore</b> function creates a certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> from an encoded certificate and adds it to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. The context created does not include any extended properties.</para>
      <para>The <b>CertAddEncodedCertificateToStore</b> function also makes a copy of the encoded certificate before adding the certificate to the store.</para>
    </summary>
    <param name="hCertStore">A handle to the certificate store.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbCertEncoded">A pointer to a buffer containing the encoded certificate that is to be added to the certificate store.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if a matching certificate or link to a matching certificate exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists in the store, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or link to a matching certificate exists in the store, the existing certificate or link is deleted and a new certificate is created and added to the store. If a matching certificate or link to a matching certificate does not exist, a new certificate is created and added to the store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate exists in the store, that existing context is deleted before creating and adding the new context. The new context inherits properties from the existing certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties from the new certificate are added. The function does not fail, but it does not add a new context. If <i>ppCertContext</i> is not <b>NULL</b>, the existing context is duplicated.<para>If a matching certificate or link to a matching certificate does not exist, a new certificate is added.</para></description>
        </listheader>
      </list>
    </param>
    <param name="ppCertContext">A pointer to a pointer to the decoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a>. This is an optional parameter that can be <b>NULL</b>, indicating that the calling application does not require a copy of the new or existing certificate. When a copy is made, its context must be freed by using<see cref="CertFreeCertificateContext" />.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This code is returned if CERT_STORE_ADD_NEW is set and the certificate already exists in the store, or if CERT_STORE_ADD_NEWER is set and there is a certificate in the store with a <b>NotBefore</b> date greater than or equal to the <b>NotBefore</b> date on the certificate to be added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A disposition value that is not valid was specified in the <i>dwAddDisposition</i> parameter, or a certificate encoding type that is not valid was specified. Currently, only the X509_ASN_ENCODING type is supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> returns an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CertAddEncodedCertificateToSystemStore">
    <summary>The <b>CertAddEncodedCertificateToSystemStore</b> function opens the specified system store and adds the encoded certificate to it.</summary>
    <param name="szCertStoreName">A null-terminated string that contains the name of the system store for the encoded certificate.</param>
    <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate to add.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. <b>CertAddEncodedCertificateToSystemStore</b> depends on the functions listed in the following remarks for error handling. Refer to those function topics for their respective error handling behaviors. For extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertAddEncodedCertificateToSystemStoreA">
    <summary>The <b>CertAddEncodedCertificateToSystemStore</b> function opens the specified system store and adds the encoded certificate to it.</summary>
    <param name="szCertStoreName">A null-terminated string that contains the name of the system store for the encoded certificate.</param>
    <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate to add.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. <b>CertAddEncodedCertificateToSystemStore</b> depends on the functions listed in the following remarks for error handling. Refer to those function topics for their respective error handling behaviors. For extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertAddEncodedCertificateToSystemStoreW">
    <summary>The <b>CertAddEncodedCertificateToSystemStore</b> function opens the specified system store and adds the encoded certificate to it.</summary>
    <param name="szCertStoreName">A null-terminated string that contains the name of the system store for the encoded certificate.</param>
    <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate to add.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. <b>CertAddEncodedCertificateToSystemStore</b> depends on the functions listed in the following remarks for error handling. Refer to those function topics for their respective error handling behaviors. For extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertAddEncodedCertificateToSystemStore">
    <summary>The <b>CertAddEncodedCertificateToSystemStore</b> function opens the specified system store and adds the encoded certificate to it.</summary>
    <param name="szCertStoreName">A null-terminated string that contains the name of the system store for the encoded certificate.</param>
    <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate to add.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. <b>CertAddEncodedCertificateToSystemStore</b> depends on the functions listed in the following remarks for error handling. Refer to those function topics for their respective error handling behaviors. For extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertAddEncodedCertificateToSystemStoreA">
    <summary>The <b>CertAddEncodedCertificateToSystemStore</b> function opens the specified system store and adds the encoded certificate to it.</summary>
    <param name="szCertStoreName">A null-terminated string that contains the name of the system store for the encoded certificate.</param>
    <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate to add.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. <b>CertAddEncodedCertificateToSystemStore</b> depends on the functions listed in the following remarks for error handling. Refer to those function topics for their respective error handling behaviors. For extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertAddEncodedCertificateToSystemStoreW">
    <summary>The <b>CertAddEncodedCertificateToSystemStore</b> function opens the specified system store and adds the encoded certificate to it.</summary>
    <param name="szCertStoreName">A null-terminated string that contains the name of the system store for the encoded certificate.</param>
    <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate to add.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. <b>CertAddEncodedCertificateToSystemStore</b> depends on the functions listed in the following remarks for error handling. Refer to those function topics for their respective error handling behaviors. For extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertAddEncodedCRLToStore">
    <summary>The <b>CertAddEncodedCRLToStore</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context from an encoded CRL and adds it to the certificate store. The function makes a copy of the CRL context before adding it to the store.</summary>
    <param name="hCertStore">Handle of a certificate store.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbCrlEncoded">A pointer to a buffer containing the encoded CRL to be added to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</param>
    <param name="cbCrlEncoded">The size, in bytes, of the <i>pbCrlEncoded</i> buffer.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined disposition values and their uses are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to duplicates in a store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, the operation fails. <see cref="GetLastError" /> returns the CRYPT_E_EXISTS code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, the <b>ThisUpdate</b> times on the CRLs are compared. If the existing CRL has a <b>ThisUpdate</b> time less than the <b>ThisUpdate</b> time on the new CRL, the old CRL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a <b>ThisUpdate</b> time greater than or equal to the <b>ThisUpdate</b> time on the CRL to be added, the function fails with <see cref="GetLastError" /> returning the CRYPT_E_EXISTS code.<para>If a matching CRL or a link to a matching CRL is not found in the store, a new CRL is added to the store.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are incorporated into the replacement CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, that existing CRL or link is deleted and a new CRL is created and added to the store. If a matching CRL or a link to a matching CRL does not exist, one is added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL exists in the store, that existing context is deleted before creating and adding the new context. The new context inherits properties from the existing CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The function does not fail, but no new CRL is added. If <i>ppCertContext</i> is not <b>NULL</b>, the existing context is duplicated. <para>If a matching CRL or a link to a matching CRL does not exist, a new CRL is added.</para></description>
        </listheader>
      </list>
    </param>
    <param name="ppCrlContext">A pointer to a pointer to the decoded<see cref="CRL_CONTEXT" /> structure. This is an optional parameter that can be <b>NULL</b>, indicating that the calling application does not require a copy of the new or existing CRL. If a copy is made, that context must be freed using<see cref="CertFreeCRLContext" />.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>CERT_STORE_ADD_NEW is set and the CRL already exists in the store, or CERT_STORE_ADD_NEWER is set and there is a CRL in the store with a <b>ThisUpdate</b> time greater than or equal to the <b>ThisUpdate</b> time for the CRL to be added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A disposition value that is not valid was specified in the <i>dwAddDisposition</i> parameter, or an encoding type that is not valid was specified. Currently, only the encoding type X509_ASN_ENCODING is supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CertAddEnhancedKeyUsageIdentifier">
    <summary>The <b>CertAddEnhancedKeyUsageIdentifier</b> function adds a usage identifier <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">enhanced key usage</a> (EKU) extended property of the certificate.</summary>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> of the certificate for which the usage identifier is to be added.</param>
    <param name="pszUsageIdentifier">Specifies the usage identifier OID to add.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertAddRefServerOcspResponse">
    <summary>The <b>CertAddRefServerOcspResponse</b> function increments the reference count for an <b>HCERT_SERVER_OCSP_RESPONSE</b> handle.</summary>
    <param name="hServerOcspResponse">A handle to an <b>HCERT_SERVER_OCSP_RESPONSE</b> returned by <see cref="CertOpenServerOcspResponse" />.</param>
  </member>
  <member name="Windows.CertAddRefServerOcspResponseContext">
    <summary>The <b>CertAddRefServerOcspResponseContext</b> function increments the reference count for a <see cref="CERT_SERVER_OCSP_RESPONSE_CONTEXT" /> structure.</summary>
    <param name="pServerOcspResponseContext">A pointer to a <see cref="CERT_SERVER_OCSP_RESPONSE_CONTEXT" /> returned by <see cref="CertGetServerOcspResponseContext" />.</param>
  </member>
  <member name="Windows.CertAddSerializedElementToStore">
    <summary>The <b>CertAddSerializedElementToStore</b> function adds a serialized <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL), or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) element to the store. The serialized element contains the encoded certificate, CRL, or CTL and its extended properties. Extended properties are associated with a certificate and are not part of a certificate as issued by a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certification authority</a>. Extended properties are not available on a certificate when it is used on a non-Microsoft platform.</summary>
    <param name="hCertStore">The handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> where the created certificate will be stored. If <i>hCertStore</i> is <b>NULL</b>, the function creates a copy of a certificate, CRL, or CTL context with its extended properties, but the certificate, CRL, or CTL is not persisted in any store.</param>
    <param name="pbElement">A pointer to a buffer that contains the certificate, CRL, or CTL information to be serialized and added to the certificate store.</param>
    <param name="cbElement">The size, in bytes, of the <i>pbElement</i> buffer.</param>
    <param name="dwAddDisposition">
      <para>Specifies the action to take if the certificate, CRL, or CTL already exists in the store. Currently defined disposition values are shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the certificate, CRL, or CTL is new, it is created and persisted to the store. The operation fails if an identical certificate, CRL, or CTL already exists in the store. The last error code is set to CRYPT_E_EXISTS.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_USE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the certificate, CRL, or CTL is new, it is added to the store. If an identical certificate, CRL, or CTL already exists, the existing element is used. If <i>ppvContext</i> is not <b>NULL</b>, the existing context is duplicated. The function only adds properties that do not already exist. The SHA-1 and MD5 hash properties are not copied.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If an identical certificate, CRL, or CTL already exists in the store, the existing certificate, CRL, or CTL context is deleted before creating and adding the new context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No check is made to determine whether an identical certificate, CRL, or CTL already exists. A new element is always created. This can lead to duplicates in the store. To determine whether the element already exists in the store, call <see cref="CertGetCRLFromStore" /> or <see cref="CertGetSubjectCertificateFromStore" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching CRL or CTL or a link to a matching CRL or CTL exists, the function compares the <b>NotBefore</b> times on the CRL or CTL. If the existing CRL or CTL has a <b>NotBefore</b> time less than the <b>NotBefore</b> time on the new element, the old element or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing element has a <b>NotBefore</b> time greater than or equal to the <b>NotBefore</b> time on the element to be added, the function fails with <see cref="GetLastError" /> returning the CRYPT_E_EXISTS code.<para>If a matching CRL or CTL or a link to a matching CRL or CTL is not found in the store, a new element is added to the store.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The action is the same as for CERT_STORE_ADD_NEWER. However, if an older CRL or CTL is replaced, the properties of the older element are incorporated into the replacement.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a matching certificate exists in the store, the existing context is deleted before creating and adding the new context. The new added context inherits properties from the existing certificate.</description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="dwContextTypeFlags">
      <para>Specifics the contexts that can be added. For example, to add either a certificate, CRL, or CTL, set <i>dwContextTypeFlags</i> to <b>CERT_STORE_CERTIFICATE_CONTEXT_FLAG</b> or <b>CERT_STORE_CRL_CONTEXT_FLAG</b>.</para>
      <para>Currently defined context type flags are shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ALL_CONTEXT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds any context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CERTIFICATE_CONTEXT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds only a certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CRL_CONTEXT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds only a CRL context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTL_CONTEXT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds only a CTL context.</description>
        </listheader>
      </list>
    </param>
    <param name="pdwContextType">
      <para>A pointer to the context type of the added serialized element. This is an optional parameter and can be <b>NULL</b>, which indicates that the calling application does not require the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> type.</para>
      <para>Currently defined context types are shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CERTIFICATE_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certificates</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CRL_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>CRLs</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTL_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>CTLs</description>
        </listheader>
      </list>
    </param>
    <param name="ppvContext">
      <para>A pointer to a pointer to the decoded certificate, CRL, or CTL context. This is an optional parameter and can be <b>NULL</b>, which indicates that the calling application does not require the context of the added or existing certificate, CRL, or CTL.</para>
      <para>If <i>ppvContext</i> is not <b>NULL</b>, it must be the address of a pointer to a<see cref="CERT_CONTEXT" />,<see cref="CRL_CONTEXT" />, or<see cref="CTL_CONTEXT" />. When the application is finished with the context, the context must be freed by using<see cref="CertFreeCertificateContext" /> for a certificate,<see cref="CertFreeCRLContext" /> for a CRL, or<see cref="CertFreeCTLContext" /> for a CTL.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_EXISTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the <i>dwAddDisposition</i> parameter is set to CERT_STORE_ADD_NEW, the certificate, CRL, or CTL already exists in the store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A disposition value that is not valid was specified in the <i>dwAddDisposition</i> parameter.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CertAddStoreToCollection">
    <summary>The <b>CertAddStoreToCollection</b> function adds a sibling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> to a collection certificate store. When a certificate store has been added to a collection store, all of the certificates, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs), and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs) in the store that has been added to the collection store can be retrieved by using find or enumerate function calls that use the collection store.</summary>
    <param name="hCollectionStore">Handle of a certificate store.</param>
    <param name="hSiblingStore">Handle of a sibling store to be added to the collection store. For more information, see Remarks.</param>
    <param name="dwUpdateFlags">Indicates whether <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificates</a>, CRLs, and CTLs can be added to the new sibling store member of the collection store. To enable addition, set <i>dwUpdateFlag</i> to CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG. To disable additions, set <i>dwUpdateFlag</i> to zero.</param>
    <param name="dwPriority">Sets a priority level of the new store in the collection, with zero being the lowest priority. If zero is passed for this parameter, the specified store is appended as the last store in the collection. The priority levels of the stores in a collection determine the order in which the stores are enumerated, and the search order of the stores when attempting to retrieve a certificate, CRL, or CTL. Priority levels also determine to which store of a collection a new certificate, CRL, or CTL is added. For more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero and a new store is added to the collection of stores.</para>
      <para>If the function fails, it returns zero and the store was not added.</para>
    </returns>
  </member>
  <member name="Windows.CertAlgIdToOID">
    <summary>
      <para>Use the <see cref="CryptFindOIDInfo" /> function instead of this function because <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> identifiers are no longer supported in CNG. Use the <b>CRYPT_OID_INFO_CNG_ALGID_KEY</b> value in the <i>dwKeyType</i> parameter of the <see cref="CryptFindOIDInfo" /> function instead.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The <b>CertAlgIdToOID</b> function converts a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CryptoAPI</a> algorithm identifier (<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a>) to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) string.</para>
    </summary>
    <param name="dwAlgId">Value to be converted to an OID.</param>
    <returns>
      <para>If the function succeeds, the function returns the null-terminated OID string.</para>
      <para>If no OID string corresponds to the algorithm identifier, the function returns <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CertCloseServerOcspResponse">
    <summary>The <b>CertCloseServerOcspResponse</b> function closes an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) server response handle.</summary>
    <param name="hServerOcspResponse">The handle to close for an OCSP server response.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
  </member>
  <member name="Windows.CertCloseStore">
    <summary>The <b>CertCloseStore</b> function closes a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> handle and reduces the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> on the store. There needs to be a corresponding call to <b>CertCloseStore</b> for each successful call to the<see cref="CertOpenStore" /> or<see cref="CertDuplicateStore" /> functions.</summary>
    <param name="hCertStore">Handle of the certificate store to be closed.</param>
    <param name="dwFlags">
      <para>Typically, this parameter uses the default value zero. The default is to close the store with memory remaining allocated for contexts that have not been freed. In this case, no check is made to determine whether memory for contexts remains allocated.</para>
      <para>Set flags can force the freeing of memory for all of a store's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL), and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) contexts when the store is closed. Flags can also be set that check whether all of the store's certificate, CRL, and CTL contexts have been freed. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CLOSE_STORE_CHECK_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Checks for nonfreed certificate, CRL, and CTL contexts. A returned error code indicates that one or more store elements is still in use. This flag should only be used as a diagnostic tool in the development of applications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CLOSE_STORE_FORCE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Forces the freeing of memory for all contexts associated with the store. This flag can be safely used only when the store is opened in a function and neither the store handle nor any of its contexts are passed to any called functions. For details, see Remarks.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>If CERT_CLOSE_STORE_CHECK_FLAG is not set or if it is set and all contexts associated with the store have been freed, the return value is <b>TRUE</b>.</para>
      <para>If CERT_CLOSE_STORE_CHECK_FLAG is set and memory for one or more contexts associated with the store remains allocated, the return value is <b>FALSE</b>. The store is always closed even when the function returns <b>FALSE</b>. For details, see Remarks.</para>
      <para>
        <see cref="GetLastError" /> is set to CRYPT_E_PENDING_CLOSE if memory for contexts associated with the store remains allocated. Any existing value returned by <b>GetLastError</b> is preserved unless CERT_CLOSE_STORE_CHECK_FLAG is set.</para>
    </returns>
  </member>
  <member name="Windows.CertCompareCertificate">
    <summary>
      <para>The <b>CertCompareCertificate</b> function determines whether two certificates are identical by comparing the issuer name and serial number of the certificates.</para>
      <div>
        <b>Caution</b>  The <b>CertCompareCertificate</b> function must not be used for security assertions because it does not compare <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a>.</div>
    </summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pCertId1">A pointer to the<see cref="CERT_INFO" /> for the first certificate in the comparison.</param>
    <param name="pCertId2">A pointer to the <see cref="CERT_INFO" /> for the second certificate in the comparison.</param>
    <returns>
      <para>If the certificates are identical and the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CertCompareCertificateName">
    <summary>The <b>CertCompareCertificateName</b> function compares two certificate<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structures to determine whether they are identical. The <b>CERT_NAME_BLOB</b> structures are used for the subject and the issuer of certificates.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pCertName1">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> for the first name in the comparison. For more information, see<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a>.</param>
    <param name="pCertName2">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> for the second name in the comparison.</param>
    <returns>
      <para>If the names are identical and the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CertCompareIntegerBlob">
    <summary>The <b>CertCompareIntegerBlob</b> function compares two integer <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a> to determine whether they represent equal numeric values.</summary>
    <param name="pInt1">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> structure that contains the first integer in the comparison.</param>
    <param name="pInt2">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> structure that contains the second integer in the comparison.</param>
    <returns>
      <para>If the representations of the integer BLOBs are identical and the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertComparePublicKeyInfo">
    <summary>The <b>CertComparePublicKeyInfo</b> function compares two encoded public keys to determine whether they are identical.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pPublicKey1">A pointer to the<see cref="CERT_PUBLIC_KEY_INFO" /> for the first public key in the comparison.</param>
    <param name="pPublicKey2">A pointer to the <see cref="CERT_PUBLIC_KEY_INFO" /> for the second public key in the comparison.</param>
    <returns>
      <para>If the public keys are identical and the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CertControlStore">
    <summary>
      <para>The <b>CertControlStore</b> function allows an application to be notified when there is a difference between the contents of a cached store in use and the contents of that store as it is persisted to storage. Differences can occur as another <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> makes a change that affects the store as it is persisted.</para>
      <para>The <b>CertControlStore</b> function can be used to synchronize a cached store, if necessary, and provides a means to commit changes made in the cached store to persisted storage.</para>
    </summary>
    <param name="hCertStore">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</param>
    <param name="dwFlags">
      <para>If the <i>dwCtrlType</i> parameter is set to CERT_STORE_CTRL_COMMIT, this parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_COMMIT_FORCE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Forces the contents of the cache memory store to be copied to permanent storage even if the cache has not been changed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_COMMIT_CLEAR_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits the copying of the contents of the cache memory store to permanent storage even when the store is closed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits a duplicate handle of the event HANDLE. If this flag is set, <b>CertControlStore</b> with CERT_STORE_CTRL_CANCEL_NOTIFY passed must be called for this event HANDLE before closing the <i>hCertStore</i> handle.</description>
        </listheader>
      </list> <para>If <i>dwCtrlType</i> is set to CERT_STORE_CTRL_NOTIFY_CHANGE or CERT_STORE_CTRL_RESYNC, the <i>dwFlags</i> parameter is not used and must be set to zero.</para></param>
    <param name="dwCtrlType">
      <para>Control action to be taken by <b>CertControlStore</b>. The interpretations of <i>pvCtrlPara</i> and <i>dwFlags</i> depend on the value of <i>dwCtrlType</i>. Currently, the following actions are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_RESYNC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cached store is resynchronized and made to match the persisted store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_NOTIFY_CHANGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A signal is returned in the space pointed to by <i>pvCtrlPara</i> to indicate that the current contents of the cached store differ from the store's persisted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">state</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_COMMIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Any changes made to the cached store are copied to persisted storage. If no changes were made since the cached store was opened or since the last commit, the call is ignored. The call is also ignored if the store provider is a provider that automatically persists changes immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_AUTO_RESYNC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>At the start of every enumeration or find store call, a check is made to determine whether a change has been made in the store. If the store has changed, a re-synchronization is done. This check is only done on first enumeration or find calls, when the <i>pPrevContext</i> is <b>NULL</b>.<para>The <b>pvCtrPara</b> member is not used and must be set to <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTRL_CANCEL_NOTIFY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Cancels notification signaling of the event HANDLE passed in a previous CERT_STORE_CTRL_NOTIFY_CHANGE or CERT_STORE_CTRL_RESYNC. The <i>pvCtrlPara</i> parameter points to the event HANDLE to be canceled.</description>
        </listheader>
      </list>
    </param>
    <param name="pvCtrlPara">
      <para>If <i>dwCtrlType</i> is CERT_STORE_NOTIFY_CHANGE, <i>pvCtrlPara</i> is set to the address of a handle where the system signals the notification change event when a change from the persisted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">state</a> of the store is detected. The handle must be initialized with a call to the function <see cref="CreateEvent" />. The <i>pvCtrlPara</i> parameter can be set to <b>NULL</b> for registry-based stores. If <i>pvCtrlPara</i> is <b>NULL</b>, an internal notification change event is created and registered to be signaled. Using the internal notification change event allows resynchronization operations only if the store was changed.</para>
      <para>If <i>dwCtrlType</i> is CERT_STORE_CTRL_RESYNC, set <i>pvCtrlPara</i> to the address of the event handle to be signaled on the next change in the persisted store. Typically, this address is the address of the event handle passed with CERT_STORE_CTRL_NOTIFY_CHANGE during initialization. The event handle passed is rearmed. If <i>pvCtrlPara</i> is set to <b>NULL</b>, no event is rearmed.</para>
      <para>If <i>dwCtrlType</i> CERT_STORE_CTRL_COMMIT, <i>pvCtrlPara</i> is not used and must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />.</para>
      <para>If <i>dwCtrlType</i> is CERT_STORE_NOTIFY_CHANGE, the function returns nonzero if a handle for the event signal was successfully set up. The function returns zero if the event handle was not set up.</para>
      <para>If <i>dwCtrlType</i> is CERT_STORE_CTRL_RESYNC, the function returns nonzero if the resynchronization succeeded. The function returns zero if the resynchronization failed.</para>
      <para>If <i>dwCtrlType</i> is CERT_STORE_CTRL_COMMIT, the function returns nonzero to indicate the successful completion of the commit to persisted storage. The function returns zero if the commit failed.</para>
      <para>Some providers might not support specific control types. In these cases, <b>CertControlStore</b> returns zero and <see cref="GetLastError" /> is set to the ERROR_NOT_SUPPORTED code.</para>
    </returns>
  </member>
  <member name="Windows.CertCreateCertificateChainEngine">
    <summary>The <b>CertCreateCertificateChainEngine</b> function creates a new, nondefault chain engine for an application. A chain engine restricts the certificates in the root store that can be used for verification, restricts the certificate stores to be searched for certificates and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs), sets a time-out limit for searches that involve URLs, and limits the number of certificates checked between checking for a certificate cycle.</summary>
    <param name="pConfig">A pointer to a<see cref="CERT_CHAIN_ENGINE_CONFIG" /> data structure that specifies the parameters for the chain engine.</param>
    <param name="phChainEngine">A pointer to the handle of the chain engine created. When you have finished using the chain engine, release the chain engine by calling the <see cref="CertFreeCertificateChainEngine" /> function.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The <i>phChainEngine</i> parameter returns the chain engine handle.</para>
    </returns>
  </member>
  <member name="Windows.CertCreateCertificateContext">
    <summary>The <b>CertCreateCertificateContext</b> function creates a certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> from an encoded certificate. The created context is not persisted to a certificate store. The function makes a copy of the encoded certificate within the created context.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbCertEncoded">A pointer to a buffer that contains the encoded certificate from which the context is to be created.</param>
    <param name="cbCertEncoded">The size, in bytes, of the <i>pbCertEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns a pointer to a read-only<see cref="CERT_CONTEXT" />. When you have finished using the certificate context, free it by calling the <see cref="CertFreeCertificateContext" /> function.</para>
      <para>If the function is unable to decode and create the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a>, it returns <b>NULL</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A certificate encoding type that is not valid was specified. Currently, only the X509_ASN_ENCODING type is supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CertCreateContext">
    <summary>The <b>CertCreateContext</b> function creates the specified context from the encoded bytes. The context created does not include any extended properties.</summary>
    <param name="dwContextType">
      <para>Specifies the contexts that can be created. For example, to create a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>, set <i>dwContextType</i> to CERT_STORE_CERTIFICATE_CONTEXT.</para>
      <para>Currently defined context type flags are shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CERTIFICATE_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CRL_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>CRL context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CTL_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>CTL context.</description>
        </listheader>
      </list>
    </param>
    <param name="dwEncodingType">
      <para>Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pbEncoded">A pointer to a buffer that contains the existing encoded context content to be copied.</param>
    <param name="cbEncoded">The size, in bytes, of the <i>pbEncoded</i> buffer.</param>
    <param name="dwFlags">
      <para>The following flag values are defined and can be combined by using a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CREATE_CONTEXT_NOCOPY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The created context points directly to the content pointed to by <i>pbEncoded</i> instead of an allocated copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CREATE_CONTEXT_SORTED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function creates a context with sorted entries. Currently, this flag only applies to a CTL context.<para>For CTLs, the <b>cCTLEntry</b> member of the returned<see cref="CTL_INFO" /> structure is always zero.<see cref="CertFindSubjectInSortedCTL" /> and<see cref="CertEnumSubjectInSortedCTL" /> must be called to find or enumerate the CTL entries.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, when a CTL context is created, a HCRYTPMSG handle to its <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/signeddata">SignedData</a> message is created. This flag can be set to improve performance by not creating this handle. This flag can only be used when <i>dwContextType</i> is CERT_STORE_CTL_CONTEXT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CREATE_CONTEXT_NO_ENTRY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, when a CTL context is created, its entries are decoded. When this flag is set, the entries are not decoded and performance is improved. This flag can only be used when <i>dwContextType</i> is CERT_STORE_CTL_CONTEXT.</description>
        </listheader>
      </list>
    </param>
    <param name="pCreatePara">
      <para>A pointer to a <see cref="CERT_CREATE_CONTEXT_PARA" /> structure.</para>
      <para>If <i>pCreatePara</i> and its <b>pfnFree</b> member are both non-<b>NULL</b>, the <b>pfnFree</b> member is used to free the memory specified by the <b>pvFree</b> member. If the <b>pvFree</b> member is <b>NULL</b>, the <b>pfnFree</b> member is used to free the <i>pbEncoded</i> pointer.</para>
      <para>If <i>pCreatePara</i> or its <b>pfnFree</b> member is <b>NULL</b>, no attempt is made to free <i>pbEncoded</i>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the newly created context. The <b>pvFree</b> member of <i>pCreatePara</i> must be called to free the created context.</para>
      <para>If the function fails, the return value is <b>NULL</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>If <see cref="GetLastError" /> returns <b>ERROR_CANCELLED</b>, this means that the <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_cert_create_context_sort_func">PFN_CERT_CREATE_CONTEXT_SORT_FUNC</a> callback function returned <b>FALSE</b> to stop the sort.</para>
    </returns>
  </member>
  <member name="Windows.CertCreateCRLContext">
    <summary>The <b>CertCreateCRLContext</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> from an encoded CRL. The created context is not persisted to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. It makes a copy of the encoded CRL within the created context.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbCrlEncoded">A pointer to a buffer containing the encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CRL</a> from which the context is to be created.</param>
    <param name="cbCrlEncoded">The size, in bytes, of the <i>pbCrlEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a read-only<see cref="CRL_CONTEXT" />.</para>
      <para>If the function fails and is unable to decode and create the <see cref="CRL_CONTEXT" />, the return value is <b>NULL</b>. For extended error information, call<see cref="GetLastError" />. The following table shows a possible error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid certificate encoding type. Currently, only the encoding type X509_ASN_ENCODING is supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CertCreateCTLContext">
    <summary>The <b>CertCreateCTLContext</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context from an encoded CTL. The created context is not persisted to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. The function makes a copy of the encoded CTL within the created context.</summary>
    <param name="dwMsgAndCertEncodingType">
      <para>Specifies the type of encoding used. Both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> must be specified by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbCtlEncoded">A pointer to a buffer containing the encoded CTL from which the context is to be created.</param>
    <param name="cbCtlEncoded">The size, in bytes, of the <i>pbCtlEncoded</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a read-only<see cref="CTL_CONTEXT" />.</para>
      <para>If the function fails and is unable to decode and create the <see cref="CTL_CONTEXT" />, the return value is <b>NULL</b>. For extended error information, call<see cref="GetLastError" />. The following table shows a possible error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid certificate encoding type. Only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING are supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CertCreateCTLEntryFromCertificateContextProperties">
    <summary>
      <para>The <b>CertCreateCTLEntryFromCertificateContextProperties</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) entry whose attributes are the properties of the certificate context. The SubjectIdentifier in the CTL entry is the SHA1 hash of the certificate.</para>
      <para>The certificate properties are added as attributes. The property attribute OID is the decimal PROP_ID preceded by szOID_CERT_PROP_ID_PREFIX. Each property value is copied as a single attribute value.</para>
      <para>Additional attributes can be included in the CTL entry by using the <i>cOptAttr</i> and <i>rgOptAttr</i> parameters.</para>
    </summary>
    <param name="pCertContext">A pointer to the <see cref="CERT_CONTEXT" /> used to create the CTL.</param>
    <param name="cOptAttr">A <b>DWORD</b> that specifies the number of additional attributes to be added.</param>
    <param name="rgOptAttr">A pointer to any array of <see cref="CRYPT_ATTRIBUTE" /> attributes to be added to the CTL.</param>
    <param name="dwFlags">A <b>DWORD</b>. Can be set to CTL_ENTRY_FROM_PROP_CHAIN_FLAG to force the inclusion of the chain building hash properties as attributes.</param>
    <param name="pvReserved">A pointer to a <b>VOID</b>. Reserved for future use.</param>
    <param name="pCtlEntry">Address of a pointer to a <see cref="CTL_ENTRY" /> structure. Call this function twice to retrieve a CTL entry. Set this parameter to <b>NULL</b> on the first call. When the function returns, use the number of bytes retrieved from the <i>pcbCtlEntry</i> parameter to allocate memory. Call the function again, setting this parameter to the address of the allocated memory.</param>
    <param name="pcbCtlEntry">Pointer to a <b>DWORD</b> that contains the number of bytes that must be allocated for the <see cref="CTL_ENTRY" /> structure. Call this function twice to retrieve the number of bytes. For the first call, set this parameter to the address of a <b>DWORD</b> value that contains zero and set the <i>pCtlEntry</i> parameter to <b>NULL</b>. If the first call succeeds, the <b>DWORD</b> value will contain the number of bytes that you must allocate for the <b>CTL_ENTRY</b> structure. Allocate the required memory and call the function again, supplying the address of the memory in the <i>pCtlEntry</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertCreateSelfSignCertificate">
    <summary>The <b>CertCreateSelfSignCertificate</b> function builds a self-signed certificate and returns a pointer to a<see cref="CERT_CONTEXT" /> structure that represents the certificate.</summary>
    <param name="hCryptProvOrNCryptKey">
      <para>A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic provider</a> used to sign the certificate created. If <b>NULL</b>, information from the <i>pKeyProvInfo</i> parameter is used to acquire the needed handle. If <i>pKeyProvInfo</i> is also <b>NULL</b>, the default provider type, PROV_RSA_FULL provider type, the default key specification, AT_SIGNATURE, and a newly created <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> with a unique container name are used.</para>
      <para>This handle must be an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle that has been created by using the<see cref="CryptAcquireContext" /> function or an <b>NCRYPT_KEY_HANDLE</b> handle that has been created by using the <see cref="NCryptOpenKey" /> function. New applications should always pass in the <b>NCRYPT_KEY_HANDLE</b> handle of a CNG <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).</para>
    </param>
    <param name="pSubjectIssuerBlob">A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> that contains the distinguished name (DN) for the certificate subject. This parameter cannot be <b>NULL</b>. Minimally, a pointer to an empty DN must be provided. This BLOB is normally created by using the<see cref="CertStrToName" /> function. It can also be created by using the<see cref="CryptEncodeObject" /> function and specifying either the X509_NAME or X509_UNICODE_NAME <i>StructType</i>.</param>
    <param name="dwFlags">
      <para>A set of flags that override the default behavior of this function. This can be zero or a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CREATE_SELFSIGN_NO_KEY_INFO</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>By default, the returned PCCERT_CONTEXT references the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private keys</a> by setting the CERT_KEY_PROV_INFO_PROP_ID. If you do not want the returned PCCERT_CONTEXT to reference private keys by setting the CERT_KEY_PROV_INFO_PROP_ID, specify CERT_CREATE_SELFSIGN_NO_KEY_INFO.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CREATE_SELFSIGN_NO_SIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>By default, the certificate being created is signed. If the certificate being created is only a dummy placeholder, the certificate might not need to be signed. Signing of the certificate is skipped if CERT_CREATE_SELFSIGN_NO_SIGN is specified.</description>
        </listheader>
      </list>
    </param>
    <param name="pKeyProvInfo">
      <para>A pointer to a <see cref="CRYPT_KEY_PROV_INFO" /> structure. Before a certificate is created, the CSP is queried for the key provider, key provider type, and the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> name. If the CSP queried does not support these queries, the function fails. If the default provider does not support these queries, a <i>pKeyProvInfo</i> value must be specified. The RSA BASE does support these queries.</para>
      <para>If the <i>pKeyProvInfo</i> parameter is not <b>NULL</b>, the corresponding values are set in the <b>CERT_KEY_PROV_INFO_PROP_ID</b> value of the generated certificate. You must ensure that all parameters of the supplied structure are correctly specified.</para>
    </param>
    <param name="pSignatureAlgorithm">A pointer to a <see cref="CRYPT_ALGORITHM_IDENTIFIER" /> structure. If <b>NULL</b>, the default algorithm, SHA1RSA, is used.</param>
    <param name="pStartTime">A pointer to a <see cref="SYSTEMTIME" /> structure. If <b>NULL</b>, the system current time is used by default.</param>
    <param name="pEndTime">A pointer to a <see cref="SYSTEMTIME" /> structure. If <b>NULL</b>, the <i>pStartTime</i> value plus one year will be used by default.</param>
    <param name="pExtensions">A pointer to a <see cref="CERT_EXTENSIONS" /> array of <see cref="CERT_EXTENSION" /> structures. By default, the array is empty. An alternate subject name, if desired, can be specified as one of these extensions.</param>
    <returns>If the function succeeds, a <see cref="PCCERT_CONTEXT" /> variable that points to the created certificate is returned. If the function fails, it returns <b>NULL</b>. For extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CertDeleteCertificateFromStore">
    <summary>The <b>CertDeleteCertificateFromStore</b> function deletes the specified certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> from the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</summary>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> structure to be deleted.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates the store was opened as read-only and a delete operation is not allowed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertDeleteCRLFromStore">
    <summary>The <b>CertDeleteCRLFromStore</b> function deletes the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context from the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</summary>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> structure to be deleted.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The store was opened read-only, and a delete operation is not allowed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertDeleteCTLFromStore">
    <summary>The <b>CertDeleteCTLFromStore</b> function deletes the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</summary>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure to be deleted.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The store was opened read-only, and a delete operation is not allowed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertDuplicateCertificateChain">
    <summary>The <b>CertDuplicateCertificateChain</b> function duplicates a pointer to a certificate chain by incrementing the chain's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>.</summary>
    <param name="pChainContext">A pointer to a<see cref="CERT_CHAIN_CONTEXT" /> chain context to be duplicated.</param>
    <returns>
      <para>If the function succeeds, a pointer is returned to the chain context. This pointer has the same value as the <i>pChainContext</i> passed into the function. When you have finished using the chain context, release the chain context by calling the <see cref="CertFreeCertificateChain" /> function.</para>
      <para>If the function fails, <b>NULL</b> is returned.</para>
    </returns>
  </member>
  <member name="Windows.CertDuplicateCertificateContext">
    <summary>The <b>CertDuplicateCertificateContext</b> function duplicates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> by incrementing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>.</summary>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> structure for which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> is incremented.</param>
    <returns>Currently, a copy is not made of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>, and the returned pointer to a context has the same value as the pointer to a context that was input. If the pointer passed into this function is <b>NULL</b>, <b>NULL</b> is returned. When you have finished using the duplicate context, decrease its reference count by calling the <see cref="CertFreeCertificateContext" /> function.</returns>
  </member>
  <member name="Windows.CertDuplicateCRLContext">
    <summary>The <b>CertDuplicateCRLContext</b> function duplicates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context by incrementing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>.</summary>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> structure for which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> is being incremented.</param>
    <returns>Currently, a copy is not made of the context, and the returned context is the same as the context that was input. If the pointer passed into this function is <b>NULL</b>, <b>NULL</b> is returned.</returns>
  </member>
  <member name="Windows.CertDuplicateCTLContext">
    <summary>The <b>CertDuplicateCTLContext</b> function duplicates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context by incrementing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>.</summary>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure for which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> is being incremented.</param>
    <returns>Currently, a copy is not made of the context, and the returned pointer to <see cref="CTL_CONTEXT" /> is the same as pointer input. If the pointer passed into this function is <b>NULL</b>, <b>NULL</b> is returned.</returns>
  </member>
  <member name="Windows.CertDuplicateStore">
    <summary>The <b>CertDuplicateStore</b> function duplicates a store handle by incrementing the store's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>.</summary>
    <param name="hCertStore">A handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> for which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> is being incremented.</param>
    <returns>Currently, a copy is not made of the handle, and the returned handle is the same as the handle that was input. If <b>NULL</b> is passed in, the called function will raise an access violation exception.</returns>
  </member>
  <member name="Windows.CertEnumCertificateContextProperties">
    <summary>The <b>CertEnumCertificateContextProperties</b> function retrieves the first or next extended property associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a>. Used in a loop, this function can retrieve in sequence all of the extended properties associated with a <i>certificate context</i>.</summary>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> structure of the certificate containing the properties to be enumerated.</param>
    <param name="dwPropId">
      <para>Property number of the last property enumerated. To get the first property, <i>dwPropId</i> is zero. To retrieve subsequent properties, <i>dwPropId</i> is set to the property number returned by the last call to the function. To enumerate all the properties, function calls continue until the function returns zero.</para>
      <para>Applications can call<see cref="CertGetCertificateContextProperty" /> with the <i>dwPropId</i> returned by this function to retrieve that property's data.</para>
    </param>
    <returns>The return value is a <b>DWORD</b> value that identifies a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context's</a> property. The <b>DWORD</b> value returned by one call of the function can be supplied as the <i>dwPropId</i> in a subsequent call to the function. If there are no more properties to be enumerated or if the function fails, zero is returned.</returns>
  </member>
  <member name="Windows.CertEnumCertificatesInStore">
    <summary>The <b>CertEnumCertificatesInStore</b> function retrieves the first or next certificate in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. Used in a loop, this function can retrieve in sequence all certificates in a certificate store.</summary>
    <param name="hCertStore">A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</param>
    <param name="pPrevCertContext">
      <para>A pointer to the<see cref="CERT_CONTEXT" /> of the previous <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> found.</para>
      <para>This parameter must be <b>NULL</b> to begin the enumeration and get the first certificate in the store. Successive certificates are enumerated by setting <i>pPrevCertContext</i> to the pointer returned by a previous call to the function. This function frees the <see cref="CERT_CONTEXT" /> referenced by non-<b>NULL</b> values of this parameter.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">logical stores</a>, including collection stores, a duplicate of the <i>pCertContext</i> returned by this function cannot be used to begin a new subsequence of enumerations because the duplicated certificate loses the initial enumeration <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">state</a>. The enumeration skips any certificate previously deleted by<see cref="CertDeleteCertificateFromStore" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a pointer to the next<see cref="CERT_CONTEXT" /> in the store. If no more certificates exist in the store, the function returns <b>NULL</b>.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that in the certificate context pointed to by <i>pPrevCertContext</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No certificates were found. This happens if the store is empty or if the function reached the end of the store's list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_FILES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Applies to external stores. No certificates were found. This happens if the store is empty or if the function reached the end of the store's list.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertEnumCRLContextProperties">
    <summary>The <b>CertEnumCRLContextProperties</b> function retrieves the first or next extended property associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context. Used in a loop, this function can retrieve in sequence all extended properties associated with a CRL context.</summary>
    <param name="pCrlContext">A pointer to a<see cref="CRL_CONTEXT" /> structure.</param>
    <param name="dwPropId">
      <para>Property number of the last property enumerated. To get the first property, <i>dwPropId</i> is zero. To retrieve subsequent properties, <i>dwPropId</i> is set to the property number returned by the last call to the function. To enumerate all the properties, function calls continue until the function returns zero.</para>
      <para>Applications can call<see cref="CertGetCRLContextProperty" /> with the <i>dwPropId</i> returned by this function to retrieve that property's data.</para>
    </param>
    <returns>The return value is a <b>DWORD</b> value that identifies a CRL context's property. The <b>DWORD</b> value returned by one call of the function can be supplied as the <i>dwPropId</i> in a subsequent call to the function. If there are no more properties to be enumerated or if the function fails, zero is returned.</returns>
  </member>
  <member name="Windows.CertEnumCRLsInStore">
    <summary>The <b>CertEnumCRLsInStore</b> function retrieves the first or next <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. Used in a loop, this function can retrieve in sequence all CRL contexts in a certificate store.</summary>
    <param name="hCertStore">Handle of a certificate store.</param>
    <param name="pPrevCrlContext">A pointer to the previous<see cref="CRL_CONTEXT" /> structure found. The <i>pPrevCrlContext</i> parameter must be <b>NULL</b> to get the first CRL in the store. Successive CRLs are enumerated by setting <i>pPrevCrlContext</i> to the pointer returned by a previous call to the function. This function frees the <b>CRL_CONTEXT</b> referenced by non-<b>NULL</b> values of this parameter. The enumeration skips any CRLs previously deleted by<see cref="CertDeleteCRLFromStore" />.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the next<see cref="CRL_CONTEXT" /> in the store.</para>
      <para>
        <b>NULL</b> is returned if the function fails. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that in the certificate context pointed to by <i>pPrevCrlContext</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No CRL was found. This happens if the store is empty or the end of the store's list is reached.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertEnumCTLContextProperties">
    <summary>The <b>CertEnumCTLContextProperties</b> function retrieves the first or next extended property associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context. Used in a loop, this function can retrieve in sequence all extended properties associated with a CTL context.</summary>
    <param name="pCtlContext">A pointer to a<see cref="CTL_CONTEXT" /> structure.</param>
    <param name="dwPropId">
      <para>Property number of the last property enumerated. To get the first property, <i>dwPropId</i> is zero. To retrieve subsequent properties, <i>dwPropId</i> is set to the property number returned by the last call to the function. To enumerate all the properties, function calls continue until the function returns zero.</para>
      <para>Applications can call<see cref="CertGetCTLContextProperty" /> with the <i>dwPropId</i> returned by this function to retrieved that property's data.</para>
    </param>
    <returns>The return value is a <b>DWORD</b> value that identifies a CTL context's property. The <b>DWORD</b> value returned by one call of the function can be supplied as the <i>dwPropId</i> in a subsequent call to the function. If there are no more properties to be enumerated or if the function fails, zero is returned.</returns>
  </member>
  <member name="Windows.CertEnumCTLsInStore">
    <summary>The <b>CertEnumCTLsInStore</b> function retrieves the first or next <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. Used in a loop, this function can retrieve in sequence all CTL contexts in a certificate store.</summary>
    <param name="hCertStore">Handle of a certificate store.</param>
    <param name="pPrevCtlContext">A pointer to the previous<see cref="CTL_CONTEXT" /> structure found. It must be <b>NULL</b> to get the first CTL in the store. Successive CTLs are enumerated by setting <i>pPrevCtlContext</i> to the pointer returned by a previous call. This function frees the <b>CTL_CONTEXT</b> referenced by non-<b>NULL</b> values of this parameter. The enumeration skips any CTLs previously deleted by<see cref="CertDeleteCTLFromStore" />.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a read-only<see cref="CTL_CONTEXT" />.</para>
      <para>If the function fails and a CTL is not found, the return value is <b>NULL</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either no CTLs exist in the store, or the function reached the end of the store's list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that in the CTL context pointed to by the <i>pPrevCtlContext</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertEnumPhysicalStore">
    <summary>The <b>CertEnumPhysicalStore</b> function retrieves the physical stores on a computer. The function calls the provided callback function for each physical store found.</summary>
    <param name="pvSystemStore">If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in <i>dwFlags</i>, <i>pvSystemStore</i> points to a<see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure that indicates both the name and the location of the system store to be enumerated. Otherwise, <i>pvSystemStore</i> is a pointer to a Unicode string that names the system store whose physical stores are to be enumerated. For information about prefixing a ServiceName or ComputerName to the system store name, see<see cref="CertRegisterSystemStore" />.</param>
    <param name="dwFlags">
      <para>Specifies the location of the system store. The following flag values are defined:</para>
      <list type="bullet">
        <item>
          <description>CERT_SYSTEM_STORE_CURRENT_USER</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_CURRENT_SERVICE</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_LOCAL_MACHINE</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_SERVICES</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_USERS</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</description>
        </item>
      </list>In addition, CERT_SYSTEM_STORE_RELOCATE_FLAG or CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG can be combined using a bitwise-<b>OR</b> operation with any of the high-word location flags.</param>
    <param name="pvArg">A pointer to a <b>void</b> that allows the application to declare, define, and initialize a structure to hold any information to be passed to the callback enumeration function.</param>
    <param name="pfnEnum">A pointer to the callback function used to show the details for each physical store. This callback function determines the content and format for the presentation of information on each physical store. The application must provide the <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_cert_enum_physical_store">CertEnumPhysicalStoreCallback</a> callback function.</param>
    <returns>
      <para>If the function succeeds and another physical store was found, the return value is <b>TRUE</b>.</para>
      <para>If the system store location only supports system stores and does not support physical stores, the function returns <b>FALSE</b> and<see cref="GetLastError" /> returns the ERROR_NOT_SUPPORTED code.</para>
      <para>If the function fails and another physical store was not found, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertEnumSubjectInSortedCTL">
    <summary>The <b>CertEnumSubjectInSortedCTL</b> function retrieves the first or next TrustedSubject in a sorted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL). A sorted CTL is a CTL created with the CERT_CREATE_CONTEXT_SORTED_FLAG set. Used in a loop, this function can retrieve in sequence all TrustedSubjects in a sorted CTL.</summary>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure to be searched.</param>
    <param name="ppvNextSubject">A pointer to the address of the last TrustedSubject found. To start the enumeration, <i>ppvNextSubject</i> must point to a pointer set to <b>NULL</b>. Upon return, the pointer addressed by <i>ppvNextSubject</i> is updated to point to the next TrustedSubject in the encoded sequence.</param>
    <param name="pSubjectIdentifier">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DER_BLOB</a> structure, uniquely identifying a TrustedSubject. The information in this structure can be a hash or any unique byte sequence.</param>
    <param name="pEncodedAttributes">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DER_BLOB</a> structure containing a byte count and a pointer to the TrustedSubject's encoded attributes.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>, with <i>ppvNextSubject</i> updated to point to the next TrustedSubject in the encoded sequence.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. The return value is <b>FALSE</b> if there are no more subjects or there is an argument that is not valid.</para>
    </returns>
  </member>
  <member name="Windows.CertEnumSystemStore">
    <summary>The <b>CertEnumSystemStore</b> function retrieves the system stores available. The function calls the provided callback function for each system store found.</summary>
    <param name="dwFlags">
      <para>Specifies the location of the system store. This parameter can be one of the following flags:</para>
      <list type="bullet">
        <item>
          <description>CERT_SYSTEM_STORE_CURRENT_USER</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_CURRENT_SERVICE</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_LOCAL_MACHINE</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_SERVICES</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_USERS</description>
        </item>
        <item>
          <description>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</description>
        </item>
      </list>In addition, the CERT_SYSTEM_STORE_RELOCATE_FLAG can be combined, by using a bitwise-<b>OR</b> operation, with any of the high-word location flags.</param>
    <param name="pvSystemStoreLocationPara">
      <para>If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the <i>dwFlags</i> parameter, <i>pvSystemStoreLocationPara</i> points to a<see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure that indicates both the name and the location of the system store. Otherwise, <i>pvSystemStoreLocationPara</i> is a pointer to a Unicode string that names the system store.</para>
      <para>For CERT_SYSTEM_STORE_LOCAL_MACHINE or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY, <i>pvSystemStoreLocationPara</i> can optionally be set to a Unicode computer name for enumerating local computer stores on a remote computer, for example "\\<i>computer_name</i>" or "<i>computer_name</i>". The leading backslashes (\) are optional in the <i>computer_name</i>.</para>
      <para>For CERT_SYSTEM_STORE_SERVICES or CERT_SYSTEM_STORE_USERS, if <i>pvSystemStoreLocationPara</i> is <b>NULL</b>, the function enumerates both the service/user names and the stores for each service/user name. Otherwise, <i>pvSystemStoreLocationPara</i> is a Unicode string that contains a remote computer name and, if available, a service/user name, for example, "<i>service_name</i>", "\\<i>computer_name</i>", or "<i>computer_name</i>".</para>
      <para>If only the <i>computer_name</i> is specified, it must have either the leading backslashes (\) or a trailing backslash (\). Otherwise, it is interpreted as the <i>service_name</i> or <i>user_name</i>.</para>
    </param>
    <param name="pvArg">A pointer to a <b>void</b> that allows the application to declare, define, and initialize a structure to hold any information to be passed to the callback enumeration function.</param>
    <param name="pfnEnum">A pointer to the callback function used to show the details for each system store. This callback function determines the content and format for the presentation of information on each system store. The application must provide the <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_cert_enum_system_store">CertEnumSystemStoreCallback</a> callback function.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CertEnumSystemStoreLocation">
    <summary>The <b>CertEnumSystemStoreLocation</b> function retrieves all of the system store locations. The function calls the provided callback function for each system store location found.</summary>
    <param name="dwFlags">Reserved for future use; must be zero.</param>
    <param name="pvArg">A pointer to a <b>void</b> that allows the application to declare, define, and initialize a structure to hold any information to be passed to the callback enumeration function.</param>
    <param name="pfnEnum">A pointer to the callback function used to show the details for each store location. This callback function determines the content and format for the presentation of information on each store location. For the signature and parameters of the callback function, see <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_cert_enum_system_store_location">CertEnumSystemStoreLocationCallback</a>.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CertFindAttribute">
    <summary>The <b>CertFindAttribute</b> function finds the first attribute in the<see cref="CRYPT_ATTRIBUTE" /> array, as identified by its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID). This function can be used in the processing of a decoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate request</a>. A<see cref="CERT_REQUEST_INFO" /> structure is derived from a decoded certificate request. The <b>rgAttribute</b> array is retrieved from that structure and passed to this function in the <i>rgAttr</i> parameter. This function determines whether a particular attribute is in the array, and if so, returns a pointer to it.</summary>
    <param name="pszObjId">A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) to use in the search.</param>
    <param name="cAttr">Number of attributes in the <i>rgAttr</i> array.</param>
    <param name="rgAttr">Array of<see cref="CRYPT_ATTRIBUTE" /> structures.</param>
    <returns>Returns a pointer to the attribute, if one is found. Otherwise, <b>NULL</b> is returned.</returns>
  </member>
  <member name="Windows.CertFindCertificateInCRL">
    <summary>The <b>CertFindCertificateInCRL</b> function searches the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) for the specified certificate.</summary>
    <param name="pCert">A pointer to a<see cref="CERT_CONTEXT" /> of the certificate to be searched for in the CRL.</param>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> to be searched.</param>
    <param name="dwFlags">Reserved for future use. Must be set to zero.</param>
    <param name="pvReserved">Reserved for future use. Must be set to zero.</param>
    <param name="ppCrlEntry">If the certificate is found in the CRL, this pointer is updated with a pointer to the entry. Otherwise, it is set to <b>NULL</b>. The returned entry is not allocated and must not be freed.</param>
    <returns>
      <b>TRUE</b> if the list was searched; otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.CertFindCertificateInStore">
    <summary>The <b>CertFindCertificateInStore</b> function finds the first or next certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> that matches a search criteria established by the <i>dwFindType</i> and its associated <i>pvFindPara</i>. This function can be used in a loop to find all of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificates</a> in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> that match the specified find criteria.</summary>
    <param name="hCertStore">A handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> to be searched.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the type of encoding used. Both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> must be specified by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="dwFindFlags">Used with some <i>dwFindType</i> values to modify the search criteria. For most <i>dwFindType</i> values, <i>dwFindFlags</i> is not used and should be set to zero. For detailed information, see Remarks.</param>
    <param name="dwFindType">
      <para>Specifies the type of search being made. The search type determines the data type, contents, and the use of <i>pvFindPara</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_ANY</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <b>NULL</b>, not used.<para>No search criteria used. Returns the next certificate in the store.</para><div><b>Note</b>  The order of the certificate context may not be preserved within the store. To access a specific certificate you must iterate across the certificates in the store.</div></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_CERT_ID</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_ID" /> structure.<para>Find the certificate identified by the specified <see cref="CERT_ID" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_CTL_USAGE</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CTL_USAGE" /> structure.<para>Searches for a certificate that has a szOID_ENHANCED_KEY_USAGE extension or a CERT_CTL_PROP_ID that matches the <b>pszUsageIdentifier</b> member of the <see cref="CTL_USAGE" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_ENHKEY_USAGE</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_ENHKEY_USAGE" /> structure.<para>Searches for a certificate in the store that has either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">enhanced key usage</a> extension or an enhanced key usage property and a usage identifier that matches the <b>cUsageIdentifier</b> member in the <see cref="CERT_ENHKEY_USAGE" /> structure.</para><para>A certificate has an enhanced key usage extension if it has a <see cref="CERT_EXTENSION" /> structure with the <b>pszObjId</b> member set to szOID_ENHANCED_KEY_USAGE.</para><para>A certificate has an enhanced key usage property if its CERT_ENHKEY_USAGE_PROP_ID identifier is set.</para><para>If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in <i>dwFindFlags</i>, certificates without the key usage extension or property are also matches. Setting this flag takes precedence over passing <b>NULL</b> in <i>pvFindPara</i>.</para><para>If CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the key usage extension.</para><para>For information about flag modifications to search criteria, see Remarks.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_EXISTING</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_CONTEXT" /> structure.<para>Searches for a certificate that is an exact match of the specified certificate context.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_HASH</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.<para>Searches for a certificate with a SHA1 hash that matches the hash in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_HAS_PRIVATE_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <b>NULL</b>, not used.<para>Searches for a certificate that has a private key. The key can be ephemeral or saved on disk. The key can be a legacy Cryptography API (CAPI) key or a CNG key.</para><div><b>Note</b>  The order of the certificate context may not be preserved within the store. Therefore, to access a specific certificate, you must iterate across all certificates.</div><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_ISSUER_ATTR</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_RDN" /> structure.<para>Searches for a certificate with specified issuer attributes that match attributes in the <see cref="CERT_RDN" /> structure. If these values are set, the function compares attributes of the issuer in a certificate with elements of the <see cref="CERT_RDN_ATTR" /> array in this <b>CERT_RDN</b> structure. Comparisons iterate through the <b>CERT_RDN_ATTR</b> attributes looking for a match with the certificate's issuer attributes.</para><para>If the <b>pszObjId</b> member of <see cref="CERT_RDN_ATTR" /> is <b>NULL</b>, the attribute object identifier is ignored.</para><para>If the <b>dwValueType</b> member of <see cref="CERT_RDN_ATTR" /> is CERT_RDN_ANY_TYPE, the value type is ignored.</para><para>If the <b>pbData</b> member of <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> is <b>NULL</b>, any value is a match.</para><para>Currently only an exact, case-sensitive match is supported. For information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates whose encoding type matches <i>dwCertEncodingType</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_ISSUER_NAME</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure.<para>Search for a certificate with an exact match of the entire issuer name with the name in <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> The search is restricted to certificates that match the <i>dwCertEncodingType</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_ISSUER_OF</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_CONTEXT" /> structure.<para>Searches for a certificate with a subject that matches the issuer in <see cref="CERT_CONTEXT" />.</para><para>Instead of using <b>CertFindCertificateInStore</b> with this value, use the <see cref="CertGetCertificateChain" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_ISSUER_STR</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: Null-terminated Unicode string.<para>Searches for a certificate that contains the specified issuer name string. The certificate's issuer member is converted to a name string of the appropriate type using the appropriate form of <see cref="CertNameToStr" /> formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to certificates whose encoding type matches <i>dwCertEncodingType</i>.</para><para>If the substring match fails and the subject contains an email RDN with Punycode encoded string, <b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b> is used to convert the subject to a Unicode string and the substring match is performed again.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_KEY_IDENTIFIER</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.<para>Searches for a certificate with a CERT_KEY_IDENTIFIER_PROP_ID property that matches the key identifier in <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_KEY_SPEC</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <b>DWORD</b> variable that contains a key specification.<para>Searches for a certificate that has a CERT_KEY_SPEC_PROP_ID property that matches the key specification in <i>pvFindPara</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_MD5_HASH</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.<para>Searches for a certificate with an MD5 hash that matches the hash in <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_PROPERTY</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <b>DWORD</b> variable that contains a property identifier.<para>Searches for a certificate with a property that matches the property identifier specified by the <b>DWORD</b> value in <i>pvFindPara</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_PUBLIC_KEY</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_PUBLIC_KEY_INFO" /> structure.<para>Searches for a certificate with a public key that matches the public key in the <see cref="CERT_PUBLIC_KEY_INFO" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_SHA1_HASH</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.<para>Searches for a certificate with a SHA1 hash that matches the hash in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_SIGNATURE_HASH</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.<para>Searches for a certificate with a signature hash that matches the signature hash in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_SUBJECT_ATTR</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_RDN" /> structure.<para>Searches for a certificate with specified subject attributes that match attributes in the <see cref="CERT_RDN" /> structure. If RDN values are set, the function compares attributes of the subject in a certificate with elements of the <see cref="CERT_RDN_ATTR" /> array in this <b>CERT_RDN</b> structure. Comparisons iterate through the <b>CERT_RDN_ATTR</b> attributes looking for a match with the certificate's subject's attributes.</para><para>If the <b>pszObjId</b> member of <see cref="CERT_RDN_ATTR" /> is <b>NULL</b>, the attribute object identifier is ignored.</para><para>If the <b>dwValueType</b> member of <see cref="CERT_RDN_ATTR" /> is CERT_RDN_ANY_TYPE, the value type is ignored.</para><para>If the <b>pbData</b> member of <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> is <b>NULL</b>, any value is a match.</para><para>Currently only an exact, case-sensitive match is supported.</para><para>For information about Unicode options, see Remarks. When these values are set, the search is restricted to certificates whose encoding type matches <i>dwCertEncodingType</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_SUBJECT_CERT</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CERT_INFO" /> structure.<para>Searches for a certificate with both an issuer and a serial number that match the issuer and serial number in the <see cref="CERT_INFO" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_SUBJECT_NAME</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure.<para>Searches for a certificate with an exact match of the entire subject name with the name in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure. The search is restricted to certificates that match the value of <i>dwCertEncodingType</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_SUBJECT_STR</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: Null-terminated Unicode string.<para>Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to a name string of the appropriate type using the appropriate form of <see cref="CertNameToStr" /> formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to certificates whose encoding type matches <i>dwCertEncodingType</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_CROSS_CERT_DIST_POINTS</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: Not used.<para>Find a certificate that has either a cross certificate distribution point extension or property.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_PUBKEY_MD5_HASH</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure.<para>Find a certificate whose MD5-hashed public key matches the specified hash.</para></description>
        </listheader>
      </list> <div><b>Note</b>  There are alternate forms of the value of <i>dwFindType</i> that pass a string in <i>pvFindPara</i>. One form uses a Unicode string, and the other an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> string. Values that end in "_W" or without a suffix use Unicode. Values that end with "_A" use ASCII strings.</div></param>
    <param name="pvFindPara">Points to a data item or structure used with <i>dwFindType</i>.</param>
    <param name="pPrevCertContext">A pointer to the last<see cref="CERT_CONTEXT" /> structure returned by this function. This parameter must be <b>NULL</b> on the first call of the function. To find successive certificates meeting the search criteria, set <i>pPrevCertContext</i> to the pointer returned by the previous call to the function. This function frees the <b>CERT_CONTEXT</b> referenced by non-<b>NULL</b> values of this parameter.</param>
    <returns>
      <para>If the function succeeds, the function returns a pointer to a read-only <see cref="CERT_CONTEXT" /> structure.</para>
      <para>If the function fails and a certificate that matches the search criteria is not found, the return value is <b>NULL</b>.</para>
      <para>A non-<b>NULL</b><see cref="CERT_CONTEXT" /> that <b>CertFindCertificateInStore</b> returns must be freed by<see cref="CertFreeCertificateContext" /> or by being passed as the <i>pPrevCertContext</i> parameter on a subsequent call to <b>CertFindCertificateInStore</b>.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No certificate was found matching the search criteria. This can happen if the store is empty or the end of the store's list is reached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that in the certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> pointed to by the <i>pPrevCertContext</i> parameter, or a value that is not valid was specified in the <i>dwFindType</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertFindChainInStore">
    <summary>The <b>CertFindChainInStore</b> function finds the first or next certificate in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">store</a> that meets the specified criteria. It then builds and verifies a certificate chain context for that certificate. The certificate that is found and for which the chain is built is selected according to criteria established by the <i>dwFindFlags</i>, <i>dwFindType</i>, and <i>pvFindPara</i> parameters. This function can be used in a loop to find all of the certificates in a certificate store that match the specified find criteria and to build a certificate chain context for each certificate found.</summary>
    <param name="hCertStore">The handle of the store to be searched for a certificate upon which a chain is built. This handle is passed as an additional store to the <see cref="CertGetCertificateChain" /> function as the chain is built.</param>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the store. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="dwFindFlags">
      <para>Contains additional options for the search. The possible values for this parameter depend on the value of the <i>dwFindType</i> parameter.</para>
      <para>This parameter can contain zero or a combination of one or more of the following values when <i>dwFindType</i> contains <b>CERT_CHAIN_FIND_BY_ISSUER</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Compares the public key in the certificate with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider's</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>. This comparison is the last check made on the chain when it is built.<para>Because the <b>hCryptProv</b> member of an issuer contains a private key, it might need to be checked several times during this process; to facilitate this checking, the <i>dwAcquirePrivateKeyFlags</i> member can be set in the <see cref="CERT_CHAIN_FIND_BY_ISSUER_PARA" /> structure to enable caching of that <b>hCryptProv</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, only the first simple chain is checked for issuer name matches. With this flag set, the default is overridden and subsequent simple chains are also checked for issuer name matches.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Improves the performance of this function by causing it to search only the cached system stores (Root, My, Ca, Trust) to find issuer certificates. If this flag is not set, the function searches the cached system stores and the store represented by the <i>hCertStore</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Only the URL cache is searched. The Internet is not searched.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Only opens the Local Machine certificate stores. The certificate stores of the current user are not opened.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No check is made to determine whether the certificate has an associated private key.</description>
        </listheader>
      </list>
    </param>
    <param name="dwFindType">
      <para>Determines what criteria to use to find a certificate in the store.</para>
      <para>This parameter can be the following currently defined value.</para>
      <h4>CERT_CHAIN_FIND_BY_ISSUER</h4>
      <para>Finds the certificate based on the name of the issuer. The <i>pvFindPara</i> parameter is a pointer to a<see cref="CERT_CHAIN_FIND_BY_ISSUER_PARA" /> structure that contains members that modify the search.</para>
      <para>The certificate chain is built for a certificate with an available <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>. By default, only the issuers in the first simple chain are compared in an issuer name match. If this flag is set, all of the chains are checked for an issuer certificate that matches one of a set of issuer names.</para>
      <para>This function will compare the name <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a> passed in the <i>pvFindPara</i> structure to any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certification authority</a> (CA) in the chain, not just the certification authority in the root certificate.</para>
      <para>This function does not perform any revocation checks.</para>
      <para>If <i>pPrevChainContext</i> is not <b>NULL</b>, this function will return a chain for a different certificate every time the function is called. If there is only one suitable certificate, but there are two matching issuing certificate authorities, one of which is revoked, it is possible for this function to return the revoked chain. If the application then checks for revocation itself through calls to the <see cref="CertVerifyRevocation" /> function and finds the chain unsuitable, an additional call to the <b>CertFindChainInStore</b> function will not return a chain that includes the same certificate from the valid certification authority. It will instead return a completely different chain with a different certificate or <b>NULL</b>, if no such chain can be found.</para>
    </param>
    <param name="pvFindPara">A pointer that contains additional search criteria. The type and format of the data this parameter points to depends on the value of the <i>dwFindType</i> parameter.</param>
    <param name="pPrevChainContext">A pointer to a<see cref="CERT_CHAIN_CONTEXT" /> structure returned from a previous call to this function. The search is begun from this certificate. For the first call to this function, this parameter must be <b>NULL</b>. In subsequent calls, it is the pointer returned by the previous call to the function. If this parameter is not <b>NULL</b>, this function will free this structure.</param>
    <returns>If the first or next chain context is not built, <b>NULL</b> is returned. Otherwise, a pointer to a read-only <see cref="CERT_CHAIN_CONTEXT" /> structure is returned. The <b>CERT_CHAIN_CONTEXT</b> structure is freed when passed as the <i>pPrevChainContext</i> parameter on a subsequent call to this function. Otherwise, the <b>CERT_CHAIN_CONTEXT</b> structure must be freed explicitly by calling the <see cref="CertFreeCertificateChain" /> function.</returns>
  </member>
  <member name="Windows.CertFindCRLInStore">
    <summary>The <b>CertFindCRLInStore</b> function finds the first or next <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> that matches a search criterion established by the <i>dwFindType</i> parameter and the associated <i>pvFindPara</i> parameter. This function can be used in a loop to find all of the CRL contexts in a certificate store that match the specified find criteria.</summary>
    <param name="hCertStore">A handle of the certificate store to be searched.</param>
    <param name="dwCertEncodingType">This parameter is not currently used. It must be set to zero.</param>
    <param name="dwFindFlags">
      <para>If <i>dwFindType</i> is CRL_FIND_ISSUED_BY, by default, only issuer name matching is done. The following flags can be used to do additional filtering.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ISSUED_BY_AKI_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Checks for a CRL that has an Authority Key Identifier (AKI) extension. If the CRL has an AKI, only a CRL whose AKI matches the issuer is returned.<div><b>Note</b>  The AKI extension has the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) value szOID_AUTHORITY_KEY_IDENTIFIER2 and its corresponding data structure.</div></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ISSUED_BY_SIGNATURE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the public key in the issuer's certificate to verify the signature on the CRL. Only returns a CRL that has a valid signature.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ISSUED_BY_DELTA_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Finds and returns a delta CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ISSUED_BY_BASE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Finds and returns a base CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The signature is checked for strength after successful verification. This flag applies only when the <i>dwFindType</i> parameter is set to <b>CRL_FIND_ISSUED_FOR</b>. You must also set <b>CRL_FIND_ISSUED_BY_SIGNATURE_FLAG</b>. If successful, the following strong signature properties will be set on the CRL context:<list type="bullet"><item><description><b>CERT_SIGN_HASH_CNG_ALG_PROP_ID</b></description></item><item><description><b>CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID</b></description></item></list><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</description>
        </listheader>
      </list>
    </param>
    <param name="dwFindType">
      <para>Specifies the type of search being made. The value of <i>dwFindType</i> determines the data type, contents, and use of the <i>pvFindPara</i> parameter. Currently defined search types and their <i>pvFindPara</i> requirements are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>The <i>pvFindPara</i> parameter is not used. It must be set to <b>NULL</b>.</term>
              </listheader>
            </list>
          </description>
          <description>No search criteria. The next CRL in the store is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ISSUED_BY</b>
                </term>
              </listheader>
              <listheader>
                <term>A pointer to a CERT_CONTEXT.</term>
              </listheader>
            </list>
          </description>
          <description>Searches for the next CRL in the store matching the issuer in the <see cref="CERT_CONTEXT" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_EXISTING</b>
                </term>
              </listheader>
              <listheader>
                <term>A pointer to a CRL_CONTEXT.</term>
              </listheader>
            </list>
          </description>
          <description>Searches for the next CRL that matches the <see cref="CRL_CONTEXT" /> in the following ways:<list type="bullet"><item><description> Both are base or delta CRLs.</description></item><item><description>The issuer-name BLOBs for both are identical.</description></item><item><description>If they exist, the Authority/KeyIdentifier and IssuingDistributionPoint encoded extension BLOBs match.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRL_FIND_ISSUED_FOR</b>
                </term>
              </listheader>
              <listheader>
                <term>A pointer to a CRL_FIND_ISSUED_FOR_PARA.</term>
              </listheader>
            </list>
          </description>
          <description>Searches for the next CRL in the store that matches the issuer of the subject certificate in the CRL_FIND_ISSUED_FOR_PARA structure.<para>If no CRL is found, searches for the next CRL in the store that matches the issuer in the CRL_FIND_ISSUED_FOR_PARA structure.</para><div><b>Note</b>  When using cross certificates, the subject name in the issuer's certificate might not match the issuer name in the subject certificate and its corresponding CRL.</div></description>
        </listheader>
      </list>
    </param>
    <param name="pvFindPara">This parameter is determined by the value of <i>dwFindType</i>. For details, see the table earlier in this topic.</param>
    <param name="pPrevCrlContext">A pointer to the last<see cref="CRL_CONTEXT" /> returned by this function. Must be <b>NULL</b> to get the first CRL in the store meeting the search criteria. Successive CRLs meeting the search criteria can be found by setting <i>pPrevCrlContext</i> to the <b>PCCRL_CONTEXT</b> pointer returned by a previous call to the function. The search process skips any CRLs that do not match the search criteria or that have been previously deleted from the store by<see cref="CertDeleteCRLFromStore" />. This function frees the <b>CRL_CONTEXT</b> referenced by values of this parameter that are not <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the function returns a pointer to a read-only CRL context. When you have finished using the returned CRL context, free it by calling the <see cref="CertFreeCRLContext" /> function or implicitly free it by passing it as the <i>pPrevCrlContext</i> parameter on a subsequent call to the <b>CertFindCRLInStore</b> function.</para>
      <para>If the function fails and a CRL that matches the search criteria is not found, the return value is <b>NULL</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that in the CRL context pointed to by the <i>pPrevCrlContext</i> parameter, or a search type that is not valid was specified in the <i>dwFindType</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No CRLs are in the store, no CRL was found that matched the search criteria, or the end of the store's list was reached.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertFindCTLInStore">
    <summary>The <b>CertFindCTLInStore</b> function finds the first or next <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> that matches search criteria established by the <i>dwFindType</i> and its associated <i>pvFindPara</i>. This function can be used in a loop to find all of the CTL contexts in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> that match the specified find criteria.</summary>
    <param name="hCertStore">Handle of the certificate store to be searched.</param>
    <param name="dwMsgAndCertEncodingType">
      <para>Specifies the type of encoding used on the CTL. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
      <para>This parameter is used only when the <i>dwFindType</i> parameter is set to CTL_FIND_USAGE.</para>
    </param>
    <param name="dwFindFlags">Can be set when <i>dwFindType</i> is set to CTL_FIND_USAGE. For details, see the comments under CTL_FIND_USAGE, following.</param>
    <param name="dwFindType">
      <para>Specifies the type of search being made. The search type determines the data type, contents, and the use of <i>pvFindPara</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_FIND_ANY</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <b>NULL</b>.<para>Any CTL is a match.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_FIND_SHA1_HASH</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a>.<para>A CTL with a hash matching the hash in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure is found.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_FIND_MD5_HASH</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a>.<para>A CTL with a hash matching the hash in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure is found.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_FIND_USAGE</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CTL_FIND_USAGE_PARA" />.<para>Any CTL is found that has a usage identifier, list identifier, or signer matching the usage identifier, list identifier, or signer in the <see cref="CTL_FIND_USAGE_PARA" /> structure.</para><para>If the <b>cUsageIdentifier</b> member is of <b>SubjectUsage</b> size, any CTL is a match.</para><para>If the <b>cbData</b> member of <b>ListIdentifier</b> member is zero, any list identifier is a match. If the <b>cbData</b> member of <b>ListIdentifier</b> is CTL_FIND_NO_LIST_ID_CBDATA, only a CTL without a list identifier is a match.</para><para>If the <b>pSigner</b> member in the <see cref="CTL_FIND_USAGE_PARA" /> structure is <b>NULL</b>, any CTL signer is a match, and only the <b>Issuer</b> and <b>SerialNumber</b> members in the <b>pSigner</b><see cref="CERT_INFO" /> structure are used. If <b>pSigner</b> is CTL_FIND_NO_SIGNER_PTR, only a CTL without a signer is a match.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_FIND_SAME_USAGE_FLAG</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CTL_FIND_USAGE_PARA" />.<para>Only CTLs with exactly the same usage identifiers are matched. CTLs having additional usage identifiers are not matched. For example, if only "1.2.3" is specified in the <see cref="CTL_FIND_USAGE_PARA" /> structure, then for a match, the CTL must only contain "1.2.3" and no additional usage identifiers.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_FIND_EXISTING</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="PCCTL_CONTEXT" />.<para>Searches for the next CRL that is an exact match of the <see cref="CTL_CONTEXT" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_FIND_SUBJECT</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>Data type of <i>pvFindPara</i>: <see cref="CTL_FIND_SUBJECT_PARA" />.<para>A CTL having the specified subject is found. <see cref="CertFindSubjectInCTL" /> can be called to get a pointer to the subject's entry in the CTL. The <b>pUsagePara</b> member in <see cref="CTL_FIND_SUBJECT_PARA" /> can optionally be set to enable the matching described preceding under CTL_FIND_USAGE.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvFindPara">A pointer to the search value associated with the <i>dwFindType</i> parameter.</param>
    <param name="pPrevCtlContext">A pointer to the last<see cref="CTL_CONTEXT" /> returned by this function. It must be <b>NULL</b> to get the first CTL in the store. Successive CTLs are retrieved by setting <i>pPrevCtlContext</i> to the pointer to the <b>CTL_CONTEXT</b> returned by a previous function call. Any certificates that do not meet the search criteria or that have been previously deleted by<see cref="CertDeleteCTLFromStore" /> are skipped. This function frees the <b>CTL_CONTEXT</b> referenced by non-<b>NULL</b> values of this parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a read-only <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CTL</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either no CTLs were found in the store, no CTL was found matching the search criteria, or the function reached the end of the store's list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that in the CTL context pointed to by the <i>pPrevCtlContext</i> parameter, or a value that is not valid was specified in the <i>dwFindType</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertFindExtension">
    <summary>The <b>CertFindExtension</b> function finds the first extension in the<see cref="CERT_EXTENSION" /> array, as identified by its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID). This function can be used in the processing of a decoded certificate. A<see cref="CERT_INFO" /> structure is derived from a decoded certificate. The <b>CERT_INFO</b> structure's <b>rgExtension</b> member is passed to <b>CertFindExtension</b> in the <i>rgExtensions</i> parameter. This function determines whether a particular extension is in the array, and if so, returns a pointer to it</summary>
    <param name="pszObjId">A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) to use in the search.</param>
    <param name="cExtensions">Number of extensions in the <i>rgExtensions</i> array.</param>
    <param name="rgExtensions">Array of<see cref="CERT_EXTENSION" /> structures.</param>
    <returns>Returns a pointer to the extension, if one is found. Otherwise, <b>NULL</b> is returned.</returns>
  </member>
  <member name="Windows.CertFindRDNAttr">
    <summary>The <b>CertFindRDNAttr</b> function finds the first <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">RDN</a> attribute identified by its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) in a list of the <i>Relative Distinguished Names</i> (RDN).</summary>
    <param name="pszObjId">A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) to use In the search.</param>
    <param name="pName">A pointer to a<see cref="CERT_NAME_INFO" /> structure containing the list of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">Relative Distinguished Names</a> to be searched.</param>
    <returns>Returns a pointer to the attribute, if one is found. Otherwise, <b>NULL</b> is returned.</returns>
  </member>
  <member name="Windows.CertFindSubjectInCTL">
    <summary>The <b>CertFindSubjectInCTL</b> function attempts to find the specified subject in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL). A subject can be identified either by the certificate's whole context or by any unique identifier of the certificate's subject such as the SHA1 <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the certificate's issuer and serial number.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="dwSubjectType">
      <para>Specifies the type of subject to be searched for in the CTL. May be <b>NULL</b> for a default search.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_CERT_SUBJECT_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSubject</i> data type: Pointer to a <see cref="CERT_CONTEXT" /> structure.<para>The CTL's <b>SubjectAlgorithm</b> is examined to determine the representation of the subject's identity. Initially, only SHA1 and MD5 hashes are supported as values for <b>SubjectAlgorithm</b>. The appropriate hash property is obtained from the <see cref="CERT_CONTEXT" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CTL_ANY_SUBJECT_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSubject</i> data type: Pointer to a <see cref="CTL_ANY_SUBJECT_INFO" /> structure.<para>The <b>SubjectAlgorithm</b> member of this structure must match the algorithm type of the CTL, and the <b>SubjectIdentifier</b> member must match one of the CTL entries.</para></description>
        </listheader>
      </list> <para>The certificate's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> or the <b>SubjectIdentifier</b> member of the <see cref="CTL_ANY_SUBJECT_INFO" /> structure is used as the key in searching the subject entries. A binary memory comparison is done between the key and the entry's SubjectIdentifier.</para><para>If <i>dwSubjectType</i> is set to either preceding value, <i>dwEncodingType</i> is not used.</para></param>
    <param name="pvSubject">Pointer used in conjunction with the <i>dwSubjectType</i> parameter.</param>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure being searched.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is the entry, if it is found.</para>
      <para>If the function fails, the return value is <b>NULL</b>. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The subject was not found in the CTL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwSubjectType</i> parameter was not either CTL_CERT_SUBJECT_TYPE or CTL_ANY_SUBJECT_TYPE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CTL's <b>SubjectAlgorithm</b> member did not map to either SHA1 or MD5.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertFindSubjectInSortedCTL">
    <summary>The <b>CertFindSubjectInSortedCTL</b> function attempts to find the specified subject in a sorted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL). A subject can be identified either by the certificate's whole context or by any unique identifier of the certificate's subject, such as the SHA1 <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the certificate's issuer and serial number.</summary>
    <param name="pSubjectIdentifier">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure uniquely identifying the subject. The information in this structure can be a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> or any unique byte sequence.</param>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure to be searched.</param>
    <param name="dwFlags">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pEncodedAttributes">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DER_BLOB</a> structure containing a byte count and a pointer to the subject's encoded attributes.</param>
    <returns>
      <para>If the function succeeds and the subject identifier exists in the CTL, the return value is <b>TRUE</b>.</para>
      <para>If the function fails and does not locate a matching subject identifier, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CertFreeCertificateChain">
    <summary>
      <para>The <b>CertFreeCertificateChain</b> function frees a certificate chain by reducing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>. If the reference count becomes zero, memory allocated for the chain is released.</para>
      <para>To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.</para>
    </summary>
    <param name="pChainContext">A pointer to a<see cref="CERT_CHAIN_CONTEXT" /> certificate chain context to be freed. If the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> on the context reaches zero, the storage allocated for the context is freed.</param>
  </member>
  <member name="Windows.CertFreeCertificateChainEngine">
    <summary>The <b>CertFreeCertificateChainEngine</b> function frees a certificate trust engine.</summary>
    <param name="hChainEngine">Handle of the chain engine to be freed.</param>
  </member>
  <member name="Windows.CertFreeCertificateChainList">
    <summary>The <b>CertFreeCertificateChainList</b> function frees the array of pointers to chain contexts.</summary>
    <param name="prgpSelection">A pointer to a <see cref="PCCERT_CHAIN_CONTEXT" /> structure returned by the <see cref="CertSelectCertificateChains" /> function.</param>
  </member>
  <member name="Windows.CertFreeCertificateContext">
    <summary>
      <para>The <b>CertFreeCertificateContext</b> function frees a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> by decrementing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>. When the reference count goes to zero, <b>CertFreeCertificateContext</b> frees the memory used by a certificate context.</para>
      <para>To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.</para>
    </summary>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> to be freed.</param>
    <returns>The function always returns nonzero.</returns>
  </member>
  <member name="Windows.CertFreeCRLContext">
    <summary>
      <para>The <b>CertFreeCRLContext</b> function frees a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context by decrementing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>. When the reference count goes to zero, <b>CertFreeCRLContext</b> frees the memory used by a CRL <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>.</para>
      <para>To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.</para>
    </summary>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> to be freed.</param>
    <returns>The function always returns <b>TRUE</b>.</returns>
  </member>
  <member name="Windows.CertFreeCTLContext">
    <summary>
      <para>The <b>CertFreeCTLContext</b> function frees a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> by decrementing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>. When the reference count goes to zero, <b>CertFreeCTLContext</b> frees the memory used by a CTL context.</para>
      <para>To free a context obtained by a get, duplicate, or create function, call the appropriate free function. To free a context obtained by a find or enumerate function, either pass it in as the previous context parameter to a subsequent invocation of the function, or call the appropriate free function. For more information, see the reference topic for the function that obtains the context.</para>
    </summary>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> to be freed.</param>
    <returns>The function always returns <b>TRUE</b>.</returns>
  </member>
  <member name="Windows.CertFreeServerOcspResponseContext">
    <summary>The <b>CertFreeServerOcspResponseContext</b> function decrements the reference count for a <see cref="CERT_SERVER_OCSP_RESPONSE_CONTEXT" /> structure. If the reference count becomes zero, memory allocated for the structure is released.</summary>
    <param name="pServerOcspResponseContext">A pointer to a <see cref="CERT_SERVER_OCSP_RESPONSE_CONTEXT" /> structure that contains a value returned by the <see cref="CertGetServerOcspResponseContext" /> function.</param>
  </member>
  <member name="Windows.CertGetCRLContextProperty">
    <summary>The <b>CertGetCRLContextProperty</b> function gets an extended property for the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context.</summary>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> structure.</param>
    <param name="dwPropId">
      <para>Identifies the property to be retrieved. Currently defined identifiers and the data type to be returned in <i>pvData</i> are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ACCESS_STATE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>DWORD</b><para>Returns a <b>DWORD</b> value indicating whether write operations to the certificate are persisted. The <b>DWORD</b> value is not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ARCHIVED_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: <b>NULL</b><para>Indicates the certificate is skipped during enumerations. A certificate with this property set is found with explicit search operations, such as those used to find a certificate with a specific hash or a serial number. No data in <i>pvData</i> is associated with this property.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_AUTO_ENROLL_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns a <b>null</b>-terminated Unicode string naming the certificate type for which the certificate has been auto enrolled.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CTL_USAGE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns an array of bytes containing an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoded <see cref="CTL_USAGE" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_DESCRIPTION_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the property displayed by the certificate UI. This property allows the user to describe the certificate's use.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ENHKEY_USAGE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: <para>Returns an array of bytes containing an ASN.1 encoded <see cref="CERT_ENHKEY_USAGE" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FRIENDLY_NAME_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns a <b>null</b>-terminated Unicode character string that contains the display name for the CRL.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: Pointer to a null-terminated Unicode string.<para>Returns a string containing a set of L"<i>&lt;PUBKEY&gt;</i>/<i>&lt;BITLENGTH&gt;</i>" public key algorithm and bit length pairs. The semicolon, L";", is used as the delimiter.</para><para>The <i>&lt;PUBKEY&gt;</i> value identifies the CNG public key algorithm. The following algorithms are supported:</para><list type="bullet"><item><description>L"RSA" (BCRYPT_RSA_ALGORITHM)</description></item><item><description>L"DSA" (BCRYPT_DSA_ALGORITHM)</description></item><item><description>L"ECDSA" (SSL_ECDSA_ALGORITHM)</description></item></list>An <i>&lt;PUBKEY&gt;</i>/<i>&lt;BITLENGTH&gt;</i> pair is returned for each certificate in the CRL issuer chain excluding the leaf. This property is only set when an OCSP response with an independent signer chain is converted to a CRL.<div><b>Note</b>  This property cannot be retrieved for a delegated OCSP signer certificate. A delegated signer certificate is signed with the same key used to sign the subject certificate and is checked there.</div>The following is an example:<para>: L"RSA/2048;RSA/4096"</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: Pointer to a null-terminated Unicode string.<para>Returns a string that contains a set of L"<i>&lt;SIGNATURE&gt;</i>/<i>&lt;HASH&gt;</i>" algorithm pairs. The semicolon, L";", is used as the delimiter between pairs.</para><para>This property is set only when an OCSP response is converted to a CRL. For a delegated OCSP signer certificate, only the algorithm pair for the signer certificate is returned. For an independent OCSP signer certificate chain, an algorithm pair is returned for each certificate in the chain excluding the root.</para><para>The <i>&lt;SIGNATURE&gt;</i> value identifies the CNG public key algorithm. The following algorithms are supported:</para><list type="bullet"><item><description>L"RSA" (BCRYPT_RSA_ALGORITHM)</description></item><item><description>L"DSA" (BCRYPT_DSA_ALGORITHM)</description></item><item><description>L"ECDSA" (SSL_ECDSA_ALGORITHM)</description></item></list>The <i>&lt;HASH&gt;</i> value identifies the CNG hash algorithm. The following algorithms are supported:<list type="bullet"><item><description>L"MD5" (BCRYPT_MD5_ALGORITHM)</description></item><item><description>L"SHA1" (BCRYPT_SHA1_ALGORITHM)</description></item><item><description>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</description></item><item><description>L"SHA384" (BCRYPT_SHA384_ALGORITHM)</description></item><item><description>L"SHA512" (BCRYPT_SHA512_ALGORITHM)</description></item></list>The following shows an example:<list type="bullet"><item><description>L"RSA/SHA256;RSA/SHA256"</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: Pointer to a <b>DWORD</b> value.<para>Returns the length, in bits, of the public key in the CRL issuer certificate. This property is also applicable to an OCSP response that has been converted to a CRL.</para><para><b>Windows 8 and Windows Server 2012:  </b>Support for this property begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_CONTEXT_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <see cref="CERT_KEY_CONTEXT" /><para>Returns a<see cref="CERT_KEY_CONTEXT" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_IDENTIFIER_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>If nonexistent, searches for the szOID_SUBJECT_KEY_IDENTIFIER extension. If that fails, a SHA1 hash is done on the certificate's <b>SubjectPublicKeyInfo</b> member to produce the identifier values.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_PROV_HANDLE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a><para>Returns the provider handle obtained from the CERT_KEY_CONTEXT_PROP_ID.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_PROV_INFO_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <see cref="CRYPT_KEY_PROV_INFO" /><para>Returns a pointer to a <see cref="CRYPT_KEY_PROV_INFO" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_SPEC_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>DWORD</b><para>Returns a <b>DWORD</b> value specifying the private key obtained from CERT_KEY_CONTEXT_PROP_ID property if it exists. Otherwise, if CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the <i>dwKeySpec</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_MD5_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the MD5 hash. If the hash does not exist, it is computed using<see cref="CryptHashCertificate" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NEXT_UPDATE_LOCATION_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the ASN.1 encoded<see cref="CERT_ALT_NAME_INFO" /> structure.</para><para>CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_PVK_FILE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns a <b>null</b>-terminated Unicode, wide character string specifying the file name containing the private key associated with the certificate's public key.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SHA1_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the SHA1 hash. If the hash does not exist, it is computed using<see cref="CryptHashCertificate" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIGN_HASH_CNG_ALG_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: Pointer to a null-terminated Unicode string.<para>Returns the L”<i>&lt;SIGNATURE&gt;</i>/<i>&lt;HASH&gt;</i>” string representing the certificate signature. The <i>&lt;SIGNATURE&gt;</i> value identifies the CNG public key algorithm. The following algorithms are supported:</para><list type="bullet"><item><description>L"RSA" (BCRYPT_RSA_ALGORITHM)</description></item><item><description>L"DSA" (BCRYPT_DSA_ALGORITHM)</description></item><item><description>L"ECDSA" (SSL_ECDSA_ALGORITHM)</description></item></list>The <i>&lt;HASH&gt;</i> value identifies the CNG hash algorithm. The following algorithms are supported:<list type="bullet"><item><description>L"MD5" (BCRYPT_MD5_ALGORITHM)</description></item><item><description>L"SHA1" (BCRYPT_SHA1_ALGORITHM)</description></item><item><description>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</description></item><item><description>L"SHA384" (BCRYPT_SHA384_ALGORITHM)</description></item><item><description>L"SHA512" (BCRYPT_SHA512_ALGORITHM)</description></item></list>The following are common examples:<list type="bullet"><item><description>L”RSA/SHA1”</description></item><item><description>L”RSA/SHA256”</description></item><item><description>L”ECDSA/SHA256”</description></item></list>This property is also applicable to an OCSP response that has been converted to a CRL.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this property begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIGNATURE_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the signature hash. If the hash does not exist, it is computed with<see cref="CryptHashToBeSigned" />. The length of the hash is 20 bytes for SHA and 16 for MD5.</para></description>
        </listheader>
      </list> <para>For many property identifiers, <i>pvData</i> points to an array of bytes and not a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> as pointed to by the <i>pvData</i> parameter in <see cref="CertSetCRLContextProperty" />.</para><para>For more information about each property identifier, see the documentation on the <i>dwPropId</i> parameter in<see cref="CertSetCertificateContextProperty" />.</para></param>
    <param name="pvData">
      <para>A pointer to a buffer to receive the data as determined by <i>dwPropId</i>. Structures pointed to by members of a structure returned are also returned following the base structure. Therefore, the size contained in <i>pcbData</i> often exceed the size of the base structure.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbData">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pvData</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
      <para>Note that errors from the called function<see cref="CryptHashCertificate" /> can be propagated to this function. For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CRL does not have the specified property.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pvData</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbData</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertGetCRLFromStore">
    <summary>The <b>CertGetCRLFromStore</b> function gets the first or next <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> from the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> for the specified issuer. The function also performs the enabled verification checks on the CRL. The new<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptography-functions">Certificate Chain Verification Functions</a> are recommended instead of this function.</summary>
    <param name="hCertStore">Handle of a certificate store.</param>
    <param name="pIssuerContext">A pointer to an issuer<see cref="CERT_CONTEXT" />. The <i>pIssuerContext</i> pointer can come from this store or another store, or could have been created by the calling<see cref="CertCreateCertificateContext" />. If <b>NULL</b> is passed for this parameter, all the CRLs in the store are found.</param>
    <param name="pPrevCrlContext">A pointer to a<see cref="CRL_CONTEXT" />. An issuer can have multiple CRLs. For example, it can generate delta CRLs by using an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> version 3 extension. This parameter must be <b>NULL</b> on the first call to get the CRL. To get the next CRL for the issuer, the parameter is set to the <b>CRL_CONTEXT</b> returned by a previous call. A non-<b>NULL</b><i>pPrevCrlContext</i> is always freed by this function by calling <see cref="CertFreeCRLContext" />, even for an error.</param>
    <param name="pdwFlags">
      <para>The following flag values are defined to enable verification checks on the returned CRL. These flags can be combined using a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SIGNATURE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the public key in the issuer's certificate to verify the signature on the returned CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_TIME_VALIDITY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Gets the current time and verifies that it is within the time between the CRL's ThisUpdate and NextUpdate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_BASE_CRL_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Gets a base CRL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_DELTA_CRL_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Gets a delta CRL.</description>
        </listheader>
      </list> <para>If an enabled verification check succeeds, its flag is set to zero.</para><para>If an enabled verification check fails, its flag remains set upon return. If <i>pIssuerContext</i> is <b>NULL</b>, then an enabled CERT_STORE_SIGNATURE_FLAG always fails and the CERT_STORE_NO_ISSUER_FLAG is also set. For more details, see Remarks.</para><para>If only one of CERT_STORE_BASE_CRL_FLAG or CERT_STORE_DELTA_CRL_FLAG is set, this function returns either a base or delta CRL and the appropriate base or delta flag will be cleared on return. If both flags are set, only one of the flags will be cleared.</para><para>For a verification check failure, a pointer to the first or next<see cref="CRL_CONTEXT" /> is still returned and<see cref="GetLastError" /> is not updated.</para></param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a read-only <see cref="CRL_CONTEXT" />.</para>
      <para>If the function fails and the first or next CRL is not found, the return value is <b>NULL</b>.</para>
      <para>The returned <see cref="CRL_CONTEXT" /> must be freed by calling<see cref="CertFreeCRLContext" />. However, when the returned <b>CRL_CONTEXT</b> is supplied for <i>pPrevCrlContext</i> on a subsequent call, the function frees it.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that in the CRL context pointed to by the <i>pPrevCrlContext</i> parameter, or an unsupported flag was set in <i>pdwFlags</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either no CRLs existed in the store for the issuer, or the function reached the end of the store's list.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertGetCTLContextProperty">
    <summary>The <b>CertGetCTLContextProperty</b> function retrieves an extended property of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context.</summary>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure.</param>
    <param name="dwPropId">
      <para>Identifies the property to be retrieved. Currently defined identifiers and the data type to be returned in <i>pvData</i> are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ACCESS_STATE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>DWORD</b><para>Returns a <b>DWORD</b> value indicating whether write operations to the certificate are persisted. The <b>DWORD</b> value is not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ARCHIVED_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: <b>NULL</b><para>Indicates the certificate is skipped during enumerations. A certificate with this property set is found with explicit search operations, such as those used to find a certificate with a specific hash or a serial number. No data in <i>pvData</i> is associated with this property.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_AUTO_ENROLL_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns a <b>null</b>-terminated Unicode string naming the certificate type for which the certificate has been auto enrolled.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CTL_USAGE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns an array of bytes containing an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoded <see cref="CTL_USAGE" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_DESCRIPTION_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the property displayed by the certificate UI. This property allows the user to describe the certificate's use.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ENHKEY_USAGE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns an array of bytes containing an ASN.1 encoded <see cref="CERT_ENHKEY_USAGE" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FRIENDLY_NAME_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns a <b>null</b>-terminated Unicode character string that contains the display name for the CTL.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the SHA1 hash. If the hash does not exist, it is computed using<see cref="CryptHashCertificate" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_CONTEXT_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <see cref="CERT_KEY_CONTEXT" /><para>Returns a<see cref="CERT_KEY_CONTEXT" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_IDENTIFIER_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>If nonexistent, searches for the szOID_SUBJECT_KEY_IDENTIFIER extension. If that fails, a SHA1 hash is done on the certificate's <b>SubjectPublicKeyInfo</b> member to produce the identifier values.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_PROV_HANDLE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a><para>Returns the provider handle obtained from the CERT_KEY_CONTEXT_PROP_ID.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_PROV_INFO_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <see cref="CRYPT_KEY_PROV_INFO" /> structure<para>Returns a pointer to a <see cref="CRYPT_KEY_PROV_INFO" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_SPEC_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>DWORD</b><para>Returns a <b>DWORD</b> value specifying the private key obtained from CERT_KEY_CONTEXT_PROP_ID property if it exists. Otherwise, if CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the <i>dwKeySpec</i>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_MD5_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the MD5 hash. If the hash does not exist, it is computed using<see cref="CryptHashCertificate" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NEXT_UPDATE_LOCATION_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the ASN.1 encoded<see cref="CERT_ALT_NAME_INFO" /> structure.</para><para>CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_PVK_FILE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns a <b>null</b>-terminated Unicode, wide character string specifying the file name containing the private key associated with the certificate's public key.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SHA1_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the SHA1 hash. If the hash does not exist, it is computed using<see cref="CryptHashCertificate" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIGNATURE_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type for <i>pvData</i>: pointer to a <b>BYTE</b> array<para>Returns the signature hash. If the hash does not exist, it is computed with<see cref="CryptHashToBeSigned" />. The length of the hash is 20 bytes for SHA and 16 for MD5.</para></description>
        </listheader>
      </list> <para>For all other property identifiers, <i>pvData</i> points to an array of bytes and not a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> as pointed to by the <i>pvData</i> parameter in <see cref="CertSetCertificateContextProperty" />.</para><para>For more information about each property identifier, see the documentation on the <i>dwPropId</i> parameter in<see cref="CertSetCertificateContextProperty" />. CERT_SHA1_HASH_PROP_ID and CERT_NEXT_UPDATE_LOCATION_PROP_ID are the predefined properties of most interest.</para></param>
    <param name="pvData">
      <para>A pointer to a buffer to receive the data as determined by <i>dwPropId</i>. Structures pointed to by members of a structure returned are also returned following the base structure. Therefore, the size contained in <i>pcbData</i> often exceed the size of the base structure.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbData">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pvData</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
      <para>Errors from the called function, <see cref="CryptHashCertificate" />, can be propagated to this function. For extended error information, call<see cref="GetLastError" />.</para>
      <para>Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CTL does not have the specified property.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pvData</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbData</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertGetEnhancedKeyUsage">
    <summary>The <b>CertGetEnhancedKeyUsage</b> function returns information from the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">enhanced key usage</a> (EKU) extension or the EKU extended property of a certificate. EKUs indicate valid uses of the certificate.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> certificate context.</param>
    <param name="dwFlags">
      <para>Indicates whether the function will report on extensions of a certificate, its extended properties, or both. If set to zero, the function returns the valid uses of a certificate based on both the EKU extension and the EKU extended property value of the certificate.</para>
      <para>To return only the EKU extension or EKU property value, set the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Get only the extension.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Get only the extended property value.</description>
        </listheader>
      </list>
    </param>
    <param name="pUsage">
      <para>A pointer to a <see cref="CERT_ENHKEY_USAGE" /> structure (<b>CERT_ENHKEY_USAGE</b> is an alternate typedef name for the <b>CTL_USAGE</b> structure) that receives the valid uses of the certificate.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the key usage for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbUsage">A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the structure pointed to by <i>pUsage</i>. When the function returns, the <b>DWORD</b> contains the size, in bytes, of the structure.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CertGetIntendedKeyUsage">
    <summary>The <b>CertGetIntendedKeyUsage</b> function acquires the intended key usage bytes from a certificate. The intended key usage can be in either the szOID_KEY_USAGE ("2.5.29.15") or szOID_KEY_ATTRIBUTES ("2.5.29.2") extension.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pCertInfo">A pointer to<see cref="CERT_INFO" /> structure of the specified certificate.</param>
    <param name="pbKeyUsage">
      <para>A pointer to a buffer to receive the intended key usage. The following list shows currently defined values. These can be combined by using bitwise-<b>OR</b> operations.</para>
      <list type="bullet">
        <item>
          <description>CERT_DATA_ENCIPHERMENT_KEY_USAGE</description>
        </item>
        <item>
          <description>CERT_DIGITAL_SIGNATURE_KEY_USAGE</description>
        </item>
        <item>
          <description>CERT_KEY_AGREEMENT_KEY_USAGE</description>
        </item>
        <item>
          <description>CERT_KEY_CERT_SIGN_KEY_USAGE</description>
        </item>
        <item>
          <description>CERT_KEY_ENCIPHERMENT_KEY_USAGE</description>
        </item>
        <item>
          <description>CERT_NON_REPUDIATION_KEY_USAGE</description>
        </item>
        <item>
          <description>CERT_OFFLINE_CRL_SIGN_KEY_USAGE</description>
        </item>
      </list>
    </param>
    <param name="cbKeyUsage">The size, in bytes, of the buffer pointed to by <i>pbKeyUsage</i>. Currently, the intended key usage occupies 1 or 2 bytes of data.</param>
    <returns>
      <para>If the certificate does not have any intended key usage bytes, <b>FALSE</b> is returned and <i>pbKeyUsage</i> is zeroed. Otherwise, <b>TRUE</b> is returned and up to <i>cbKeyUsage</i> number of bytes are copied into <i>pbKeyUsage</i>. Any remaining bytes not copied are zeroed.</para>
      <para>
        <see cref="GetLastError" /> returns zero if none of the required extensions is found.</para>
      <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para>
    </returns>
  </member>
  <member name="Windows.CertGetIssuerCertificateFromStore">
    <summary>The <b>CertGetIssuerCertificateFromStore</b> function retrieves the certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> from the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> for the first or next issuer of the specified subject certificate. The new<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptography-functions">Certificate Chain Verification Functions</a> are recommended instead of the use of this function.</summary>
    <param name="hCertStore">Handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</param>
    <param name="pSubjectContext">A pointer to a<see cref="CERT_CONTEXT" /> structure that contains the subject information. This parameter can be obtained from any certificate store or can be created by the calling application using the<see cref="CertCreateCertificateContext" /> function.</param>
    <param name="pPrevIssuerContext">
      <para>A pointer to a <see cref="CERT_CONTEXT" /> structure that contains the issuer information. An issuer can have multiple certificates, especially when a validity period is about to change. This parameter must be <b>NULL</b> on the call to get the first issuer certificate. To get the next certificate for the issuer, set <i>pPrevIssuerContext</i> to the <b>CERT_CONTEXT</b> structure returned by the previous call.</para>
      <para>This function frees the <see cref="CERT_CONTEXT" /> referenced by non-<b>NULL</b> values of this parameter.</para>
    </param>
    <param name="pdwFlags">
      <para>The following flags enable verification checks on the returned certificate. They can be combined using a bitwise-<b>OR</b> operation to enable multiple verifications.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_NO_CRL_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates no matching CRL was found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_NO_ISSUER_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates no issuer certificate was found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_REVOCATION_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Checks whether the subject certificate is on the issuer's revocation list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SIGNATURE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the public key in the issuer's certificate to verify the signature on the subject certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_TIME_VALIDITY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Gets the current time and verifies that it is within the subject certificate's validity period.</description>
        </listheader>
      </list> <para>If a verification check of an enabled type succeeds, its flag is set to zero. If it fails, its flag remains set upon return. For CERT_STORE_REVOCATION_FLAG, the verification succeeds if the function does not find a CRL related to the subject certificate.</para><para>If CERT_STORE_REVOCATION_FLAG is set and the issuer does not have a CRL in the store, CERT_STORE_NO_CRL_FLAG is set and CERT_STORE_REVOCATION_FLAG remains set.</para><para>If CERT_STORE_SIGNATURE_FLAG or CERT_STORE_REVOCATION_FLAG is set, CERT_STORE_NO_ISSUER_FLAG is set if the function does not find an issuer certificate in the store. For more details, see Remarks.</para><para>In the case of a verification check failure, a pointer to the issuer's<see cref="CERT_CONTEXT" /> is still returned and<see cref="GetLastError" /> is not updated.</para></param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a read-only issuer <see cref="CERT_CONTEXT" />.</para>
      <para>If the function fails and the first or next issuer certificate is not found, the return value is <b>NULL</b>.</para>
      <para>Only the last returned <see cref="CERT_CONTEXT" /> structure must be freed by calling<see cref="CertFreeCertificateContext" />. When the returned <b>CERT_CONTEXT</b> from one call to the function is supplied as the <i>pPrevIssuerContext</i> parameter on a subsequent call, the context is freed as part of the action of the function.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No issuer was found for the subject certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_SELF_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The issuer certificate is the same as the subject certificate. It is a self-signed <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">root certificate</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle in the <i>hCertStore</i> parameter is not the same as that of the certificate context pointed to by the <i>pPrevIssuerContext</i> parameter, or an unsupported flag was set in <i>pdwFlags</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertGetNameString">
    <summary>The <b>CertGetNameString</b> function obtains the subject or issuer name from a certificate<see cref="CERT_CONTEXT" /> structure and converts it to a <b>null</b>-terminated character string.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> certificate context that includes a subject and issuer name to be converted.</param>
    <param name="dwType">
      <para>
        <b>DWORD</b> indicating how the name is to be found and how the output is to be formatted.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_EMAIL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). <i>pvTypePara</i> is not used and is set to <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_RDN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Converts the Subject Name BLOB by calling <see cref="CertNameToStr" />. <i>pvTypePara</i> points to a <b>DWORD</b> containing the <i>dwStrType</i> passed to <b>CertNameToStr</b>. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first directory Name choice from <b>CertNameToStr</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ATTR_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvTypePara</i> points to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute to be returned. For example, if <i>pvTypePara</i> is szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject Alternative Name extension, uses the first directoryName choice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SIMPLE_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr. <para>If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no match, uses the first attribute.</para><para><i>pvTypePara</i> is not used and is set to <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_FRIENDLY_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DNS_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice. <para>If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3".</para><para>If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_URL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If the URL choice is found, return the string. Otherwise, return an empty string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_UPN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId == szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3"). <para>If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an empty string.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">
      <para>Indicates the type of processing needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ISSUER_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Acquires the issuer's name. If not set, acquires the subject's name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2</term>
              </listheader>
            </list>
          </description>
          <description>If the <i>dwType</i> parameter is set to <b>CERT_NAME_DNS_TYPE</b>, all applicable names are returned for the specified DNS value. If there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than <b>CERT_NAME_DNS_TYPE</b>, this function returns a null-terminated empty string.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000</term>
              </listheader>
            </list>
          </description>
          <description>This flag enables decoding of <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> strings to Unicode string values based on the <i>dwType</i> parameter value as defined below:<list type="bullet"><item><description>CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name is returned from the certificate, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, the host name string is converted to the Unicode equivalent.</description></item></list><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</description>
        </listheader>
      </list>
    </param>
    <param name="pvTypePara">A pointer to either a <b>DWORD</b> containing the <i>dwStrType</i> or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute. The type pointed to is determined by the value of <i>dwType</i>.</param>
    <param name="pszNameString">
      <para>A pointer to an allocated buffer to receive the returned string. If <i>pszNameString</i> is not <b>NULL</b> and <i>cchNameString</i> is not zero, <i>pszNameString</i> is a <b>null</b>-terminated string.</para>
      <para>If <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b> is specified in the <i>dwFlags</i> parameter and <b>CERT_NAME_DNS_TYPE</b> is set in the <i>dwType</i> parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty string is returned.</para>
    </param>
    <param name="cchNameString">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating zero character. If <i>pszNameString</i> is <b>NULL</b> or <i>cchNameString</i> is zero, returns the required size of the destination string (including the terminating <b>NULL</b> character). If the specified name type is not found, returns a <b>null</b>-terminated empty string with a returned character count of 1.</returns>
  </member>
  <member name="Windows.CertGetNameStringA">
    <summary>The <b>CertGetNameString</b> function obtains the subject or issuer name from a certificate<see cref="CERT_CONTEXT" /> structure and converts it to a <b>null</b>-terminated character string.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> certificate context that includes a subject and issuer name to be converted.</param>
    <param name="dwType">
      <para>
        <b>DWORD</b> indicating how the name is to be found and how the output is to be formatted.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_EMAIL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). <i>pvTypePara</i> is not used and is set to <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_RDN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Converts the Subject Name BLOB by calling <see cref="CertNameToStr" />. <i>pvTypePara</i> points to a <b>DWORD</b> containing the <i>dwStrType</i> passed to <b>CertNameToStr</b>. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first directory Name choice from <b>CertNameToStr</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ATTR_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvTypePara</i> points to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute to be returned. For example, if <i>pvTypePara</i> is szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject Alternative Name extension, uses the first directoryName choice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SIMPLE_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr. <para>If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no match, uses the first attribute.</para><para><i>pvTypePara</i> is not used and is set to <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_FRIENDLY_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DNS_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice. <para>If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3".</para><para>If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_URL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If the URL choice is found, return the string. Otherwise, return an empty string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_UPN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId == szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3"). <para>If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an empty string.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">
      <para>Indicates the type of processing needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ISSUER_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Acquires the issuer's name. If not set, acquires the subject's name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2</term>
              </listheader>
            </list>
          </description>
          <description>If the <i>dwType</i> parameter is set to <b>CERT_NAME_DNS_TYPE</b>, all applicable names are returned for the specified DNS value. If there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than <b>CERT_NAME_DNS_TYPE</b>, this function returns a null-terminated empty string.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000</term>
              </listheader>
            </list>
          </description>
          <description>This flag enables decoding of <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> strings to Unicode string values based on the <i>dwType</i> parameter value as defined below:<list type="bullet"><item><description>CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name is returned from the certificate, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, the host name string is converted to the Unicode equivalent.</description></item></list><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</description>
        </listheader>
      </list>
    </param>
    <param name="pvTypePara">A pointer to either a <b>DWORD</b> containing the <i>dwStrType</i> or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute. The type pointed to is determined by the value of <i>dwType</i>.</param>
    <param name="pszNameString">
      <para>A pointer to an allocated buffer to receive the returned string. If <i>pszNameString</i> is not <b>NULL</b> and <i>cchNameString</i> is not zero, <i>pszNameString</i> is a <b>null</b>-terminated string.</para>
      <para>If <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b> is specified in the <i>dwFlags</i> parameter and <b>CERT_NAME_DNS_TYPE</b> is set in the <i>dwType</i> parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty string is returned.</para>
    </param>
    <param name="cchNameString">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating zero character. If <i>pszNameString</i> is <b>NULL</b> or <i>cchNameString</i> is zero, returns the required size of the destination string (including the terminating <b>NULL</b> character). If the specified name type is not found, returns a <b>null</b>-terminated empty string with a returned character count of 1.</returns>
  </member>
  <member name="Windows.CertGetNameStringW">
    <summary>The <b>CertGetNameString</b> function obtains the subject or issuer name from a certificate<see cref="CERT_CONTEXT" /> structure and converts it to a <b>null</b>-terminated character string.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> certificate context that includes a subject and issuer name to be converted.</param>
    <param name="dwType">
      <para>
        <b>DWORD</b> indicating how the name is to be found and how the output is to be formatted.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_EMAIL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). <i>pvTypePara</i> is not used and is set to <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_RDN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Converts the Subject Name BLOB by calling <see cref="CertNameToStr" />. <i>pvTypePara</i> points to a <b>DWORD</b> containing the <i>dwStrType</i> passed to <b>CertNameToStr</b>. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first directory Name choice from <b>CertNameToStr</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ATTR_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvTypePara</i> points to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute to be returned. For example, if <i>pvTypePara</i> is szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject Alternative Name extension, uses the first directoryName choice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SIMPLE_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr. <para>If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no match, uses the first attribute.</para><para><i>pvTypePara</i> is not used and is set to <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_FRIENDLY_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DNS_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice. <para>If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3".</para><para>If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_URL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If the URL choice is found, return the string. Otherwise, return an empty string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_UPN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId == szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3"). <para>If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an empty string.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">
      <para>Indicates the type of processing needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ISSUER_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Acquires the issuer's name. If not set, acquires the subject's name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2</term>
              </listheader>
            </list>
          </description>
          <description>If the <i>dwType</i> parameter is set to <b>CERT_NAME_DNS_TYPE</b>, all applicable names are returned for the specified DNS value. If there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than <b>CERT_NAME_DNS_TYPE</b>, this function returns a null-terminated empty string.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000</term>
              </listheader>
            </list>
          </description>
          <description>This flag enables decoding of <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> strings to Unicode string values based on the <i>dwType</i> parameter value as defined below:<list type="bullet"><item><description>CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name is returned from the certificate, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, the host name string is converted to the Unicode equivalent.</description></item></list><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</description>
        </listheader>
      </list>
    </param>
    <param name="pvTypePara">A pointer to either a <b>DWORD</b> containing the <i>dwStrType</i> or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute. The type pointed to is determined by the value of <i>dwType</i>.</param>
    <param name="pszNameString">
      <para>A pointer to an allocated buffer to receive the returned string. If <i>pszNameString</i> is not <b>NULL</b> and <i>cchNameString</i> is not zero, <i>pszNameString</i> is a <b>null</b>-terminated string.</para>
      <para>If <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b> is specified in the <i>dwFlags</i> parameter and <b>CERT_NAME_DNS_TYPE</b> is set in the <i>dwType</i> parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty string is returned.</para>
    </param>
    <param name="cchNameString">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating zero character. If <i>pszNameString</i> is <b>NULL</b> or <i>cchNameString</i> is zero, returns the required size of the destination string (including the terminating <b>NULL</b> character). If the specified name type is not found, returns a <b>null</b>-terminated empty string with a returned character count of 1.</returns>
  </member>
  <member name="Windows.CertGetNameString">
    <summary>The <b>CertGetNameString</b> function obtains the subject or issuer name from a certificate<see cref="CERT_CONTEXT" /> structure and converts it to a <b>null</b>-terminated character string.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> certificate context that includes a subject and issuer name to be converted.</param>
    <param name="dwType">
      <para>
        <b>DWORD</b> indicating how the name is to be found and how the output is to be formatted.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_EMAIL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). <i>pvTypePara</i> is not used and is set to <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_RDN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Converts the Subject Name BLOB by calling <see cref="CertNameToStr" />. <i>pvTypePara</i> points to a <b>DWORD</b> containing the <i>dwStrType</i> passed to <b>CertNameToStr</b>. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first directory Name choice from <b>CertNameToStr</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ATTR_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvTypePara</i> points to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute to be returned. For example, if <i>pvTypePara</i> is szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject Alternative Name extension, uses the first directoryName choice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SIMPLE_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr. <para>If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no match, uses the first attribute.</para><para><i>pvTypePara</i> is not used and is set to <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_FRIENDLY_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DNS_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice. <para>If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3".</para><para>If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_URL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If the URL choice is found, return the string. Otherwise, return an empty string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_UPN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId == szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3"). <para>If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an empty string.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">
      <para>Indicates the type of processing needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ISSUER_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Acquires the issuer's name. If not set, acquires the subject's name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2</term>
              </listheader>
            </list>
          </description>
          <description>If the <i>dwType</i> parameter is set to <b>CERT_NAME_DNS_TYPE</b>, all applicable names are returned for the specified DNS value. If there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than <b>CERT_NAME_DNS_TYPE</b>, this function returns a null-terminated empty string.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000</term>
              </listheader>
            </list>
          </description>
          <description>This flag enables decoding of <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> strings to Unicode string values based on the <i>dwType</i> parameter value as defined below:<list type="bullet"><item><description>CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name is returned from the certificate, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, the host name string is converted to the Unicode equivalent.</description></item></list><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</description>
        </listheader>
      </list>
    </param>
    <param name="pvTypePara">A pointer to either a <b>DWORD</b> containing the <i>dwStrType</i> or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute. The type pointed to is determined by the value of <i>dwType</i>.</param>
    <param name="pszNameString">
      <para>A pointer to an allocated buffer to receive the returned string. If <i>pszNameString</i> is not <b>NULL</b> and <i>cchNameString</i> is not zero, <i>pszNameString</i> is a <b>null</b>-terminated string.</para>
      <para>If <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b> is specified in the <i>dwFlags</i> parameter and <b>CERT_NAME_DNS_TYPE</b> is set in the <i>dwType</i> parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty string is returned.</para>
    </param>
    <param name="cchNameString">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating zero character. If <i>pszNameString</i> is <b>NULL</b> or <i>cchNameString</i> is zero, returns the required size of the destination string (including the terminating <b>NULL</b> character). If the specified name type is not found, returns a <b>null</b>-terminated empty string with a returned character count of 1.</returns>
  </member>
  <member name="Windows.CertGetNameStringA">
    <summary>The <b>CertGetNameString</b> function obtains the subject or issuer name from a certificate<see cref="CERT_CONTEXT" /> structure and converts it to a <b>null</b>-terminated character string.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> certificate context that includes a subject and issuer name to be converted.</param>
    <param name="dwType">
      <para>
        <b>DWORD</b> indicating how the name is to be found and how the output is to be formatted.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_EMAIL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). <i>pvTypePara</i> is not used and is set to <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_RDN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Converts the Subject Name BLOB by calling <see cref="CertNameToStr" />. <i>pvTypePara</i> points to a <b>DWORD</b> containing the <i>dwStrType</i> passed to <b>CertNameToStr</b>. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first directory Name choice from <b>CertNameToStr</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ATTR_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvTypePara</i> points to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute to be returned. For example, if <i>pvTypePara</i> is szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject Alternative Name extension, uses the first directoryName choice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SIMPLE_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr. <para>If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no match, uses the first attribute.</para><para><i>pvTypePara</i> is not used and is set to <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_FRIENDLY_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DNS_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice. <para>If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3".</para><para>If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_URL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If the URL choice is found, return the string. Otherwise, return an empty string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_UPN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId == szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3"). <para>If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an empty string.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">
      <para>Indicates the type of processing needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ISSUER_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Acquires the issuer's name. If not set, acquires the subject's name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2</term>
              </listheader>
            </list>
          </description>
          <description>If the <i>dwType</i> parameter is set to <b>CERT_NAME_DNS_TYPE</b>, all applicable names are returned for the specified DNS value. If there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than <b>CERT_NAME_DNS_TYPE</b>, this function returns a null-terminated empty string.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000</term>
              </listheader>
            </list>
          </description>
          <description>This flag enables decoding of <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> strings to Unicode string values based on the <i>dwType</i> parameter value as defined below:<list type="bullet"><item><description>CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name is returned from the certificate, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, the host name string is converted to the Unicode equivalent.</description></item></list><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</description>
        </listheader>
      </list>
    </param>
    <param name="pvTypePara">A pointer to either a <b>DWORD</b> containing the <i>dwStrType</i> or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute. The type pointed to is determined by the value of <i>dwType</i>.</param>
    <param name="pszNameString">
      <para>A pointer to an allocated buffer to receive the returned string. If <i>pszNameString</i> is not <b>NULL</b> and <i>cchNameString</i> is not zero, <i>pszNameString</i> is a <b>null</b>-terminated string.</para>
      <para>If <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b> is specified in the <i>dwFlags</i> parameter and <b>CERT_NAME_DNS_TYPE</b> is set in the <i>dwType</i> parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty string is returned.</para>
    </param>
    <param name="cchNameString">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating zero character. If <i>pszNameString</i> is <b>NULL</b> or <i>cchNameString</i> is zero, returns the required size of the destination string (including the terminating <b>NULL</b> character). If the specified name type is not found, returns a <b>null</b>-terminated empty string with a returned character count of 1.</returns>
  </member>
  <member name="Windows.CertGetNameStringW">
    <summary>The <b>CertGetNameString</b> function obtains the subject or issuer name from a certificate<see cref="CERT_CONTEXT" /> structure and converts it to a <b>null</b>-terminated character string.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> certificate context that includes a subject and issuer name to be converted.</param>
    <param name="dwType">
      <para>
        <b>DWORD</b> indicating how the name is to be found and how the output is to be formatted.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_EMAIL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). <i>pvTypePara</i> is not used and is set to <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_RDN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Converts the Subject Name BLOB by calling <see cref="CertNameToStr" />. <i>pvTypePara</i> points to a <b>DWORD</b> containing the <i>dwStrType</i> passed to <b>CertNameToStr</b>. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first directory Name choice from <b>CertNameToStr</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ATTR_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvTypePara</i> points to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute to be returned. For example, if <i>pvTypePara</i> is szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject Alternative Name extension, uses the first directoryName choice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SIMPLE_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr. <para>If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no match, uses the first attribute.</para><para><i>pvTypePara</i> is not used and is set to <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_FRIENDLY_DISPLAY_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DNS_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice. <para>If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, "2.5.4.3".</para><para>If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_URL_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If the URL choice is found, return the string. Otherwise, return an empty string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_UPN_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId == szOID_NT_PRINCIPAL_NAME, ("1.3.6.1.4.1.311.20.2.3"). <para>If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an empty string.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">
      <para>Indicates the type of processing needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_ISSUER_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Acquires the issuer's name. If not set, acquires the subject's name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2</term>
              </listheader>
            </list>
          </description>
          <description>If the <i>dwType</i> parameter is set to <b>CERT_NAME_DNS_TYPE</b>, all applicable names are returned for the specified DNS value. If there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than <b>CERT_NAME_DNS_TYPE</b>, this function returns a null-terminated empty string.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000</term>
              </listheader>
            </list>
          </description>
          <description>This flag enables decoding of <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> strings to Unicode string values based on the <i>dwType</i> parameter value as defined below:<list type="bullet"><item><description>CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name is returned from the certificate, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of the email address a contains Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, it is converted to the Unicode equivalent.</description></item><item><description>CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> component, the host name string is converted to the Unicode equivalent.</description></item></list><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</description>
        </listheader>
      </list>
    </param>
    <param name="pvTypePara">A pointer to either a <b>DWORD</b> containing the <i>dwStrType</i> or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) specifying the name attribute. The type pointed to is determined by the value of <i>dwType</i>.</param>
    <param name="pszNameString">
      <para>A pointer to an allocated buffer to receive the returned string. If <i>pszNameString</i> is not <b>NULL</b> and <i>cchNameString</i> is not zero, <i>pszNameString</i> is a <b>null</b>-terminated string.</para>
      <para>If <b>CERT_NAME_SEARCH_ALL_NAMES_FLAG</b> is specified in the <i>dwFlags</i> parameter and <b>CERT_NAME_DNS_TYPE</b> is set in the <i>dwType</i> parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty string is returned.</para>
    </param>
    <param name="cchNameString">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating zero character. If <i>pszNameString</i> is <b>NULL</b> or <i>cchNameString</i> is zero, returns the required size of the destination string (including the terminating <b>NULL</b> character). If the specified name type is not found, returns a <b>null</b>-terminated empty string with a returned character count of 1.</returns>
  </member>
  <member name="Windows.CertGetPublicKeyLength">
    <summary>The <b>CertGetPublicKeyLength</b> function acquires the bit length of public/private keys from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key BLOB</a>.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pPublicKey">A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key BLOB</a> containing the keys for which the length is being retrieved.</param>
    <returns>
      <para>Returns the length of the public/private keys in bits. If unable to determine the key's length, returns zero.</para>
      <para>Call <see cref="GetLastError" /> to see the reason for any failures.</para>
    </returns>
  </member>
  <member name="Windows.CertGetServerOcspResponseContext">
    <summary>The <b>CertGetServerOcspResponseContext</b> function retrieves a non-blocking, time valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) response context for the specified handle.</summary>
    <param name="hServerOcspResponse">The OCSP server response handle for which to retrieve a response context. This handle is returned by the <see cref="CertOpenServerOcspResponse" /> function.</param>
    <param name="dwFlags">This parameter is reserved for future use and must be zero.</param>
    <param name="pvReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, it returns a pointer to a <see cref="CERT_SERVER_OCSP_RESPONSE_CONTEXT" /> structure.</para>
      <para>For a response to be time valid, the current time on the system hosting this function call must be less than the next update time for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) context. When a time valid OCSP response is not available, this function returns <b>NULL</b> with the last error set to CRYPT_E_REVOCATION_OFFLINE.</para>
      <para>If the certificate is unknown by the OCSP responder, this function returns <b>NULL</b> with the last error set to CRYPT_E_REVOCATION_OFFLINE.</para>
    </returns>
  </member>
  <member name="Windows.CertGetStoreProperty">
    <summary>The <b>CertGetStoreProperty</b> function retrieves a store property.</summary>
    <param name="hCertStore">A handle of an open <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</param>
    <param name="dwPropId">
      <para>Indicates one of a range of store properties. There is one predefined store property, CERT_STORE_LOCALIZED_NAME_PROP_ID, the localized name of the store.</para>
      <para>User defined properties must be outside the current range of values for predefined context properties. Currently, user defined <i>dwPropId</i> values begin at 4,096.</para>
    </param>
    <param name="pvData">
      <para>A pointer to a buffer that receives the data as determined by <i>dwPropId</i>. For CERT_STORE_LOCALIZED_NAME_PROP_ID, this is the localized name of the store, and <i>pvData</i> points to a null-terminated Unicode wide-character string. For other <i>dwPropId</i>s, <i>pvData</i> points to an array of bytes.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbData">A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pvData</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero.</para>
      <para>If the store property is found, the function returns nonzero, <i>pvData</i> points to the property, and <i>pcbData</i> points to the length of the string. If the store property is not found, the function returns zero and<see cref="GetLastError" /> returns CRYPT_E_NOT_FOUND.</para>
    </returns>
  </member>
  <member name="Windows.CertGetSubjectCertificateFromStore">
    <summary>The <b>CertGetSubjectCertificateFromStore</b> function returns from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> a subject certificate context uniquely identified by its issuer and serial number.</summary>
    <param name="hCertStore">A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</param>
    <param name="dwCertEncodingType">
      <para>The type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pCertId">A pointer to a<see cref="CERT_INFO" /> structure. Only the <b>Issuer</b> and <b>SerialNumber</b> members are used.</param>
    <returns>
      <para>If the function succeeds, the function returns a pointer to a read-only<see cref="CERT_CONTEXT" />. The <b>CERT_CONTEXT</b> must be freed by calling<see cref="CertFreeCertificateContext" />.</para>
      <para>The returned certificate might not be valid. Usually, it is verified when getting its issuer certificate (<see cref="CertGetIssuerCertificateFromStore" />).</para>
      <para>For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The subject certificate was not found in the store.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertGetValidUsages">
    <summary>The <b>CertGetValidUsages</b> function returns an array of usages that consist of the intersection of the valid usages for all certificates in an array of certificates.</summary>
    <param name="cCerts">The number of certificates in the array to be checked.</param>
    <param name="rghCerts">An array of certificates to be checked for valid usage.</param>
    <param name="cNumOIDs">The number of valid usages found as the intersection of the valid usages of all certificates in the array. If all of the certificates are valid for all usages, <i>cNumOIDs</i> is set to negative one (–1).</param>
    <param name="rghOIDs">An array of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) of the valid usages that are shared by all of the certificates in the <i>rghCerts</i> array. This parameter can be <b>NULL</b> to set the size of this structure for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</param>
    <param name="pcbOIDs">A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>rghOIDs</i> array and the strings pointed to. When the function returns, the <b>DWORD</b> value contains the number of bytes needed for the array.</param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. For extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CertIsRDNAttrsInCertificateName">
    <summary>The <b>CertIsRDNAttrsInCertificateName</b> function compares the attributes in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate name</a> with the specified<see cref="CERT_RDN" /> to determine whether all attributes are included there. The comparison iterates through the <b>CERT_RDN</b> and looks for an attribute match in any of the <b>CERT_RDN</b>s of the certificate name.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>CERT_UNICODE_IS_RDN_ATTRS_FLAG must be set if the <i>pRDN</i> was initialized with Unicode strings as in<see cref="CryptEncodeObject" /> with <i>lpszStructType</i> set to X509_UNICODE_NAME.</para>
      <para>CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG is set to do a case insensitive match. Otherwise, an exact, case sensitive match is done.</para>
    </param>
    <param name="pCertName">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> that contains the encoded subject or issuer name.</param>
    <param name="pRDN">
      <para>Array of<see cref="CERT_RDN" /> structures that contain the attributes to be found in the name. The<see cref="CERT_RDN_ATTR" /> member of the <b>CERT_RDN</b> structure behaves according to the following rules.</para>
      <list type="bullet">
        <item>
          <description>If <b>pszObjId</b> is <b>NULL</b>, the attribute <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is ignored.</description>
        </item>
        <item>
          <description>If <b>dwValueType</b> is CERT_RDN_ANY_TYPE, the value type is ignored.</description>
        </item>
        <item>
          <description>If the <b>pbData</b> member of <b>Value</b> is <b>NULL</b>, any value can be a match.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds and all of the RDN values in the specified <see cref="CERT_RDN" /> are in the certificate name, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, or if there are RDN values in the specified <see cref="CERT_RDN" /> that are not in the certificate name, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following table lists some possible error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_MATCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not all the attributes were found and matched.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CertIsStrongHashToSign">
    <summary>Determines whether the specified hash algorithm and the public key in the signing certificate can be used to perform strong signing.</summary>
    <param name="pStrongSignPara">Pointer to a <see cref="CERT_STRONG_SIGN_PARA" /> structure that contains information about supported signing and hashing algorithms.</param>
    <param name="pwszCNGHashAlgid">
      <para>Pointer to a Unicode string that contains the name of the hashing algorithm. The following algorithms are supported:</para>
      <list type="bullet">
        <item>
          <description>L"MD5" (BCRYPT_MD5_ALGORITHM)</description>
        </item>
        <item>
          <description>L"SHA1" (BCRYPT_SHA1_ALGORITHM)</description>
        </item>
        <item>
          <description>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</description>
        </item>
        <item>
          <description>L"SHA256" (BCRYPT_SHA256_ALGORITHM)</description>
        </item>
        <item>
          <description>L"SHA512" (BCRYPT_SHA512_ALGORITHM)</description>
        </item>
      </list>
    </param>
    <param name="pSigningCert">
      <para>Pointer to a <see cref="CERT_CONTEXT" /> structure that contains the signing certificate. The public key algorithm in the signing certificate is checked for strength. The public key (asymmetric) algorithm is used for signing. The following signature algorithms are supported:</para>
      <list type="bullet">
        <item>
          <description>L"RSA" (BCRYPT_RSA_ALGORITHM)</description>
        </item>
        <item>
          <description>L"DSA" (BCRYPT_DSA_ALGORITHM)</description>
        </item>
        <item>
          <description>L"ECDSA" (SSL_ECDSA_ALGORITHM)</description>
        </item>
      </list>This parameter can be <b>NULL</b> if you want to check only whether the hashing algorithm is strong.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. This function has the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input arguments is not correct.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A specified algorithm is not supported.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertIsValidCRLForCertificate">
    <summary>The <b>CertIsValidCRLForCertificate</b> function checks a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CRL</a> to find out if it is a CRL that would include a specific certificate if that certificate were revoked. If the CRL has an issuing distribution point (IDP) extension, the function checks whether that IDP is valid for the certificate being checked.</summary>
    <param name="pCert">A pointer to a certificate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>.</param>
    <param name="pCrl">A pointer to a CRL. The function checks this CRL to determine whether it could contain the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> pointed to by <i>pCert</i>. The function does not look for the certificate in the CRL.</param>
    <param name="dwFlags">Currently not used and must be set to zero.</param>
    <param name="pvReserved">Currently not used and must be set to <b>NULL</b>.</param>
    <returns>The function returns <b>TRUE</b> if the CRL is a valid CRL to be searched for the specific certificate. It returns <b>FALSE</b> if the CRL is not a valid CRL for searching for the certificate.</returns>
  </member>
  <member name="Windows.CertNameToStr">
    <summary>
      <para>The <b>CertNameToStr</b> function converts an encoded name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to a null-terminated character string.</para>
      <para>The string representation follows the distinguished name specifications in <a href="https://www.ietf.org/rfc/rfc1779.txt">RFC 1779</a>. The exceptions to this rule are listed in the Remarks section, below.</para>
    </summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the name. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pName">A pointer to the<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to be converted.</param>
    <param name="dwStrType">
      <para>This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) are discarded. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie + Programmer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are included with an equal sign (=) separator from their attribute value. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign followed by a space (+ ).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are converted to their <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> key names; otherwise, they are the same as <b>CERT_OID_NAME_STR</b>. If an OID does not have a corresponding X.500 name, the OID is used with a prefix of OID. <para>The RDN value is quoted if it contains leading or trailing white space or one of the following characters:</para><list type="bullet"><item><description>Comma (,)</description></item><item><description>Plus sign (+)</description></item><item><description>Equal sign (=)</description></item><item><description>Inch mark (")</description></item><item><description>Backslash followed by the letter n (\n)</description></item><item><description>Less than sign (&lt;)</description></item><item><description>Greater than sign (&gt;)</description></item><item><description>Number sign (#)</description></item><item><description>Semicolon (;)</description></item></list>The quotation character is an inch mark ("). If the RDN value contains an inch mark, it is enclosed within quotation marks ("").</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed by the letter n (\r\n) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Disable quoting.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG</b></term></listheader><listheader><term>0x00010000</term></listheader></list></description><description>By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the name pointed to by the <i>pName</i> parameter contains an email RDN, and the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a>, the name is converted to the Unicode equivalent.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="psz">A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the <i>csz</i> parameter.</param>
    <param name="csz">The size, in characters, of the <i>psz</i> buffer. The size must include the terminating null character.</param>
    <returns>
      <para>Returns the number of characters converted, including the terminating null character.</para>
      <para>If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</para>
    </returns>
  </member>
  <member name="Windows.CertNameToStrA">
    <summary>
      <para>The <b>CertNameToStr</b> function converts an encoded name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to a null-terminated character string.</para>
      <para>The string representation follows the distinguished name specifications in <a href="https://www.ietf.org/rfc/rfc1779.txt">RFC 1779</a>. The exceptions to this rule are listed in the Remarks section, below.</para>
    </summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the name. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pName">A pointer to the<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to be converted.</param>
    <param name="dwStrType">
      <para>This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) are discarded. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie + Programmer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are included with an equal sign (=) separator from their attribute value. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign followed by a space (+ ).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are converted to their <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> key names; otherwise, they are the same as <b>CERT_OID_NAME_STR</b>. If an OID does not have a corresponding X.500 name, the OID is used with a prefix of OID. <para>The RDN value is quoted if it contains leading or trailing white space or one of the following characters:</para><list type="bullet"><item><description>Comma (,)</description></item><item><description>Plus sign (+)</description></item><item><description>Equal sign (=)</description></item><item><description>Inch mark (")</description></item><item><description>Backslash followed by the letter n (\n)</description></item><item><description>Less than sign (&lt;)</description></item><item><description>Greater than sign (&gt;)</description></item><item><description>Number sign (#)</description></item><item><description>Semicolon (;)</description></item></list>The quotation character is an inch mark ("). If the RDN value contains an inch mark, it is enclosed within quotation marks ("").</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed by the letter n (\r\n) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Disable quoting.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG</b></term></listheader><listheader><term>0x00010000</term></listheader></list></description><description>By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the name pointed to by the <i>pName</i> parameter contains an email RDN, and the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a>, the name is converted to the Unicode equivalent.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="psz">A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the <i>csz</i> parameter.</param>
    <param name="csz">The size, in characters, of the <i>psz</i> buffer. The size must include the terminating null character.</param>
    <returns>
      <para>Returns the number of characters converted, including the terminating null character.</para>
      <para>If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</para>
    </returns>
  </member>
  <member name="Windows.CertNameToStrW">
    <summary>
      <para>The <b>CertNameToStr</b> function converts an encoded name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to a null-terminated character string.</para>
      <para>The string representation follows the distinguished name specifications in <a href="https://www.ietf.org/rfc/rfc1779.txt">RFC 1779</a>. The exceptions to this rule are listed in the Remarks section, below.</para>
    </summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the name. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pName">A pointer to the<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to be converted.</param>
    <param name="dwStrType">
      <para>This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) are discarded. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie + Programmer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are included with an equal sign (=) separator from their attribute value. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign followed by a space (+ ).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are converted to their <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> key names; otherwise, they are the same as <b>CERT_OID_NAME_STR</b>. If an OID does not have a corresponding X.500 name, the OID is used with a prefix of OID. <para>The RDN value is quoted if it contains leading or trailing white space or one of the following characters:</para><list type="bullet"><item><description>Comma (,)</description></item><item><description>Plus sign (+)</description></item><item><description>Equal sign (=)</description></item><item><description>Inch mark (")</description></item><item><description>Backslash followed by the letter n (\n)</description></item><item><description>Less than sign (&lt;)</description></item><item><description>Greater than sign (&gt;)</description></item><item><description>Number sign (#)</description></item><item><description>Semicolon (;)</description></item></list>The quotation character is an inch mark ("). If the RDN value contains an inch mark, it is enclosed within quotation marks ("").</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed by the letter n (\r\n) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Disable quoting.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG</b></term></listheader><listheader><term>0x00010000</term></listheader></list></description><description>By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the name pointed to by the <i>pName</i> parameter contains an email RDN, and the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a>, the name is converted to the Unicode equivalent.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="psz">A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the <i>csz</i> parameter.</param>
    <param name="csz">The size, in characters, of the <i>psz</i> buffer. The size must include the terminating null character.</param>
    <returns>
      <para>Returns the number of characters converted, including the terminating null character.</para>
      <para>If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</para>
    </returns>
  </member>
  <member name="Windows.CertNameToStr">
    <summary>
      <para>The <b>CertNameToStr</b> function converts an encoded name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to a null-terminated character string.</para>
      <para>The string representation follows the distinguished name specifications in <a href="https://www.ietf.org/rfc/rfc1779.txt">RFC 1779</a>. The exceptions to this rule are listed in the Remarks section, below.</para>
    </summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the name. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pName">A pointer to the<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to be converted.</param>
    <param name="dwStrType">
      <para>This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) are discarded. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie + Programmer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are included with an equal sign (=) separator from their attribute value. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign followed by a space (+ ).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are converted to their <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> key names; otherwise, they are the same as <b>CERT_OID_NAME_STR</b>. If an OID does not have a corresponding X.500 name, the OID is used with a prefix of OID. <para>The RDN value is quoted if it contains leading or trailing white space or one of the following characters:</para><list type="bullet"><item><description>Comma (,)</description></item><item><description>Plus sign (+)</description></item><item><description>Equal sign (=)</description></item><item><description>Inch mark (")</description></item><item><description>Backslash followed by the letter n (\n)</description></item><item><description>Less than sign (&lt;)</description></item><item><description>Greater than sign (&gt;)</description></item><item><description>Number sign (#)</description></item><item><description>Semicolon (;)</description></item></list>The quotation character is an inch mark ("). If the RDN value contains an inch mark, it is enclosed within quotation marks ("").</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed by the letter n (\r\n) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Disable quoting.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG</b></term></listheader><listheader><term>0x00010000</term></listheader></list></description><description>By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the name pointed to by the <i>pName</i> parameter contains an email RDN, and the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a>, the name is converted to the Unicode equivalent.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="psz">A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the <i>csz</i> parameter.</param>
    <param name="csz">The size, in characters, of the <i>psz</i> buffer. The size must include the terminating null character.</param>
    <returns>
      <para>Returns the number of characters converted, including the terminating null character.</para>
      <para>If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</para>
    </returns>
  </member>
  <member name="Windows.CertNameToStrA">
    <summary>
      <para>The <b>CertNameToStr</b> function converts an encoded name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to a null-terminated character string.</para>
      <para>The string representation follows the distinguished name specifications in <a href="https://www.ietf.org/rfc/rfc1779.txt">RFC 1779</a>. The exceptions to this rule are listed in the Remarks section, below.</para>
    </summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the name. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pName">A pointer to the<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to be converted.</param>
    <param name="dwStrType">
      <para>This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) are discarded. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie + Programmer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are included with an equal sign (=) separator from their attribute value. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign followed by a space (+ ).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are converted to their <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> key names; otherwise, they are the same as <b>CERT_OID_NAME_STR</b>. If an OID does not have a corresponding X.500 name, the OID is used with a prefix of OID. <para>The RDN value is quoted if it contains leading or trailing white space or one of the following characters:</para><list type="bullet"><item><description>Comma (,)</description></item><item><description>Plus sign (+)</description></item><item><description>Equal sign (=)</description></item><item><description>Inch mark (")</description></item><item><description>Backslash followed by the letter n (\n)</description></item><item><description>Less than sign (&lt;)</description></item><item><description>Greater than sign (&gt;)</description></item><item><description>Number sign (#)</description></item><item><description>Semicolon (;)</description></item></list>The quotation character is an inch mark ("). If the RDN value contains an inch mark, it is enclosed within quotation marks ("").</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed by the letter n (\r\n) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Disable quoting.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG</b></term></listheader><listheader><term>0x00010000</term></listheader></list></description><description>By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the name pointed to by the <i>pName</i> parameter contains an email RDN, and the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a>, the name is converted to the Unicode equivalent.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="psz">A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the <i>csz</i> parameter.</param>
    <param name="csz">The size, in characters, of the <i>psz</i> buffer. The size must include the terminating null character.</param>
    <returns>
      <para>Returns the number of characters converted, including the terminating null character.</para>
      <para>If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</para>
    </returns>
  </member>
  <member name="Windows.CertNameToStrW">
    <summary>
      <para>The <b>CertNameToStr</b> function converts an encoded name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to a null-terminated character string.</para>
      <para>The string representation follows the distinguished name specifications in <a href="https://www.ietf.org/rfc/rfc1779.txt">RFC 1779</a>. The exceptions to this rule are listed in the Remarks section, below.</para>
    </summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the name. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pName">A pointer to the<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_NAME_BLOB</a> structure to be converted.</param>
    <param name="dwStrType">
      <para>This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) are discarded. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign enclosed within spaces ( + ), for example, Microsoft, Kim Abercrombie + Programmer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are included with an equal sign (=) separator from their attribute value. <see cref="CERT_RDN" /> entries are separated by a comma followed by a space (, ). Multiple attributes in a <b>CERT_RDN</b> are separated by a plus sign followed by a space (+ ).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>OIDs are converted to their <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> key names; otherwise, they are the same as <b>CERT_OID_NAME_STR</b>. If an OID does not have a corresponding X.500 name, the OID is used with a prefix of OID. <para>The RDN value is quoted if it contains leading or trailing white space or one of the following characters:</para><list type="bullet"><item><description>Comma (,)</description></item><item><description>Plus sign (+)</description></item><item><description>Equal sign (=)</description></item><item><description>Inch mark (")</description></item><item><description>Backslash followed by the letter n (\n)</description></item><item><description>Less than sign (&lt;)</description></item><item><description>Greater than sign (&gt;)</description></item><item><description>Number sign (#)</description></item><item><description>Semicolon (;)</description></item></list>The quotation character is an inch mark ("). If the RDN value contains an inch mark, it is enclosed within quotation marks ("").</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed by the letter n (\r\n) separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Disable quoting.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in the distinguished name string is reversed after decoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG</b></term></listheader><listheader><term>0x00010000</term></listheader></list></description><description>By default, a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to skip the initial attempt to decode as UTF8.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the name pointed to by the <i>pName</i> parameter contains an email RDN, and the host name portion of the email address contains a Punycode encoded <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a>, the name is converted to the Unicode equivalent.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="psz">A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the <i>csz</i> parameter.</param>
    <param name="csz">The size, in characters, of the <i>psz</i> buffer. The size must include the terminating null character.</param>
    <returns>
      <para>Returns the number of characters converted, including the terminating null character.</para>
      <para>If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</para>
    </returns>
  </member>
  <member name="Windows.CertOIDToAlgId">
    <summary>
      <para>Use the <see cref="CryptFindOIDInfo" /> function instead of this function because <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> identifiers are no longer supported in CNG. Use the <b>CRYPT_OID_INFO_OID_KEY</b> value in the <i>dwKeyType</i> parameter of the <see cref="CryptFindOIDInfo" /> function instead.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The <b>CertOIDToAlgId</b> function converts the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) string to the CryptoAPI algorithm identifier (<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a>).</para>
    </summary>
    <param name="pszObjId">Pointer to the ASN.1 OID to be converted to an algorithm identifier.</param>
    <returns>Returns the<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> that corresponds to the object identifier (OID) or zero if no <b>ALG_ID</b> corresponds to the OID.</returns>
  </member>
  <member name="Windows.CertOpenServerOcspResponse">
    <summary>The <b>CertOpenServerOcspResponse</b> function opens a handle to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) response associated with a server certificate chain.</summary>
    <param name="pChainContext">The address of a <see cref="CERT_CHAIN_CONTEXT" /> structure that contains the certificate chain.</param>
    <param name="dwFlags">
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>This API will try to retrieve an initial OCSP response before returning, which means it will block during the retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag to return immediately without making the initial synchronous retrieval. 	</description>
        </listheader>
      </list>
    </param>
    <param name="pOpenPara">This parameter is not used and must be <b>NULL</b>.</param>
    <returns>
      <para>Returns a handle to the OCSP response associated with a server certificate chain if successful; otherwise, <b>NULL</b>. This handle must be passed to the <see cref="CertCloseServerOcspResponse" /> function when it is no longer needed.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Possible error codes returned by the<b>GetLastError</b> function include, but are not limited to, the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_IN_REVOCATION_DATABASE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The end certificate does not contain an OCSP authority information access (AIA) URL.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertOpenStore">
    <summary>The <b>CertOpenStore</b> function opens a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> by using a specified store provider type. While this function can open a certificate store for most purposes,<see cref="CertOpenSystemStore" /> is recommended to open the most common certificate stores. <b>CertOpenStore</b> is required for more complex options and special cases.</summary>
    <param name="lpszStoreProvider">
      <para>A pointer to a null-terminated ANSI string that contains the store provider type.</para>
      <para>The following values represent the predefined store types. The store provider type determines the contents of the <i>pvPara</i> parameter and the use and meaning of the high word of the <i>dwFlags</i> parameter. Additional store providers can be installed or registered by using the <see cref="CryptInstallOIDFunctionAddress" /> or<see cref="CryptRegisterOIDFunction" /> function. For more information about adding store providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/extending-certopenstore-functionality">Extending CertOpenStore Functionality</a>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_COLLECTION</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_COLLECTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Opens a store that will be a collection of other stores. Stores are added to or removed from the collection by using <see cref="CertAddStoreToCollection" /> and <see cref="CertRemoveStoreFromCollection" />. When a store is added to a collection, all certificates, CRLs, and CTLs in that store become available to searches or enumerations of the collection store.<para>The high word of <i>dwFlags</i> is set to zero.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter must be <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_FILE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs read from a specified open file. This provider expects the file to contain only a serialized store and not either PKCS #7 signed messages or a single encoded certificate.<para>The file pointer must be positioned at the beginning of the serialized store information. After the data in the serialized store has been loaded into the certificate store, the file pointer is positioned at the beginning of any data that can follow the serialized store data in the file. If CERT_FILE_STORE_COMMIT_ENABLE is set in <i>dwFlags</i>, the file handle is duplicated and the store is always committed as a serialized store. The file is not closed when the store is closed.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter must contain a pointer to the handle of a file opened by using <see cref="CreateFile" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_FILENAME_A</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from a file. The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate.<para>The <i>dwEncodingType</i> parameter must contain the encoding types to be used with both messages and certificates. If the file contains an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> encoded certificate, the open operation fails and a call to the <see cref="GetLastError" /> function will return <b>ERROR_ACCESS_DENIED</b>. If the <b>CERT_FILE_STORE_COMMIT_ENABLE</b> flag is set in <i>dwFlags</i>, the <i>dwCreationDisposition</i> value passed to <see cref="CreateFile" /> is as follows:</para><list type="bullet"><item><description>If the <b>CERT_STORE_CREATE_NEW_FLAG</b> flag is set, <see cref="CreateFile" /> uses <b>CREATE_NEW</b>.</description></item><item><description>If the <b>CERT_STORE_OPEN_EXISTING_FLAG</b> flag is set, <see cref="CreateFile" /> uses <b>OPEN_EXISTING</b>.</description></item><item><description>For all other settings of <i>dwFlags</i>, <see cref="CreateFile" /> uses <b>OPEN_ALWAYS</b>.</description></item></list><para>If <i>dwFlags</i> includes <b>CERT_FILE_STORE_COMMIT_ENABLE</b>, the file is committed as either a PKCS #7 or a serialized store depending on the file type opened. If the file was empty or if the file name has either a .p7c or .spc extension, the file is committed as a PKCS #7. Otherwise, the file is committed as a serialized store.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter must contain a pointer to null-terminated ANSI string that contains the name of an existing, unopened file.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_FILENAME(_W)</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_FILENAME(_W)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Same as <b>CERT_STORE_PROV_FILENAME_A</b>.<para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter must contain a pointer to null-terminated Unicode string that contains the name of an existing, unopened file.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_LDAP(_W)</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_LDAP(_W)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from the results of an LDAP query.<para>To perform write operations on the store, the query string must specify a BASE query with no filter and a single attribute.</para><para><b><i>pvPara</i> value:  </b>If the <i>dwFlags</i> parameter contains <b>CERT_LDAP_STORE_OPENED_FLAG</b>, set <i>pvPara</i> to the address of a <see cref="CERT_LDAP_STORE_OPENED_PARA" /> structure that specifies the established LDAP session to use.</para><para>Otherwise, set <i>pvPara</i> to point to a null-terminated Unicode string that contains the LDAP query string. For more information about LDAP query strings, see <a href="https://docs.microsoft.com//windows/desktop/ADSI/ldap-dialect">LDAP Dialect</a>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_MEMORY</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a certificate store in cached memory. No certificates, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs), or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs) are initially loaded into the store. Typically used to create a temporary store.<para>Any addition of certificates, CRLs, or CTLs or changes in properties of certificates, CRLs, or CTLs in a memory store are not automatically saved. They can be saved to a file or to a memory <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> by using <see cref="CertSaveStore" />.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter is not used.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_MSG</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from the specified cryptographic message. The <i>dwEncodingType</i> parameter must contain the encoding types used with both messages and certificates.<para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter contains an <b>HCRYPTMSG</b> handle of the encoded message, returned by a call to <see cref="CryptMsgOpenToDecode" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_PHYSICAL(_W)</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_PHYSICAL(_W)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from a specified physical store that is a member of a logical system store.<para>Two names are separated with an intervening backslash (\), for example "Root.Default". Here, "Root" is the name of the system store and ".Default" is the name of the physical store. The system and physical store names cannot contain any backslashes. The high word of <i>dwFlags</i> indicates the system store location, usually CERT_SYSTEM_STORE_CURRENT_USER. For more information, see <i>dwFlags</i> later in this topic and see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/system-store-locations">System Store Locations</a>. Some physical store locations can be opened remotely.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a null-terminated Unicode string that contains both the system store name and physical names.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_PKCS7</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_PKCS7</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from an encoded PKCS #7 signed message. The <i>dwEncodingType</i> parameter must specify the encoding types to be used with both messages and certificates.<para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure that represents the encoded message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_PKCS12</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_PKCS12</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with the contents of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">PKCS #12</a> packet.<para>If the PKCS #12 packet is protected with a NULL or empty password, this function will succeed in opening the store.</para><para>Beginning with Windows 8 and Windows Server 2012, if the password embedded in the PFX packet was protected to an Active Directory (AD) principal and the current user, as a member of that principal, has permission to decrypt the password, this function will succeed in opening the store. For more information, see the <i>pvPara</i> parameter and the <b>PKCS12_PROTECT_TO_DOMAIN_SIDS</b> flag of the <see cref="PFXExportCertStoreEx" /> function.</para><para>You can protect PFX passwords to an AD principal beginning in Windows 8 and Windows Server 2012.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure that represents the PKCS #12 packet.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_REG</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from a registry subkey.<para>This provider opens or creates the registry subkeys <b>Certificates</b>, <b>CRLs</b>, and <b>CTLs</b> under the key passed in <i>pvPara</i>. The input key is not closed by the provider. Before returning, the provider opens its own copy of the key passed in <i>pvPara</i>. If CERT_STORE_READONLY_FLAG is set in the low word of <i>dwFlags</i>, registry subkeys are opened by using the <see cref="RegOpenKey" /> with KEY_READ_ACCESS. Otherwise, registry subkeys are created by using <see cref="RegCreateKey" /> with KEY_ALL_ACCESS. Any changes to the contents of the opened store are immediately persisted to the registry. However, if CERT_STORE_READONLY_FLAG is set in the low word of <i>dwFlags</i>, any attempt to add to the contents of the store or to change a context's property results in an error with <see cref="GetLastError" /> returning the E_ACCESSDENIED code.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter contains the handle of an open registry key.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_SERIALIZED</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_SERIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from a memory location that contains a serialized store.<para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure that contains the serialized memory BLOB.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_SMART_CARD(_W)</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_SMART_CARD(_W)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not currently used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_SYSTEM_A</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from the specified system store.<para>The system store is a logical, collection store that consists of one or more physical stores. A physical store associated with a system store is registered with the <see cref="CertRegisterPhysicalStore" /> function. After the system store is opened, all of the physical stores that are associated with it are also opened by calls to <b>CertOpenStore</b> and are added to the system store collection by using the <see cref="CertAddStoreToCollection" /> function. The high word of <i>dwFlags</i> indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For details about registry locations, see <i>dwFlags</i> later in this topic and <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/system-store-locations">System Store Locations</a>. Some system store locations can be opened remotely; for more information, see System Store Locations.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a null-terminated ANSI string that contains a system store name, such as "My" or "Root".</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_SYSTEM(_W)</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_SYSTEM(_W)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Same as <b>CERT_STORE_PROV_SYSTEM_A</b>.<para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a null-terminated Unicode string that contains a system store name, such as "My" or "Root".</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>CERT_STORE_PROV_SYSTEM_REGISTRY_A</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Initializes the store with certificates, CRLs, and CTLs from a physical registry store. The physical store is not opened as a collection store. Enumerations and searches go through only the certificates, CRLs, and CTLs in that one physical store.<para>The high word of <i>dwFlags</i> indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For more information, see <i>dwFlags</i> later in this topic. Some system store locations can be open remotely; for more information, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/system-store-locations">System Store Locations</a>.</para><para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a null-terminated ANSI string that contains a system store name, such as "My" or "Root".</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b> CERT_STORE_PROV_SYSTEM_REGISTRY(_W)</b>
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <b>sz_CERT_STORE_PROV_SYSTEM_REGISTRY(_W)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Same as <b>CERT_STORE_PROV_SYSTEM_REGISTRY_A</b>.<para><b><i>pvPara</i> value:  </b>The <i>pvPara</i> parameter points to a null-terminated Unicode string that contains a system store name, such as "My" or "Root".</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwEncodingType">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a>. Encoding is used only when the <i>dwSaveAs</i> parameter of the <see cref="CertSaveStore" /> function contains <b>CERT_STORE_SAVE_AS_PKCS7</b>. Otherwise, the <i>dwMsgAndCertEncodingType</i> parameter is not used.</para>
      <para>This parameter is only applicable when the <b>CERT_STORE_PROV_MSG</b>, <b>CERT_STORE_PROV_PKCS7</b>, or <b>CERT_STORE_PROV_FILENAME</b> provider type is specified in the <i>lpszStoreProvider</i> parameter. For all other provider types, this parameter is unused and should be set to zero.</para>
      <para>This parameter can be a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PKCS_7_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>65536 (0x10000)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies PKCS #7 message encoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle to a cryptographic provider. Passing <b>NULL</b> for this parameter causes an appropriate, default provider to be used. Using the default provider is recommended. The default or specified cryptographic provider is used for all store functions that verify the signature of a subject certificate or CRL.This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="dwFlags">
      <para>These values consist of high-word and low-word values combined by using a bitwise-<b>OR</b> operation.</para>
      <para>The low-word portion of <i>dwFlags</i> controls a variety of general characteristics of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> opened. This portion can be used with all store provider types. The low-word portion of <i>dwFlags</i> can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_BACKUP_RESTORE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the thread's SE_BACKUP_NAME and SE_RESTORE_NAME <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> to open registry or file-based system stores. If the thread does not have these privileges, this function must fail with an access denied error.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CREATE_NEW_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A new store is created if one did not exist. The function fails if the store already exists.<para>If neither <b>CERT_STORE_OPEN_EXISTING_FLAG</b> nor <b>CERT_STORE_CREATE_NEW_FLAG</b> is set, a store is opened if it exists or is created and opened if it did not already exist.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Defer closing of the store's provider until all certificates, CRLs, or CTLs obtained from the store are no longer in use. The store is actually closed when the last certificate, CRL, or CTL obtained from the store is freed. Any changes made to properties of these certificates, CRLs, and CTLs, even after the call to <see cref="CertCloseStore" />, are persisted.<para>If this flag is not set and certificates, CRLs, or CTLs obtained from the store are still in use, any changes to the properties of those certificates, CRLs, and CTLs will not be persisted.</para><para>If this function is called with <b>CERT_CLOSE_STORE_FORCE_FLAG</b>, <b>CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG</b> is ignored.</para><para>When this flag is set and a non-<b>NULL</b><i>hCryptProv</i> parameter value is passed, that provider will continue to be used even after the call to this function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_DELETE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The store is deleted instead of being opened. This function returns <b>NULL</b> for both success and failure of the deletion. To determine the success of the deletion, call <see cref="GetLastError" />, which returns zero if the store was deleted and a nonzero value if it was not deleted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_ENUM_ARCHIVED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Normally, an enumeration of all certificates in the store will ignore any certificate with the <b>CERT_ARCHIVED_PROP_ID</b> property set. If this flag is set, an enumeration of the certificates in the store will contain all of the certificates in the store, including those that have the <b>CERT_ARCHIVED_PROP_ID</b> property.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_MAXIMUM_ALLOWED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Open the store with the maximum set of allowed permissions. If this flag is specified, registry stores are first opened with write access and if that fails, they are reopened with read-only access.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_NO_CRYPT_RELEASE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used when the <i>hCryptProv</i> parameter is <b>NULL</b>. This flag is only valid when a non-<b>NULL</b> CSP handle is passed as the <i>hCryptProv</i> parameter. Setting this flag prevents the automatic release of a nondefault CSP when the certificate store is closed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_OPEN_EXISTING_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Only open an existing store. If the store does not exist, the function fails.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_READONLY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Open the store in read-only mode. Any attempt to change the contents of the store will result in an error. When this flag is set and a registry based store provider is being used, the registry subkeys are opened by using <see cref="RegOpenKey" /> with <b>KEY_READ_ACCESS</b>. Otherwise, the registry subkeys are created by using <see cref="RegCreateKey" /> with <b>KEY_ALL_ACCESS</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SET_LOCALIZED_NAME_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is supported, the provider sets the store's <b>CERT_STORE_LOCALIZED_NAME_PROP_ID</b> property. The localized name can be retrieved by calling the <see cref="CertGetStoreProperty" /> function with <i>dwPropID</i> set to <b>CERT_STORE_LOCALIZED_NAME_PROP_ID</b>. This flag is supported for providers of types <b>CERT_STORE_PROV_FILENAME</b>, <b>CERT_STORE_PROV_SYSTEM</b>, <b>CERT_STORE_PROV_SYSTEM_REGISTRY</b>, and <b>CERT_STORE_PROV_PHYSICAL_W</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SHARE_CONTEXT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When opening a store multiple times, you can set this flag to ensure efficient memory usage by reusing the memory for the encoded parts of a certificate, CRL, or CTL context across the opened instances of the stores.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_UPDATE_KEYID_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Lists of key identifiers exist within CurrentUser and LocalMachine. These key identifiers have properties much like the properties of certificates. If the <b>CERT_STORE_UPDATE_KEYID_FLAG</b> is set, then for every key identifier in the store's location that has a <b>CERT_KEY_PROV_INFO_PROP_ID</b> property, that property is automatically updated from the key identifier property <b>CERT_KEY_PROV_INFO_PROP_ID</b> or the <b>CERT_KEY_IDENTIFIER_PROP_ID</b> of the certificate related to that key identifier.</description>
        </listheader>
      </list> <para>The <b>CERT_STORE_PROV_SYSTEM</b>,<b>CERT_STORE_PROV_SYSTEM_REGISTRY</b>, and<b>CERT_STORE_PROV_PHYSICAL</b> provider types use the following high words of <i>dwFlags</i> to specify system store registry locations:</para><h4>CERT_SYSTEM_STORE_CURRENT_SERVICE</h4><h4>CERT_SYSTEM_STORE_CURRENT_USER</h4><h4>CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY</h4><h4>CERT_SYSTEM_STORE_LOCAL_MACHINE</h4><h4>CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE</h4><h4>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</h4><h4>CERT_SYSTEM_STORE_SERVICES</h4><h4>CERT_SYSTEM_STORE_USERS</h4><para>By default, a system store location is opened relative to the <b>HKEY_CURRENT_USER</b>, <b>HKEY_LOCAL_MACHINE</b>, or <b>HKEY_USERS</b> predefined registry key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/system-store-locations">System Store Locations</a>.</para><para>The following high-word flags override this default behavior.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_SYSTEM_STORE_RELOCATE_FLAG</b></term></listheader></list></description><description>When set, <i>pvPara</i> must contain a pointer to a <see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure rather than a string. The structure indicates both the name of the store and its location in the registry.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_SYSTEM_STORE_UNPROTECTED_FLAG</b></term></listheader></list></description><description>By default, when the CurrentUser "Root" store is opened, any SystemRegistry roots not on the protected root list are deleted from the cache before this function returns. When this flag is set, this default is overridden and all of the roots in the SystemRegistry are returned and no check of the protected root list is made.</description></listheader></list> <para>The <b>CERT_STORE_PROV_REGISTRY</b> provider uses the following high-word flags.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_REGISTRY_STORE_REMOTE_FLAG</b></term></listheader></list></description><description><i>pvPara</i> contains a handle to a registry key on a remote computer. To access a registry key on a remote computer, security permissions on the remote computer must be set to allow access. For more information, see Remarks.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_REGISTRY_STORE_SERIALIZED_FLAG</b></term></listheader></list></description><description>The <b>CERT_STORE_PROV_REG</b> provider saves certificates, CRLs, and CTLs in a single serialized store subkey instead of performing the default save operation. The default is that each certificate, CRL, or CTL is saved as a separate registry subkey under the appropriate subkey.<para>This flag is mainly used for stores downloaded from the group policy template (GPT), such as the CurrentUserGroupPolicy and LocalMachineGroupPolicy stores.</para><para>When <b>CERT_REGISTRY_STORE_SERIALIZED_FLAG</b> is set, store additions, deletions, or property changes are not persisted until there is a call to either<see cref="CertCloseStore" /> or<see cref="CertControlStore" /> using <b>CERT_STORE_CTRL_COMMIT</b>.</para></description></listheader></list> <para>The <b>CERT_STORE_PROV_FILE</b> and <b>CERT_STORE_PROV_FILENAME</b> provider types use the following high-word flags.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_FILE_STORE_COMMIT_ENABLE</b></term></listheader></list></description><description>Setting this flag commits any additions to the store or any changes made to properties of contexts in the store to the file store either when <see cref="CertCloseStore" /> is called or when <see cref="CertControlStore" /> is called with <b>CERT_STORE_CONTROL_COMMIT</b>.<para><b>CertOpenStore</b> fails with <b>E_INVALIDARG</b> if both <b>CERT_FILE_STORE_COMMIT_ENABLE</b> and <b>CERT_STORE_READONLY_FLAG</b> are set in <i>dwFlags</i>.</para></description></listheader></list> <para>The <b>CERT_STORE_PROV_LDAP</b> provider type uses the following high-word flags.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG</b></term></listheader></list></description><description>Performs an A-Record-only DNS lookup on the URL named in the <i>pvPara</i> parameter. This prevents false DNS queries from being generated when resolving URL host names. Use this flag when passing a host name as opposed to a domain name for the <i>pvPara</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_LDAP_STORE_OPENED_FLAG</b></term></listheader></list></description><description>Use this flag to use an existing LDAP session. When this flag is specified, the <i>pvPara</i> parameter is the address of a <see cref="CERT_LDAP_STORE_OPENED_PARA" /> structure that contains information about the LDAP session to use.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_LDAP_STORE_SIGN_FLAG</b></term></listheader></list></description><description>To provide integrity required by some applications, digitally sign all LDAP traffic to and from an LDAP server by using the Kerberos authentication protocol.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_LDAP_STORE_UNBIND_FLAG</b></term></listheader></list></description><description>Use this flag with the <b>CERT_LDAP_STORE_OPENED_FLAG</b> flag to cause the LDAP session to be unbound when the store is closed. The system will unbind the LDAP session by using the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/winldap/nf-winldap-ldap_unbind">ldap_unbind</a> function when the store is closed.</description></listheader></list></param>
    <param name="pvPara">A 32-bit value that can contain additional information for this function. The contents of this parameter depends on the value of the <i>lpszStoreProvider</i> and other parameters.</param>
    <returns>
      <para>If the function succeeds, the function returns a handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. When you have finished using the store, release the handle by calling the <see cref="CertCloseStore" /> function.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  <see cref="CreateFile" />, <see cref="ReadFile" />, or registry errors might be propagated and their error codes returned. <b>CertOpenStore</b> has a single error code of its own, the ERROR_FILE_NOT_FOUND code, which indicates that the function was unable to find the provider specified by the <i>lpszStoreProvider</i> parameter.</div>
    </returns>
  </member>
  <member name="Windows.CertOpenSystemStore">
    <summary>The <b>CertOpenSystemStore</b> function is a simplified function that opens the most common system <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use <see cref="CertOpenStore" />.</summary>
    <param name="hProv">
      <para>This parameter is not used and should be set to <b>0</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). Set <i>hProv</i> to <b>0</b> to use the default CSP. If <i>hProv</i> is not <b>0</b>, it must be a CSP handle created by using the <see cref="CryptAcquireContext" /> function.This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="szSubsystemProtocol">
      <para>A string that names a system store. If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used. <see cref="CertEnumSystemStore" /> can be used to list the names of existing system stores. Some example system stores are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Certification authority</a> certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A certificate store that holds certificates with associated private keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ROOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">Root certificates</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Software Publisher Certificate</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a handle to the certificate store.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call <see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called function <see cref="CertOpenStore" /> are propagated to this function.</div>
    </returns>
  </member>
  <member name="Windows.CertOpenSystemStoreA">
    <summary>The <b>CertOpenSystemStore</b> function is a simplified function that opens the most common system <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use <see cref="CertOpenStore" />.</summary>
    <param name="hProv">
      <para>This parameter is not used and should be set to <b>0</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). Set <i>hProv</i> to <b>0</b> to use the default CSP. If <i>hProv</i> is not <b>0</b>, it must be a CSP handle created by using the <see cref="CryptAcquireContext" /> function.This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="szSubsystemProtocol">
      <para>A string that names a system store. If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used. <see cref="CertEnumSystemStore" /> can be used to list the names of existing system stores. Some example system stores are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Certification authority</a> certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A certificate store that holds certificates with associated private keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ROOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">Root certificates</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Software Publisher Certificate</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a handle to the certificate store.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call <see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called function <see cref="CertOpenStore" /> are propagated to this function.</div>
    </returns>
  </member>
  <member name="Windows.CertOpenSystemStoreW">
    <summary>The <b>CertOpenSystemStore</b> function is a simplified function that opens the most common system <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use <see cref="CertOpenStore" />.</summary>
    <param name="hProv">
      <para>This parameter is not used and should be set to <b>0</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). Set <i>hProv</i> to <b>0</b> to use the default CSP. If <i>hProv</i> is not <b>0</b>, it must be a CSP handle created by using the <see cref="CryptAcquireContext" /> function.This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="szSubsystemProtocol">
      <para>A string that names a system store. If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used. <see cref="CertEnumSystemStore" /> can be used to list the names of existing system stores. Some example system stores are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Certification authority</a> certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A certificate store that holds certificates with associated private keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ROOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">Root certificates</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Software Publisher Certificate</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a handle to the certificate store.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call <see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called function <see cref="CertOpenStore" /> are propagated to this function.</div>
    </returns>
  </member>
  <member name="Windows.CertOpenSystemStore">
    <summary>The <b>CertOpenSystemStore</b> function is a simplified function that opens the most common system <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use <see cref="CertOpenStore" />.</summary>
    <param name="hProv">
      <para>This parameter is not used and should be set to <b>0</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). Set <i>hProv</i> to <b>0</b> to use the default CSP. If <i>hProv</i> is not <b>0</b>, it must be a CSP handle created by using the <see cref="CryptAcquireContext" /> function.This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="szSubsystemProtocol">
      <para>A string that names a system store. If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used. <see cref="CertEnumSystemStore" /> can be used to list the names of existing system stores. Some example system stores are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Certification authority</a> certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A certificate store that holds certificates with associated private keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ROOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">Root certificates</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Software Publisher Certificate</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a handle to the certificate store.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call <see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called function <see cref="CertOpenStore" /> are propagated to this function.</div>
    </returns>
  </member>
  <member name="Windows.CertOpenSystemStoreA">
    <summary>The <b>CertOpenSystemStore</b> function is a simplified function that opens the most common system <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use <see cref="CertOpenStore" />.</summary>
    <param name="hProv">
      <para>This parameter is not used and should be set to <b>0</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). Set <i>hProv</i> to <b>0</b> to use the default CSP. If <i>hProv</i> is not <b>0</b>, it must be a CSP handle created by using the <see cref="CryptAcquireContext" /> function.This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="szSubsystemProtocol">
      <para>A string that names a system store. If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used. <see cref="CertEnumSystemStore" /> can be used to list the names of existing system stores. Some example system stores are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Certification authority</a> certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A certificate store that holds certificates with associated private keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ROOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">Root certificates</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Software Publisher Certificate</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a handle to the certificate store.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call <see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called function <see cref="CertOpenStore" /> are propagated to this function.</div>
    </returns>
  </member>
  <member name="Windows.CertOpenSystemStoreW">
    <summary>The <b>CertOpenSystemStore</b> function is a simplified function that opens the most common system <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use <see cref="CertOpenStore" />.</summary>
    <param name="hProv">
      <para>This parameter is not used and should be set to <b>0</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). Set <i>hProv</i> to <b>0</b> to use the default CSP. If <i>hProv</i> is not <b>0</b>, it must be a CSP handle created by using the <see cref="CryptAcquireContext" /> function.This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="szSubsystemProtocol">
      <para>A string that names a system store. If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used. <see cref="CertEnumSystemStore" /> can be used to list the names of existing system stores. Some example system stores are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Certification authority</a> certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A certificate store that holds certificates with associated private keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ROOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">Root certificates</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Software Publisher Certificate</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a handle to the certificate store.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call <see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called function <see cref="CertOpenStore" /> are propagated to this function.</div>
    </returns>
  </member>
  <member name="Windows.CertRDNValueToStr">
    <summary>The <b>CertRDNValueToStr</b> function converts a name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> to a <b>null</b>-terminated character string.</summary>
    <param name="dwValueType">
      <para>Indicates the kind of RDN value to be converted.</para>
      <para>This can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>CERT_RDN_ANY_TYPE</description>
        </item>
        <item>
          <description>CERT_RDN_ENCODED_BLOB</description>
        </item>
        <item>
          <description>CERT_RDN_OCTET_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_NUMERIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_PRINTABLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_TELETEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_T61_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VIDEOTEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_IA5_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GRAPHIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VISIBLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_ISO646_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GENERAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNIVERSAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_INT4_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_BMP_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNICODE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UTF8_STRING</description>
        </item>
      </list>
    </param>
    <param name="pValue">A pointer to an<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> of a type appropriate for the <i>dwValueType</i>.</param>
    <param name="psz">A pointer to a buffer to receive the returned string.</param>
    <param name="csz">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating <b>NULL</b> character. If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</returns>
  </member>
  <member name="Windows.CertRDNValueToStrA">
    <summary>The <b>CertRDNValueToStr</b> function converts a name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> to a <b>null</b>-terminated character string.</summary>
    <param name="dwValueType">
      <para>Indicates the kind of RDN value to be converted.</para>
      <para>This can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>CERT_RDN_ANY_TYPE</description>
        </item>
        <item>
          <description>CERT_RDN_ENCODED_BLOB</description>
        </item>
        <item>
          <description>CERT_RDN_OCTET_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_NUMERIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_PRINTABLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_TELETEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_T61_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VIDEOTEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_IA5_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GRAPHIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VISIBLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_ISO646_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GENERAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNIVERSAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_INT4_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_BMP_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNICODE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UTF8_STRING</description>
        </item>
      </list>
    </param>
    <param name="pValue">A pointer to an<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> of a type appropriate for the <i>dwValueType</i>.</param>
    <param name="psz">A pointer to a buffer to receive the returned string.</param>
    <param name="csz">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating <b>NULL</b> character. If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</returns>
  </member>
  <member name="Windows.CertRDNValueToStrW">
    <summary>The <b>CertRDNValueToStr</b> function converts a name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> to a <b>null</b>-terminated character string.</summary>
    <param name="dwValueType">
      <para>Indicates the kind of RDN value to be converted.</para>
      <para>This can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>CERT_RDN_ANY_TYPE</description>
        </item>
        <item>
          <description>CERT_RDN_ENCODED_BLOB</description>
        </item>
        <item>
          <description>CERT_RDN_OCTET_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_NUMERIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_PRINTABLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_TELETEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_T61_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VIDEOTEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_IA5_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GRAPHIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VISIBLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_ISO646_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GENERAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNIVERSAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_INT4_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_BMP_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNICODE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UTF8_STRING</description>
        </item>
      </list>
    </param>
    <param name="pValue">A pointer to an<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> of a type appropriate for the <i>dwValueType</i>.</param>
    <param name="psz">A pointer to a buffer to receive the returned string.</param>
    <param name="csz">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating <b>NULL</b> character. If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</returns>
  </member>
  <member name="Windows.CertRDNValueToStr">
    <summary>The <b>CertRDNValueToStr</b> function converts a name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> to a <b>null</b>-terminated character string.</summary>
    <param name="dwValueType">
      <para>Indicates the kind of RDN value to be converted.</para>
      <para>This can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>CERT_RDN_ANY_TYPE</description>
        </item>
        <item>
          <description>CERT_RDN_ENCODED_BLOB</description>
        </item>
        <item>
          <description>CERT_RDN_OCTET_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_NUMERIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_PRINTABLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_TELETEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_T61_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VIDEOTEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_IA5_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GRAPHIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VISIBLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_ISO646_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GENERAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNIVERSAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_INT4_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_BMP_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNICODE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UTF8_STRING</description>
        </item>
      </list>
    </param>
    <param name="pValue">A pointer to an<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> of a type appropriate for the <i>dwValueType</i>.</param>
    <param name="psz">A pointer to a buffer to receive the returned string.</param>
    <param name="csz">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating <b>NULL</b> character. If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</returns>
  </member>
  <member name="Windows.CertRDNValueToStrA">
    <summary>The <b>CertRDNValueToStr</b> function converts a name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> to a <b>null</b>-terminated character string.</summary>
    <param name="dwValueType">
      <para>Indicates the kind of RDN value to be converted.</para>
      <para>This can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>CERT_RDN_ANY_TYPE</description>
        </item>
        <item>
          <description>CERT_RDN_ENCODED_BLOB</description>
        </item>
        <item>
          <description>CERT_RDN_OCTET_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_NUMERIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_PRINTABLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_TELETEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_T61_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VIDEOTEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_IA5_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GRAPHIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VISIBLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_ISO646_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GENERAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNIVERSAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_INT4_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_BMP_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNICODE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UTF8_STRING</description>
        </item>
      </list>
    </param>
    <param name="pValue">A pointer to an<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> of a type appropriate for the <i>dwValueType</i>.</param>
    <param name="psz">A pointer to a buffer to receive the returned string.</param>
    <param name="csz">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating <b>NULL</b> character. If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</returns>
  </member>
  <member name="Windows.CertRDNValueToStrW">
    <summary>The <b>CertRDNValueToStr</b> function converts a name in a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> to a <b>null</b>-terminated character string.</summary>
    <param name="dwValueType">
      <para>Indicates the kind of RDN value to be converted.</para>
      <para>This can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>CERT_RDN_ANY_TYPE</description>
        </item>
        <item>
          <description>CERT_RDN_ENCODED_BLOB</description>
        </item>
        <item>
          <description>CERT_RDN_OCTET_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_NUMERIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_PRINTABLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_TELETEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_T61_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VIDEOTEX_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_IA5_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GRAPHIC_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_VISIBLE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_ISO646_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_GENERAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNIVERSAL_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_INT4_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_BMP_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UNICODE_STRING</description>
        </item>
        <item>
          <description>CERT_RDN_UTF8_STRING</description>
        </item>
      </list>
    </param>
    <param name="pValue">A pointer to an<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_RDN_VALUE_BLOB</a> of a type appropriate for the <i>dwValueType</i>.</param>
    <param name="psz">A pointer to a buffer to receive the returned string.</param>
    <param name="csz">Size, in characters, allocated for the returned string. The size must include the terminating <b>NULL</b> character.</param>
    <returns>Returns the number of characters converted, including the terminating <b>NULL</b> character. If <i>psz</i> is <b>NULL</b> or <i>csz</i> is zero, returns the required size of the destination string.</returns>
  </member>
  <member name="Windows.CertRegisterPhysicalStore">
    <summary>The <b>CertRegisterPhysicalStore</b> function adds a physical store to a registry system store collection.</summary>
    <param name="pvSystemStore">The system store collection to which the physical store is added. This parameter points either to a <b>null</b>-terminated Unicode string or to a<see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure. For information about using the structure and on adding a ServiceName or ComputerName before the system store name string, see<see cref="CertRegisterSystemStore" />.</param>
    <param name="dwFlags">
      <para>The high word of the <i>dwFlags</i> parameter specifies the location of the system store. For information about defined high-word flags and appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see<see cref="CertRegisterSystemStore" />.</para>
      <para>The following low-word flags are also defined and can be combined with high-word flags using a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_RELOCATE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system store is not in its default registry location and the <i>pvSystemStore</i> parameter must be a pointer to a <see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_CREATE_NEW_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function fails if the physical store already exists in the store location.</description>
        </listheader>
      </list>
    </param>
    <param name="pwszStoreName">A pointer to a Unicode string that names the physical store to be added to the system store collection. To remove a physical store from the system store collection, call the <see cref="CertUnregisterPhysicalStore" /> function.</param>
    <param name="pStoreInfo">A pointer to a<see cref="CERT_PHYSICAL_STORE_INFO" /> structure that provides basic information about the physical store.</param>
    <param name="pvReserved">Reserved for future use and must be set to <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero.</para>
    </returns>
  </member>
  <member name="Windows.CertRegisterSystemStore">
    <summary>The <b>CertRegisterSystemStore</b> function registers a system store.</summary>
    <param name="pvSystemStore">
      <para>Identifies the system store to be registered. If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the <i>dwFlags</i> parameter, <i>pvSystemStore</i> points to a<see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure. Otherwise, it points to a <b>null</b>-terminated Unicode string that names the system store.</para>
      <para>With appropriate settings in <i>dwFlags</i>, the identified store can be a system store on a remote local computer. Stores on remote computers can be registered with the computer name as a prefix to the name of the system store. For example, a remote local computer store can be registered with <i>pvSystemStore</i> pointing to the string "\ComputerName\Trust" or "ComputerName\Trust".</para>
      <para>Leading "\" backslashes are optional before a ComputerName.</para>
    </param>
    <param name="dwFlags">
      <para>The high word of the <i>dwFlags</i> parameter is used to specify the location of the system store.</para>
      <para>The following high-word values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_CURRENT_SERVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSystemStore</i> can be a system store name that is prefixed with the ServiceName.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_CURRENT_USER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSystemStore</i> can be a system store name that is prefixed with the UserName.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_LOCAL_MACHINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSystemStore</i> can be a system store that is on a remote computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSystemStore</i> is a group policy store and can be on a remote computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_SERVICES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSystemStore</i> must be a system store name prefixed with the ServiceName.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_USERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSystemStore</i> must be a system store name that is prefixed with the UserName.</description>
        </listheader>
      </list> <para>Stores on remote computers can be registered for CERT_SYSTEM_STORE_LOCAL_MACHINE, CERT_SYSTEM_STORE_SERVICES, CERT_SYSTEM_STORE_USERS, or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY.</para><para>The following low-word values are also defined and can be combined using a bitwise-<b>OR</b> operation with high-word values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_SYSTEM_STORE_RELOCATE_FLAG</b></term></listheader></list></description><description>The system store is not in its default register location and <i>pvSystemStore</i> must be a pointer to a <see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_STORE_CREATE_NEW_FLAG</b></term></listheader></list></description><description>The function fails if the system store already exists in the store location.</description></listheader></list></param>
    <param name="pStoreInfo">Reserved for future use and must be set to <b>NULL</b>.</param>
    <param name="pvReserved">Reserved for future use and must be set to <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero.</para>
    </returns>
  </member>
  <member name="Windows.CertRemoveEnhancedKeyUsageIdentifier">
    <summary>The <b>CertRemoveEnhancedKeyUsageIdentifier</b> function removes a usage identifier <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) from the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">enhanced key usage</a> (EKU) extended property of the certificate.</summary>
    <param name="pCertContext">A pointer to a<see cref="CERT_CONTEXT" /> of the certificate for which the usage identifier OID is to be removed.</param>
    <param name="pszUsageIdentifier">A pointer to the usage identifier OID to remove.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertRemoveStoreFromCollection">
    <summary>The <b>CertRemoveStoreFromCollection</b> function removes a sibling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> from a collection store.</summary>
    <param name="hCollectionStore">A handle of the collection certificate store.</param>
    <param name="hSiblingStore">Handle of the sibling certificate store to be removed from the collection store.</param>
  </member>
  <member name="Windows.CertResyncCertificateChainEngine">
    <summary>Resyncs the certificate chain engine, which resynchronizes the stores the store's engine and updates the engine caches.</summary>
    <param name="hChainEngine">The chain engine to resynchronize.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertRetrieveLogoOrBiometricInfo">
    <summary>The <b>CertRetrieveLogoOrBiometricInfo</b> function performs a URL retrieval of logo or biometric information specified in either the <b>szOID_LOGOTYPE_EXT</b> or <b>szOID_BIOMETRIC_EXT</b> certificate extension. The <b>szOID_BIOMETRIC_EXT</b> extension (IETF RFC 3739) supports the addition of a signature or a pictorial representation of the human holder of the certificate. The <b>szOID_LOGOTYPE_EXT</b> extension (IETF RFC 3709) supports the addition of organizational pictorial representations in certificates.</summary>
    <param name="pCertContext">The address of a <see cref="CERT_CONTEXT" /> structure that contains the certificate.</param>
    <param name="lpszLogoOrBiometricType">
      <para>The address of a null-terminated ANSI string that contains an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) string that identifies the type of information to retrieve.</para>
      <para>This parameter may also contain one of the following predefined values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_RETRIEVE_ISSUER_LOGO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the certificate issuer logotype.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_RETRIEVE_SUBJECT_LOGO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the certificate subject logotype.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_RETRIEVE_COMMUNITY_LOGO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the certificate community logotype.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the picture associated with the certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the signature associated with the certificate.</description>
        </listheader>
      </list>
    </param>
    <param name="dwRetrievalFlags">A set of flags that specify how the information should be retrieved. This parameter is passed as the <i>dwRetrievalFlags</i> in the <see cref="CryptRetrieveObjectByUrl" /> function.</param>
    <param name="dwTimeout">The maximum amount of time, in milliseconds, to wait for the retrieval.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
    <param name="pvReserved">This parameter is not used and must be <b>NULL</b>.</param>
    <param name="ppbData">The address of a <b>BYTE</b> pointer that receives the logotype or biometric data. This memory must be freed when it is no longer needed by passing this pointer to the <see cref="CryptMemFree" /> function.</param>
    <param name="pcbData">The address of a <b>DWORD</b> variable that receives the number of bytes in the <i>ppbData</i> buffer.</param>
    <param name="ppwszMimeType">
      <para>The address of a pointer to a null-terminated Unicode string that receives the Multipurpose Internet Mail Extensions (MIME) type of the data. This parameter can be <b>NULL</b> if this information is not needed. This memory must be freed when it is no longer needed by passing this pointer to the <see cref="CryptMemFree" /> function.</para>
      <para>This address always receives <b>NULL</b> for biometric types. You must always ensure that this parameter contains a valid memory address before attempting to access the memory.</para>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />. Possible error codes returned by the<b>GetLastError</b> function include, but are not limited to, the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> CRYPT_E_HASH_VALUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computed hash value does not match the hash value in the certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The certificate does not contain the <b>szOID_LOGOTYPE_EXT</b> or <b>szOID_BIOMETRIC_EXT</b> extension, or the specified <i>lpszLogoOrBiometricType</i> was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> ERROR_INVALID_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No data could be retrieved from the URL specified by the certificate extension.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The certificate does not support the required extension.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash algorithm OID is unknown.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertSaveStore">
    <summary>The <b>CertSaveStore</b> function saves the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> to a file or to a memory <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a>.</summary>
    <param name="hCertStore">The handle of the certificate store to be saved.</param>
    <param name="dwEncodingType">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a>. Encoding is used only when <i>dwSaveAs</i> contains <b>CERT_STORE_SAVE_AS_PKCS7</b>. Otherwise, the <i>dwMsgAndCertEncodingType</i> parameter is not used.</para>
      <para>This parameter can be a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PKCS_7_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>65536 (0x10000)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies PKCS 7 message encoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="dwSaveAs">
      <para>Specifies how to save the certificate store.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SAVE_AS_PKCS7</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The certificate store can be saved as a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">PKCS #7</a> signed message that does not include additional properties. The <i>dwEncodingType</i> parameter specifies the message encoding type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SAVE_AS_STORE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The certificate store can be saved as a serialized store containing properties in addition to encoded certificates, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs), and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). The <i>dwEncodingType</i> parameter is ignored.<div><b>Note</b>  The <b>CERT_KEY_CONTEXT_PROP_ID</b> property and the related <b>CERT_KEY_PROV_HANDLE_PROP_ID</b> and <b>CERT_KEY_SPEC_PROP_ID</b> values are not saved to a serialized store.</div></description>
        </listheader>
      </list>
    </param>
    <param name="dwSaveTo">
      <para>Specifies where and how to save the certificate store. The contents of this parameter determines the format of the <i>pvSaveToPara</i> parameter.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SAVE_TO_FILE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The function saves the certificate store to a file. The <i>pvSaveToPara</i> parameter contains a handle to a file previously obtained by using the <see cref="CreateFile" /> function. The file must be opened with write permission. After a successful save operation, the file pointer is positioned after the last write operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SAVE_TO_FILENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The function saves the certificate store to a file. The <i>pvSaveToPara</i> parameter contains a pointer to a null-terminated Unicode string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SAVE_TO_FILENAME_A</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The function saves the certificate store to a file. The <i>pvSaveToPara</i> parameter contains a pointer to a null-terminated ANSI string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SAVE_TO_FILENAME_W</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The function saves the certificate store to a file. The <i>pvSaveToPara</i> parameter contains a pointer to a null-terminated Unicode string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SAVE_TO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The function saves the certificate store to a memory BLOB. The <i>pvSaveToPara</i> parameter contains a pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CERT_BLOB</a> structure. Before use, the <b>CERT_BLOB</b>'s <b>pbData</b> and <b>cbData</b> members must be initialized. Upon return, <b>cbData</b> is updated with the actual length. For a length-only calculation, <b>pbData</b> must be set to <b>NULL</b>. If <b>pbData</b> is non-<b>NULL</b> and <b>cbData</b> is not large enough, the function returns zero with a last error code of <b>ERROR_MORE_DATA</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="pvSaveToPara">A pointer that represents where the store should be saved to. The contents of this parameter depends on the value of the <i>dwSaveTo</i> parameter.</param>
    <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />.</para>
      <para>Note that <see cref="CreateFile" /> or <see cref="WriteFile" /> errors can be propagated to this function. One possible error code is <b>CRYPT_E_FILE_ERROR</b> which indicates that an error occurred while writing to the file.</para>
    </returns>
  </member>
  <member name="Windows.CertSelectCertificateChains">
    <summary>The <b>CertSelectCertificateChains</b> function retrieves certificate chains based on specified selection criteria.</summary>
    <param name="pSelectionContext">A pointer to the GUID of the certificate selection scenario to use for this call.</param>
    <param name="dwFlags">
      <para>Flags for controlling the certificate selection process. This parameter can be a combination of zero or more of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_ALLOW_EXPIRED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Select expired certificates that meet selection criteria. By default expired certificates are rejected from selection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_TRUSTED_ROOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Select certificates on which the error bit in the certificate chain trust status is not set to <b>CERT_TRUST_IS_UNTRUSTED_ROOT</b>, <b>CERT_TRUST_IS_PARTIAL_CHAIN</b>, or <b>CERT_TRUST_IS_NOT_TIME_VALID</b>. <para>In addition, certificates that have one of the following invalid constraint errors are not selected:</para><list type="bullet"><item><description><b>CERT_TRUST_INVALID_POLICY_CONSTRAINTS</b></description></item><item><description><b>CERT_TRUST_INVALID_BASIC_CONSTRAINTS</b></description></item><item><description><b>CERT_TRUST_INVALID_NAME_CONSTRAINTS</b></description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_DISALLOW_SELFSIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Select certificates that are not self-issued and self-signed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_HAS_PRIVATE_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Select certificates that have a value set for the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property of the certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_HAS_KEY_FOR_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Select certificates on which the value of the <b>dwKeySpec</b> member of the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property is set to <b>AT_SIGNATURE</b>. <para>If this function is being called as part of a CNG enabled application and the <b>dwKeySpec</b> member of the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property is set to -1, select certificates on which the value of the <b>NCRYPT_KEY_USAGE_PROPERTY</b> property of the associated private key has the <b>NCRYPT_ALLOW_SIGNING_FLAG</b> set.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Select certificates on which the value of the <b>dwKeySpec</b> member of the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property is set to <b>AT_KEYEXCHANGE</b>. <para>If this function is being called as part of a CNG enabled application and the <b>dwKeySpec</b> member of the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property is set to -1, select certificates on which either <b>NCRYPT_ALLOW_DECRYPT_FLAG</b> or <b>NCRYPT_ALLOW_KEY_AGREEMENT_FLAG</b> is set.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_HARDWARE_ONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Select certificates on which the value of the <b>PP_IMPTYPE</b> property of the associated private key provider is set to either <b> CRYPT_IMPL_HARDWARE</b> or <b>CRYPT_IMPL_REMOVABLE</b>. (For CNG providers, NCRYPT_IMPL_TYPE_PROPERTY property value MUST have either the NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG bit set).<para>If this function is being called as part of a CNG enabled application, select certificates on which the <b>NCRYPT_IMPL_TYPE_PROPERTY</b> property is set to <b> NCRYPT_IMPL_HARDWARE_FLAG</b> or <b>NCRYPT_IMPL_REMOVABLE_FLAG</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SELECT_ALLOW_DUPLICATES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Allow the selection of certificates on which the Subject and Subject Alt Name contain the same information and the certificate template extension value is equivalent. By default when certificates match this criteria, only the most recent certificate is selected.</description>
        </listheader>
      </list>
    </param>
    <param name="pChainParameters">
      <para>A pointer to a <see cref="CERT_SELECT_CHAIN_PARA" /> structure to specify parameters for chain building. If <b>NULL</b>, default parameters will be used.</para>
      <para>The <b>pChainPara</b> member of the <see cref="CERT_SELECT_CHAIN_PARA" /> structure points to a <see cref="CERT_CHAIN_PARA" /> structure that can be used to enable strong signing.</para>
    </param>
    <param name="cCriteria">The number of elements in the array pointed to by the <i>rgpCriteria</i> array.</param>
    <param name="rgpCriteria">A pointer to an array of <see cref="CERT_SELECT_CRITERIA" /> structures that define the selection criteria. If this parameter is set to <b>NULL</b>, the value of the <i>cCriteria</i> parameter must be zero.</param>
    <param name="hStore">The handle to a store from which to select the certificates.</param>
    <param name="pcSelection">A pointer to a <b>DWORD</b> value to receive the number of elements in the array pointed to by the <i>pprgpSelection</i> parameter.</param>
    <param name="pprgpSelection">
      <para>A pointer to a pointer to a location to receive an array of <see cref="CERT_CHAIN_CONTEXT" /> structure. The <b>CertSelectCertificateChains</b> function only returns certificate chains that match all the selection criteria. The entries in the array are ordered by quality, i.e. the chain with the highest quality is the first entry.</para>
      <para>Storage for the array is allocated by the <b>CertSelectCertificateChains</b> function. To free the allocated memory you must first release each individual chain context in the array by calling the <see cref="CertFreeCertificateChain" /> function. Then you must free the memory by calling the <see cref="CertFreeCertificateChainList" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns zero (FALSE). For extended error information, call the <see cref="GetLastError" /> function.</para>
      <div>
        <b>Note</b>  If the selection does not yield any results, the <b>CertSelectCertificateChains</b> function returns <b>TRUE</b>, but the value pointed to by <i>pcSelection</i> parameter is set to zero.</div>
    </returns>
  </member>
  <member name="Windows.CertSerializeCertificateStoreElement">
    <summary>The <b>CertSerializeCertificateStoreElement</b> function serializes a certificate context's encoded certificate and its encoded properties. The result can be persisted to storage so that the certificate and properties can be retrieved at a later time.</summary>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> to be serialized.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pbElement">
      <para>A pointer to a buffer that receives the serialized output, including the encoded certificate and possibly its properties.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbElement">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pbElement</i> parameter. When the function returns, <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertSerializeCRLStoreElement">
    <summary>The <b>CertSerializeCRLStoreElement</b> function serializes an encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the encoded representation of its properties. The result can be persisted to storage so that the CRL and properties can be retrieved at a later time.</summary>
    <param name="pCrlContext">A pointer to the<see cref="CRL_CONTEXT" /> structure being serialized.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pbElement">
      <para>A pointer to a buffer to receive the serialized output, including the encoded CRL, and possibly its properties.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbElement">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pbElement</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertSerializeCTLStoreElement">
    <summary>The <b>CertSerializeCTLStoreElement</b> function serializes an encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the encoded representation of its properties. The result can be persisted to storage so that the CTL and properties can be retrieved later.</summary>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure being serialized.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pbElement">
      <para>A pointer to a buffer that receives the serialized output, including the encoded CTL and, possibly, its properties.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbElement">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the buffer that is pointed to by the <i>pbElement</i> parameter. When the function returns the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertSetCertificateContextPropertiesFromCTLEntry">
    <summary>The <b>CertSetCertificateContextPropertiesFromCTLEntry</b> function sets the properties on the certificate context by using the attributes in the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) entry.</summary>
    <param name="pCertContext">A pointer to the <see cref="CERT_CONTEXT" /> whose attributes are to be set.</param>
    <param name="pCtlEntry">A pointer to the <see cref="CTL_ENTRY" /> structure used to set the attributes on the certificate.</param>
    <param name="dwFlags">A <b>DWORD</b>. This parameter can be set to CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG to ignore any persisted error flags.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertSetCTLContextProperty">
    <summary>The <b>CertSetCTLContextProperty</b> function sets an extended property for the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) context.</summary>
    <param name="pCtlContext">A pointer to the<see cref="CTL_CONTEXT" /> structure.</param>
    <param name="dwPropId">
      <para>Identifies the property to be set. The value of <i>dwPropId</i> determines the type and content of the <i>pvData</i> parameter. Currently defined identifiers and their related <i>pvData</i> types are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ARCHIVED_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: <b>NULL</b><para>Indicates the certificate is skipped during enumerations. A certificate with this property set is still found with explicit search operations—such as finding a certificate with a specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> or a specific serial number.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_AUTO_ENROLL_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para>Property set after a certificate has been enrolled using Auto Enroll. The <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure pointed to by <i>pvData</i> includes a <b>null</b>-terminated, Unicode name of the certificate type for which the certificates has been auto enrolled. Any subsequent calls to Auto Enroll for the certificate checks for this property to determine whether the certificate has been enrolled.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CTL_USAGE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para><i>pvData</i> points to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure containing an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoded<see cref="CTL_USAGE" /> structure. This structure was encoded using <see cref="CryptEncodeObject" /> with X509_ENHANCED_KEY_USAGE value set.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_DESCRIPTION_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para>Property set and displayed by the certificate UI. This property allows the user to describe the certificate's use.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_ENHKEY_USAGE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para>The <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure containing an ASN.1 encoded <see cref="CERT_ENHKEY_USAGE" /> structure. This structure was encoded using <see cref="CryptEncodeObject" /> with X509_ENHANCED_KEY_USAGE value set.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_FRIENDLY_NAME_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para>The <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure specifies the display name of the certificate.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a><para>This property is implicitly set by a call to<see cref="CertGetCertificateContextProperty" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_CONTEXT_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <see cref="CERT_KEY_CONTEXT" /><para>The <see cref="CERT_KEY_CONTEXT" /> structure contains both the <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> value and the key specification for the private key. For more information about the <b>hCryptProv</b> member and <i>dwFlags</i> settings, see CERT_KEY_PROV_HANDLE_PROP_ID, following. Note that more <b>CERT_KEY_CONTEXT</b> structure members can be added for this property. If so, the <b>cbSize</b> member value will be adjusted accordingly. The <b>cbSize</b> member must be set to the size of the <b>CERT_KEY_CONTEXT</b> structure</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_IDENTIFIER_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para>This property is typically implicitly set by a call to<see cref="CertGetCertificateContextProperty" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_PROV_HANDLE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a><para>An <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle for the certificate's private key is passed. The <b>hCryptProv</b> member of the <see cref="CERT_KEY_CONTEXT" /> structure is updated if it exists. If it does not exist, it is created with <b>dwKeySpec</b> initialized by CERT_KEY_PROV_INFO_PROP_ID. If CERT_STORE_NO_CRYPT_RELEASE_FLAG is not set, the <b>hCryptProv</b> value is implicitly released either when the property is set to <b>NULL</b> or on the final freeing of the<see cref="CERT_CONTEXT" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_PROV_INFO_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <see cref="CRYPT_KEY_PROV_INFO" /><para>The <see cref="CRYPT_KEY_PROV_INFO" /> structure specifies the certificate's private key.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_KEY_SPEC_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <b>DWORD</b><para>The <b>DWORD</b> value specifies the private key. The <b>dwKeySpec</b> member of the <see cref="CERT_KEY_CONTEXT" /> structure is updated if it exists. If it does not, it is created with <b>hCryptProv</b> set to zero.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_MD5_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a><para>This property is implicitly set by a call to<see cref="CertGetCertificateContextProperty" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NEXT_UPDATE_LOCATION_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para>The <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure contains an ASN.1 encoded<see cref="CERT_ALT_NAME_INFO" /> structure encoded using <see cref="CryptEncodeObject" /> with the X509_ALTERNATE_NAME value set. CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_PVK_FILE_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a><para>The <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure specifies the name of a file containing the private key associated with the certificate's public key. Inside the <b>CRYPT_DATA_BLOB</b> structure, the <b>pbData</b> member is a pointer to a <b>null</b>-terminated Unicode, wide-character string, and the <b>cbData</b> member indicates the length of the string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SHA1_HASH_PROP_ID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a><para>This property is implicitly set by a call to<see cref="CertGetCertificateContextProperty" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIGNATURE_HASH_PROP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>
                  <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data type of <i>pvData</i>: pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a><para>If a signature hash does not exist, it is computed with<see cref="CryptHashToBeSigned" />. <i>pvData</i> points to an existing or computed hash. Usually, the length of the hash is 20 bytes for SHA and 16 for MD5.</para></description>
        </listheader>
      </list> <para>Typically, only the CERT_NEXT_UPDATE_LOCATION_PROP_ID property is set.</para><para>Additional <i>dwPropId</i> types can be defined by the user using <b>DWORD</b> values from CERT_FIRST_USER_PROP_ID to CERT_LAST_USER_PROP_ID. For all user-defined <i>dwPropId</i> types, <i>pvData</i> points to an encoded <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure.</para></param>
    <param name="dwFlags">
      <para>CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID <i>dwPropId</i> properties.</para>
      <para>If the CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG value is set, any provider-write errors are ignored and the cached context's properties are always set.</para>
      <para>If CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG is set, any property set is not persisted.</para>
    </param>
    <param name="pvData">
      <para>A pointer to a data type that is determined by the value passed in <i>dwPropId</i>.</para>
      <div>
        <b>Note</b>  For any <i>dwPropId</i>, setting <i>pvData</i> to <b>NULL</b> deletes the property.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid property identifier. For details, see <see cref="CertSetCertificateContextProperty" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertSetEnhancedKeyUsage">
    <summary>The <b>CertSetEnhancedKeyUsage</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">enhanced key usage</a> (EKU) property for the certificate. Use of this function replaces any EKUs associated with the certificate. To add a single EKU usage without changing existing usages, use<see cref="CertAddEnhancedKeyUsageIdentifier" />. To delete a single EKU usage, use<see cref="CertRemoveEnhancedKeyUsageIdentifier" />.</summary>
    <param name="pCertContext">A pointer to the<see cref="CERT_CONTEXT" /> of the specified certificate.</param>
    <param name="pUsage">Pointer to a <see cref="CERT_ENHKEY_USAGE" /> structure (equivalent to a<b>CTL_USAGE</b> structure) that contains an array of EKU <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) to be set as extended properties of the certificate.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertSetStoreProperty">
    <summary>The <b>CertSetStoreProperty</b> function sets a store property.</summary>
    <param name="hCertStore">Handle for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a>.</param>
    <param name="dwPropId">Indicates one of a range of store properties. Values for user-defined properties must be outside the current range of predefined context property values. Currently, user-defined <i>dwPropId</i> values begin at 4,096. There is one predefined store property, CERT_STORE_LOCALIZED_NAME_PROP_ID, the localized name of the store.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pvData">
      <para>The type definition for <i>pvData</i> depends on the <i>dwPropId</i> value. If <i>dwPropId</i> is CERT_STORE_LOCALIZED_NAME_PROP_ID, <i>pvData</i> points to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure. The <b>pbData</b> member of that structure is a pointer to a <b>null</b>-terminated Unicode character string. The <b>cbData</b> member of that structure is a <b>DWORD</b> value holding the length of the string.</para>
      <para>For user-defined <i>dwPropId</i> values, <i>pvData</i> is a pointer to an encoded <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a>.</para>
      <para>If a value already exists for the selected property, the old value is replaced.</para>
      <para>Calling this function with <i>pvData</i> set to <b>NULL</b> deletes a property.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CertStrToName">
    <summary>The <b>CertStrToName</b> function converts a null-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> string to an encoded certificate name.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the string. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pszX500">
      <para>A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the <i>dwStrType</i> parameter.</para>
      <para>This string is expected to be formatted the same as the output from the <see cref="CertNameToStr" /> function.</para>
    </param>
    <param name="dwStrType">
      <para>This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.</para>
      <para>If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">relative distinguished name</a> (RDN) and a plus sign (+) as the separator in multiple RDN values.</para>
      <para>Quotation marks ("") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for example, CN="User ""one""".</para>
      <para>A value that starts with a number sign (#) is treated as <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> hexadecimal and converted to a <b>CERT_RDN_OCTET_STRING</b>. Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01.</para>
      <para>White space that surrounds the keys, object identifiers, and values is ignored.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>This string type is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Identical to CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_COMMA_FLAG</b></term></listheader><listheader><term>0x04000000</term></listheader></list></description><description>Only a comma (,) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Only a semicolon (;) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Only a backslash r (\r) or backslash n (\n) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Quoting is not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG</b></term></listheader><listheader><term>0x00020000</term></listheader></list></description><description>The <b>CERT_RDN_T61_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>. This flag can be used if all the Unicode characters are less than or equal to 0xFF.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG</b></term></listheader><listheader><term>0x00040000</term></listheader></list></description><description>The <b>CERT_RDN_UTF8_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00080000</term></listheader></list></description><description>Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable Unicode (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows Server 2003.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00100000</term></listheader></list></description><description>Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING). Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the string contains an email RDN value, and the email address contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> string. The Punycode encoding of the host name is performed on a label-by-label basis.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer that receives the encoded structure.</para>
      <para>The size of this buffer is specified in the <i>pcbEncoded</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> to obtain the required size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> that, before calling the function, contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <para>If <i>pbEncoded</i> is <b>NULL</b>, the <b>DWORD</b> receives the size, in bytes, required for the buffer.</para>
    </param>
    <param name="ppszError">
      <para>A pointer to a string pointer that receives additional error information about an input string that is not valid.</para>
      <para>If the <i>pszX500</i> string is not valid, <i>ppszError</i> is updated by this function to point to the beginning of the character sequence that is not valid. If no errors are detected in the input string, <i>ppszError</i> is set to <b>NULL</b>.</para>
      <para>If this information is not required, pass <b>NULL</b> for this parameter.</para>
      <para>This parameter is updated for the following error codes returned from <see cref="GetLastError" />.</para>
      <h4>CRYPT_E_INVALID_X500_STRING</h4>
      <h4>CRYPT_E_INVALID_NUMERIC_STRING</h4>
      <h4>CRYPT_E_INVALID_PRINTABLE_STRING</h4>
      <h4>CRYPT_E_INVALID_IA5_STRING</h4>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertStrToNameA">
    <summary>The <b>CertStrToName</b> function converts a null-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> string to an encoded certificate name.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the string. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pszX500">
      <para>A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the <i>dwStrType</i> parameter.</para>
      <para>This string is expected to be formatted the same as the output from the <see cref="CertNameToStr" /> function.</para>
    </param>
    <param name="dwStrType">
      <para>This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.</para>
      <para>If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">relative distinguished name</a> (RDN) and a plus sign (+) as the separator in multiple RDN values.</para>
      <para>Quotation marks ("") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for example, CN="User ""one""".</para>
      <para>A value that starts with a number sign (#) is treated as <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> hexadecimal and converted to a <b>CERT_RDN_OCTET_STRING</b>. Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01.</para>
      <para>White space that surrounds the keys, object identifiers, and values is ignored.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>This string type is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Identical to CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_COMMA_FLAG</b></term></listheader><listheader><term>0x04000000</term></listheader></list></description><description>Only a comma (,) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Only a semicolon (;) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Only a backslash r (\r) or backslash n (\n) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Quoting is not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG</b></term></listheader><listheader><term>0x00020000</term></listheader></list></description><description>The <b>CERT_RDN_T61_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>. This flag can be used if all the Unicode characters are less than or equal to 0xFF.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG</b></term></listheader><listheader><term>0x00040000</term></listheader></list></description><description>The <b>CERT_RDN_UTF8_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00080000</term></listheader></list></description><description>Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable Unicode (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows Server 2003.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00100000</term></listheader></list></description><description>Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING). Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the string contains an email RDN value, and the email address contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> string. The Punycode encoding of the host name is performed on a label-by-label basis.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer that receives the encoded structure.</para>
      <para>The size of this buffer is specified in the <i>pcbEncoded</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> to obtain the required size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> that, before calling the function, contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <para>If <i>pbEncoded</i> is <b>NULL</b>, the <b>DWORD</b> receives the size, in bytes, required for the buffer.</para>
    </param>
    <param name="ppszError">
      <para>A pointer to a string pointer that receives additional error information about an input string that is not valid.</para>
      <para>If the <i>pszX500</i> string is not valid, <i>ppszError</i> is updated by this function to point to the beginning of the character sequence that is not valid. If no errors are detected in the input string, <i>ppszError</i> is set to <b>NULL</b>.</para>
      <para>If this information is not required, pass <b>NULL</b> for this parameter.</para>
      <para>This parameter is updated for the following error codes returned from <see cref="GetLastError" />.</para>
      <h4>CRYPT_E_INVALID_X500_STRING</h4>
      <h4>CRYPT_E_INVALID_NUMERIC_STRING</h4>
      <h4>CRYPT_E_INVALID_PRINTABLE_STRING</h4>
      <h4>CRYPT_E_INVALID_IA5_STRING</h4>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertStrToNameW">
    <summary>The <b>CertStrToName</b> function converts a null-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> string to an encoded certificate name.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the string. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pszX500">
      <para>A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the <i>dwStrType</i> parameter.</para>
      <para>This string is expected to be formatted the same as the output from the <see cref="CertNameToStr" /> function.</para>
    </param>
    <param name="dwStrType">
      <para>This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.</para>
      <para>If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">relative distinguished name</a> (RDN) and a plus sign (+) as the separator in multiple RDN values.</para>
      <para>Quotation marks ("") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for example, CN="User ""one""".</para>
      <para>A value that starts with a number sign (#) is treated as <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> hexadecimal and converted to a <b>CERT_RDN_OCTET_STRING</b>. Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01.</para>
      <para>White space that surrounds the keys, object identifiers, and values is ignored.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>This string type is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Identical to CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_COMMA_FLAG</b></term></listheader><listheader><term>0x04000000</term></listheader></list></description><description>Only a comma (,) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Only a semicolon (;) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Only a backslash r (\r) or backslash n (\n) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Quoting is not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG</b></term></listheader><listheader><term>0x00020000</term></listheader></list></description><description>The <b>CERT_RDN_T61_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>. This flag can be used if all the Unicode characters are less than or equal to 0xFF.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG</b></term></listheader><listheader><term>0x00040000</term></listheader></list></description><description>The <b>CERT_RDN_UTF8_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00080000</term></listheader></list></description><description>Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable Unicode (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows Server 2003.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00100000</term></listheader></list></description><description>Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING). Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the string contains an email RDN value, and the email address contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> string. The Punycode encoding of the host name is performed on a label-by-label basis.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer that receives the encoded structure.</para>
      <para>The size of this buffer is specified in the <i>pcbEncoded</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> to obtain the required size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> that, before calling the function, contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <para>If <i>pbEncoded</i> is <b>NULL</b>, the <b>DWORD</b> receives the size, in bytes, required for the buffer.</para>
    </param>
    <param name="ppszError">
      <para>A pointer to a string pointer that receives additional error information about an input string that is not valid.</para>
      <para>If the <i>pszX500</i> string is not valid, <i>ppszError</i> is updated by this function to point to the beginning of the character sequence that is not valid. If no errors are detected in the input string, <i>ppszError</i> is set to <b>NULL</b>.</para>
      <para>If this information is not required, pass <b>NULL</b> for this parameter.</para>
      <para>This parameter is updated for the following error codes returned from <see cref="GetLastError" />.</para>
      <h4>CRYPT_E_INVALID_X500_STRING</h4>
      <h4>CRYPT_E_INVALID_NUMERIC_STRING</h4>
      <h4>CRYPT_E_INVALID_PRINTABLE_STRING</h4>
      <h4>CRYPT_E_INVALID_IA5_STRING</h4>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertStrToName">
    <summary>The <b>CertStrToName</b> function converts a null-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> string to an encoded certificate name.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the string. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pszX500">
      <para>A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the <i>dwStrType</i> parameter.</para>
      <para>This string is expected to be formatted the same as the output from the <see cref="CertNameToStr" /> function.</para>
    </param>
    <param name="dwStrType">
      <para>This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.</para>
      <para>If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">relative distinguished name</a> (RDN) and a plus sign (+) as the separator in multiple RDN values.</para>
      <para>Quotation marks ("") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for example, CN="User ""one""".</para>
      <para>A value that starts with a number sign (#) is treated as <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> hexadecimal and converted to a <b>CERT_RDN_OCTET_STRING</b>. Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01.</para>
      <para>White space that surrounds the keys, object identifiers, and values is ignored.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>This string type is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Identical to CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_COMMA_FLAG</b></term></listheader><listheader><term>0x04000000</term></listheader></list></description><description>Only a comma (,) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Only a semicolon (;) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Only a backslash r (\r) or backslash n (\n) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Quoting is not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG</b></term></listheader><listheader><term>0x00020000</term></listheader></list></description><description>The <b>CERT_RDN_T61_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>. This flag can be used if all the Unicode characters are less than or equal to 0xFF.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG</b></term></listheader><listheader><term>0x00040000</term></listheader></list></description><description>The <b>CERT_RDN_UTF8_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00080000</term></listheader></list></description><description>Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable Unicode (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows Server 2003.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00100000</term></listheader></list></description><description>Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING). Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the string contains an email RDN value, and the email address contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> string. The Punycode encoding of the host name is performed on a label-by-label basis.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer that receives the encoded structure.</para>
      <para>The size of this buffer is specified in the <i>pcbEncoded</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> to obtain the required size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> that, before calling the function, contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <para>If <i>pbEncoded</i> is <b>NULL</b>, the <b>DWORD</b> receives the size, in bytes, required for the buffer.</para>
    </param>
    <param name="ppszError">
      <para>A pointer to a string pointer that receives additional error information about an input string that is not valid.</para>
      <para>If the <i>pszX500</i> string is not valid, <i>ppszError</i> is updated by this function to point to the beginning of the character sequence that is not valid. If no errors are detected in the input string, <i>ppszError</i> is set to <b>NULL</b>.</para>
      <para>If this information is not required, pass <b>NULL</b> for this parameter.</para>
      <para>This parameter is updated for the following error codes returned from <see cref="GetLastError" />.</para>
      <h4>CRYPT_E_INVALID_X500_STRING</h4>
      <h4>CRYPT_E_INVALID_NUMERIC_STRING</h4>
      <h4>CRYPT_E_INVALID_PRINTABLE_STRING</h4>
      <h4>CRYPT_E_INVALID_IA5_STRING</h4>
      <h5>- ppszError.CRYPT_E_INVALID_IA5_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_NUMERIC_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_PRINTABLE_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_X500_STRING</h5>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertStrToNameA">
    <summary>The <b>CertStrToName</b> function converts a null-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> string to an encoded certificate name.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the string. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pszX500">
      <para>A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the <i>dwStrType</i> parameter.</para>
      <para>This string is expected to be formatted the same as the output from the <see cref="CertNameToStr" /> function.</para>
    </param>
    <param name="dwStrType">
      <para>This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.</para>
      <para>If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">relative distinguished name</a> (RDN) and a plus sign (+) as the separator in multiple RDN values.</para>
      <para>Quotation marks ("") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for example, CN="User ""one""".</para>
      <para>A value that starts with a number sign (#) is treated as <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> hexadecimal and converted to a <b>CERT_RDN_OCTET_STRING</b>. Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01.</para>
      <para>White space that surrounds the keys, object identifiers, and values is ignored.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>This string type is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Identical to CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_COMMA_FLAG</b></term></listheader><listheader><term>0x04000000</term></listheader></list></description><description>Only a comma (,) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Only a semicolon (;) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Only a backslash r (\r) or backslash n (\n) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Quoting is not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG</b></term></listheader><listheader><term>0x00020000</term></listheader></list></description><description>The <b>CERT_RDN_T61_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>. This flag can be used if all the Unicode characters are less than or equal to 0xFF.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG</b></term></listheader><listheader><term>0x00040000</term></listheader></list></description><description>The <b>CERT_RDN_UTF8_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00080000</term></listheader></list></description><description>Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable Unicode (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows Server 2003.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00100000</term></listheader></list></description><description>Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING). Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the string contains an email RDN value, and the email address contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> string. The Punycode encoding of the host name is performed on a label-by-label basis.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer that receives the encoded structure.</para>
      <para>The size of this buffer is specified in the <i>pcbEncoded</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> to obtain the required size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> that, before calling the function, contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <para>If <i>pbEncoded</i> is <b>NULL</b>, the <b>DWORD</b> receives the size, in bytes, required for the buffer.</para>
    </param>
    <param name="ppszError">
      <para>A pointer to a string pointer that receives additional error information about an input string that is not valid.</para>
      <para>If the <i>pszX500</i> string is not valid, <i>ppszError</i> is updated by this function to point to the beginning of the character sequence that is not valid. If no errors are detected in the input string, <i>ppszError</i> is set to <b>NULL</b>.</para>
      <para>If this information is not required, pass <b>NULL</b> for this parameter.</para>
      <para>This parameter is updated for the following error codes returned from <see cref="GetLastError" />.</para>
      <h4>CRYPT_E_INVALID_X500_STRING</h4>
      <h4>CRYPT_E_INVALID_NUMERIC_STRING</h4>
      <h4>CRYPT_E_INVALID_PRINTABLE_STRING</h4>
      <h4>CRYPT_E_INVALID_IA5_STRING</h4>
      <h5>- ppszError.CRYPT_E_INVALID_IA5_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_NUMERIC_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_PRINTABLE_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_X500_STRING</h5>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertStrToNameW">
    <summary>The <b>CertStrToName</b> function converts a null-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.500</a> string to an encoded certificate name.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encode the string. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pszX500">
      <para>A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the <i>dwStrType</i> parameter.</para>
      <para>This string is expected to be formatted the same as the output from the <see cref="CertNameToStr" /> function.</para>
    </param>
    <param name="dwStrType">
      <para>This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.</para>
      <para>If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">relative distinguished name</a> (RDN) and a plus sign (+) as the separator in multiple RDN values.</para>
      <para>Quotation marks ("") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for example, CN="User ""one""".</para>
      <para>A value that starts with a number sign (#) is treated as <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> hexadecimal and converted to a <b>CERT_RDN_OCTET_STRING</b>. Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01.</para>
      <para>White space that surrounds the keys, object identifiers, and values is ignored.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SIMPLE_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>This string type is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_OID_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_X500_NAME_STR</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Identical to CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) or an X.500 name. 							</description>
        </listheader>
      </list> <para>The following options can also be combined with the value above to specify additional options for the string.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_COMMA_FLAG</b></term></listheader><listheader><term>0x04000000</term></listheader></list></description><description>Only a comma (,) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_SEMICOLON_FLAG</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Only a semicolon (;) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_CRLF_FLAG</b></term></listheader><listheader><term>0x08000000</term></listheader></list></description><description>Only a backslash r (\r) or backslash n (\n) is supported as the RDN separator.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_PLUS_FLAG</b></term></listheader><listheader><term>0x20000000</term></listheader></list></description><description>The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_NO_QUOTING_FLAG</b></term></listheader><listheader><term>0x10000000</term></listheader></list></description><description>Quoting is not supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_REVERSE_FLAG</b></term></listheader><listheader><term>0x02000000</term></listheader></list></description><description>The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG</b></term></listheader><listheader><term>0x00020000</term></listheader></list></description><description>The <b>CERT_RDN_T61_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>. This flag can be used if all the Unicode characters are less than or equal to 0xFF.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG</b></term></listheader><listheader><term>0x00040000</term></listheader></list></description><description>The <b>CERT_RDN_UTF8_STRING</b> encoded value type is used instead of <b>CERT_RDN_UNICODE_STRING</b>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00080000</term></listheader></list></description><description>Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable Unicode (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows Server 2003.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG</b></term></listheader><listheader><term>0x00100000</term></listheader></list></description><description>Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING). Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CERT_NAME_STR_ENABLE_PUNYCODE_FLAG</b></term></listheader><listheader><term>0x00200000</term></listheader></list></description><description>If the string contains an email RDN value, and the email address contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an <a href="https://docs.microsoft.com//windows/desktop/SecCertEnroll/about-ia5string">IA5String</a> string. The Punycode encoding of the host name is performed on a label-by-label basis.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader></list></param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer that receives the encoded structure.</para>
      <para>The size of this buffer is specified in the <i>pcbEncoded</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> to obtain the required size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> that, before calling the function, contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <para>If <i>pbEncoded</i> is <b>NULL</b>, the <b>DWORD</b> receives the size, in bytes, required for the buffer.</para>
    </param>
    <param name="ppszError">
      <para>A pointer to a string pointer that receives additional error information about an input string that is not valid.</para>
      <para>If the <i>pszX500</i> string is not valid, <i>ppszError</i> is updated by this function to point to the beginning of the character sequence that is not valid. If no errors are detected in the input string, <i>ppszError</i> is set to <b>NULL</b>.</para>
      <para>If this information is not required, pass <b>NULL</b> for this parameter.</para>
      <para>This parameter is updated for the following error codes returned from <see cref="GetLastError" />.</para>
      <h4>CRYPT_E_INVALID_X500_STRING</h4>
      <h4>CRYPT_E_INVALID_NUMERIC_STRING</h4>
      <h4>CRYPT_E_INVALID_PRINTABLE_STRING</h4>
      <h4>CRYPT_E_INVALID_IA5_STRING</h4>
      <h5>- ppszError.CRYPT_E_INVALID_IA5_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_NUMERIC_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_PRINTABLE_STRING</h5>
      <h5>- ppszError.CRYPT_E_INVALID_X500_STRING</h5>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CertUnregisterPhysicalStore">
    <summary>The <b>CertUnregisterPhysicalStore</b> function removes a physical store from a specified system store collection. <b>CertUnregisterPhysicalStore</b> can also be used to delete the physical store.</summary>
    <param name="pvSystemStore">A pointer to an identifier of the system store collection from which the physical store is to be removed. It is either to a null-terminated Unicode string or to a<see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure. For information about using the structure and on appending a ServiceName or ComputerName to the end of the system store name string, see<see cref="CertRegisterSystemStore" />.</param>
    <param name="dwFlags">
      <para>The high word of the <i>dwFlags</i> parameter specifies the location of the system store. For information about defined high-word flags and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see<see cref="CertRegisterSystemStore" />.</para>
      <para>The following low-word values are also defined. They can be combined using bitwise-<b>OR</b> operations with high-word values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_RELOCATE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system store is not in its default registry location and <i>pvSystemStore</i> must be a pointer to a <see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_DELETE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The physical store is first removed from the system store collection and is then deleted.</description>
        </listheader>
      </list>
    </param>
    <param name="pwszStoreName">Null-terminated Unicode string that contains the name of the physical store.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CertUnregisterSystemStore">
    <summary>The <b>CertUnregisterSystemStore</b> function unregisters a specified system store.</summary>
    <param name="pvSystemStore">Identifies the system store to be unregistered. It points either to a null-terminated Unicode string or to a<see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure. For information about using the structure and on appending a ServiceName or ComputerName to the end of the system store name string, see<see cref="CertRegisterSystemStore" />.</param>
    <param name="dwFlags">
      <para>The high word of the <i>dwFlags</i> parameter specifies the location of the system store. For information about defined high-word flags and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see<see cref="CertRegisterSystemStore" />.</para>
      <para>The following low-word values are also defined and can be combined with high-word values using a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_SYSTEM_STORE_RELOCATE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system store is not in its default registry location and <i>pvSystemStore</i> must be a pointer to a <see cref="CERT_SYSTEM_STORE_RELOCATE_PARA" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_DELETE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system store is deleted after it has been unregistered.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CertVerifyCertificateChainPolicy">
    <summary>The <b>CertVerifyCertificateChainPolicy</b> function checks a certificate chain to verify its validity, including its compliance with any specified validity policy criteria.</summary>
    <param name="pszPolicyOID">
      <para>Current predefined verify chain policy structures are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_BASE</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 1</term>
              </listheader>
            </list>
          </description>
          <description>Implements the base chain policy verification checks. The <b>dwFlags</b> member of the structure pointed to by <i>pPolicyPara</i> can be set to alter the default policy checking behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_AUTHENTICODE</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 2</term>
              </listheader>
            </list>
          </description>
          <description>Implements the Authenticode chain policy verification checks. The <b>pvExtraPolicyPara</b> member of the structure pointed to by <i>pPolicyPara</i> can be set to point to an <see cref="AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA" /> structure.<para>The <b>pvExtraPolicyStatus</b> member of the structure pointed to by <i>pPolicyStatus</i> can be set to point to an <see cref="AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_AUTHENTICODE_TS</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 3</term>
              </listheader>
            </list>
          </description>
          <description>Implements Authenticode Time Stamp chain policy verification checks. The <b>pvExtraPolicyPara</b> member of the data structure pointed to by <i>pPolicyPara</i> can be set to point to an <see cref="AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA" /> structure.<para>The <b>pvExtraPolicyStatus</b> member of the data structure pointed to by <i>pPolicyStatus</i> is not used and must be set to <b>NULL</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_SSL</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 4</term>
              </listheader>
            </list>
          </description>
          <description>Implements the SSL client/server chain policy verification checks. The <b>pvExtraPolicyPara</b> member in the data structure pointed to by <i>pPolicyPara</i> can be set to point to an <see cref="SSL_EXTRA_CERT_CHAIN_POLICY_PARA" /> structure initialized with additional policy criteria.<div><b>Note</b>  To differentiate between server and client authorization certificates, the call to the <see cref="CertGetCertificateChain" /> function to get the chain context should specify the certificate type by setting the expected usage. Set the expected usage by setting the <b>RequestedUsage</b> member of the <see cref="CERT_CHAIN_PARA" /> structure passed in the <i>pChainPara</i> input parameter of the <b>CertGetCertificateChain</b> function.</div></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_BASIC_CONSTRAINTS</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 5</term>
              </listheader>
            </list>
          </description>
          <description>Implements the basic constraints chain policy. Iterates through all the certificates in the chain checking for either a szOID_BASIC_CONSTRAINTS or a szOID_BASIC_CONSTRAINTS2 extension. If neither extension is present, the certificate is assumed to have valid policy. Otherwise, for the first certificate element, checks if it matches the expected CA_FLAG or END_ENTITY_FLAG specified in the <b>dwFlags</b> member of the <see cref="CERT_CHAIN_POLICY_PARA" /> structure pointed to by the <i>pPolicyPara</i> parameter. If neither or both flags are set, then, the first element can be either a CA or END_ENTITY. All other elements must be a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certification authority</a> (CA). If the PathLenConstraint is present in the extension, it is checked.<para>The first elements in the remaining simple chains (that is, the certificates used to sign the CTL) are checked to be an END_ENTITY. If this verification fails, <b>dwError</b> will be set to TRUST_E_BASIC_CONSTRAINTS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_NT_AUTH</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 6</term>
              </listheader>
            </list>
          </description>
          <description>Implements the Windows NT Authentication chain policy, which consists of three distinct chain verifications in the following order: <list type="number"><item><description>CERT_CHAIN_POLICY_BASE—Implements the base chain policy verification checks. The LOWORD of <i>dwFlags</i> can be set in <i>pPolicyPara</i> to alter the default policy checking behavior. For more information, see CERT_CHAIN_POLICY_BASE.</description></item><item><description>CERT_CHAIN_POLICY_BASIC_CONSTRAINTS—Implements the basic constraints chain policy. The HIWORD of <i>dwFlags</i> can be set to specify if the first element must be either a CA or END_ENTITY. For more information, see CERT_CHAIN_POLICY_BASIC_CONSTRAINTS.</description></item><item><description>Checks if the second element in the chain, the CA that issued the end certificate, is a trusted CA for Windows NT Authentication. A CA is considered to be trusted if it exists in the "NTAuth" system registry store found in the CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE store location. If this verification fails, the CA is untrusted, and <i>dwError</i> is set to CERT_E_UNTRUSTEDCA.If CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG is set in the <b>Flags</b> value of the <b>HKEY_LOCAL_MACHINE</b> policy <b>ProtectedRoots</b> subkey, defined by CERT_PROT_ROOT_FLAGS_REGPATH and the above check fails, the chain is checked for CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS set in <i>dwInfoStatus</i>. This is set if there was a valid name constraint for all namespaces including UPN. If the chain does not have this info status set, <i>dwError</i> is set to CERT_E_UNTRUSTEDCA.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_MICROSOFT_ROOT</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 7</term>
              </listheader>
            </list>
          </description>
          <description>Checks the last element of the first simple chain for a Microsoft root public key. If that element does not contain a Microsoft root public key, the <b>dwError</b> member of the <see cref="CERT_CHAIN_POLICY_STATUS" /> structure pointed to by the <i>pPolicyStatus</i> parameter is set to <b>CERT_E_UNTRUSTEDROOT</b>.<para>The <b>dwFlags</b> member of the <see cref="CERT_CHAIN_POLICY_PARA" /> structure pointed to by the <i>pPolicyStatus</i> parameter can contain the <b>MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG</b> flag, which causes this function to instead check for the Microsoft application root "Microsoft Root Certificate Authority 2011".</para><para>The <b>dwFlags</b> member of the <see cref="CERT_CHAIN_POLICY_PARA" /> structure pointed to by the <i>pPolicyPara</i> parameter can contain the <b>MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG</b> flag, which causes this function to also check for the Microsoft test roots.</para><div><b>Note</b>  This policy <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) does not perform any policy verification checks by itself, it is meant to be used in conjunction with other policies.</div></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_EV</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 8</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that extended validation of certificates is performed.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_CHAIN_POLICY_SSL_F12</b>
                </term>
              </listheader>
              <listheader>
                <term>(LPCSTR) 9</term>
              </listheader>
            </list>
          </description>
          <description>Checks if any certificates in the chain have weak crypto or if third party root certificate compliance and provide an error string. The <b>pvExtraPolicyStatus</b> member of the CERT_CHAIN_POLICY_STATUS structure pointed to by the <i>pPolicyStatus</i> parameter must point to <see cref="SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS" />, which is updated with the results of the weak crypto and root program compliance checks.<para>Before calling, the <b>cbSize</b> member of the 	CERT_CHAIN_POLICY_STATUS structure pointed to by the <i>pPolicyStatus</i> parameter must be set to a value greater than or equal to sizeof(SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS).</para><para>The <b>dwError</b> member in CERT_CHAIN_POLICY_STATUS structure pointed to by the <i>pPolicyStatus</i> parameter will be set to <b>TRUST_E_CERT_SIGNATURE</b> for potential weak crypto and set to <b>CERT_E_UNTRUSTEDROOT</b> for Third Party Roots not in compliance with the Microsoft Root Program.</para><para><b>Windows 10, version 1607, Windows Server 2016, Windows 10, version 1511 with KB3172985, Windows 10 RTM with KB3163912, Windows 8.1 and Windows Server 2012 R2 with KB3163912, and Windows 7 with SP1 and Windows Server 2008 R2 SP1 with KB3161029</b></para></description>
        </listheader>
      </list>
    </param>
    <param name="pChainContext">A pointer to a<see cref="CERT_CHAIN_CONTEXT" /> structure that contains a chain to be verified.</param>
    <param name="pPolicyPara">
      <para>A pointer to a<see cref="CERT_CHAIN_POLICY_PARA" /> structure that provides the policy verification criteria for the chain. The <b>dwFlags</b> member of that structure can be set to change the default policy checking behavior.</para>
      <para>In addition, policy-specific parameters can also be passed in the <b>pvExtraPolicyPara</b> member of the structure.</para>
    </param>
    <param name="pPolicyStatus">A pointer to a<see cref="CERT_CHAIN_POLICY_STATUS" /> structure where status information on the chain is returned. OID-specific extra status can be returned in the <b>pvExtraPolicyStatus</b> member of this structure.</param>
    <returns>
      <para>The return value indicates whether the function was able to check for the policy, it does not indicate whether the policy check failed or passed.</para>
      <para>If the chain can be verified for the specified policy, <b>TRUE</b> is returned and the <b>dwError</b> member of the <i>pPolicyStatus</i> is updated. A <b>dwError</b> of 0 (ERROR_SUCCESS or S_OK) indicates the chain satisfies the specified policy.</para>
      <para>If the chain cannot be validated, the return value is <b>TRUE</b> and you need to verify the <i>pPolicyStatus</i> parameter for the actual error.</para>
      <para>A value of <b>FALSE</b> indicates that the function wasn't able to check for the policy.</para>
    </returns>
  </member>
  <member name="Windows.CertVerifyCRLRevocation">
    <summary>The <b>CertVerifyCRLRevocation</b> function check a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) to determine whether a subject's certificate has or has not been revoked. The new<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptography-functions">Certificate Chain Verification Functions</a> are recommended instead of the use of this function.</summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pCertId">A pointer to the<see cref="CERT_INFO" /> structure of the certificate to be checked against the CRL.</param>
    <param name="cCrlInfo">Number of<see cref="CRL_INFO" /> pointers in the <i>rgpCrlInfo</i> array.</param>
    <param name="rgpCrlInfo">Array of pointers to <see cref="CRL_INFO" /> structures.</param>
    <returns>
      <para>Returns <b>TRUE</b> if the certificate is not on the CRL and therefore is valid.</para>
      <para>It returns <b>FALSE</b> if the certificate is on the list and therefore has been revoked and is not valid.</para>
    </returns>
  </member>
  <member name="Windows.CertVerifyCRLTimeValidity">
    <summary>The <b>CertVerifyCRLTimeValidity</b> function verifies the time validity of a CRL.</summary>
    <param name="pTimeToVerify">A pointer to <see cref="FILETIME" /> structure containing the time to be used in the verification. If set to <b>NULL</b>, the current time is used.</param>
    <param name="pCrlInfo">A pointer to a<see cref="CRL_INFO" /> structure containing the CRL for which the time is to be verified.</param>
    <returns>Returns a minus one (–1) if the comparison time is before the <b>ThisUpdate</b> member of the <see cref="CRL_INFO" /> pointed to by <i>pCrlInfo</i>. Returns a plus one (+1) if the comparison time is after the <b>NextUpdate</b> time. Returns zero for valid time for the CRL.</returns>
  </member>
  <member name="Windows.CertVerifyCTLUsage">
    <summary>The <b>CertVerifyCTLUsage</b> function verifies that a subject is trusted for a specified usage by finding a signed and time-valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL) with the usage identifiers that contain the subject. A certificate's subject can be identified by either its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> or any unique identifier such as the SHA1 <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the subject's certificate.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types can be added in the future. For either current encoding type, use</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="dwSubjectType">
      <para>If the <i>dwSubjectType</i> parameter is set to CTL_CERT_SUBJECT_TYPE, <i>pvSubject</i> points to a<see cref="CERT_CONTEXT" /> structure. The structure's <b>SubjectAlgorithm</b> member is examined to determine the representation of the subject's identity. Initially, only SHA1 and MD5 hashes are supported as values for <b>SubjectAlgorithm</b>. The appropriate hash property is obtained from the <b>CERT_CONTEXT</b> structure.</para>
      <para>If the <i>dwSubjectType</i> parameter is set to CTL_ANY_SUBJECT_TYPE, <i>pvSubject</i> points to the<see cref="CTL_ANY_SUBJECT_INFO" /> structure. The <b>SubjectAlgorithm</b> member of this structure must match the algorithm type of the CTL, and the <b>SubjectIdentifier</b> member must match one of the CTL entries.</para>
      <para>If <i>dwSubjectType</i> is set to either preceding value, <i>dwEncodingType</i> is not used.</para>
    </param>
    <param name="pvSubject">Value used in conjunction with the <i>dwSubjectType</i> parameter.</param>
    <param name="pSubjectUsage">A pointer to a<see cref="CTL_USAGE" /> structure used to specify the intended usage of the subject.</param>
    <param name="dwFlags">
      <para>If the CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG is not set, a CTL whose time is no longer valid in one of the stores specified by <b>rghCtlStore</b> in<see cref="CTL_VERIFY_USAGE_PARA" /> can be replaced. When replaced, the CERT_VERIFY_UPDATED_CTL_FLAG is set in the <b>dwFlags</b> member of <i>pVerifyUsageStatus</i>. If this flag is set, an update will not be made, even if a time-valid, updated CTL is received for a CTL that is in the store and whose time is no longer valid.</para>
      <para>If the CERT_VERIFY_TRUSTED_SIGNERS_FLAG is set, only the signer stores specified by <b>rghSignerStore</b> in<see cref="CTL_VERIFY_USAGE_PARA" /> are searched to find the signer. Otherwise, the signer stores provide additional sources to find the signer's certificate. For more information, see Remarks.</para>
      <para>If CERT_VERIFY_NO_TIME_CHECK_FLAG is set, the CTLs are not checked for time validity. Otherwise, they are.</para>
      <para>If CERT_VERIFY_ALLOW_MORE_USAGE_FLAG is set, the CTL can contain usage identifiers in addition to those specified by <i>pSubjectUsage</i>. Otherwise, the found CTL will contain no additional usage identifiers.</para>
    </param>
    <param name="pVerifyUsagePara">A pointer to a<see cref="CTL_VERIFY_USAGE_PARA" /> structure that specifies the stores to be searched to find the CTL and the stores that contain acceptable CTL signers. Setting the <b>ListIdentifier</b> member further limits the search.</param>
    <param name="pVerifyUsageStatus">A pointer to a<see cref="CTL_VERIFY_USAGE_STATUS" /> structure. The <b>cbSize</b> member of the structure must to be set to the size, in bytes, of the structure, and all other fields must be set to zero before <b>CertVerifyCTLUsage</b> is called. For more information, see<b>CTL_VERIFY_USAGE_STATUS</b>.</param>
    <returns>
      <para>If the subject is trusted for the specified usage, <b>TRUE</b> is returned. Otherwise, <b>FALSE</b> is returned. <see cref="GetLastError" /> can return one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_VERIFY_USAGE_DLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No DLL or exported function was found to verify subject usage.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_VERIFY_USAGE_CHECK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The called function was not able to do a usage check on the subject.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_VERIFY_USAGE_OFFLINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The server was offline; therefore, the called function could not complete the usage check.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_IN_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The subject was not found in a CTL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_TRUSTED_SIGNER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No trusted signer was found to verify the signature of the message or trust list.</description>
        </listheader>
      </list> <para>The <b>dwError</b> member of the <see cref="CTL_VERIFY_USAGE_PARA" /> pointed to by <i>pVerifyUsageStatus</i> is set to the same error code.</para></returns>
  </member>
  <member name="Windows.CertVerifyRevocation">
    <summary>The <b>CertVerifyRevocation</b> function checks the revocation status of the certificates contained in the <i>rgpvContext</i> array. If a certificate in the list is found to be revoked, no further checking is done. This array can be a chain of certificates propagating upward from an end entity to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">root authority</a>, but this nature of the list of certificates is not required or assumed.</summary>
    <param name="dwEncodingType">Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</param>
    <param name="dwRevType">Indicates the type of the context structure passed in <i>rgpvContext</i>. Currently only CERT_CONTEXT_REVOCATION_TYPE, the revocation of certificates, is defined.</param>
    <param name="cContext">Count of elements in the <i>rgpvContext</i> array.</param>
    <param name="rgpvContext">
      <para>When the <i>dwRevType</i> is CERT_CONTEXT_REVOCATION_TYPE, <i>rgpvContext</i> is an array of pointers to<see cref="CERT_CONTEXT" /> structures. These contexts must contain sufficient information to allow the installable or registered revocation DLLs to find the revocation server. This information would normally be conveyed in an extension such as the CRLDistributionsPoints extension defined by the Internet Engineering Task Force (IETF) in PKIX Part 1.</para>
      <para>For efficiency, the more contexts that are passed in at one time, the better.</para>
    </param>
    <param name="dwFlags">
      <para>Indicates any special processing needs. This parameter can be one of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_VERIFY_REV_CHAIN_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Verification of the chain of certificates is done assuming each certificate except the first certificate is the issuer of the certificate that precedes it. If <i>dwRevType</i> is not CERT_CONTEXT_REVOCATION_TYPE, no assumptions are made about the order of the contexts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents the revocation handler from accessing any network-based resources for revocation checking.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, <b>dwUrlRetrievalTimeout</b> is the cumulative time-out across all URL wire retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_VERIFY_REV_SERVER_OCSP_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, this function only uses <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) for revocation checking. If the certificate does not have any OCSP AIA URLs, the <b>dwError</b> member of the <i>pRevStatus</i> parameter is set to CRYPT_E_NOT_IN_REVOCATION_DATABASE.</description>
        </listheader>
      </list>
    </param>
    <param name="pRevPara">Optionally set to assist in finding the issuer. For details, see the<see cref="CERT_REVOCATION_PARA" /> structure.</param>
    <param name="pRevStatus">
      <para>Only the <b>cbSize</b> member of the<see cref="CERT_REVOCATION_STATUS" /> pointed to by <i>pRevStatus</i> needs to be set before <b>CertVerifyRevocation</b> is called.</para>
      <para>If the function returns <b>FALSE</b>, this structure's members will contain error status information. For more information, see<see cref="CERT_REVOCATION_STATUS" />. For a description of how <i>pRevStatus</i> is updated when a revocation verification problem is encountered, see Remarks.</para>
    </param>
    <returns>
      <para>If the function successfully checks all of the contexts and none were revoked, the function returns <b>TRUE</b>. If the function fails, it returns <b>FALSE</b> and updates the <see cref="CERT_REVOCATION_STATUS" /> structure pointed to by <i>pRevStatus</i> as described in<b>CERT_REVOCATION_STATUS</b>.</para>
      <para>When the revocation handler for any of the contexts returns <b>FALSE</b> due to an error, the <b>dwError</b> member in the structure pointed to by <i>pRevStatus</i> will be set by the handler to specify which error was encountered.<see cref="GetLastError" /> returns an error code equal to the error specified in the <b>dwError</b> member of the <see cref="CERT_REVOCATION_STATUS" /> structure. <b>GetLastError</b> can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_REVOCATION_CHECK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An installed or registered revocation function was not able to do a revocation check on the context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_REVOCATION_DLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No installed or registered DLL was found that was able to verify revocation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_IN_REVOCATION_DATABASE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The context to be checked was not found in the revocation server's database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_REVOCATION_OFFLINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>It was not possible to connect to the revocation server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_REVOKED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The context was revoked. <b>dwReason</b> in <i>pRevStatus</i> contains the reason for revocation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The context was good.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>cbSize</b> in <i>pRevStatus</i> is less than sizeof(<see cref="CERT_REVOCATION_STATUS" />). Note that <b>dwError</b> in <i>pRevStatus</i> is not updated for this error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertVerifySubjectCertificateContext">
    <summary>The <b>CertVerifySubjectCertificateContext</b> function performs the enabled verification checks on a certificate by checking the validity of the certificate's issuer. The new<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptography-functions">Certificate Chain Verification Functions</a> are recommended instead of this function.</summary>
    <param name="pSubject">A pointer to a<see cref="CERT_CONTEXT" /> structure containing the subject's certificate.</param>
    <param name="pIssuer">A pointer to a <see cref="CERT_CONTEXT" /> containing the issuer's certificate. When checking just CERT_STORE_TIME_VALIDITY_FLAG, <i>pIssuer</i> can be <b>NULL</b>.</param>
    <param name="pdwFlags">
      <para>A pointer to a <b>DWORD</b> value contain verification check flags. The following flags can be set to enable verification checks on the subject certificate. They can be combined using a bitwise-<b>OR</b> operation to enable multiple verifications.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_REVOCATION_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Checks whether the subject certificate is on the issuer's revocation list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_SIGNATURE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the public key in the issuer's certificate to verify the signature on the subject certificate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_STORE_TIME_VALIDITY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Gets the current time and verifies that it is within the subject certificate's validity period.</description>
        </listheader>
      </list> <para>If an enabled verification check succeeds, its flag is set to zero. If it fails, then its flag is set upon return.</para><para>If CERT_STORE_REVOCATION_FLAG was enabled and the issuer does not have a CRL in the store, then CERT_STORE_NO_CRL_FLAG is set in addition to CERT_STORE_REVOCATION_FLAG.</para></param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
      <para>For a verification check failure, <b>TRUE</b> is still returned. <b>FALSE</b> is returned only when a bad parameter is passed in.</para>
      <para>For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An unsupported bit was set in <i>pdwFlags</i>. Any combination of CERT_STORE_SIGNATURE_FLAG, CERT_STORE_TIME_VALIDITY_FLAG, and CERT_STORE_REVOCATION_FLAG can be set. If <i>pIssuer</i> is <b>NULL</b>, only CERT_STORE_TIME_VALIDITY_FLAG can be set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CertVerifyTimeValidity">
    <summary>The <b>CertVerifyTimeValidity</b> function verifies the time validity of a certificate.</summary>
    <param name="pTimeToVerify">A pointer to a <see cref="FILETIME" /> structure containing the comparison time. If <b>NULL</b>, the current time is used.</param>
    <param name="pCertInfo">A pointer to the<see cref="CERT_INFO" /> structure of the certificate for which the time is being verified.</param>
    <returns>Returns a minus one if the comparison time is before the <b>NotBefore</b> member of the<see cref="CERT_INFO" /> structure. Returns a plus one if the comparison time is after the <b>NotAfter</b> member. Returns zero for valid time for the certificate.</returns>
  </member>
  <member name="Windows.CertVerifyValidityNesting">
    <summary>The <b>CertVerifyValidityNesting</b> function verifies that a subject certificate's time validity nests correctly within its issuer's time validity.</summary>
    <param name="pSubjectInfo">A pointer to the<see cref="CERT_INFO" /> structure of the subject certificate.</param>
    <param name="pIssuerInfo">A pointer to the <see cref="CERT_INFO" /> structure of the issuer certificate.</param>
    <returns>Returns <b>TRUE</b> if the <b>NotBefore</b> time of the subject's certificate is after the <b>NotBefore</b> time of the issuer's certificate and the <b>NotAfter</b> time of the subject's certificate is not after the <b>NotAfter</b> time of the issuer's certificate. Otherwise, returns <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.CryptAcquireCertificatePrivateKey">
    <summary>
      <para>The <b>CryptAcquireCertificatePrivateKey</b> function obtains the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> for a certificate. This function is used to obtain access to a user's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> when the user's certificate is available, but the handle of the user's key container is not available. This function can only be used by the owner of a private key and not by any other user.</para>
      <para>If a CSP handle and the key container containing a user's private key are available, the<see cref="CryptGetUserKey" /> function should be used instead.</para>
    </summary>
    <param name="pCert">The address of a<see cref="CERT_CONTEXT" /> structure that contains the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> for which a private key will be obtained.</param>
    <param name="dwFlags">
      <para>A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ACQUIRE_CACHE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a handle is already acquired and cached, that same handle is returned. Otherwise, a new handle is acquired and cached by using the certificate's <b>CERT_KEY_CONTEXT_PROP_ID</b> property. <para>When this flag is set, the <i>pfCallerFreeProvOrNCryptKey</i> parameter receives <b>FALSE</b> and the calling application must not release the handle. The handle is freed when the certificate context is freed; however, you must retain the certificate context referenced by the <i>pCert</i> parameter as long as the key is in use, otherwise operations that rely on the key will fail.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ACQUIRE_COMPARE_KEY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> in the certificate is compared with the public key returned by the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). If the keys do not match, the acquisition operation fails and the last error code is set to <b>NTE_BAD_PUBLIC_KEY</b>. If a cached handle is returned, no comparison is made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ACQUIRE_NO_HEALING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function will not attempt to re-create the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property in the certificate context if this property cannot be retrieved.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ACQUIRE_SILENT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP should not display any user interface (UI) for this context. If the CSP must display UI to operate, the call fails and the <b>NTE_SILENT_CONTEXT</b> error code is set as the last error.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ACQUIRE_USE_PROV_INFO_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the certificate's <b>CERT_KEY_PROV_INFO_PROP_ID</b> property to determine whether caching should be accomplished. For more information about the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property, see <see cref="CertSetCertificateContextProperty" />. <para>This function will only use caching if during a previous call, the <i>dwFlags</i> member of the<see cref="CRYPT_KEY_PROV_INFO" /> structure contained <b>CERT_SET_KEY_CONTEXT_PROP</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Any UI that is needed by the CSP or KSP will be a child of the <b>HWND</b> that is supplied in the <i>pvParameters</i> parameter. For a CSP key, using this flag will cause the <see cref="CryptSetProvParam" /> function with the flag PP_CLIENT_HWND using this <b>HWND</b> to be called with <b>NULL</b> for <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a>. For a KSP key, using this flag will cause the <see cref="NCryptSetProperty" /> function with the NCRYPT_WINDOW_HANDLE_PROPERTY flag to be called using the <b>HWND</b>. <para>Do not use this flag with <b>CRYPT_ACQUIRE_SILENT_FLAG</b>.</para></description>
        </listheader>
      </list> <para>The following flags determine which technology is used to obtain the key. If none of these flags is present, this function will only attempt to obtain the key by using CryptoAPI.</para><para><b>Windows Server 2003 and Windows XP:  </b>These flags are not supported.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG</b></term></listheader></list></description><description>This function will attempt to obtain the key by using CryptoAPI. If that fails, this function will attempt to obtain the key by using the Cryptography API: Next Generation (CNG).<para>The <i>pdwKeySpec</i> variable receives the <b>CERT_NCRYPT_KEY_SPEC</b> flag if CNG is used to obtain the key.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG</b></term></listheader></list></description><description>This function will only attempt to obtain the key by using CNG and will not use CryptoAPI to obtain the key.<para>The <i>pdwKeySpec</i> variable receives the <b>CERT_NCRYPT_KEY_SPEC</b> flag if CNG is used to obtain the key.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG</b></term></listheader></list></description><description>This function will attempt to obtain the key by using CNG. If that fails, this function will attempt to obtain the key by using CryptoAPI. <para>The <i>pdwKeySpec</i> variable receives the <b>CERT_NCRYPT_KEY_SPEC</b> flag if CNG is used to obtain the key.</para><div><b>Note</b>  CryptoAPI does not support the CNG Diffie-Hellman or DSA asymmetric algorithms. CryptoAPI only supports Diffie-Hellman and DSA public keys through the legacy CSPs. If this flag is set for a certificate that contains a Diffie-Hellman or DSA public key, this function will implicitly change this flag to <b>CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG</b> to first attempt to use CryptoAPI to obtain the key.</div></description></listheader></list></param>
    <param name="pvParameters">
      <para>If the <b>CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG</b> is set, then this is the address of an <b>HWND</b>. If the <b>CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG</b> is not set, then this parameter must be <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This parameter was named <i>pvReserved</i> and reserved for future use and must be <b>NULL</b>.</para>
    </param>
    <param name="phCryptProvOrNCryptKey">
      <para>The address of an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov-or-ncrypt-key-handle">HCRYPTPROV_OR_NCRYPT_KEY_HANDLE</a> variable that receives the handle of either the CryptoAPI provider or the CNG key. If the <i>pdwKeySpec</i> variable receives the <b>CERT_NCRYPT_KEY_SPEC</b> flag, this is a CNG key handle of type <b>NCRYPT_KEY_HANDLE</b>; otherwise, this is a CryptoAPI provider handle of type <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a>.</para>
      <para>For more information about when and how to release this handle, see the description of the <i>pfCallerFreeProvOrNCryptKey</i> parameter.</para>
    </param>
    <param name="pdwKeySpec">
      <para>The address of a <b>DWORD</b> variable that receives additional information about the key. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AT_KEYEXCHANGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key pair is a key exchange pair.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key pair is a signature pair.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CERT_NCRYPT_KEY_SPEC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key is a CNG key.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pfCallerFreeProvOrNCryptKey">
      <para>The address of a <b>BOOL</b> variable that receives a value that indicates whether the caller must free the handle returned in the <i>phCryptProvOrNCryptKey</i> variable. This receives <b>FALSE</b> if any of the following is true:</para>
      <list type="bullet">
        <item>
          <description>Public key acquisition or comparison fails.</description>
        </item>
        <item>
          <description>The <i>dwFlags</i> parameter contains the <b>CRYPT_ACQUIRE_CACHE_FLAG</b> flag.</description>
        </item>
        <item>
          <description>The <i>dwFlags</i> parameter contains the <b>CRYPT_ACQUIRE_USE_PROV_INFO_FLAG</b> flag, the certificate context property is set to <b>CERT_KEY_PROV_INFO_PROP_ID</b> with the <see cref="CRYPT_KEY_PROV_INFO" /> structure, and the <i>dwFlags</i> member of the <b>CRYPT_KEY_PROV_INFO</b> structure is set to <b>CERT_SET_KEY_CONTEXT_PROP_ID</b>.</description>
        </item>
      </list>If this variable receives <b>FALSE</b>, the calling application must not release the handle returned in the <i>phCryptProvOrNCryptKey</i> variable. The handle will be released on the last free action of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a>.<para>If this variable receives <b>TRUE</b>, the caller is responsible for releasing the handle returned in the <i>phCryptProvOrNCryptKey</i> variable. If the <i>pdwKeySpec</i> variable receives the <b>CERT_NCRYPT_KEY_SPEC</b> value, the handle must be released by passing it to the <see cref="NCryptFreeObject" /> function; otherwise, the handle is released by passing it to the <see cref="CryptReleaseContext" /> function.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PUBLIC_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> does not match the public key returned by the CSP. This error code is returned if the CRYPT_ACQUIRE_COMPARE_KEY_FLAG is set and the public key in the certificate does not match the public key returned by the cryptographic provider.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SILENT_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter contained the <b>CRYPT_ACQUIRE_SILENT_FLAG</b> flag and the CSP could not continue an operation without displaying a user interface.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptAcquireContext">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptAcquireContext</b> function is used to acquire a handle to a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> within a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This returned handle is used in calls to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CryptoAPI</a> functions that use the selected CSP.<para>This function first attempts to find a CSP with the characteristics described in the <i>dwProvType</i> and <i>pszProvider</i> parameters. If the CSP is found, the function attempts to find a key container within the CSP that matches the name specified by the <i>pszContainer</i> parameter. To acquire the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the key container of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> associated with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> of a certificate, use<see cref="CryptAcquireCertificatePrivateKey" />.</para><para>With the appropriate setting of <i>dwFlags</i>, this function can also create and destroy key containers and can provide access to a CSP with a temporary key container if access to a private key is not required.</para></summary>
    <param name="phProv">A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the <see cref="CryptReleaseContext" /> function.</param>
    <param name="szContainer">
      <para>The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when <i>dwFlags</i> is set to CRYPT_VERIFYCONTEXT, <i>pszContainer</i> must be set to <b>NULL</b>. However, for hardware-based CSPs, such as a smart card CSP, can be access publicly available information in the specfied container.</para>
      <para>For more information about the usage of the <i>pszContainer</i> parameter, see Remarks.</para>
    </param>
    <param name="szProvider">
      <para>A null-terminated string that contains the name of the CSP to be used.</para>
      <para>If this parameter is <b>NULL</b>, the user default provider is used. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-service-provider-contexts">Cryptographic Service Provider Contexts</a>. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</para>
      <para>An application can obtain the name of the CSP in use by using the <see cref="CryptGetProvParam" /> function to read the PP_NAME CSP value in the <i>dwParam</i> parameter.</para>
      <para>The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP.</para>
    </param>
    <param name="dwProvType">Specifies the type of provider to acquire. Defined provider types are discussed in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-types">Cryptographic Provider Types</a>.</param>
    <param name="dwFlags">
      <para>Flag values. This parameter is usually set to zero, but some applications set one or more of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFYCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This option is intended for applications that are using ephemeral keys, or applications that do not require access to persisted private keys, such as applications that perform only <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a> verification. Only applications that create signatures or decrypt messages need access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>. In most cases, this flag should be set.<para>For file-based CSPs, when this flag is set, the <i>pszContainer</i> parameter must be set to <b>NULL</b>. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a> can be created, but they are not persisted.</para><para>For hardware-based CSPs, such as a smart card CSP, if the <i>pszContainer</i> parameter is <b>NULL</b> or blank, this flag implies that no access to any keys is required, and that no UI should be presented to the user. This form is used to connect to the CSP to query its capabilities but not to actually use its keys. If the <i>pszContainer</i> parameter is not <b>NULL</b> and not blank, then this flag implies that access to only the publicly available information within the specified container is required. The CSP should not ask for a PIN. Attempts to access private information (for example, the <see cref="CryptSignHash" /> function) will fail.</para><para>When <b>CryptAcquireContext</b> is called, many CSPs require input from the owning user before granting access to the private keys in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>. For example, the private keys can be encrypted, requiring a password from the user before they can be used. However, if the <b>CRYPT_VERIFYCONTEXT</b> flag is specified, access to the private keys is not required and the user interface can be bypassed.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NEWKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a new key container with the name specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, a key container with the default name is created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_KEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.<para><b>Windows XP:  </b>A key container created without this flag by an administrator can be accessed only by the user creating the key container and the local system account.</para><para>A key container created without this flag by a user that is not an administrator can be accessed only by the user creating the key container and the local system account.</para><para>The CRYPT_MACHINE_KEYSET flag can be combined with all of the other flags to indicate that the key container of interest is a computer key container and the CSP treats it as such. For Base Providers, this means that the keys are stored locally on the computer that created the key container. If a key container is to be a computer container, the CRYPT_MACHINE_KEYSET flag must be used with all calls to <b>CryptAcquireContext</b> that reference the computer container. The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by a user with administrator <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para><b>Windows XP:  </b>The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The key container created with CRYPT_MACHINE_KEYSET by a user that is not an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The CRYPT_MACHINE_KEYSET flag is useful when the user is accessing from a service or user account that did not log on interactively. When key containers are created, most CSPs do not automatically create any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. These keys must be created as a separate step with the<see cref="CryptGenKey" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETEKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Delete the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, the key container with the default name is deleted. All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pairs</a> in the key container are also destroyed. <para>When this flag is set, the value returned in <i>phProv</i> is undefined, and thus, the<see cref="CryptReleaseContext" /> function need not be called afterward.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SILENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application requests that the CSP not display any user interface (UI) for this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to <see cref="CryptGenKey" /> with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT.<para>CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTAINER_OPTIONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using <see cref="CryptSetProvParam" />. This flag can only be used with smart card CSPs. <para><b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes defined in Winerror.h follow.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
              <listheader>
                <term>107L</term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs set this error if the CRYPT_DELETEKEYSET flag value is set and another thread or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> is using this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2L</term>
              </listheader>
            </list>
          </description>
          <description>The profile of the user is not loaded and cannot be found. This happens when the application impersonates a user, for example, the IUSR_<i>ComputerName</i> account.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87L</term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>8L</term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090009L</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY_STATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000BL</term>
              </listheader>
            </list>
          </description>
          <description>The user password has changed since the private keys were encrypted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090016L</term>
              </listheader>
            </list>
          </description>
          <description>The key container could not be opened. A common cause of this error is that the key container does not exist. To create a key container, call <see cref="CryptAcquireContext" /> using the CRYPT_NEWKEYSET flag. This error code can also indicate that access to an existing key container is denied. Access rights to the container can be granted by the key set creator by using <see cref="CryptSetProvParam" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET_PARAM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> or <i>pszProvider</i> parameter is set to a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PROV_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090014L</term>
              </listheader>
            </list>
          </description>
          <description>The value of the <i>dwProvType</i> parameter is out of range. All provider types must be from 1 through 999, inclusive.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090006L</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL signature could not be verified. Either the DLL or the digital signature has been tampered with.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is CRYPT_NEWKEYSET, but the key container already exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001AL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> key container was found but is corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090019L</term>
              </listheader>
            </list>
          </description>
          <description>The requested provider does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000EL</term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_DLL_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001EL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file does not exist or is not on the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090018L</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> is corrupt. This error can relate to either the user default CSP list or the computer default CSP list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NO_MATCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001BL</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> does not match the provider type found. Note that this error can only occur when <i>pszProvider</i> specifies an actual CSP name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090017L</term>
              </listheader>
            </list>
          </description>
          <description>No entry exists for the provider type specified by <i>dwProvType</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROVIDER_DLL_FAIL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001DL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file could not be loaded or failed to initialize.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SIGNATURE_FILE_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001CL</term>
              </listheader>
            </list>
          </description>
          <description>An error occurred while loading the DLL file image, prior to verifying its signature.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptAcquireContextA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptAcquireContext</b> function is used to acquire a handle to a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> within a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This returned handle is used in calls to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CryptoAPI</a> functions that use the selected CSP.<para>This function first attempts to find a CSP with the characteristics described in the <i>dwProvType</i> and <i>pszProvider</i> parameters. If the CSP is found, the function attempts to find a key container within the CSP that matches the name specified by the <i>pszContainer</i> parameter. To acquire the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the key container of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> associated with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> of a certificate, use<see cref="CryptAcquireCertificatePrivateKey" />.</para><para>With the appropriate setting of <i>dwFlags</i>, this function can also create and destroy key containers and can provide access to a CSP with a temporary key container if access to a private key is not required.</para></summary>
    <param name="phProv">A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the <see cref="CryptReleaseContext" /> function.</param>
    <param name="szContainer">
      <para>The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when <i>dwFlags</i> is set to CRYPT_VERIFYCONTEXT, <i>pszContainer</i> must be set to <b>NULL</b>. However, for hardware-based CSPs, such as a smart card CSP, can be access publicly available information in the specfied container.</para>
      <para>For more information about the usage of the <i>pszContainer</i> parameter, see Remarks.</para>
    </param>
    <param name="szProvider">
      <para>A null-terminated string that contains the name of the CSP to be used.</para>
      <para>If this parameter is <b>NULL</b>, the user default provider is used. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-service-provider-contexts">Cryptographic Service Provider Contexts</a>. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</para>
      <para>An application can obtain the name of the CSP in use by using the <see cref="CryptGetProvParam" /> function to read the PP_NAME CSP value in the <i>dwParam</i> parameter.</para>
      <para>The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP.</para>
    </param>
    <param name="dwProvType">Specifies the type of provider to acquire. Defined provider types are discussed in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-types">Cryptographic Provider Types</a>.</param>
    <param name="dwFlags">
      <para>Flag values. This parameter is usually set to zero, but some applications set one or more of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFYCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This option is intended for applications that are using ephemeral keys, or applications that do not require access to persisted private keys, such as applications that perform only <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a> verification. Only applications that create signatures or decrypt messages need access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>. In most cases, this flag should be set.<para>For file-based CSPs, when this flag is set, the <i>pszContainer</i> parameter must be set to <b>NULL</b>. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a> can be created, but they are not persisted.</para><para>For hardware-based CSPs, such as a smart card CSP, if the <i>pszContainer</i> parameter is <b>NULL</b> or blank, this flag implies that no access to any keys is required, and that no UI should be presented to the user. This form is used to connect to the CSP to query its capabilities but not to actually use its keys. If the <i>pszContainer</i> parameter is not <b>NULL</b> and not blank, then this flag implies that access to only the publicly available information within the specified container is required. The CSP should not ask for a PIN. Attempts to access private information (for example, the <see cref="CryptSignHash" /> function) will fail.</para><para>When <b>CryptAcquireContext</b> is called, many CSPs require input from the owning user before granting access to the private keys in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>. For example, the private keys can be encrypted, requiring a password from the user before they can be used. However, if the <b>CRYPT_VERIFYCONTEXT</b> flag is specified, access to the private keys is not required and the user interface can be bypassed.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NEWKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a new key container with the name specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, a key container with the default name is created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_KEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.<para><b>Windows XP:  </b>A key container created without this flag by an administrator can be accessed only by the user creating the key container and the local system account.</para><para>A key container created without this flag by a user that is not an administrator can be accessed only by the user creating the key container and the local system account.</para><para>The CRYPT_MACHINE_KEYSET flag can be combined with all of the other flags to indicate that the key container of interest is a computer key container and the CSP treats it as such. For Base Providers, this means that the keys are stored locally on the computer that created the key container. If a key container is to be a computer container, the CRYPT_MACHINE_KEYSET flag must be used with all calls to <b>CryptAcquireContext</b> that reference the computer container. The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by a user with administrator <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para><b>Windows XP:  </b>The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The key container created with CRYPT_MACHINE_KEYSET by a user that is not an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The CRYPT_MACHINE_KEYSET flag is useful when the user is accessing from a service or user account that did not log on interactively. When key containers are created, most CSPs do not automatically create any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. These keys must be created as a separate step with the<see cref="CryptGenKey" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETEKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Delete the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, the key container with the default name is deleted. All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pairs</a> in the key container are also destroyed. <para>When this flag is set, the value returned in <i>phProv</i> is undefined, and thus, the<see cref="CryptReleaseContext" /> function need not be called afterward.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SILENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application requests that the CSP not display any user interface (UI) for this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to <see cref="CryptGenKey" /> with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT.<para>CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTAINER_OPTIONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using <see cref="CryptSetProvParam" />. This flag can only be used with smart card CSPs. <para><b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes defined in Winerror.h follow.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
              <listheader>
                <term>107L</term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs set this error if the CRYPT_DELETEKEYSET flag value is set and another thread or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> is using this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2L</term>
              </listheader>
            </list>
          </description>
          <description>The profile of the user is not loaded and cannot be found. This happens when the application impersonates a user, for example, the IUSR_<i>ComputerName</i> account.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87L</term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>8L</term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090009L</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY_STATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000BL</term>
              </listheader>
            </list>
          </description>
          <description>The user password has changed since the private keys were encrypted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090016L</term>
              </listheader>
            </list>
          </description>
          <description>The key container could not be opened. A common cause of this error is that the key container does not exist. To create a key container, call <see cref="CryptAcquireContext" /> using the CRYPT_NEWKEYSET flag. This error code can also indicate that access to an existing key container is denied. Access rights to the container can be granted by the key set creator by using <see cref="CryptSetProvParam" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET_PARAM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> or <i>pszProvider</i> parameter is set to a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PROV_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090014L</term>
              </listheader>
            </list>
          </description>
          <description>The value of the <i>dwProvType</i> parameter is out of range. All provider types must be from 1 through 999, inclusive.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090006L</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL signature could not be verified. Either the DLL or the digital signature has been tampered with.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is CRYPT_NEWKEYSET, but the key container already exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001AL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> key container was found but is corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090019L</term>
              </listheader>
            </list>
          </description>
          <description>The requested provider does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000EL</term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_DLL_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001EL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file does not exist or is not on the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090018L</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> is corrupt. This error can relate to either the user default CSP list or the computer default CSP list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NO_MATCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001BL</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> does not match the provider type found. Note that this error can only occur when <i>pszProvider</i> specifies an actual CSP name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090017L</term>
              </listheader>
            </list>
          </description>
          <description>No entry exists for the provider type specified by <i>dwProvType</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROVIDER_DLL_FAIL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001DL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file could not be loaded or failed to initialize.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SIGNATURE_FILE_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001CL</term>
              </listheader>
            </list>
          </description>
          <description>An error occurred while loading the DLL file image, prior to verifying its signature.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptAcquireContextW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptAcquireContext</b> function is used to acquire a handle to a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> within a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This returned handle is used in calls to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CryptoAPI</a> functions that use the selected CSP.<para>This function first attempts to find a CSP with the characteristics described in the <i>dwProvType</i> and <i>pszProvider</i> parameters. If the CSP is found, the function attempts to find a key container within the CSP that matches the name specified by the <i>pszContainer</i> parameter. To acquire the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the key container of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> associated with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> of a certificate, use<see cref="CryptAcquireCertificatePrivateKey" />.</para><para>With the appropriate setting of <i>dwFlags</i>, this function can also create and destroy key containers and can provide access to a CSP with a temporary key container if access to a private key is not required.</para></summary>
    <param name="phProv">A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the <see cref="CryptReleaseContext" /> function.</param>
    <param name="szContainer">
      <para>The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when <i>dwFlags</i> is set to CRYPT_VERIFYCONTEXT, <i>pszContainer</i> must be set to <b>NULL</b>. However, for hardware-based CSPs, such as a smart card CSP, can be access publicly available information in the specfied container.</para>
      <para>For more information about the usage of the <i>pszContainer</i> parameter, see Remarks.</para>
    </param>
    <param name="szProvider">
      <para>A null-terminated string that contains the name of the CSP to be used.</para>
      <para>If this parameter is <b>NULL</b>, the user default provider is used. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-service-provider-contexts">Cryptographic Service Provider Contexts</a>. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</para>
      <para>An application can obtain the name of the CSP in use by using the <see cref="CryptGetProvParam" /> function to read the PP_NAME CSP value in the <i>dwParam</i> parameter.</para>
      <para>The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP.</para>
    </param>
    <param name="dwProvType">Specifies the type of provider to acquire. Defined provider types are discussed in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-types">Cryptographic Provider Types</a>.</param>
    <param name="dwFlags">
      <para>Flag values. This parameter is usually set to zero, but some applications set one or more of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFYCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This option is intended for applications that are using ephemeral keys, or applications that do not require access to persisted private keys, such as applications that perform only <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a> verification. Only applications that create signatures or decrypt messages need access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>. In most cases, this flag should be set.<para>For file-based CSPs, when this flag is set, the <i>pszContainer</i> parameter must be set to <b>NULL</b>. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a> can be created, but they are not persisted.</para><para>For hardware-based CSPs, such as a smart card CSP, if the <i>pszContainer</i> parameter is <b>NULL</b> or blank, this flag implies that no access to any keys is required, and that no UI should be presented to the user. This form is used to connect to the CSP to query its capabilities but not to actually use its keys. If the <i>pszContainer</i> parameter is not <b>NULL</b> and not blank, then this flag implies that access to only the publicly available information within the specified container is required. The CSP should not ask for a PIN. Attempts to access private information (for example, the <see cref="CryptSignHash" /> function) will fail.</para><para>When <b>CryptAcquireContext</b> is called, many CSPs require input from the owning user before granting access to the private keys in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>. For example, the private keys can be encrypted, requiring a password from the user before they can be used. However, if the <b>CRYPT_VERIFYCONTEXT</b> flag is specified, access to the private keys is not required and the user interface can be bypassed.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NEWKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a new key container with the name specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, a key container with the default name is created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_KEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.<para><b>Windows XP:  </b>A key container created without this flag by an administrator can be accessed only by the user creating the key container and the local system account.</para><para>A key container created without this flag by a user that is not an administrator can be accessed only by the user creating the key container and the local system account.</para><para>The CRYPT_MACHINE_KEYSET flag can be combined with all of the other flags to indicate that the key container of interest is a computer key container and the CSP treats it as such. For Base Providers, this means that the keys are stored locally on the computer that created the key container. If a key container is to be a computer container, the CRYPT_MACHINE_KEYSET flag must be used with all calls to <b>CryptAcquireContext</b> that reference the computer container. The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by a user with administrator <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para><b>Windows XP:  </b>The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The key container created with CRYPT_MACHINE_KEYSET by a user that is not an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The CRYPT_MACHINE_KEYSET flag is useful when the user is accessing from a service or user account that did not log on interactively. When key containers are created, most CSPs do not automatically create any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. These keys must be created as a separate step with the<see cref="CryptGenKey" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETEKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Delete the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, the key container with the default name is deleted. All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pairs</a> in the key container are also destroyed. <para>When this flag is set, the value returned in <i>phProv</i> is undefined, and thus, the<see cref="CryptReleaseContext" /> function need not be called afterward.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SILENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application requests that the CSP not display any user interface (UI) for this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to <see cref="CryptGenKey" /> with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT.<para>CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTAINER_OPTIONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using <see cref="CryptSetProvParam" />. This flag can only be used with smart card CSPs. <para><b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes defined in Winerror.h follow.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
              <listheader>
                <term>107L</term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs set this error if the CRYPT_DELETEKEYSET flag value is set and another thread or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> is using this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2L</term>
              </listheader>
            </list>
          </description>
          <description>The profile of the user is not loaded and cannot be found. This happens when the application impersonates a user, for example, the IUSR_<i>ComputerName</i> account.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87L</term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>8L</term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090009L</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY_STATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000BL</term>
              </listheader>
            </list>
          </description>
          <description>The user password has changed since the private keys were encrypted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090016L</term>
              </listheader>
            </list>
          </description>
          <description>The key container could not be opened. A common cause of this error is that the key container does not exist. To create a key container, call <see cref="CryptAcquireContext" /> using the CRYPT_NEWKEYSET flag. This error code can also indicate that access to an existing key container is denied. Access rights to the container can be granted by the key set creator by using <see cref="CryptSetProvParam" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET_PARAM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> or <i>pszProvider</i> parameter is set to a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PROV_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090014L</term>
              </listheader>
            </list>
          </description>
          <description>The value of the <i>dwProvType</i> parameter is out of range. All provider types must be from 1 through 999, inclusive.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090006L</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL signature could not be verified. Either the DLL or the digital signature has been tampered with.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is CRYPT_NEWKEYSET, but the key container already exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001AL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> key container was found but is corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090019L</term>
              </listheader>
            </list>
          </description>
          <description>The requested provider does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000EL</term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_DLL_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001EL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file does not exist or is not on the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090018L</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> is corrupt. This error can relate to either the user default CSP list or the computer default CSP list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NO_MATCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001BL</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> does not match the provider type found. Note that this error can only occur when <i>pszProvider</i> specifies an actual CSP name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090017L</term>
              </listheader>
            </list>
          </description>
          <description>No entry exists for the provider type specified by <i>dwProvType</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROVIDER_DLL_FAIL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001DL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file could not be loaded or failed to initialize.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SIGNATURE_FILE_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001CL</term>
              </listheader>
            </list>
          </description>
          <description>An error occurred while loading the DLL file image, prior to verifying its signature.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptAcquireContext">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptAcquireContext</b> function is used to acquire a handle to a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> within a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This returned handle is used in calls to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CryptoAPI</a> functions that use the selected CSP.<para>This function first attempts to find a CSP with the characteristics described in the <i>dwProvType</i> and <i>pszProvider</i> parameters. If the CSP is found, the function attempts to find a key container within the CSP that matches the name specified by the <i>pszContainer</i> parameter. To acquire the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the key container of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> associated with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> of a certificate, use<see cref="CryptAcquireCertificatePrivateKey" />.</para><para>With the appropriate setting of <i>dwFlags</i>, this function can also create and destroy key containers and can provide access to a CSP with a temporary key container if access to a private key is not required.</para></summary>
    <param name="phProv">A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the <see cref="CryptReleaseContext" /> function.</param>
    <param name="szContainer">
      <para>The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when <i>dwFlags</i> is set to CRYPT_VERIFYCONTEXT, <i>pszContainer</i> must be set to <b>NULL</b>. However, for hardware-based CSPs, such as a smart card CSP, can be access publicly available information in the specfied container.</para>
      <para>For more information about the usage of the <i>pszContainer</i> parameter, see Remarks.</para>
    </param>
    <param name="szProvider">
      <para>A null-terminated string that contains the name of the CSP to be used.</para>
      <para>If this parameter is <b>NULL</b>, the user default provider is used. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-service-provider-contexts">Cryptographic Service Provider Contexts</a>. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</para>
      <para>An application can obtain the name of the CSP in use by using the <see cref="CryptGetProvParam" /> function to read the PP_NAME CSP value in the <i>dwParam</i> parameter.</para>
      <para>The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP.</para>
    </param>
    <param name="dwProvType">Specifies the type of provider to acquire. Defined provider types are discussed in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-types">Cryptographic Provider Types</a>.</param>
    <param name="dwFlags">
      <para>One or more of the following flags. Note, most applications should set the <b>CRYPT_VERIFYCONTEXT</b> flag unless they need to create digital signatures or decrypt messages.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFYCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not need access to persisted private keys. Apps that use ephemeral keys, or that perform only <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a> verification should set this flag. Only applications that create signatures or decrypt messages need access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> (and should not set this flag). <para>For file-based CSPs, when this flag is set, the <i>pszContainer</i> parameter must be set to <b>NULL</b>. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a> can be created, but they are not persisted.</para><para>For hardware-based CSPs, such as a smart card CSP, if the <i>pszContainer</i> parameter is <b>NULL</b> or blank, this flag implies that no access to any keys is required, and that no UI should be presented to the user. This form is used to connect to the CSP to query its capabilities but not to actually use its keys. If the <i>pszContainer</i> parameter is not <b>NULL</b> and not blank, then this flag implies that access to only the publicly available information within the specified container is required. The CSP should not ask for a PIN. Attempts to access private information (for example, the <see cref="CryptSignHash" /> function) will fail.</para><para>When <b>CryptAcquireContext</b> is called, many CSPs require input from the owning user before granting access to the private keys in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>. For example, the private keys can be encrypted, requiring a password from the user before they can be used. However, if the <b>CRYPT_VERIFYCONTEXT</b> flag is specified, access to the private keys is not required and the user interface can be bypassed.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NEWKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a new key container with the name specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, a key container with the default name is created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_KEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.<para><b>Windows XP:  </b>A key container created without this flag by an administrator can be accessed only by the user creating the key container and the local system account.</para><para>A key container created without this flag by a user that is not an administrator can be accessed only by the user creating the key container and the local system account.</para><para>The CRYPT_MACHINE_KEYSET flag can be combined with all of the other flags to indicate that the key container of interest is a computer key container and the CSP treats it as such. For Base Providers, this means that the keys are stored locally on the computer that created the key container. If a key container is to be a computer container, the CRYPT_MACHINE_KEYSET flag must be used with all calls to <b>CryptAcquireContext</b> that reference the computer container. The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by a user with administrator <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para><b>Windows XP:  </b>The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The key container created with CRYPT_MACHINE_KEYSET by a user that is not an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The CRYPT_MACHINE_KEYSET flag is useful when the user is accessing from a service or user account that did not log on interactively. When key containers are created, most CSPs do not automatically create any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. These keys must be created as a separate step with the<see cref="CryptGenKey" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETEKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Delete the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, the key container with the default name is deleted. All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pairs</a> in the key container are also destroyed. <para>When this flag is set, the value returned in <i>phProv</i> is undefined, and thus, the<see cref="CryptReleaseContext" /> function need not be called afterward.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SILENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application requests that the CSP not display any user interface (UI) for this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to <see cref="CryptGenKey" /> with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT.<para>CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTAINER_OPTIONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using <see cref="CryptSetProvParam" />. This flag can only be used with smart card CSPs. <para><b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes defined in Winerror.h follow.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
              <listheader>
                <term>107L</term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs set this error if the CRYPT_DELETEKEYSET flag value is set and another thread or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> is using this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2L</term>
              </listheader>
            </list>
          </description>
          <description>The profile of the user is not loaded and cannot be found. This happens when the application impersonates a user, for example, the IUSR_<i>ComputerName</i> account.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87L</term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>8L</term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090009L</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY_STATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000BL</term>
              </listheader>
            </list>
          </description>
          <description>The user password has changed since the private keys were encrypted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090016L</term>
              </listheader>
            </list>
          </description>
          <description>The key container could not be opened. A common cause of this error is that the key container does not exist. To create a key container, call <see cref="CryptAcquireContext" /> using the CRYPT_NEWKEYSET flag. This error code can also indicate that access to an existing key container is denied. Access rights to the container can be granted by the key set creator by using <see cref="CryptSetProvParam" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET_PARAM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> or <i>pszProvider</i> parameter is set to a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PROV_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090014L</term>
              </listheader>
            </list>
          </description>
          <description>The value of the <i>dwProvType</i> parameter is out of range. All provider types must be from 1 through 999, inclusive.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090006L</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL signature could not be verified. Either the DLL or the digital signature has been tampered with.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is CRYPT_NEWKEYSET, but the key container already exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001AL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> key container was found but is corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090019L</term>
              </listheader>
            </list>
          </description>
          <description>The requested provider does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000EL</term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_DLL_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001EL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file does not exist or is not on the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090018L</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> is corrupt. This error can relate to either the user default CSP list or the computer default CSP list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NO_MATCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001BL</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> does not match the provider type found. Note that this error can only occur when <i>pszProvider</i> specifies an actual CSP name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090017L</term>
              </listheader>
            </list>
          </description>
          <description>No entry exists for the provider type specified by <i>dwProvType</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROVIDER_DLL_FAIL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001DL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file could not be loaded or failed to initialize.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SIGNATURE_FILE_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001CL</term>
              </listheader>
            </list>
          </description>
          <description>An error occurred while loading the DLL file image, prior to verifying its signature.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptAcquireContextA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptAcquireContext</b> function is used to acquire a handle to a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> within a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This returned handle is used in calls to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CryptoAPI</a> functions that use the selected CSP.<para>This function first attempts to find a CSP with the characteristics described in the <i>dwProvType</i> and <i>pszProvider</i> parameters. If the CSP is found, the function attempts to find a key container within the CSP that matches the name specified by the <i>pszContainer</i> parameter. To acquire the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the key container of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> associated with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> of a certificate, use<see cref="CryptAcquireCertificatePrivateKey" />.</para><para>With the appropriate setting of <i>dwFlags</i>, this function can also create and destroy key containers and can provide access to a CSP with a temporary key container if access to a private key is not required.</para></summary>
    <param name="phProv">A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the <see cref="CryptReleaseContext" /> function.</param>
    <param name="szContainer">
      <para>The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when <i>dwFlags</i> is set to CRYPT_VERIFYCONTEXT, <i>pszContainer</i> must be set to <b>NULL</b>. However, for hardware-based CSPs, such as a smart card CSP, can be access publicly available information in the specfied container.</para>
      <para>For more information about the usage of the <i>pszContainer</i> parameter, see Remarks.</para>
    </param>
    <param name="szProvider">
      <para>A null-terminated string that contains the name of the CSP to be used.</para>
      <para>If this parameter is <b>NULL</b>, the user default provider is used. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-service-provider-contexts">Cryptographic Service Provider Contexts</a>. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</para>
      <para>An application can obtain the name of the CSP in use by using the <see cref="CryptGetProvParam" /> function to read the PP_NAME CSP value in the <i>dwParam</i> parameter.</para>
      <para>The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP.</para>
    </param>
    <param name="dwProvType">Specifies the type of provider to acquire. Defined provider types are discussed in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-types">Cryptographic Provider Types</a>.</param>
    <param name="dwFlags">
      <para>One or more of the following flags. Note, most applications should set the <b>CRYPT_VERIFYCONTEXT</b> flag unless they need to create digital signatures or decrypt messages.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFYCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not need access to persisted private keys. Apps that use ephemeral keys, or that perform only <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a> verification should set this flag. Only applications that create signatures or decrypt messages need access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> (and should not set this flag). <para>For file-based CSPs, when this flag is set, the <i>pszContainer</i> parameter must be set to <b>NULL</b>. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a> can be created, but they are not persisted.</para><para>For hardware-based CSPs, such as a smart card CSP, if the <i>pszContainer</i> parameter is <b>NULL</b> or blank, this flag implies that no access to any keys is required, and that no UI should be presented to the user. This form is used to connect to the CSP to query its capabilities but not to actually use its keys. If the <i>pszContainer</i> parameter is not <b>NULL</b> and not blank, then this flag implies that access to only the publicly available information within the specified container is required. The CSP should not ask for a PIN. Attempts to access private information (for example, the <see cref="CryptSignHash" /> function) will fail.</para><para>When <b>CryptAcquireContext</b> is called, many CSPs require input from the owning user before granting access to the private keys in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>. For example, the private keys can be encrypted, requiring a password from the user before they can be used. However, if the <b>CRYPT_VERIFYCONTEXT</b> flag is specified, access to the private keys is not required and the user interface can be bypassed.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NEWKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a new key container with the name specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, a key container with the default name is created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_KEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.<para><b>Windows XP:  </b>A key container created without this flag by an administrator can be accessed only by the user creating the key container and the local system account.</para><para>A key container created without this flag by a user that is not an administrator can be accessed only by the user creating the key container and the local system account.</para><para>The CRYPT_MACHINE_KEYSET flag can be combined with all of the other flags to indicate that the key container of interest is a computer key container and the CSP treats it as such. For Base Providers, this means that the keys are stored locally on the computer that created the key container. If a key container is to be a computer container, the CRYPT_MACHINE_KEYSET flag must be used with all calls to <b>CryptAcquireContext</b> that reference the computer container. The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by a user with administrator <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para><b>Windows XP:  </b>The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The key container created with CRYPT_MACHINE_KEYSET by a user that is not an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The CRYPT_MACHINE_KEYSET flag is useful when the user is accessing from a service or user account that did not log on interactively. When key containers are created, most CSPs do not automatically create any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. These keys must be created as a separate step with the<see cref="CryptGenKey" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETEKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Delete the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, the key container with the default name is deleted. All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pairs</a> in the key container are also destroyed. <para>When this flag is set, the value returned in <i>phProv</i> is undefined, and thus, the<see cref="CryptReleaseContext" /> function need not be called afterward.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SILENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application requests that the CSP not display any user interface (UI) for this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to <see cref="CryptGenKey" /> with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT.<para>CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTAINER_OPTIONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using <see cref="CryptSetProvParam" />. This flag can only be used with smart card CSPs. <para><b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes defined in Winerror.h follow.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
              <listheader>
                <term>107L</term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs set this error if the CRYPT_DELETEKEYSET flag value is set and another thread or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> is using this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2L</term>
              </listheader>
            </list>
          </description>
          <description>The profile of the user is not loaded and cannot be found. This happens when the application impersonates a user, for example, the IUSR_<i>ComputerName</i> account.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87L</term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>8L</term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090009L</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY_STATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000BL</term>
              </listheader>
            </list>
          </description>
          <description>The user password has changed since the private keys were encrypted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090016L</term>
              </listheader>
            </list>
          </description>
          <description>The key container could not be opened. A common cause of this error is that the key container does not exist. To create a key container, call <see cref="CryptAcquireContext" /> using the CRYPT_NEWKEYSET flag. This error code can also indicate that access to an existing key container is denied. Access rights to the container can be granted by the key set creator by using <see cref="CryptSetProvParam" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET_PARAM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> or <i>pszProvider</i> parameter is set to a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PROV_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090014L</term>
              </listheader>
            </list>
          </description>
          <description>The value of the <i>dwProvType</i> parameter is out of range. All provider types must be from 1 through 999, inclusive.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090006L</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL signature could not be verified. Either the DLL or the digital signature has been tampered with.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is CRYPT_NEWKEYSET, but the key container already exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001AL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> key container was found but is corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090019L</term>
              </listheader>
            </list>
          </description>
          <description>The requested provider does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000EL</term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_DLL_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001EL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file does not exist or is not on the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090018L</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> is corrupt. This error can relate to either the user default CSP list or the computer default CSP list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NO_MATCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001BL</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> does not match the provider type found. Note that this error can only occur when <i>pszProvider</i> specifies an actual CSP name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090017L</term>
              </listheader>
            </list>
          </description>
          <description>No entry exists for the provider type specified by <i>dwProvType</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROVIDER_DLL_FAIL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001DL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file could not be loaded or failed to initialize.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SIGNATURE_FILE_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001CL</term>
              </listheader>
            </list>
          </description>
          <description>An error occurred while loading the DLL file image, prior to verifying its signature.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptAcquireContextW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptAcquireContext</b> function is used to acquire a handle to a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> within a particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This returned handle is used in calls to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CryptoAPI</a> functions that use the selected CSP.<para>This function first attempts to find a CSP with the characteristics described in the <i>dwProvType</i> and <i>pszProvider</i> parameters. If the CSP is found, the function attempts to find a key container within the CSP that matches the name specified by the <i>pszContainer</i> parameter. To acquire the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> and the key container of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> associated with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> of a certificate, use<see cref="CryptAcquireCertificatePrivateKey" />.</para><para>With the appropriate setting of <i>dwFlags</i>, this function can also create and destroy key containers and can provide access to a CSP with a temporary key container if access to a private key is not required.</para></summary>
    <param name="phProv">A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the <see cref="CryptReleaseContext" /> function.</param>
    <param name="szContainer">
      <para>The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when <i>dwFlags</i> is set to CRYPT_VERIFYCONTEXT, <i>pszContainer</i> must be set to <b>NULL</b>. However, for hardware-based CSPs, such as a smart card CSP, can be access publicly available information in the specfied container.</para>
      <para>For more information about the usage of the <i>pszContainer</i> parameter, see Remarks.</para>
    </param>
    <param name="szProvider">
      <para>A null-terminated string that contains the name of the CSP to be used.</para>
      <para>If this parameter is <b>NULL</b>, the user default provider is used. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-service-provider-contexts">Cryptographic Service Provider Contexts</a>. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</para>
      <para>An application can obtain the name of the CSP in use by using the <see cref="CryptGetProvParam" /> function to read the PP_NAME CSP value in the <i>dwParam</i> parameter.</para>
      <para>The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP.</para>
    </param>
    <param name="dwProvType">Specifies the type of provider to acquire. Defined provider types are discussed in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-types">Cryptographic Provider Types</a>.</param>
    <param name="dwFlags">
      <para>One or more of the following flags. Note, most applications should set the <b>CRYPT_VERIFYCONTEXT</b> flag unless they need to create digital signatures or decrypt messages.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFYCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not need access to persisted private keys. Apps that use ephemeral keys, or that perform only <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a> verification should set this flag. Only applications that create signatures or decrypt messages need access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> (and should not set this flag). <para>For file-based CSPs, when this flag is set, the <i>pszContainer</i> parameter must be set to <b>NULL</b>. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a> can be created, but they are not persisted.</para><para>For hardware-based CSPs, such as a smart card CSP, if the <i>pszContainer</i> parameter is <b>NULL</b> or blank, this flag implies that no access to any keys is required, and that no UI should be presented to the user. This form is used to connect to the CSP to query its capabilities but not to actually use its keys. If the <i>pszContainer</i> parameter is not <b>NULL</b> and not blank, then this flag implies that access to only the publicly available information within the specified container is required. The CSP should not ask for a PIN. Attempts to access private information (for example, the <see cref="CryptSignHash" /> function) will fail.</para><para>When <b>CryptAcquireContext</b> is called, many CSPs require input from the owning user before granting access to the private keys in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>. For example, the private keys can be encrypted, requiring a password from the user before they can be used. However, if the <b>CRYPT_VERIFYCONTEXT</b> flag is specified, access to the private keys is not required and the user interface can be bypassed.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NEWKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a new key container with the name specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, a key container with the default name is created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_KEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.<para><b>Windows XP:  </b>A key container created without this flag by an administrator can be accessed only by the user creating the key container and the local system account.</para><para>A key container created without this flag by a user that is not an administrator can be accessed only by the user creating the key container and the local system account.</para><para>The CRYPT_MACHINE_KEYSET flag can be combined with all of the other flags to indicate that the key container of interest is a computer key container and the CSP treats it as such. For Base Providers, this means that the keys are stored locally on the computer that created the key container. If a key container is to be a computer container, the CRYPT_MACHINE_KEYSET flag must be used with all calls to <b>CryptAcquireContext</b> that reference the computer container. The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by a user with administrator <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para><b>Windows XP:  </b>The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The key container created with CRYPT_MACHINE_KEYSET by a user that is not an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using<see cref="CryptSetProvParam" />.</para><para>The CRYPT_MACHINE_KEYSET flag is useful when the user is accessing from a service or user account that did not log on interactively. When key containers are created, most CSPs do not automatically create any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. These keys must be created as a separate step with the<see cref="CryptGenKey" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETEKEYSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Delete the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> specified by <i>pszContainer</i>. If <i>pszContainer</i> is <b>NULL</b>, the key container with the default name is deleted. All <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pairs</a> in the key container are also destroyed. <para>When this flag is set, the value returned in <i>phProv</i> is undefined, and thus, the<see cref="CryptReleaseContext" /> function need not be called afterward.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SILENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application requests that the CSP not display any user interface (UI) for this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a>. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to <see cref="CryptGenKey" /> with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT.<para>CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTAINER_OPTIONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using <see cref="CryptSetProvParam" />. This flag can only be used with smart card CSPs. <para><b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes defined in Winerror.h follow.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
              <listheader>
                <term>107L</term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs set this error if the CRYPT_DELETEKEYSET flag value is set and another thread or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> is using this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2L</term>
              </listheader>
            </list>
          </description>
          <description>The profile of the user is not loaded and cannot be found. This happens when the application impersonates a user, for example, the IUSR_<i>ComputerName</i> account.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87L</term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>8L</term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090009L</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY_STATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000BL</term>
              </listheader>
            </list>
          </description>
          <description>The user password has changed since the private keys were encrypted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090016L</term>
              </listheader>
            </list>
          </description>
          <description>The key container could not be opened. A common cause of this error is that the key container does not exist. To create a key container, call <see cref="CryptAcquireContext" /> using the CRYPT_NEWKEYSET flag. This error code can also indicate that access to an existing key container is denied. Access rights to the container can be granted by the key set creator by using <see cref="CryptSetProvParam" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEYSET_PARAM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> or <i>pszProvider</i> parameter is set to a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PROV_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090014L</term>
              </listheader>
            </list>
          </description>
          <description>The value of the <i>dwProvType</i> parameter is out of range. All provider types must be from 1 through 999, inclusive.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090006L</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL signature could not be verified. Either the DLL or the digital signature has been tampered with.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000FL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is CRYPT_NEWKEYSET, but the key container already exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001AL</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszContainer</i> key container was found but is corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_KEYSET_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090019L</term>
              </listheader>
            </list>
          </description>
          <description>The requested provider does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009000EL</term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_DLL_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001EL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file does not exist or is not on the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_ENTRY_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090018L</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> is corrupt. This error can relate to either the user default CSP list or the computer default CSP list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NO_MATCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001BL</term>
              </listheader>
            </list>
          </description>
          <description>The provider type specified by <i>dwProvType</i> does not match the provider type found. Note that this error can only occur when <i>pszProvider</i> specifies an actual CSP name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROV_TYPE_NOT_DEF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80090017L</term>
              </listheader>
            </list>
          </description>
          <description>No entry exists for the provider type specified by <i>dwProvType</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_PROVIDER_DLL_FAIL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001DL</term>
              </listheader>
            </list>
          </description>
          <description>The provider DLL file could not be loaded or failed to initialize.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SIGNATURE_FILE_BAD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8009001CL</term>
              </listheader>
            </list>
          </description>
          <description>An error occurred while loading the DLL file image, prior to verifying its signature.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptBinaryToString">
    <summary>The <b>CryptBinaryToString</b> function converts an array of bytes into a formatted string.</summary>
    <param name="pbBinary">A pointer to the array of bytes to be converted into a string.</param>
    <param name="cbBinary">The number of elements in the <i>pbBinary</i> array.</param>
    <param name="dwFlags">
      <para>Specifies the format of the resulting formatted string. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with certificate beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with request beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> CRL beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list> <para>In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCRLF</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to represent a new line.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCR</b></term></listheader><listheader><term>0x80000000</term></listheader></list></description><description>Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to represent a new line.</description></listheader></list></param>
    <param name="pszString">A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold the returned string, set this parameter to <b>NULL</b>. The function will place the required number of characters, including the terminating <b>NULL</b> character, in the value pointed to by <i>pcchString</i>.</param>
    <param name="pcchString">A pointer to a <b>DWORD</b> variable that contains the size, in <b>TCHAR</b>s, of the <i>pszString</i> buffer. If <i>pszString</i> is <b>NULL</b>, the function calculates the length of the return string (including the terminating null character) in <b>TCHAR</b>s and returns it in this parameter. If <i>pszString</i> is not <b>NULL</b> and big enough, the function converts the binary data into a specified string format including the terminating null character, but <i>pcchString</i> receives the length in <b>TCHAR</b>s, not including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptBinaryToStringA">
    <summary>The <b>CryptBinaryToString</b> function converts an array of bytes into a formatted string.</summary>
    <param name="pbBinary">A pointer to the array of bytes to be converted into a string.</param>
    <param name="cbBinary">The number of elements in the <i>pbBinary</i> array.</param>
    <param name="dwFlags">
      <para>Specifies the format of the resulting formatted string. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with certificate beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with request beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> CRL beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list> <para>In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCRLF</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to represent a new line.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCR</b></term></listheader><listheader><term>0x80000000</term></listheader></list></description><description>Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to represent a new line.</description></listheader></list></param>
    <param name="pszString">A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold the returned string, set this parameter to <b>NULL</b>. The function will place the required number of characters, including the terminating <b>NULL</b> character, in the value pointed to by <i>pcchString</i>.</param>
    <param name="pcchString">A pointer to a <b>DWORD</b> variable that contains the size, in <b>TCHAR</b>s, of the <i>pszString</i> buffer. If <i>pszString</i> is <b>NULL</b>, the function calculates the length of the return string (including the terminating null character) in <b>TCHAR</b>s and returns it in this parameter. If <i>pszString</i> is not <b>NULL</b> and big enough, the function converts the binary data into a specified string format including the terminating null character, but <i>pcchString</i> receives the length in <b>TCHAR</b>s, not including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptBinaryToStringW">
    <summary>The <b>CryptBinaryToString</b> function converts an array of bytes into a formatted string.</summary>
    <param name="pbBinary">A pointer to the array of bytes to be converted into a string.</param>
    <param name="cbBinary">The number of elements in the <i>pbBinary</i> array.</param>
    <param name="dwFlags">
      <para>Specifies the format of the resulting formatted string. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with certificate beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with request beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> CRL beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list> <para>In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCRLF</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to represent a new line.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCR</b></term></listheader><listheader><term>0x80000000</term></listheader></list></description><description>Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to represent a new line.</description></listheader></list></param>
    <param name="pszString">A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold the returned string, set this parameter to <b>NULL</b>. The function will place the required number of characters, including the terminating <b>NULL</b> character, in the value pointed to by <i>pcchString</i>.</param>
    <param name="pcchString">A pointer to a <b>DWORD</b> variable that contains the size, in <b>TCHAR</b>s, of the <i>pszString</i> buffer. If <i>pszString</i> is <b>NULL</b>, the function calculates the length of the return string (including the terminating null character) in <b>TCHAR</b>s and returns it in this parameter. If <i>pszString</i> is not <b>NULL</b> and big enough, the function converts the binary data into a specified string format including the terminating null character, but <i>pcchString</i> receives the length in <b>TCHAR</b>s, not including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptBinaryToString">
    <summary>The <b>CryptBinaryToString</b> function converts an array of bytes into a formatted string.</summary>
    <param name="pbBinary">A pointer to the array of bytes to be converted into a string.</param>
    <param name="cbBinary">The number of elements in the <i>pbBinary</i> array.</param>
    <param name="dwFlags">
      <para>Specifies the format of the resulting formatted string. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with certificate beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with request beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> CRL beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list> <para>In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCRLF</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to represent a new line.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCR</b></term></listheader><listheader><term>0x80000000</term></listheader></list></description><description>Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to represent a new line.</description></listheader></list></param>
    <param name="pszString">A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold the returned string, set this parameter to <b>NULL</b>. The function will place the required number of characters, including the terminating <b>NULL</b> character, in the value pointed to by <i>pcchString</i>.</param>
    <param name="pcchString">A pointer to a <b>DWORD</b> variable that contains the size, in <b>TCHAR</b>s, of the <i>pszString</i> buffer. If <i>pszString</i> is <b>NULL</b>, the function calculates the length of the return string (including the terminating null character) in <b>TCHAR</b>s and returns it in this parameter. If <i>pszString</i> is not <b>NULL</b> and big enough, the function converts the binary data into a specified string format including the terminating null character, but <i>pcchString</i> receives the length in <b>TCHAR</b>s, not including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptBinaryToStringA">
    <summary>The <b>CryptBinaryToString</b> function converts an array of bytes into a formatted string.</summary>
    <param name="pbBinary">A pointer to the array of bytes to be converted into a string.</param>
    <param name="cbBinary">The number of elements in the <i>pbBinary</i> array.</param>
    <param name="dwFlags">
      <para>Specifies the format of the resulting formatted string. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with certificate beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with request beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> CRL beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list> <para>In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCRLF</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to represent a new line.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCR</b></term></listheader><listheader><term>0x80000000</term></listheader></list></description><description>Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to represent a new line.</description></listheader></list></param>
    <param name="pszString">A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold the returned string, set this parameter to <b>NULL</b>. The function will place the required number of characters, including the terminating <b>NULL</b> character, in the value pointed to by <i>pcchString</i>.</param>
    <param name="pcchString">A pointer to a <b>DWORD</b> variable that contains the size, in <b>TCHAR</b>s, of the <i>pszString</i> buffer. If <i>pszString</i> is <b>NULL</b>, the function calculates the length of the return string (including the terminating null character) in <b>TCHAR</b>s and returns it in this parameter. If <i>pszString</i> is not <b>NULL</b> and big enough, the function converts the binary data into a specified string format including the terminating null character, but <i>pcchString</i> receives the length in <b>TCHAR</b>s, not including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptBinaryToStringW">
    <summary>The <b>CryptBinaryToString</b> function converts an array of bytes into a formatted string.</summary>
    <param name="pbBinary">A pointer to the array of bytes to be converted into a string.</param>
    <param name="cbBinary">The number of elements in the <i>pbBinary</i> array.</param>
    <param name="dwFlags">
      <para>Specifies the format of the resulting formatted string. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with certificate beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with request beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64, with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> CRL beginning and ending headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Enforce strict decoding of ASN.1 text formats. Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list> <para>In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCRLF</b></term></listheader><listheader><term>0x40000000</term></listheader></list></description><description>Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to represent a new line.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_STRING_NOCR</b></term></listheader><listheader><term>0x80000000</term></listheader></list></description><description>Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to represent a new line.</description></listheader></list></param>
    <param name="pszString">A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold the returned string, set this parameter to <b>NULL</b>. The function will place the required number of characters, including the terminating <b>NULL</b> character, in the value pointed to by <i>pcchString</i>.</param>
    <param name="pcchString">A pointer to a <b>DWORD</b> variable that contains the size, in <b>TCHAR</b>s, of the <i>pszString</i> buffer. If <i>pszString</i> is <b>NULL</b>, the function calculates the length of the return string (including the terminating null character) in <b>TCHAR</b>s and returns it in this parameter. If <i>pszString</i> is not <b>NULL</b> and big enough, the function converts the binary data into a specified string format including the terminating null character, but <i>pcchString</i> receives the length in <b>TCHAR</b>s, not including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptCloseAsyncHandle">
    <summary>Closes an async handle.</summary>
    <param name="hAsync">The async handle to close.</param>
    <returns>Returns S_OK on success.</returns>
  </member>
  <member name="Windows.CryptContextAddRef">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptContextAddRef</b> function adds one to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> of an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) handle. This function should be used if the CSP handle is included as a member of any structure passed to another function. The <see cref="CryptReleaseContext" /> function should be called when the CSP handle is no longer needed.</summary>
    <param name="hProv">
      <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle for which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> is being incremented. This handle must have already been created using<see cref="CryptAcquireContext" />.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />. One possible error code is the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptCreateAsyncHandle">
    <summary>Creates an async handle.</summary>
    <param name="dwFlags">Handle creation flags.</param>
    <param name="phAsync">Receives a pointer to the created async handle.</param>
  </member>
  <member name="Windows.CryptCreateHash">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptCreateHash</b> function initiates the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a> of a stream of data. It creates and returns to the calling application a handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>. This handle is used in subsequent calls to <see cref="CryptHashData" /> and <see cref="CryptHashSessionKey" /> to hash session keys and other streams of data.</summary>
    <param name="hProv">A handle to a CSP created by a call to<see cref="CryptAcquireContext" />.</param>
    <param name="Algid">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> value that identifies the hash algorithm to use.</para>
      <para>Valid values for this parameter vary, depending on the CSP that is used. For a list of default algorithms, see Remarks.</para>
    </param>
    <param name="hKey">
      <para>If the type of hash algorithm is a keyed hash, such as the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">Hash-Based Message Authentication Code</a> (HMAC) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">Message Authentication Code</a> (MAC) algorithm, the key for the hash is passed in this parameter. For nonkeyed algorithms, this parameter must be set to zero.</para>
      <para>For keyed algorithms, the key must be to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">block cipher</a> key, such as RC2, that has a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cipher mode</a> of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Cipher Block Chaining</a> (CBC).</para>
    </param>
    <param name="dwFlags">
      <para>The following flag value is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SECRETDIGEST</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
      </list>
    </param>
    <param name="phHash">The address to which the function copies a handle to the new hash object. When you have finished using the hash object, release the handle by calling the <see cref="CryptDestroyHash" /> function.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP you are using. The following table shows some of the possible error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A keyed <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> algorithm, such as <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CALG_MAC</a>, is specified by <i>Algid</i>, and the <i>hKey</i> parameter is either zero or it specifies a key handle that is not valid. This error code is also returned if the key is to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">stream cipher</a> or if the cipher mode is anything other than CBC.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptCreateKeyIdentifierFromCSP">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptCreateKeyIdentifierFromCSP</b> function creates a key identifier from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a><a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a>.<para>This function converts a <see cref="PUBLICKEYSTRUC" /> of a CSP into an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a><see cref="CERT_PUBLIC_KEY_INFO" /> structure and encodes it. The encoded structure is then <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashed</a> with the SHA1 algorithm to obtain the key identifier.</para></summary>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pszPubKeyOID">A pointer to the public key <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID). A value that is not <b>NULL</b> overrides the default OID obtained from the <b>aiKeyAlg</b> member of the structure pointed to by <i>pPubKeyStruc</i>. To use the default OID, set <i>pszPubKeyOID</i> to <b>NULL</b>.</param>
    <param name="pPubKeyStruc">A pointer to a<see cref="PUBLICKEYSTRUC" /> structure. In the default case, the <b>aiKeyAlg</b> member of the structure pointed to by <i>pPubKeyStruc</i> is used to find the public key OID. When the value of <i>pszPubKeyOID</i> is not <b>NULL</b>, it overrides the default.</param>
    <param name="cbPubKeyStruc">The size, in bytes, of the <see cref="PUBLICKEYSTRUC" />.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pbHash">
      <para>A pointer to a buffer to receive the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the public key and the key identifier.</para>
      <para>To get the size of this information for memory allocation purposes, set this parameter to <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbHash">A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pbHash</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer. Using SHA1 hashing, the length of the required buffer is twenty.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptDecodeMessage">
    <summary>
      <para>The <b>CryptDecodeMessage</b> function decodes, decrypts, and verifies a cryptographic message.</para>
      <para>This function can be used when the type of cryptographic message is unknown. The <i>dwMsgTypeFlags</i> constants can be combined with a bitwise-<b>OR</b> operation so that the function will try to find one of the types. When one of the types is found, the function reports the type found and returns the data appropriate to that type.</para>
      <para>In each pass, the function cracks only a single level of encryption or encoding. For additional cracking, this function, or one of the other<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptography-functions">Simplified Message Functions</a>, must be called again.</para>
    </summary>
    <param name="dwMsgTypeFlags">
      <para>Indicates the message type. Message types can be combined with the bitwise-<b>OR</b> operator. This parameter can be one of the following message types:</para>
      <list type="bullet">
        <item>
          <description>CMSG_DATA_FLAG</description>
        </item>
        <item>
          <description>CMSG_SIGNED_FLAG</description>
        </item>
        <item>
          <description>CMSG_ENVELOPED_FLAG</description>
        </item>
        <item>
          <description>CMSG_SIGNED_AND_ENVELOPED_FLAG</description>
        </item>
        <item>
          <description>CMSG_HASHED_FLAG</description>
        </item>
      </list>
      <div>
        <b>Note</b>  After return, the <b>DWORD</b> pointed to by <i>pdwMsgType</i> is set with the type of the message.</div>
    </param>
    <param name="pDecryptPara">A pointer to a<see cref="CRYPT_DECRYPT_MESSAGE_PARA" /> structure that contains decryption parameters.</param>
    <param name="pVerifyPara">A pointer to a<see cref="CRYPT_VERIFY_MESSAGE_PARA" /> structure that contains verification parameters.</param>
    <param name="dwSignerIndex">
      <para>Indicates which signer, among the possible many signers of a message, is to be verified. This index can be changed in multiple calls to the function to verify additional signers.</para>
      <para>
        <i>dwSignerIndex</i> is set to zero for the first signer. If the function returns <b>FALSE</b>, and <see cref="GetLastError" /> returns CRYPT_E_NO_SIGNER, the previous call returned the last signer of the message. This parameter is used only with messages of types CMSG_SIGNED_AND_ENVELOPED or CMSG_SIGNED. For all other message types, it should be set to zero.</para>
    </param>
    <param name="pbEncodedBlob">A pointer to the encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> that is to be decoded.</param>
    <param name="cbEncodedBlob">The size, in bytes, of the encoded BLOB.</param>
    <param name="dwPrevInnerContentType">Only applicable when processing nested cryptographic messages. When processing an outer cryptographic message, it must be set to zero. When decoding a nested cryptographic message, it is set to the value returned at <i>pdwInnerContentType</i> by a previous calling of<b>CryptDecodeMessage</b> for the outer message. It can be any of the CMSG types listed in <i>pdwMsgType</i>. For backward compatibility, set <i>dwPrevInnerContentType</i> to zero.</param>
    <param name="pdwMsgType">
      <para>A pointer to a <b>DWORD</b> that specifies the message type returned. This parameter can be one of the following message types:</para>
      <list type="bullet">
        <item>
          <description>CMSG_DATA</description>
        </item>
        <item>
          <description>CMSG_SIGNED</description>
        </item>
        <item>
          <description>CMSG_ENVELOPED</description>
        </item>
        <item>
          <description>CMSG_SIGNED_AND_ENVELOPED</description>
        </item>
        <item>
          <description>CMSG_HASHED</description>
        </item>
      </list>
    </param>
    <param name="pdwInnerContentType">
      <para>A pointer to a <b>DWORD</b> that specifies the type of an inner message. The message type codes used for <i>pdwMsgType</i> are used here, also.</para>
      <para>If there is no cryptographic nesting, CMSG_DATA is returned.</para>
    </param>
    <param name="pbDecoded">
      <para>A pointer to a buffer to receive the decoded message.</para>
      <para>This parameter can be <b>NULL</b> if the decoded message is not required or to set the size of the decoded message for memory allocation purposes. A decoded message will not be returned if this parameter is <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbDecoded">
      <para>A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbDecoded</i> parameter. When the function returns, this variable contains the size of the decoded message.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <param name="ppXchgCert">A pointer to a pointer to a <see cref="CERT_CONTEXT" /> structure with a certificate that corresponds to the private <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">exchange key</a> needed to decode the message. This parameter is only set for message types CMSG_ENVELOPED and CMSG_SIGNED_AND_ENVELOPED.</param>
    <param name="ppSignerCert">A pointer to a pointer to a <see cref="CERT_CONTEXT" /> structure of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> of the signer. This parameter is only set for message types CMSG_SIGNED and CMSG_SIGNED_AND_ENVELOPED.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The <see cref="CryptDecryptMessage" />,<see cref="CryptVerifyMessageSignature" />, or<see cref="CryptVerifyMessageHash" /> functions can be propagated to this function.</para>
      <para>The following error code is most commonly returned by the<see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbDecoded</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbDecoded</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptDecodeObject">
    <summary>The <b>CryptDecodeObject</b> function decodes a structure of the type indicated by the <i>lpszStructType</i> parameter. The use of<see cref="CryptDecodeObjectEx" /> is recommended as an API that performs the same function with significant performance improvements.</summary>
    <param name="dwCertEncodingType">
      <para>Type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
      <div>
        <b>Note</b>  Either a certificate or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.</div>
    </param>
    <param name="lpszStructType">
      <para>A pointer to an OID defining the structure type. If the high-order word of the <i>lpszStructType</i> parameter is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a null-terminated string.</para>
      <para>For more information about object identifier strings, their predefined constants and corresponding structures, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/constants-for-cryptencodeobject-and-cryptdecodeobject">Constants for CryptEncodeObject and CryptDecodeObject</a>.</para>
    </param>
    <param name="pbEncoded">A pointer to the encoded structure to be decoded.</param>
    <param name="cbEncoded">Number of bytes pointed to by <i>pbEncoded</i>.</param>
    <param name="dwFlags">
      <para>The following flags are defined. They can be combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_NOCOPY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag can be set to indicate that "no copy" optimization is enabled. This optimization, where applicable, updates the <i>pvStructInfo</i> parameter to point to content residing within <i>pbEncoded</i> instead of making a copy of the content and appending it to <i>pvStructInfo</i>. For applicable cases, less memory needs to be allocated by the calling application and execution is faster because a copy is not being made. Note that the trade-off when performing a "no copy" decoding is that <i>pbEncoded</i> cannot be freed until <i>pvStructInfo</i> is freed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as eight-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_TO_BE_SIGNED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, the contents of the buffer pointed to by <i>pbEncoded</i> included the signed content and the signature. If this flag is set, the buffer includes only the "to be signed" content. This flag is applicable to X509_CERT_TO_BE_SIGNED, X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_SHARE_OID_STRING_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this flag is set, the OID strings are allocated in Crypt32.dll and shared instead of being copied into the returned data structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited.</description>
        </listheader>
      </list>
    </param>
    <param name="pvStructInfo">
      <para>A pointer to a buffer to receive the decoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbStructInfo</i>.</para>
      <para>This parameter can be <b>NULL</b> to retrieve the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbStructInfo">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pvStructInfo</i> parameter. When the function returns, this <b>DWORD</b> value contains the size of the decoded data copied to <i>pvStructInfo</i>. The size contained in the variable pointed to by <i>pcbStructInfo</i> can indicate a size larger than the decoded structure, as the decoded structure can include pointers to other structures. This size is the sum of the size needed by the decoded structure and other structures pointed to.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_BAD_ENCODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error was encountered while decoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A decoding function could not be found for the specified <i>dwCertEncodingType</i> and <i>lpszStructType</i></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pvStructInfo</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbStructInfo</i>.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptDecodeObjectEx">
    <summary>The <b>CryptDecodeObjectEx</b> function decodes a structure of the type indicated by the <i>lpszStructType</i> parameter. <b>CryptDecodeObjectEx</b> offers a significant performance improvement over<see cref="CryptDecodeObject" /> by supporting memory allocation with the CRYPT_DECODE_ALLOC_FLAG value.</summary>
    <param name="dwCertEncodingType">
      <para>The type of encoding used. It is always acceptable to specify both the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
      <div>
        <b>Note</b>  Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.</div>
    </param>
    <param name="lpszStructType">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) that defines the structure type. If the high-order word of the <i>lpszStructType</i> parameter is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a null-terminated string.</para>
      <para>For more information about object identifier strings, their predefined constants, and corresponding structures, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/constants-for-cryptencodeobject-and-cryptdecodeobject">Constants for CryptEncodeObject and CryptDecodeObject</a>.</para>
    </param>
    <param name="pbEncoded">A pointer to the data to be decoded. The structure must be of the type specified by <i>lpszStructType</i>.</param>
    <param name="cbEncoded">The number of bytes pointed to by <i>pbEncoded</i>. This is the number of bytes to be decoded.</param>
    <param name="dwFlags">
      <para>This parameter can be one or more of the following flags. The flags can be combined by using a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_ALLOC_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The called decoding function allocates memory for the decoded structure. A pointer to the allocated structure is returned in <i>pvStructInfo</i>.<para>If <i>pDecodePara</i> or the <b>pfnAlloc</b> member of <i>pDecodePara</i> is <b>NULL</b>, then <see cref="LocalAlloc" /> is called for the allocation and <see cref="LocalFree" /> must be called to free the memory.</para><para>If <i>pDecodePara</i> and the <b>pfnAlloc</b> member of <i>pDecodePara</i> are not <b>NULL</b>, then the function pointed to by <b>pfnAlloc</b> is called for the allocation and the function pointed to by the <b>pfnFree</b> member of <i>pDecodePara</i> must be called to free the memory.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>33554432 (0x2000000)</term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable for enabling Punycode decoding of Unicode string values. For more information, see Remarks.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_NOCOPY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag can be set to enable a "no copy" optimization. This optimization updates the <i>pvStructInfo</i> members to point to content that resides within <i>pbEncoded</i> instead of making a copy of the content and appending it to <i>pvStructInfo</i>. The calling application needs to allocate less memory and execution is faster because a copy is not made. Note that when performing "no copy" decoding, <i>pbEncoded</i> cannot be freed until <i>pvStructInfo</i> is freed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as eight-bit characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_TO_BE_SIGNED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, the contents of the buffer pointed to by <i>pbEncoded</i> included the signed content and the signature. If this flag is set, the buffer includes only the "to be signed" content. This flag is applicable to X509_CERT_TO_BE_SIGNED, X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_SHARE_OID_STRING_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this flag is set, the OID strings are allocated in Crypt32.dll and shared instead of being copied into the returned data structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited.</description>
        </listheader>
      </list>
    </param>
    <param name="pDecodePara">A pointer to a <see cref="CRYPT_DECODE_PARA" /> structure that contains decoding paragraph information. If <i>pDecodePara</i> is set to <b>NULL</b>, then <see cref="LocalAlloc" /> and <see cref="LocalFree" /> are used to allocate and free memory. If <i>pDecodePara</i> points to a <b>CRYPT_DECODE_PARA</b> structure, that structure passes in callback functions to allocate and free memory. These callback functions override the default memory allocation of <b>LocalAlloc</b> and <b>LocalFree</b>.</param>
    <param name="pvStructInfo">
      <para>If the <i>dwFlags</i> CRYPT_ENCODE_ALLOC_FLAG is set, <i>pvStructInfo</i> is not a pointer to a buffer but is the address of a pointer to the buffer. Because memory is allocated inside the function and the pointer is stored at *<i>pvStructInfo</i>, <i>pvStructInfo</i> must never be <b>NULL</b>.</para>
      <para>If CRYPT_ENCODE_ALLOC_FLAG is not set, <i>pvStructInfo</i> is a pointer to a buffer that receives the decoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbStructInfo</i>.</para>
      <para>This parameter can be <b>NULL</b> to retrieve the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbStructInfo">
      <para>A pointer to a <b>DWORD</b> variable that contains the size, in bytes, of the buffer pointed to by the <i>pvStructInfo</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer. The size contained in the variable pointed to by <i>pcbStructInfo</i> can indicate a size larger than the decoded structure because the decoded structure can include pointers to auxiliary data. This size is the sum of the size needed by the decoded structure and the auxiliary data.</para>
      <para>When CRYPT_DECODE_ALLOC_FLAG is set, the initial value of *<i>pcbStructInfo</i> is not used by the function, and on return, *<i>pcbStructInfo</i> contains the number of bytes allocated for <i>pvStructInfo</i>.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. The following table shows some possible error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_BAD_ENCODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error was encountered while decoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A decoding function could not be found for the specified <i>dwCertEncodingType</i> and <i>lpszStructType</i>. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pvStructInfo</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbStructInfo</i>.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptDecrypt">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptDecrypt</b> function decrypts data previously encrypted by using the <see cref="CryptEncrypt" /> function.<para>Important changes to support <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Secure/Multipurpose Internet Mail Extensions</a> (S/MIME) email interoperability have been made to CryptoAPI that affect the handling of enveloped messages. For more information, see the Remarks section of <see cref="CryptMsgOpenToEncode" />.</para></summary>
    <param name="hKey">
      <para>A handle to the key to use for the decryption. An application obtains this handle by using either the<see cref="CryptGenKey" /> or<see cref="CryptImportKey" /> function.</para>
      <para>This key specifies the decryption algorithm to be used.</para>
    </param>
    <param name="hHash">
      <para>A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>. If data is to be decrypted and hashed simultaneously, a handle to a hash object is passed in this parameter. The hash value is updated with the decrypted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">plaintext</a>. This option is useful when simultaneously decrypting and verifying a signature.</para>
      <para>Before calling <b>CryptDecrypt</b>, the application must obtain a handle to the hash object by calling the<see cref="CryptCreateHash" /> function. After the decryption is complete, the hash value can be obtained by using the<see cref="CryptGetHashParam" /> function, it can also be signed by using the <see cref="CryptSignHash" /> function, or it can be used to verify a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a> by using the <see cref="CryptVerifySignature" /> function.</para>
      <para>If no hash is to be done, this parameter must be zero.</para>
    </param>
    <param name="Final">A Boolean value that specifies whether this is the last section in a series being decrypted. This value is <b>TRUE</b> if this is the last or only block. If this is not the last block, this value is <b>FALSE</b>. For more information, see Remarks.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OAEP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Use Optimal Asymmetric Encryption Padding (OAEP) (PKCS #1 version 2). This flag is only supported by the <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-enhanced-cryptographic-provider">Microsoft Enhanced Cryptographic Provider</a> with RSA encryption/decryption. This flag cannot be combined with the <b>CRYPT_DECRYPT_RSA_NO_PADDING_CHECK</b> flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DECRYPT_RSA_NO_PADDING_CHECK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Perform the decryption on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> without checking the padding. This flag is only supported by the <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-enhanced-cryptographic-provider">Microsoft Enhanced Cryptographic Provider</a> with RSA encryption/decryption. This flag cannot be combined with the <b>CRYPT_OAEP</b> flag.</description>
        </listheader>
      </list>
    </param>
    <param name="pbData">
      <para>A pointer to a buffer that contains the data to be decrypted. After the decryption has been performed, the plaintext is placed back into this same buffer.</para>
      <para>The number of encrypted bytes in this buffer is specified by <i>pdwDataLen</i>.</para>
    </param>
    <param name="pdwDataLen">
      <para>A pointer to a <b>DWORD</b> value that indicates the length of the <i>pbData</i> buffer. Before calling this function, the calling application sets the <b>DWORD</b> value to the number of bytes to be decrypted. Upon return, the <b>DWORD</b> value contains the number of bytes of the decrypted plaintext.</para>
      <para>When a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">block cipher</a> is used, this data length must be a multiple of the block size unless this is the final section of data to be decrypted and the <i>Final</i> parameter is <b>TRUE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hKey</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a> specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The data to be decrypted is not valid. For example, when a block cipher is used and the <i>Final</i> flag is <b>FALSE</b>, the value specified by <i>pdwDataLen</i> must be a multiple of the block size. This error can also be returned when the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">padding</a> is found to be not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> parameter contains a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hKey</i> parameter does not contain a valid handle to a key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_LEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The size of the output buffer is too small to hold the generated plaintext.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the key was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_DOUBLE_ENCRYPT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application attempted to decrypt the same data twice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptDecryptAndVerifyMessageSignature">
    <summary>The <b>CryptDecryptAndVerifyMessageSignature</b> function decrypts a message and verifies its signature.</summary>
    <param name="pDecryptPara">A pointer to a<see cref="CRYPT_DECRYPT_MESSAGE_PARA" /> structure that contains decryption parameters.</param>
    <param name="pVerifyPara">A pointer to a<see cref="CRYPT_VERIFY_MESSAGE_PARA" /> structure that contains verification parameters.</param>
    <param name="dwSignerIndex">Identifies a particular signer of the message. A message can be signed by more than one signer and this function can be called multiple times changing this parameter to check for several signers. It is set to zero for the first signer. If the function returns <b>FALSE</b>, and <see cref="GetLastError" /> returns CRYPT_E_NO_SIGNER, the previous call received the last signer of the message.</param>
    <param name="pbEncryptedBlob">A pointer to the signed, encoded, and encrypted message to be decrypted and verified.</param>
    <param name="cbEncryptedBlob">The size, in bytes, of the encrypted message.</param>
    <param name="pbDecrypted">
      <para>A pointer to a buffer to receive the decrypted message.</para>
      <para>This parameter can be <b>NULL</b> if the decrypted message is not required or to set the size of the decrypted message for memory allocation purposes. A decrypted message will not be returned if this parameter is <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbDecrypted">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pbDecrypted</i> parameter. When the function returns, it contains the size of the decrypted message copied to <i>pbDecrypted</i>.</para>
      <div>
        <b>Note</b>  When processing the data returned in the <i>pbDecrypted</i> buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified in <i>pcbDecrypted</i> on input. On output, the variable pointed to by this parameter is set to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <param name="ppXchgCert">A pointer to a<see cref="CERT_CONTEXT" /> structure of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> that corresponds to the private <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">exchange key</a> needed to decrypt the message.</param>
    <param name="ppSignerCert">A pointer to a <see cref="CERT_CONTEXT" /> structure of the certificate of the signer.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptDecryptMessage" /> and <see cref="CryptVerifyMessageSignature" /> might be propagated to this function.</div>The <see cref="GetLastError" /> function returns the following error code most often.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pbDecrypted</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbDecrypted</i>.</description></listheader></list></returns>
  </member>
  <member name="Windows.CryptDecryptMessage">
    <summary>The <b>CryptDecryptMessage</b> function <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">decodes</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">decrypts</a> a message.</summary>
    <param name="pDecryptPara">A pointer to a<see cref="CRYPT_DECRYPT_MESSAGE_PARA" /> structure that contains decryption parameters.</param>
    <param name="pbEncryptedBlob">A pointer to a buffer that contains the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encoded</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encrypted</a> message to be decrypted.</param>
    <param name="cbEncryptedBlob">The size, in bytes, of the encoded and encrypted message.</param>
    <param name="pbDecrypted">
      <para>A pointer to a buffer that receives the decrypted message.</para>
      <para>To set the size of this information for memory allocation purposes, this parameter can be <b>NULL</b>. A decrypted message will not be returned if this parameter is <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbDecrypted">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pbDecrypted</i> parameter. When the function returns, this variable contains the size, in bytes, of the decrypted message copied to <i>pbDecrypted</i>.</para>
      <div>
        <b>Note</b>  When processing the data returned in the <i>pbDecrypted</i> buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified in <i>pcbDecrypted</i> on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the <b>DWORD</b> is updated to the actual size of the data copied to the buffer.</div>
    </param>
    <param name="ppXchgCert">A pointer to a<see cref="CERT_CONTEXT" /> structure of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> that corresponds to the private <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">exchange key</a> needed to decrypt the message. To indicate that the function should not return the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a> used to decrypt, set this parameter to <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from calls to <see cref="CryptImportKey" /> and <see cref="CryptDecrypt" /> might be propagated to this function.</div>The <see cref="GetLastError" /> function returns the following error codes most often.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pbDecrypted</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbDecrypted</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>E_INVALIDARG</b></term></listheader></list></description><description>Invalid message and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding types</a>. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported. Invalid <b>cbSize</b> in *<i>pDecryptPara</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_E_UNEXPECTED_MSG_TYPE</b></term></listheader></list></description><description>Not an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">enveloped</a> cryptographic message.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>NTE_BAD_ALGID</b></term></listheader></list></description><description>The message was encrypted by using an unknown or unsupported algorithm.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_E_NO_DECRYPT_CERT</b></term></listheader></list></description><description>No certificate was found having a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> property to use for decrypting.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptDeriveKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptDeriveKey</b> function generates cryptographic <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> derived from a base data value. This function guarantees that when the same <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) and algorithms are used, the keys generated from the same base data are identical. The base data can be a password or any other user data.<para>This function is the same as<see cref="CryptGenKey" />, except that the generated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> are derived from base data instead of being random. <b>CryptDeriveKey</b> can only be used to generate session keys. It cannot generate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>.</para><para>A handle to the session key is returned in the <i>phKey</i> parameter. This handle can be used with any CryptoAPI function that requires a key handle.</para></summary>
    <param name="hProv">A <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle of a CSP created by a call to<see cref="CryptAcquireContext" />.</param>
    <param name="Algid">
      <para>An<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> structure that identifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">symmetric encryption</a> algorithm for which the key is to be generated. The algorithms available will most likely be different for each CSP. For more information about which algorithm identifier is used by the different providers for the key specs AT_KEYEXCHANGE and AT_SIGNATURE, see<b>ALG_ID</b>.</para>
      <para>For more information about <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> values to use with the Microsoft Base Cryptographic Provider, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/base-provider-algorithms">Base Provider Algorithms</a>. For more information about <b>ALG_ID</b> values to use with the Microsoft Strong Cryptographic Provider or the Microsoft Enhanced Cryptographic Provider, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/enhanced-provider-algorithms">Enhanced Provider Algorithms</a>.</para>
    </param>
    <param name="hBaseData">
      <para>A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> that has been fed the exact base data.</para>
      <para>To obtain this handle, an application must first create a hash object with<see cref="CryptCreateHash" /> and then add the base data to the hash object with<see cref="CryptHashData" />. This process is described in detail in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hashes-and-digital-signatures">Hashes and Digital Signatures</a>.</para>
    </param>
    <param name="dwFlags">
      <para>Specifies the type of key generated.</para>
      <para>The sizes of a session key can be set when the key is generated. The key size, representing the length of the key modulus in bits, is set with the upper 16 bits of this parameter. Thus, if a 128-bit <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">RC4</a> session key is to be generated, the value 0x00800000 is combined with any other <i>dwFlags</i> predefined value with a bitwise-<b>OR</b> operation. Due to changing export control restrictions, the default CSP and default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key length</a> may change between operating system releases. It is important that both the encryption and decryption use the same CSP and that the key length be explicitly set using the <i>dwFlags</i> parameter to ensure interoperability on different operating system platforms.</para>
      <para>The lower 16 bits of this parameter can be zero or you can specify one or more of the following flags by using the bitwise-<b>OR</b> operator to combine them.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CREATE_SALT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Typically, when a session key is made from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> value, there are a number of leftover bits. For example, if the hash value is 128 bits and the session key is 40 bits, there will be 88 bits left over.<para>If this flag is set, then the key is assigned a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">salt value</a> based on the unused hash value bits. You can retrieve this <i>salt value</i> by using the<see cref="CryptGetKeyParam" /> function with the <i>dwParam</i> parameter set to KP_SALT.</para><para>If this flag is not set, then the key is given a salt value of zero.</para><para>When keys with nonzero salt values are exported (by using<see cref="CryptExportKey" />), the salt value must also be obtained and kept with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_EXPORTABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the session key can be transferred out of the CSP into a key BLOB through the <see cref="CryptExportKey" /> function. Because keys generally must be exportable, this flag should usually be set.<para>If this flag is not set, then the session key is not exportable. This means the key is available only within the current session and only the application that created it is able to use it.</para><para>This flag does not apply to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_SALT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag specifies that a no <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">salt value</a> gets allocated for a 40-bit <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">symmetric key</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/salt-value-functionality">Salt Value Functionality</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_UPDATE_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs use session keys that are derived from multiple hash values. When this is the case, <b>CryptDeriveKey</b> must be called multiple times.<para>If this flag is set, a new session key is not generated. Instead, the key specified by <i>phKey</i> is modified. The precise behavior of this flag is dependent on the type of key being generated and on the particular CSP being used.</para><para>Microsoft cryptographic service providers ignore this flag.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SERVER</b>
                </term>
              </listheader>
              <listheader>
                <term>1024 (0x400)</term>
              </listheader>
            </list>
          </description>
          <description>This flag is used only with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Schannel</a> providers. If this flag is set, the key to be generated is a server-write key; otherwise, it is a client-write key.</description>
        </listheader>
      </list>
    </param>
    <param name="phKey">A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptkey">HCRYPTKEY</a> variable to receive the address of the handle of the newly generated key. When you have finished using the key, release the handle by calling the <see cref="CryptDestroyKey" /> function.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hBaseData</i> parameter does not contain a valid handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An attempt was made to add data to a hash object that is already marked "finished."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hProv</i> parameter does not contain a valid context handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SILENT_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The provider could not perform the action because the context was acquired as silent.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptDestroyHash">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptDestroyHash</b> function destroys the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> referenced by the <i>hHash</i> parameter. After a hash object has been destroyed, it can no longer be used.<para>To help ensure security, we recommend that hash objects be destroyed after they have been used.</para></summary>
    <param name="hHash">The handle of the hash object to be destroyed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by <i>hHash</i> is currently being used and cannot be destroyed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> parameter specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> parameter contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptDestroyKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptDestroyKey</b> function releases the handle referenced by the <i>hKey</i> parameter. After a key handle has been released, it is no longer valid and cannot be used again.<para>If the handle refers to a session key, or to a public key that has been imported into the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) through<see cref="CryptImportKey" />, this function destroys the key and frees the memory that the key used. Many CSPs overwrite the memory where the key was held before freeing it. However, the underlying <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pair</a> is not destroyed by this function. Only the handle is destroyed.</para></summary>
    <param name="hKey">The handle of the key to be destroyed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key object specified by <i>hKey</i> is currently being used and cannot be destroyed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hKey</i> parameter specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hKey</i> parameter contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hKey</i> parameter does not contain a valid handle to a key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the key was created cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptDuplicateHash">
    <summary>
      <para>The <b>CryptDuplicateHash</b> function makes an exact copy of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> to the point when the duplication is done. The duplicate hash includes the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">state</a> of the hash.</para>
      <para>A hash can be created in a piece-by-piece way. The <b>CryptDuplicateHash</b> function can be used to create separate hashes of two different contents that begin with the same content.</para>
    </summary>
    <param name="hHash">Handle of the hash to be duplicated.</param>
    <param name="pdwReserved">Reserved for future use and must be zero.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="phHash">Address of the handle of the duplicated hash. When you have finished using the hash, release the handle by calling the <see cref="CryptDestroyHash" /> function.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by "NTE" is generated by the particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) that you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_CALL_NOT_IMPLEMENTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Because this is a new function, existing CSPs cannot implement it. This error is returned if the CSP does not support this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A handle to the original hash is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptDuplicateKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptDuplicateKey</b> function makes an exact copy of a key and the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">state</a> of the key.</summary>
    <param name="hKey">A handle to the key to be duplicated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="phKey">Address of the handle to the duplicated key. When you have finished using the key, release the handle by calling the <see cref="CryptDestroyKey" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by "NTE" is generated by the particular CSP being used. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_CALL_NOT_IMPLEMENTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Because this is a new function, existing CSPs might not implement it. This error is returned if the CSP does not support this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A handle to the original key is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEncodeObject">
    <summary>The <b>CryptEncodeObject</b> function encodes a structure of the type indicated by the value of the <i>lpszStructType</i> parameter. The use of<see cref="CryptEncodeObjectEx" /> is recommended as an API that performs the same function with significant performance improvements.</summary>
    <param name="dwCertEncodingType">
      <para>Type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
      <div>
        <b>Note</b>  Either a certificate or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.</div>
    </param>
    <param name="lpszStructType">
      <para>A pointer to an OID defining the structure type. If the high-order word of the <i>lpszStructType</i> parameter is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a null-terminated string.</para>
      <para>For more information about object identifier strings, their predefined constants and corresponding structures, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/constants-for-cryptencodeobject-and-cryptdecodeobject">Constants for CryptEncodeObject and CryptDecodeObject</a>.</para>
    </param>
    <param name="pvStructInfo">A pointer to the structure to be encoded. The structure must be of a type specified by <i>lpszStructType</i>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer to receive the encoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbEncoded</i>.</para>
      <para>This parameter can be <b>NULL</b> to retrieve the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> variable that contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of allocated encoded bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_BAD_ENCODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error was encountered while encoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An encoding function could not be found for the specified <i>dwCertEncodingType</i> and <i>lpszStructType</i>. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbEncoded</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbEncoded</i>.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptEncodeObjectEx">
    <summary>The <b>CryptEncodeObjectEx</b> function encodes a structure of the type indicated by the value of the <i>lpszStructType</i> parameter. This function offers a significant performance improvement over<see cref="CryptEncodeObject" /> by supporting memory allocation with the <b>CRYPT_ENCODE_ALLOC_FLAG</b> value.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> to use to encode the object. This parameter can be a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PKCS_7_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>65536 (0x10000)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies PKCS 7 message encoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="lpszStructType">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) that defines the structure type. If the high-order word of the <i>lpszStructType</i> parameter is zero, the low-order word specifies an integer identifier for the type of the specified structure. Otherwise, this parameter is a pointer to a null-terminated string that contains the string representation of the OID.</para>
      <para>For more information about object identifier strings, their predefined constants and corresponding structures, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/constants-for-cryptencodeobject-and-cryptdecodeobject">Constants for CryptEncodeObject and CryptDecodeObject</a>.</para>
    </param>
    <param name="pvStructInfo">A pointer to the structure to be encoded. The structure must be of the type specified by <i>lpszStructType</i>.</param>
    <param name="dwFlags">
      <para>Specifies options for the encoding. This parameter can be zero or a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ENCODE_ALLOC_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>32768 (0x8000)</term>
              </listheader>
            </list>
          </description>
          <description>The called encoding function allocates memory for the encoded bytes. A pointer to the allocated bytes is returned in <i>pvEncoded</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>131072 (0x20000)</term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable for enabling Punycode encoding of Unicode string values. For more information, see Remarks.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>1073741824 (0x40000000)</term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable when encoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. If this flag is set, the characters are not checked to determine whether they are valid for the specified value type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>2147483648 (0x80000000)</term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable when encoding X509_UNICODE_NAME. If this flag is set and all the Unicode characters are &lt;= 0xFF, the CERT_RDN_T61_STRING is selected instead of the CERT_RDN_UNICODE_STRING.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>536870912 (0x20000000)</term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of CERT_RDN_UNICODE_STRING.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>268435456 (0x10000000)</term>
              </listheader>
            </list>
          </description>
          <description>This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of CERT_RDN_PRINTABLE_STRING for directory string types. Also, this flag enables CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG.</description>
        </listheader>
      </list>
    </param>
    <param name="pEncodePara">
      <para>A pointer to a<see cref="CRYPT_ENCODE_PARA" /> structure that contains encoding information. This parameter can be <b>NULL</b>.</para>
      <para>If either <i>pEncodePara</i> or the <b>pfnAlloc</b> member of <i>pEncodePara</i> is <b>NULL</b>, then <see cref="LocalAlloc" /> is used for the allocation and <see cref="LocalFree" /> must be called to free the memory.</para>
      <para>If both <i>pEncodePara</i> and the <b>pfnAlloc</b> member of <i>pEncodePara</i> are not <b>NULL</b>, then the function pointed to by the <b>pfnAlloc</b> member of the <see cref="CRYPT_ENCODE_PARA" /> structure pointed to by <i>pEncodePara</i> is called for the allocation. The function pointed to by the <b>pfnFree</b> member of <i>pEncodePara</i> must be called to free the memory.</para>
    </param>
    <param name="pvEncoded">
      <para>A pointer to a buffer to receive the encoded structure. The size of this buffer is specified in the <i>pcbEncoded</i> parameter. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the <b>ERROR_MORE_DATA</b> code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbEncoded</i>.</para>
      <para>This parameter can be <b>NULL</b> to retrieve the size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
      <para>If <i>dwFlags</i> contains the <b>CRYPT_ENCODE_ALLOC_FLAG</b> flag, <i>pvEncoded</i> is not a pointer to a buffer but is the address of a pointer to the buffer. Because memory is allocated inside the function and the pointer is stored in <i>pvEncoded</i>, <i>pvEncoded</i> cannot be <b>NULL</b>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> variable that contains the size, in bytes, of the buffer pointed to by the <i>pvEncoded</i> parameter. When the function returns, the variable pointed to by the <i>pcbEncoded</i> parameter contains the number of allocated, encoded bytes stored in the buffer.</para>
      <para>When <i>dwFlags</i> contains the <b>CRYPT_ENCODE_ALLOC_FLAG</b> flag, <i>pcbEncoded</i> is the address of a pointer to the <b>DWORD</b> value that is updated.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />. The following table shows some possible error codes that can be returned from <b>GetLastError</b> when <b>CryptEncodeObjectEx</b> fails.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_BAD_ENCODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error was encountered while encoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An encoding function could not be found for the specified <i>dwCertEncodingType</i> and <i>lpszStructType</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pvEncoded</i> parameter is not large enough to hold the returned data, the function sets the <b>ERROR_MORE_DATA</b> code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbEncoded</i>.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptEncrypt">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEncrypt</b> function encrypts data. The algorithm used to encrypt the data is designated by the key held by the CSP module and is referenced by the <i>hKey</i> parameter.<para>Important changes to support <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Secure/Multipurpose Internet Mail Extensions</a> (S/MIME) email interoperability have been made to CryptoAPI that affect the handling of enveloped messages. For more information, see the Remarks section of <see cref="CryptMsgOpenToEncode" />.</para><div><b>Important</b>  The <b>CryptEncrypt</b> function is not guaranteed to be thread safe and may return incorrect results if invoked simultaneously by multiple callers.</div></summary>
    <param name="hKey">
      <para>A handle to the encryption key. An application obtains this handle by using either the<see cref="CryptGenKey" /> or the<see cref="CryptImportKey" /> function.</para>
      <para>The key specifies the encryption algorithm used.</para>
    </param>
    <param name="hHash">
      <para>A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>. If data is to be hashed and encrypted simultaneously, a handle to a hash object can be passed in the <i>hHash</i> parameter. The hash value is updated with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">plaintext</a> passed in. This option is useful when generating signed and encrypted text.</para>
      <para>Before calling <b>CryptEncrypt</b>, the application must obtain a handle to the hash object by calling the<see cref="CryptCreateHash" /> function. After the encryption is complete, the hash value can be obtained by using the<see cref="CryptGetHashParam" /> function, or the hash can be signed by using the<see cref="CryptSignHash" /> function.</para>
      <para>If no hash is to be done, this parameter must be <b>NULL</b>.</para>
    </param>
    <param name="Final">A Boolean value that specifies whether this is the last section in a series being encrypted. <i>Final</i> is set to <b>TRUE</b> for the last or only block and to <b>FALSE</b> if there are more blocks to be encrypted. For more information, see Remarks.</param>
    <param name="dwFlags">
      <para>The following <i>dwFlags</i> value is defined but reserved for future use.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OAEP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use Optimal Asymmetric Encryption Padding (OAEP) (PKCS #1 version 2). This flag is only supported by the <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-enhanced-cryptographic-provider">Microsoft Enhanced Cryptographic Provider</a> with RSA encryption/decryption.</description>
        </listheader>
      </list>
    </param>
    <param name="pbData">
      <para>A pointer to a buffer that contains the plaintext to be encrypted. The plaintext in this buffer is overwritten with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">ciphertext</a> created by this function.</para>
      <para>The <i>pdwDataLen</i> parameter points to a variable that contains the length, in bytes, of the plaintext. The <i>dwBufLen</i> parameter contains the total size, in bytes, of this buffer.</para>
      <para>If this parameter contains <b>NULL</b>, this function will calculate the required size for the ciphertext and place that in the value pointed to by the <i>pdwDataLen</i> parameter.</para>
    </param>
    <param name="pdwDataLen">
      <para>A pointer to a <b>DWORD</b> value that , on entry, contains the length, in bytes, of the plaintext in the <i>pbData</i> buffer. On exit, this <b>DWORD</b> contains the length, in bytes, of the ciphertext written to the <i>pbData</i> buffer.</para>
      <para>If the buffer allocated for <i>pbData</i> is not large enough to hold the encrypted data,<see cref="GetLastError" /> returns <b>ERROR_MORE_DATA</b> and stores the required buffer size, in bytes, in the <b>DWORD</b> value pointed to by <i>pdwDataLen</i>.</para>
      <para>If <i>pbData</i> is <b>NULL</b>, no error is returned, and the function stores the size of the encrypted data, in bytes, in the <b>DWORD</b> value pointed to by <i>pdwDataLen</i>. This allows an application to determine the correct buffer size.</para>
      <para>When a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">block cipher</a> is used, this data length must be a multiple of the block size unless this is the final section of data to be encrypted and the <i>Final</i> parameter is <b>TRUE</b>.</para>
    </param>
    <param name="dwBufLen">
      <para>Specifies the total size, in bytes, of the input <i>pbData</i> buffer.</para>
      <para>Note that, depending on the algorithm used, the encrypted text can be larger than the original plaintext. In this case, the <i>pbData</i> buffer needs to be large enough to contain the encrypted text and any padding.</para>
      <para>As a rule, if a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">stream cipher</a> is used, the ciphertext is the same size as the plaintext. If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">block cipher</a> is used, the ciphertext is up to a block length larger than the plaintext.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hKey</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a> specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The data to be encrypted is not valid. For example, when a block cipher is used and the <i>Final</i> flag is <b>FALSE</b>, the value specified by <i>pdwDataLen</i> must be a multiple of the block size.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> parameter contains a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An attempt was made to add data to a hash object that is already marked "finished."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hKey</i> parameter does not contain a valid handle to a key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_LEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The size of the output buffer is too small to hold the generated ciphertext.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the key was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_DOUBLE_ENCRYPT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application attempted to encrypt the same data twice.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEncryptMessage">
    <summary>The <b>CryptEncryptMessage</b> function <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encrypts</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encodes</a> a message.</summary>
    <param name="pEncryptPara">
      <para>A pointer to a<see cref="CRYPT_ENCRYPT_MESSAGE_PARA" /> structure that contains the encryption parameters.</para>
      <para>The <b>CryptEncryptMessage</b> function does not support the SHA2 OIDs, <b>szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF</b> and <b>szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF</b>.</para>
    </param>
    <param name="cRecipientCert">Number of elements in the <i>rgpRecipientCert</i> array.</param>
    <param name="rgpRecipientCert">Array of pointers to<see cref="CERT_CONTEXT" /> structures that contain the certificates of intended recipients of the message.</param>
    <param name="pbToBeEncrypted">A pointer to a buffer that contains the message that is to be encrypted.</param>
    <param name="cbToBeEncrypted">The size, in bytes, of the message that is to be encrypted.</param>
    <param name="pbEncryptedBlob">
      <para>A pointer to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> that contains a buffer that receives the encrypted and encoded message.</para>
      <para>To set the size of this information for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncryptedBlob">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pbEncryptedBlob</i> parameter. When the function returns, this variable contains the size, in bytes, of the encrypted and encoded message copied to <i>pbEncryptedBlob</i>.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer of the <i>pbEncryptedBlob</i>, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from calls to <see cref="CryptGenKey" />, <see cref="CryptEncrypt" />, <see cref="CryptImportKey" />, and <see cref="CryptExportKey" /> can be propagated to this function.</div>The <see cref="GetLastError" /> function returns the following error codes most often.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pbEncryptedBlob</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbEncryptedBlob</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>E_INVALIDARG</b></term></listheader></list></description><description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The <b>cbSize</b> in *<i>pEncryptPara</i> is not valid.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptEnumKeyIdentifierProperties">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumKeyIdentifierProperties</b> function enumerates key identifiers and their properties. This function is not called in a loop. Rather, it loops internally until the last key identifier property is enumerated or the callback function returns <b>FALSE</b>. If <i>dwPropId</i> is zero or if the properties of the key identifier match the <i>dwPropId</i>, the callback function is called.</summary>
    <param name="pKeyIdentifier">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> structure that contains the key identifier.</para>
      <para>If <i>pKeyIdentifier</i> is <b>NULL</b>, the function enumerates all key identifiers.</para>
      <para>If <i>pKeyIdentifier</i> is not <b>NULL</b>, the callback function <i>pfnEnum</i> is only called for the specified key identifier.</para>
    </param>
    <param name="dwPropId">
      <para>Indicates the property identifier to be listed.</para>
      <para>If <i>dwPropId</i> is set to zero, this function calls the callback function with all the properties.</para>
      <para>If <i>dwPropId</i> is not zero and <i>pKeyIdentifier</i> is <b>NULL</b>, the callback function is called only for those key identifiers that have the specified property (sets the <i>cProp</i> parameter of <i>pfnEnum</i> to one). All key identifiers that do not have the property are skipped.</para>
      <para>Any certificate property identifier can be used.</para>
    </param>
    <param name="dwFlags">By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key identifiers of the LocalMachine (if <i>pwszComputerName</i> is <b>NULL</b>) or of a remote computer (if <i>pwszComputerName</i> is not <b>NULL</b>) is searched. For more information, see <i>pwszComputerName</i>.</param>
    <param name="pwszComputerName">A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in <i>dwFlags</i>, the remote computer is searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, <i>pwszComputerName</i> is set to <b>NULL</b>.</param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pvArg">A pointer to data to be passed to the callback function. The type is a void that allows the application to declare, define, and initialize a structure or argument to hold any information.</param>
    <param name="pfnEnum">A pointer to an application-defined callback function that is executed for each key identifier entry that matches the input parameters. For details about the callback functions parameters, see <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_crypt_enum_keyid_prop">CRYPT_ENUM_KEYID_PROP</a>.</param>
    <returns>
      <para>The <b>CryptEnumKeyIdentifierProperties</b> function repeatedly calls the <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_crypt_enum_keyid_prop">CRYPT_ENUM_KEYID_PROP</a> callback function until the last key identifier is enumerated or the callback function returns <b>FALSE</b>.</para>
      <para>If the main function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>To continue enumeration, the function returns <b>TRUE</b>.</para>
      <para>To stop enumeration, the function returns <b>FALSE</b> and sets the last error code.</para>
    </returns>
  </member>
  <member name="Windows.CryptEnumOIDFunction">
    <summary>The <b>CryptEnumOIDFunction</b> function enumerates the registered <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) functions. OID functions that are enumerated can be screened to include those identified by their encoding type, function name, OID, or any combination of encoding type, function name, and OID. For each OID function that matches the selection criteria, an application-provided callback function, <b>pfnEnumOIDFunc</b>, is called.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to match. Setting this parameter to CRYPT_MATCH_ANY_ENCODING_TYPE matches any encoding type. Note that if CRYPT_MATCH_ANY_ENCODING_TYPE is not specified, either a certificate or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is required. If the low-order word that contains the certificate encoding type is nonzero, it is used; otherwise, the high-order word that contains the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>CRYPT_ASN_ENCODING</description>
        </item>
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
        <item>
          <description>CRYPT_MATCH_ANY_ENCODING_TYPE</description>
        </item>
      </list>
    </param>
    <param name="pszFuncName">Name of a function for which a case insensitive match search is performed. Setting this parameter to <b>NULL</b> results in a match being found for any function name.</param>
    <param name="pszOID">If the high-order word of <i>pszOID</i> is nonzero, <i>pszOID</i> specifies the object identifier for which a case insensitive match search is performed. If the high-order word of <i>pszOID</i> is zero, <i>pszOID</i> is used to match a numeric object identifier. Setting this parameter to <b>NULL</b> matches any object identifier. Setting this parameter to CRYPT_DEFAULT_OID restricts the enumeration to only the default functions.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pvArg">A pointer to arguments to be passed through to the <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_crypt_enum_oid_func">CRYPT_ENUM_OID_FUNCTION</a> callback function.</param>
    <param name="pfnEnumOIDFunc">A pointer to the callback function that is executed for each OID function that matches the input parameters. For details, see <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_crypt_enum_oid_func">CRYPT_ENUM_OID_FUNCTION</a>.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptEnumOIDInfo">
    <summary>The <b>CryptEnumOIDInfo</b> function enumerates predefined and registered <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID)<see cref="CRYPT_OID_INFO" /> structures. This function enumerates either all of the predefined and registered structures or only structures identified by a selected OID group. For each OID information structure enumerated, an application provided callback function, <i>pfnEnumOIDInfo</i>, is called.</summary>
    <param name="dwGroupId">
      <para>Indicates which OID groups to be matched. Setting <i>dwGroupId</i> to zero matches all groups. If <i>dwGroupId</i> is greater than zero, only the OID entries in the specified group are enumerated.</para>
      <para>The currently defined OID group IDs are:</para>
      <list type="bullet">
        <item>
          <description>CRYPT_HASH_ALG_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_ENCRYPT_ALG_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_PUBKEY_ALG_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_SIGN_ALG_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_RDN_ATTR_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_EXT_OR_ATTR_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_ENHKEY_USAGE_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_POLICY_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_TEMPLATE_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_KDF_OID_GROUP_ID <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>The CRYPT_KDF_OID_GROUP_ID value is not supported.</description>
        </item>
        <item>
          <description>CRYPT_LAST_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_FIRST_ALG_OID_GROUP_ID</description>
        </item>
        <item>
          <description>CRYPT_LAST_ALG_OID_GROUP_ID</description>
        </item>
      </list>
    </param>
    <param name="dwFlags">This parameter is reserved for future use. It must be zero.</param>
    <param name="pvArg">A pointer to arguments to be passed through to the callback function.</param>
    <param name="pfnEnumOIDInfo">A pointer to the callback function that is executed for each OID information entry enumerated. For information about the callback parameters, see <a href="https://docs.microsoft.com//windows/desktop/api/wincrypt/nc-wincrypt-pfn_crypt_enum_oid_info">CRYPT_ENUM_OID_INFO</a>.</param>
    <returns>
      <para>If the callback function completes the enumeration, this function returns <b>TRUE</b>.</para>
      <para>If the callback function has stopped the enumeration, this function returns <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviders">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviders</b> function retrieves the first or next available <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs). Used in a loop, this function can retrieve in sequence all of the CSPs available on a computer.<para>Possible CSPs include Microsoft Base Cryptographic Provider version 1.0 and Microsoft Enhanced Cryptographic Provider version 1.0.</para></summary>
    <param name="dwIndex">Index of the next provider to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the type of the enumerated provider.</param>
    <param name="szProvName">
      <para>A pointer to a buffer that receives the data from the enumerated provider. This is a string including the terminating null character.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszProvName</i> buffer was not large enough to hold the provider name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProvidersA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviders</b> function retrieves the first or next available <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs). Used in a loop, this function can retrieve in sequence all of the CSPs available on a computer.<para>Possible CSPs include Microsoft Base Cryptographic Provider version 1.0 and Microsoft Enhanced Cryptographic Provider version 1.0.</para></summary>
    <param name="dwIndex">Index of the next provider to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the type of the enumerated provider.</param>
    <param name="szProvName">
      <para>A pointer to a buffer that receives the data from the enumerated provider. This is a string including the terminating null character.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszProvName</i> buffer was not large enough to hold the provider name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProvidersW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviders</b> function retrieves the first or next available <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs). Used in a loop, this function can retrieve in sequence all of the CSPs available on a computer.<para>Possible CSPs include Microsoft Base Cryptographic Provider version 1.0 and Microsoft Enhanced Cryptographic Provider version 1.0.</para></summary>
    <param name="dwIndex">Index of the next provider to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the type of the enumerated provider.</param>
    <param name="szProvName">
      <para>A pointer to a buffer that receives the data from the enumerated provider. This is a string including the terminating null character.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszProvName</i> buffer was not large enough to hold the provider name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviders">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviders</b> function retrieves the first or next available <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs). Used in a loop, this function can retrieve in sequence all of the CSPs available on a computer.<para>Possible CSPs include Microsoft Base Cryptographic Provider version 1.0 and Microsoft Enhanced Cryptographic Provider version 1.0.</para></summary>
    <param name="dwIndex">Index of the next provider to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the type of the enumerated provider.</param>
    <param name="szProvName">
      <para>A pointer to a buffer that receives the data from the enumerated provider. This is a string including the terminating null character.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszProvName</i> buffer was not large enough to hold the provider name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProvidersA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviders</b> function retrieves the first or next available <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs). Used in a loop, this function can retrieve in sequence all of the CSPs available on a computer.<para>Possible CSPs include Microsoft Base Cryptographic Provider version 1.0 and Microsoft Enhanced Cryptographic Provider version 1.0.</para></summary>
    <param name="dwIndex">Index of the next provider to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the type of the enumerated provider.</param>
    <param name="szProvName">
      <para>A pointer to a buffer that receives the data from the enumerated provider. This is a string including the terminating null character.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszProvName</i> buffer was not large enough to hold the provider name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProvidersW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviders</b> function retrieves the first or next available <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs). Used in a loop, this function can retrieve in sequence all of the CSPs available on a computer.<para>Possible CSPs include Microsoft Base Cryptographic Provider version 1.0 and Microsoft Enhanced Cryptographic Provider version 1.0.</para></summary>
    <param name="dwIndex">Index of the next provider to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the type of the enumerated provider.</param>
    <param name="szProvName">
      <para>A pointer to a buffer that receives the data from the enumerated provider. This is a string including the terminating null character.</para>
      <para>This parameter can be <b>NULL</b> to set the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszProvName</i> buffer was not large enough to hold the provider name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviderTypes">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviderTypes</b> function retrieves the first or next types of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) supported on the computer. Used in a loop, this function retrieves in sequence all of the CSP types available on a computer.<para>Provider types include PROV_RSA_FULL, PROV_RSA_SCHANNEL, and PROV_DSS.</para></summary>
    <param name="dwIndex">Index of the next provider type to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the enumerated provider type.</param>
    <param name="szTypeName">
      <para>A pointer to a buffer that receives the data from the enumerated provider type. This is a string including the terminating <b>NULL</b> character. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <para>This parameter can be <b>NULL</b> to get the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbTypeName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszTypeName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviderTypesA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviderTypes</b> function retrieves the first or next types of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) supported on the computer. Used in a loop, this function retrieves in sequence all of the CSP types available on a computer.<para>Provider types include PROV_RSA_FULL, PROV_RSA_SCHANNEL, and PROV_DSS.</para></summary>
    <param name="dwIndex">Index of the next provider type to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the enumerated provider type.</param>
    <param name="szTypeName">
      <para>A pointer to a buffer that receives the data from the enumerated provider type. This is a string including the terminating <b>NULL</b> character. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <para>This parameter can be <b>NULL</b> to get the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbTypeName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszTypeName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviderTypesW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviderTypes</b> function retrieves the first or next types of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) supported on the computer. Used in a loop, this function retrieves in sequence all of the CSP types available on a computer.<para>Provider types include PROV_RSA_FULL, PROV_RSA_SCHANNEL, and PROV_DSS.</para></summary>
    <param name="dwIndex">Index of the next provider type to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the enumerated provider type.</param>
    <param name="szTypeName">
      <para>A pointer to a buffer that receives the data from the enumerated provider type. This is a string including the terminating <b>NULL</b> character. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <para>This parameter can be <b>NULL</b> to get the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbTypeName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszTypeName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviderTypes">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviderTypes</b> function retrieves the first or next types of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) supported on the computer. Used in a loop, this function retrieves in sequence all of the CSP types available on a computer.<para>Provider types include PROV_RSA_FULL, PROV_RSA_SCHANNEL, and PROV_DSS.</para></summary>
    <param name="dwIndex">Index of the next provider type to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the enumerated provider type.</param>
    <param name="szTypeName">
      <para>A pointer to a buffer that receives the data from the enumerated provider type. This is a string including the terminating <b>NULL</b> character. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <para>This parameter can be <b>NULL</b> to get the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbTypeName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszTypeName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviderTypesA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviderTypes</b> function retrieves the first or next types of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) supported on the computer. Used in a loop, this function retrieves in sequence all of the CSP types available on a computer.<para>Provider types include PROV_RSA_FULL, PROV_RSA_SCHANNEL, and PROV_DSS.</para></summary>
    <param name="dwIndex">Index of the next provider type to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the enumerated provider type.</param>
    <param name="szTypeName">
      <para>A pointer to a buffer that receives the data from the enumerated provider type. This is a string including the terminating <b>NULL</b> character. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <para>This parameter can be <b>NULL</b> to get the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbTypeName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszTypeName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptEnumProviderTypesW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptEnumProviderTypes</b> function retrieves the first or next types of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) supported on the computer. Used in a loop, this function retrieves in sequence all of the CSP types available on a computer.<para>Provider types include PROV_RSA_FULL, PROV_RSA_SCHANNEL, and PROV_DSS.</para></summary>
    <param name="dwIndex">Index of the next provider type to be enumerated.</param>
    <param name="pdwReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pdwProvType">Address of the <b>DWORD</b> value designating the enumerated provider type.</param>
    <param name="szTypeName">
      <para>A pointer to a buffer that receives the data from the enumerated provider type. This is a string including the terminating <b>NULL</b> character. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <para>This parameter can be <b>NULL</b> to get the size of the name for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbTypeName">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the buffer pointed to by the <i>pszTypeName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by <i>pcbTypeName</i> is zero.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_MORE_ITEMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more items to enumerate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Something was wrong with the type registration.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptExportKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptExportKey</b> function exports a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic key</a> or a key pair from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) in a secure manner.<para>A handle to the key to be exported is passed to the function, and the function returns a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a>. This key BLOB can be sent over a nonsecure transport or stored in a nonsecure storage location. This function can export an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Schannel</a> session key, regular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pair</a>. The key BLOB to export is useless until the intended recipient uses the<see cref="CryptImportKey" /> function on it to import the key or key pair into a recipient's CSP.</para></summary>
    <param name="hKey">A handle to the key to be exported.</param>
    <param name="hExpKey">
      <para>A handle to a cryptographic key of the destination user. The key data within the exported <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a> is encrypted using this key. This ensures that only the destination user is able to make use of the key BLOB. Both <i>hExpKey</i> and <i>hKey</i> must come from the same CSP.</para>
      <para>Most often, this is the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key exchange public key</a> of the destination user. However, certain protocols in some CSPs require that a session key belonging to the destination user be used for this purpose.</para>
      <para>If the key BLOB type specified by <i>dwBlobType</i> is <b>PUBLICKEYBLOB</b>, this parameter is unused and must be set to zero.</para>
      <para>If the key BLOB type specified by <i>dwBlobType</i> is <b>PRIVATEKEYBLOB</b>, this is typically a handle to a session key that is to be used to encrypt the key BLOB. Some CSPs allow this parameter to be zero, in which case the application must encrypt the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key BLOB</a> manually so as to protect it.</para>
      <para>To determine how Microsoft <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> respond to this parameter, see the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key BLOB</a> sections of<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-cryptographic-service-providers">Microsoft Cryptographic Service Providers</a>.</para>
      <div>
        <b>Note</b>  Some CSPs may modify this parameter as a result of the operation. Applications that subsequently use this key for other purposes should call the <see cref="CryptDuplicateKey" /> function to create a duplicate key handle. When the application has finished using the handle, release it by calling the <see cref="CryptDestroyKey" /> function.</div>
    </param>
    <param name="dwBlobType">
      <para>Specifies the type of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a> to be exported in <i>pbData</i>. This must be one of the following constants as discussed in<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-key-storage-and-exchange">Cryptographic Key Storage and Exchange</a>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OPAQUEKEYBLOB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Used to store session keys in an Schannel CSP or any other vendor-specific format. OPAQUEKEYBLOBs are nontransferable and must be used within the CSP that generated the BLOB.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PRIVATEKEYBLOB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Used to transport <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PUBLICKEYBLOB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Used to transport public keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEBLOB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Used to transport session keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PLAINTEXTKEYBLOB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/jj650836(v=vs.85)">PLAINTEXTKEYBLOB</a> used to export any key supported by the CSP in use.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMMETRICWRAPKEYBLOB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Used to export and import a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">symmetric key</a> wrapped with another symmetric key. The actual wrapped key is in the format specified in the IETF <a href="https://www.ietf.org/rfc/rfc3217.txt">RFC 3217</a> standard.</description>
        </listheader>
      </list>
    </param>
    <param name="dwFlags">
      <para>Specifies additional options for the function. This parameter can be zero or a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_BLOB_VER3</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>This flag causes this function to export version 3 of a BLOB type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DESTROYKEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>This flag destroys the original key in the OPAQUEKEYBLOB. This flag is available in Schannel CSPs only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OAEP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>This flag causes PKCS #1 version 2 formatting to be created with the RSA encryption and decryption when exporting SIMPLEBLOBs.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_SSL2_FALLBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The first eight bytes of the RSA encryption block <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">padding</a> must be set to 0x03 rather than to random data. This prevents version rollback attacks and is discussed in the SSL3 specification. This flag is available for Schannel CSPs only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_Y_ONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
      </list>
    </param>
    <param name="pbData">
      <para>A pointer to a buffer that receives the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a> data. The format of this BLOB varies depending on the BLOB type requested in the <i>dwBlobType</i> parameter. For the format for PRIVATEKEYBLOBs, PUBLICKEYBLOBs, and SIMPLEBLOBs, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/base-provider-key-blobs">Base Provider Key BLOBs</a>.</para>
      <para>If this parameter is <b>NULL</b>, the required buffer size is placed in the value pointed to by the <i>pdwDataLen</i> parameter. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwDataLen">
      <para>A pointer to a <b>DWORD</b> value that, on entry, contains the size, in bytes, of the buffer pointed to by the <i>pbData</i> parameter. When the function returns, this value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>To retrieve the required size of the <i>pbData</i> buffer, pass <b>NULL</b> for <i>pbData</i>. The required buffer size will be placed in the value pointed to by this parameter.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. The following table shows some of the possible error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbData</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pdwDataLen</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either the algorithm that works with the public key to be exported is not supported by this CSP, or an attempt was made to export a session key that was encrypted with something other than one of your public keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or both of the keys specified by <i>hKey</i> and <i>hExpKey</i> are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You do not have permission to export the key. That is, when the <i>hKey</i> key was created, the CRYPT_EXPORTABLE flag was not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_PUBLIC_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a> type specified by <i>dwBlobType</i> is PUBLICKEYBLOB, but <i>hExpKey</i> does not contain a public key handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwBlobType</i> parameter specifies an unknown BLOB type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the <i>hKey</i> key was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A session key is being exported, and the <i>hExpKey</i> parameter does not specify a public key.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptExportPublicKeyInfo">
    <summary>The <b>CryptExportPublicKeyInfo</b> function exports the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> information associated with the corresponding <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> of the provider. For an updated version of this function, see<see cref="CryptExportPublicKeyInfoEx" />.</summary>
    <param name="hCryptProvOrNCryptKey">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) to use when exporting the public key information. This handle must be an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle that has been created by using the<see cref="CryptAcquireContext" /> function or an <b>NCRYPT_KEY_HANDLE</b> handle that has been created by using the <see cref="NCryptOpenKey" /> function. New applications should always pass in the <b>NCRYPT_KEY_HANDLE</b> handle of a CNG CSP.</param>
    <param name="dwKeySpec">Identifies the private key to use from the container of the provider. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is ignored if an <b>NCRYPT_KEY_HANDLE</b> is used in the <i>hCryptProvOrNCryptKey</i> parameter.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encoding type</a> used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pInfo">
      <para>A pointer to a<see cref="CERT_PUBLIC_KEY_INFO" /> structure to receive the public key information to be exported.</para>
      <para>To set the size of this information for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbInfo">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pInfo</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes needed for the return buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptGetUserKey" /> and <see cref="CryptExportKey" /> might be propagated to this function.</div>This function has the following error codes.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pInfo</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbInfo</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_FILE_NOT_FOUND</b></term></listheader></list></description><description>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptExportPublicKeyInfoEx">
    <summary>The <b>CryptExportPublicKeyInfoEx</b> function exports the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> information associated with the provider's corresponding <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>. This function allows the application to specify the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key algorithm</a>, overriding the default provided by the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).</summary>
    <param name="hCryptProvOrNCryptKey">A handle of the CSP to use when exporting the public key information. This handle must be an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle that has been created by using the<see cref="CryptAcquireContext" /> function or an <b>NCRYPT_KEY_HANDLE</b> handle that has been created by using the <see cref="NCryptOpenKey" /> function. New applications should always pass in the <b>NCRYPT_KEY_HANDLE</b> handle of a CNG CSP.</param>
    <param name="dwKeySpec">Identifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is ignored if an <b>NCRYPT_KEY_HANDLE</b> is used in the <i>hCryptProvOrNCryptKey</i> parameter.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pszPublicKeyObjId">
      <para>Specifies the public key algorithm.</para>
      <div>
        <b>Note</b>  <i>pszPublicKeyObjId</i> and <i>dwCertEncodingType</i> are used together to determine the installable <b>CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC</b> to call. If an installable function was not found for the <i>pszPublicKeyObjId</i> parameter, an attempt is made to export the key as an RSA Public Key (szOID_RSA_RSA).</div>
    </param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> flag value that indicates how the public key information is exported. The flag value is passed directly to the <see cref="CryptFindOIDInfo" /> function when mapping the public key <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> to the corresponding CNG public key algorithm Unicode string. The following flag values can be set.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</term>
              </listheader>
            </list>
          </description>
          <description>Skips public keys in the <b>CRYPT_PUBKEY_ALG_OID_GROUP_ID</b> group explicitly flagged with the <b>CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG</b> flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</term>
              </listheader>
            </list>
          </description>
          <description>Skips public keys in the <b>CRYPT_PUBKEY_ALG_OID_GROUP_ID</b> group explicitly flagged with the <b>CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG</b> flag.</description>
        </listheader>
      </list>
    </param>
    <param name="pvAuxInfo">This parameter is reserved for future use and must be set to <b>NULL</b>.</param>
    <param name="pInfo">
      <para>A pointer to a<see cref="CERT_PUBLIC_KEY_INFO" /> structure to receive the public key information to be exported.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbInfo">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pInfo</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptGetUserKey" /> and <see cref="CryptExportKey" /> can be propagated to this function.</div>This function has the following error codes.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_FILE_NOT_FOUND</b></term></listheader></list></description><description>An export function that can be installed or registered could not be found for the specified <i>dwCertEncodingType</i> and <i>pszPublicKeyObjId</i> parameters.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pInfo</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by the <i>pcbInfo</i> parameter.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptExportPublicKeyInfoFromBCryptKeyHandle">
    <summary>The <b>CryptExportPublicKeyInfoFromBCryptKeyHandle</b> function exports the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> information associated with a provider's corresponding <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>.</summary>
    <param name="hBCryptKey">The handle of the key from which to export the public key information.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type to be matched.</para>
      <para>This value can be a bitwise combination of the currently defined encoding types:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pszPublicKeyObjId">A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) that identifies the installable function to use to export the key. If the high-order word of the OID is nonzero, <i>pszPublicKeyObjId</i> is a pointer to either an OID string such as "2.5.29.1" or an ASCII string such as "file." If the high-order word of the OID is zero, the low-order word specifies the integer identifier to be used as the object identifier.</param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> value that indicates how the public key information is exported.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80000000</term>
              </listheader>
            </list>
          </description>
          <description>Skips public keys in the <b>CRYPT_PUBKEY_ALG_OID_GROUP_ID</b> group that are explicitly flagged with the <b>CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG</b> flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x40000000</term>
              </listheader>
            </list>
          </description>
          <description>Skips public keys in the <b>CRYPT_PUBKEY_ALG_OID_GROUP_ID</b> group that are explicitly flagged with the <b>CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG</b> flag.</description>
        </listheader>
      </list>
    </param>
    <param name="pvAuxInfo">This parameter is reserved for future use and must be set to <b>NULL</b>.</param>
    <param name="pInfo">
      <para>A pointer to a<see cref="CERT_PUBLIC_KEY_INFO" /> structure to receive the public key information to be exported.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbInfo">A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pInfo</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</param>
    <returns>The function returns <b>TRUE</b> if it succeeds; otherwise, it returns <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.CryptFindCertificateKeyProvInfo">
    <summary>The <b>CryptFindCertificateKeyProvInfo</b> function enumerates the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic providers</a> and their containers to find the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> that corresponds to the certificate's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>.</summary>
    <param name="pCert">A pointer to the<see cref="CERT_CONTEXT" /> structure of the certificate to use when exporting public key information.</param>
    <param name="dwFlags">
      <para>A set of flags that modify the behavior of this function. This can be zero or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_FIND_USER_KEYSET_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Restricts the search to the user container. The default is to search both the user and machine containers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_FIND_MACHINE_KEYSET_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Restricts the search to the machine container. The default is to search both the user and machine containers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_FIND_SILENT_KEYSET_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application requests that the CSP not display any user interface (UI) for this context. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error.</description>
        </listheader>
      </list> <para>The following flags determine which technology is used to obtain the key. If none of these flags is present, this function will only attempt to obtain the key by using CryptoAPI.</para><para><b>Windows Server 2003 and Windows XP:  </b>These flags are not supported.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG</b></term></listheader></list></description><description>This function will attempt to obtain the key by using CryptoAPI. If that fails, this function will attempt to obtain the key by using the Cryptography API: Next Generation (CNG). <para>The <b>CERT_KEY_PROV_INFO_PROP_ID</b> property of the certificate is set to zero if CNG is used to obtain the key.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG</b></term></listheader></list></description><description>This function will only attempt to obtain the key by using CNG and will not use CryptoAPI to obtain the key. <para>The <b>CERT_KEY_PROV_INFO_PROP_ID</b> property of the certificate is set to zero if CNG is used to obtain the key.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG</b></term></listheader></list></description><description>This function will attempt to obtain the key by using CNG. If that fails, this function will attempt to obtain the key by using CryptoAPI. <para>The <b>CERT_KEY_PROV_INFO_PROP_ID</b> property of the certificate is set to zero if CNG is used to obtain the key.</para></description></listheader></list></param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <returns>
      <para>
        <b>TRUE</b> if the function finds a private key that corresponds to the certificate's public key within a searched <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">container</a>; <b>FALSE</b> if the function fails to find a container or a private key within a container.</para>
      <para>
        <see cref="GetLastError" /> returns the following error:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No container found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptFindLocalizedName">
    <summary>The <b>CryptFindLocalizedName</b> function finds the localized name for the specified name, such as the localize name of the "Root" system store. This function can be used before displaying any UI that included a name that might have a localized form.</summary>
    <param name="pwszCryptName">
      <para>A pointer to a specified name. An internal table is searched to compare a predefined localized name to the specified name. The search matches the localized name by using a case insensitive string comparison.</para>
      <div>
        <b>Note</b>  Localized names for the predefined system stores ("Root", "My") and predefined physical stores (".Default", ".LocalMachine") are preinstalled as resource strings in Crypt32.dll.</div>
    </param>
    <returns>
      <para>If the specified name is found, a pointer to the localized name is returned. The returned pointer must not be freed.</para>
      <para>If the specified name is not found, <b>NULL</b> is returned.</para>
    </returns>
  </member>
  <member name="Windows.CryptFindOIDInfo">
    <summary>
      <para>The <b>CryptFindOIDInfo</b> function retrieves the first predefined or registered<see cref="CRYPT_OID_INFO" /> structure that matches a specified key type and key. The search can be limited to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifiers</a> (OIDs) within a specified OID group.</para>
      <para>Use<see cref="CryptEnumOIDInfo" /> to list all or selected subsets of <see cref="CRYPT_OID_INFO" /> structures. New <b>CRYPT_OID_INFO</b> structures can be registered by using<see cref="CryptRegisterOIDInfo" />. User-registered OIDs can be removed from the list of registered OIDs by using<see cref="CryptUnregisterOIDInfo" />.</para>
      <para>New OIDs can be placed in the list of registered OIDs either before or after the predefined entries. Because <b>CryptFindOIDInfo</b> returns the first key on the list that matches the search criteria, a newly registered OID placed before a predefined OID entry with the same key overrides a predefined entry.</para>
    </summary>
    <param name="dwKeyType">
      <para>Specifies the key type to use when finding OID information.</para>
      <para>This parameter can be one of the following key types.</para>
      <h4>CRYPT_OID_INFO_OID_KEY</h4>
      <para>
        <i>pvKey</i> is the address of a null-terminated ANSI string that contains the OID string to find.</para>
      <h4>CRYPT_OID_INFO_NAME_KEY</h4>
      <para>
        <i>pvKey</i> is the address of a null-terminated Unicode string that contains the name to find.</para>
      <h4>CRYPT_OID_INFO_ALGID_KEY</h4>
      <para>
        <i>pvKey</i> is the address of an<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> variable. The following <b>ALG_ID</b>s are supported:</para>
      <para>Hash Algorithms:</para>
      <para>Symmetric Encryption Algorithms:</para>
      <para>Public Key Algorithms:</para>
      <para>Algorithms that are not listed are supported by using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography API: Next Generation</a> (CNG) only; instead, use <b>CRYPT_OID_INFO_CNG_ALGID_KEY</b>.</para>
      <h4>CRYPT_OID_INFO_SIGN_KEY</h4>
      <para>
        <i>pvKey</i> is the address of an array of two <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a>s where the first element contains the hash algorithm identifier and the second element contains the public key algorithm identifier.</para>
      <para>The following <b>ALG_ID</b> combinations are supported.</para>
      <list type="table">
        <listheader>
          <description>Signature algorithm identifier</description>
          <description>Hash algorithm identifier</description>
        </listheader>
        <listheader>
          <description>CALG_RSA_SIGN</description>
          <description>
            <list type="table">
              <listheader>
                <description>CALG_SHA1</description>
              </listheader>
              <listheader>
                <description>CALG_MD5</description>
              </listheader>
              <listheader>
                <description>CALG_MD4</description>
              </listheader>
              <listheader>
                <description>CALG_MD2</description>
              </listheader>
            </list>
          </description>
        </listheader>
        <listheader>
          <description>CALG_DSS_SIGN</description>
          <description>
            <list type="table">
              <listheader>
                <description>CALG_SHA1</description>
              </listheader>
            </list>
          </description>
        </listheader>
        <listheader>
          <description>CALG_NO_SIGN</description>
          <description>
            <list type="table">
              <listheader>
                <description>CALG_SHA1</description>
              </listheader>
              <listheader>
                <description>CALG_NO_SIGN</description>
              </listheader>
            </list>
          </description>
        </listheader>
      </list> <para>Algorithms that are not listed are supported through CNG only; instead, use <b>CRYPT_OID_INFO_CNG_SIGN_KEY</b>.</para><h4>CRYPT_OID_INFO_CNG_ALGID_KEY</h4><para><i>pvKey</i> is the address of a null-terminated Unicode string that contains the CNG algorithm identifier to find. This can be one of the predefined <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-algorithm-identifiers">CNG Algorithm Identifiers</a> or another registered algorithm identifier.</para><b> Windows Server 2003 R2 Windows Server 2003 :  </b>This key type is not supported.<h4>CRYPT_OID_INFO_CNG_SIGN_KEY</h4><para><i>pvKey</i> is the address of an array of two null-terminated Unicode string pointers where the first string contains the hash CNG algorithm identifier and the second string contains the public key CNG algorithm identifier. These can be from the predefined <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-algorithm-identifiers">CNG Algorithm Identifiers</a> or another registered algorithm identifier.</para><b> Windows Server 2003 R2 Windows Server 2003 :  </b>This key type is not supported.<para>Optionally, the following key types can be specified in the <i>dwKeyType</i> parameter by using the logical <b>OR</b> operator (|).</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</b></term></listheader></list></description><description>Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</b></term></listheader></list></description><description>Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.</description></listheader></list></param>
    <param name="pvKey">The address of a buffer that contains additional search information. This parameter depends on the value of the <i>dwKeyType</i> parameter. For more information, see the table under <i>dwKeyType</i>.</param>
    <param name="dwGroupId">
      <para>The group identifier to use when finding OID information. Setting this parameter to zero searches all groups according to the <i>dwKeyType</i> parameter. Otherwise, only the indicated <i>dwGroupId</i> is searched.</para>
      <para>For information about code that lists the OID information by group identifier, see<see cref="CryptEnumOIDInfo" />.</para>
      <para>Optionally, the following flag can be specified in the <i>dwGroupId</i> parameter by using the logical <b>OR</b> operator (|).</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OID_DISABLE_SEARCH_DS_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables searching the directory server.</description>
        </listheader>
      </list> <para>The bit length shifted left 16 bits can be specified in the <i>dwGroupId</i> parameter by using the logical <b>OR</b> operator (|). For more information, see Remarks.</para></param>
    <returns>Returns a pointer to a constant structure of type <see cref="CRYPT_OID_INFO" />. The returned pointer must not be freed. When the specified key and group is not found, <b>NULL</b> is returned.</returns>
  </member>
  <member name="Windows.CryptFormatObject">
    <summary>The <b>CryptFormatObject</b> function formats the encoded data and returns a Unicode string in the allocated buffer according to the certificate encoding type.</summary>
    <param name="dwCertEncodingType">Type of encoding used on the certificate. The currently defined certificate encoding type used is X509_ASN_ENCODING.</param>
    <param name="dwFormatType">Format type values. Not used. Set to zero.</param>
    <param name="dwFormatStrType">
      <para>Structure format type values. This parameter can be zero, or you can specify one or more of the following flags by using the bitwise-<b>OR</b> operator to combine them.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Display the data in a single line. Each subfield is concatenated with a comma (,). For more information, see Remarks.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_FORMAT_STR_MULTI_LINE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Display the data in multiple lines rather than single line (the default). For more information, see Remarks.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_FORMAT_STR_NO_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Disables the hexadecimal dump. For more information, see Remarks.</description>
        </listheader>
      </list>
    </param>
    <param name="pFormatStruct">A pointer to the format of the structure. Not used. Set to <b>NULL</b>.</param>
    <param name="lpszStructType">
      <para>A pointer to an OID that defines the encoded data. If the high-order word of the <i>lpszStructType</i> parameter is zero, the low-order word specifies the integer identifier for the type of the given structure. Otherwise, this parameter is a long pointer to a <b>null</b>-terminated string.</para>
      <para>The following table lists supported OIDs with their associated OID extension.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC_FINANCIAL_CRITERIA_OBJID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>1.3.6.1.4.1.311.2.1.27</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SPC_SP_AGENCY_INFO_OBJID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>1.3.6.1.4.1.311.2.1.10</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_AUTHORITY_INFO_ACCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>1.3.6.1.5.5.7.1.1</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_AUTHORITY_KEY_IDENTIFIER2</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.35</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_BASIC_CONSTRAINTS2</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.19</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_CERT_POLICIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.32</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_CRL_DIST_POINTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.31</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_CRL_REASON_CODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.21</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_ENHANCED_KEY_USAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.37</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_ISSUER_ALT_NAME2</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.18</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_KEY_ATTRIBUTES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.2</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_KEY_USAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.15</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_KEY_USAGE_RESTRICTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.4</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_NEXT_UPDATE_LOCATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>1.3.6.1.4.1.311.10.2</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_RSA_SMIMECapabilities</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>1.2.840.113549.1.9.15</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_SUBJECT_ALT_NAME2</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.17</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>szOID_SUBJECT_KEY_IDENTIFIER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>2.5.29.14</description>
        </listheader>
      </list>
    </param>
    <param name="pbEncoded">A pointer to the encoded data to be formatted. If <i>lpszStructType</i> is one of the OIDs listed above, the <i>pbEncoded</i> is the encoded extension.</param>
    <param name="cbEncoded">The size, in bytes, of the <i>pbEncoded</i> structure.</param>
    <param name="pbFormat">A pointer to a buffer that receives the formatted string. When the buffer that is specified is not large enough to receive the decoded structure, the function sets ERROR_MORE_DATA and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbFormat</i>. This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</param>
    <param name="pcbFormat">
      <para>A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbFormat</i> parameter. When the function returns, the variable pointed to by the <i>pcbFormat</i> parameter contains the number of bytes stored in the buffer. This parameter can be <b>NULL</b>, only if <i>pbFormat</i> is <b>NULL</b>.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit into the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If it does not succeed, the return value is <b>FALSE</b>. To retrieve extended error information, use the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.CryptFreeOIDFunctionAddress">
    <summary>The <b>CryptFreeOIDFunctionAddress</b> function releases a handle returned by<see cref="CryptGetOIDFunctionAddress" /> or<see cref="CryptGetDefaultOIDFunctionAddress" /> by decrementing the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> on the function handle. In some cases, the DLL file associated with the function is unloaded. For details, see Remarks.</summary>
    <param name="hFuncAddr">Handle of the function previously obtained from a call to<see cref="CryptGetOIDFunctionAddress" /> or<see cref="CryptGetDefaultOIDFunctionAddress" />.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptGenKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGenKey</b> function generates a random cryptographic <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a> or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pair</a>. A handle to the key or key pair is returned in <i>phKey</i>. This handle can then be used as needed with any CryptoAPI function that requires a key handle.<para>The calling application must specify the algorithm when calling this function. Because this algorithm type is kept bundled with the key, the application does not need to specify the algorithm later when the actual cryptographic operations are performed.</para></summary>
    <param name="hProv">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) created by a call to<see cref="CryptAcquireContext" />.</param>
    <param name="Algid">
      <para>An<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> value that identifies the algorithm for which the key is to be generated. Values for this parameter vary depending on the CSP used.</para>
      <para>For <b>ALG_ID</b> values to use with the Microsoft Base Cryptographic Provider, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/base-provider-algorithms">Base Provider Algorithms</a>.</para>
      <para>For <b>ALG_ID</b> values to use with the Microsoft Strong Cryptographic Provider or the Microsoft Enhanced Cryptographic Provider, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/enhanced-provider-algorithms">Enhanced Provider Algorithms</a>.</para>
      <para>For a Diffie-Hellman CSP, use one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CALG_DH_EPHEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies an "Ephemeral" Diffie-Hellman key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CALG_DH_SF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies a "Store and Forward" Diffie-Hellman key.</description>
        </listheader>
      </list> <para>In addition to generating session keys for <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">symmetric algorithms</a>, this function can also generate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. Each CryptoAPI client generally possesses two public/private key pairs. To generate one of these key pairs, set the <i>Algid</i> parameter to one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>AT_KEYEXCHANGE</b></term></listheader></list></description><description>Key exchange</description></listheader><listheader><description><list type="bullet"><listheader><term><b>AT_SIGNATURE</b></term></listheader></list></description><description>Digital signature</description></listheader></list> <div><b>Note</b>  When key specifications AT_KEYEXCHANGE and AT_SIGNATURE are specified, the algorithm identifiers that are used to generate the key depend on the provider used. As a result, for these key specifications, the values returned from 					<see cref="CryptGetKeyParam" /> (when the KP_ALGID parameter is specified) depend on the provider used. To determine which algorithm identifier is used by the different providers for the key specs AT_KEYEXCHANGE and AT_SIGNATURE, see 					<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a>.</div></param>
    <param name="dwFlags">
      <para>Specifies the type of key generated. The sizes of a session key, RSA signature key, and RSA key <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">exchange keys</a> can be set when the key is generated. The key size, representing the length of the key modulus in bits, is set with the upper 16 bits of this parameter. Thus, if a 2,048-bit RSA signature key is to be generated, the value 0x08000000 is combined with any other <i>dwFlags</i> predefined value with a bitwise-<b>OR</b> operation. The upper 16 bits of 0x08000000 is 0x0800, or decimal 2,048. The <b>RSA1024BIT_KEY</b> value can be used to specify a 1024-bit RSA key.</para>
      <para>Due to changing export control restrictions, the default CSP and default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key length</a> may change between operating system versions. It is important that both the encryption and decryption use the same CSP and that the key length be explicitly set using the <i>dwFlags</i> parameter to ensure interoperability on different operating system platforms.</para>
      <para>In particular, the default RSA Full Cryptographic Service Provider is the Microsoft RSA Strong Cryptographic Provider. The default DSS Signature Diffie-Hellman Cryptographic Service Provider is the Microsoft Enhanced DSS Diffie-Hellman Cryptographic Provider. Each of these CSPs has a default 128-bit symmetric key length for RC2 and RC4 and a 1,024-bit default key length for public key algorithms.</para>
      <para>If the upper 16 bits is zero, the default key size is generated. If a key larger than the maximum or smaller than the minimum is specified, the call fails with the ERROR_INVALID_PARAMETER code.</para>
      <para>The following table lists minimum, default, and maximum signature and exchange key lengths beginning with Windows XP.</para>
      <list type="table">
        <listheader>
          <description>Key type and provider</description>
          <description>Minimum length</description>
          <description>Default length</description>
          <description>Maximum length</description>
        </listheader>
        <listheader>
          <description>RSA Base Provider<para>Signature and ExchangeKeys</para></description>
          <description>384</description>
          <description>512</description>
          <description>16,384</description>
        </listheader>
        <listheader>
          <description>RSA Strong and Enhanced Providers<para>Signature and Exchange Keys</para></description>
          <description>384</description>
          <description>1,024</description>
          <description>16,384</description>
        </listheader>
        <listheader>
          <description>DSS Base Providers<para>Signature Keys</para></description>
          <description>512</description>
          <description>1,024</description>
          <description>1,024</description>
        </listheader>
        <listheader>
          <description>DSS Base Providers<para>Exchange Keys</para></description>
          <description>Not applicable</description>
          <description>Not applicable</description>
          <description>Not applicable</description>
        </listheader>
        <listheader>
          <description>DSS/DH Base Providers<para>Signature Keys</para></description>
          <description>512</description>
          <description>1,024</description>
          <description>1,024</description>
        </listheader>
        <listheader>
          <description>DSS/DH Base Providers<para>Exchange Keys</para></description>
          <description>512</description>
          <description>512</description>
          <description>1,024</description>
        </listheader>
        <listheader>
          <description>DSS/DH Enhanced Providers<para>Signature Keys</para></description>
          <description>512</description>
          <description>1,024</description>
          <description>1,024</description>
        </listheader>
        <listheader>
          <description>DSS/DH Enhanced Providers<para>Exchange Keys</para></description>
          <description>512</description>
          <description>1,024</description>
          <description>4,096</description>
        </listheader>
      </list> <para>For session key lengths, see <see cref="CryptDeriveKey" />.</para><para>For more information about keys generated using Microsoft providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-cryptographic-service-providers">Microsoft Cryptographic Service Providers</a>.</para><para>The lower 16-bits of this parameter can be zero or a combination of one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ARCHIVABLE</b></term></listheader></list></description><description>If this flag is set, the key can be exported until its handle is closed by a call to <see cref="CryptDestroyKey" />. This allows newly generated keys to be exported upon creation for archiving or key recovery. After the handle is closed, the key is no longer exportable.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_CREATE_IV</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_CREATE_SALT</b></term></listheader></list></description><description>If this flag is set, then the key is assigned a random <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">salt value</a> automatically. You can retrieve this salt value by using the 							<see cref="CryptGetKeyParam" /> function with the <i>dwParam</i> parameter set to KP_SALT.<para>If this flag is not set, then the key is given a salt value of zero.</para><para>When keys with nonzero salt values are exported (through<see cref="CryptExportKey" />), then the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">salt value</a> must also be obtained and kept with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a>.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_DATA_KEY</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_EXPORTABLE</b></term></listheader></list></description><description>If this flag is set, then the key can be transferred out of the CSP into a key BLOB by using the 							<see cref="CryptExportKey" /> function. Because session keys generally must be exportable, this flag should usually be set when they are created.<para>If this flag is not set, then the key is not exportable. For a session key, this means that the key is available only within the current session and only the application that created it will be able to use it. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pair</a>, this means that the private key cannot be transported or backed up.</para><para>This flag applies only to session key and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key BLOBs</a>. It does not apply to public keys, which are always exportable.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_FORCE_KEY_PROTECTION_HIGH</b></term></listheader></list></description><description>This flag specifies strong key protection. When this flag is set, the user is prompted to enter a password for the key when the key is created. The user will be prompted to enter the password whenever this key is used. <para>This flag is only used by the CSPs that are provided by Microsoft. Third party CSPs will define their own behavior for strong key protection.</para><para>Specifying this flag causes the same result as calling this function with the <b>CRYPT_USER_PROTECTED</b> flag when strong key protection is specified in the system registry.</para><para>If this flag is specified and the provider handle in the <i>hProv</i> parameter was created by using the <b>CRYPT_VERIFYCONTEXT</b> or <b>CRYPT_SILENT</b> flag, this function will set the last error to <b>NTE_SILENT_CONTEXT</b> and return zero.</para><para><b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_KEK</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_INITIATOR</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_NO_SALT</b></term></listheader></list></description><description>This flag specifies that a no <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">salt value</a> gets allocated for a forty-bit <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">symmetric key</a>. For more information, see 							<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/salt-value-functionality">Salt Value Functionality</a>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_ONLINE</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_PREGEN</b></term></listheader></list></description><description>This flag specifies an initial Diffie-Hellman or DSS key generation. This flag is useful only with Diffie-Hellman and DSS CSPs. When used, a default key length will be used unless a key length is specified in the upper 16 bits of the <i>dwFlags</i> parameter. If parameters that involve key lengths are set on a PREGEN Diffie-Hellman or DSS key using <see cref="CryptSetKeyParam" />, the key lengths must be compatible with the key length set here.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_RECIPIENT</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_SF</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_SGCKEY</b></term></listheader></list></description><description>This flag is not used.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_USER_PROTECTED</b></term></listheader></list></description><description>If this flag is set, the user is notified through a dialog box or another method when certain actions are attempting to use this key. The precise behavior is specified by the CSP being used. If the provider context was opened with the CRYPT_SILENT flag set, using this flag causes a failure and the last error is set to NTE_SILENT_CONTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_VOLATILE</b></term></listheader></list></description><description>This flag is not used.</description></listheader></list></param>
    <param name="phKey">Address to which the function copies the handle of the newly generated key. When you have finished using the key, delete the handle to the key by calling the <see cref="CryptDestroyKey" /> function.</param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hProv</i> parameter does not contain a valid context handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_SILENT_CONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The provider could not perform the action because the context was acquired as silent.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGenRandom">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGenRandom</b> function fills a buffer with cryptographically random bytes.</summary>
    <param name="hProv">Handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) created by a call to<see cref="CryptAcquireContext" />.</param>
    <param name="dwLen">Number of bytes of random data to be generated.</param>
    <param name="pbBuffer">
      <para>Buffer to receive the returned data. This buffer must be at least <i>dwLen</i> bytes in length.</para>
      <para>Optionally, the application can fill this buffer with data to use as an auxiliary random seed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hProv</i> parameter does not contain a valid context handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetAsyncParam">
    <summary>Sets an async parameter value.</summary>
    <param name="hAsync">An async handle.</param>
    <param name="pszParamOid">The parameter ID.</param>
    <param name="ppvParam">Receives the parameter value.</param>
    <param name="ppfnFree">A callback function called when the parameter is freed.</param>
    <returns>S_OK on success.</returns>
  </member>
  <member name="Windows.CryptGetDefaultOIDDllList">
    <summary>The <b>CryptGetDefaultOIDDllList</b> function acquires the list of the names of DLL files that contain registered default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) functions for a specified function set and encoding type.</summary>
    <param name="hFuncSet">Function set handle previously obtained by a call to<see cref="CryptInitOIDFunctionSet" />.</param>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <div>
        <b>Note</b>  Either a certificate or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used; otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used.</div>
    </param>
    <param name="pwszDllList">
      <para>A pointer to a buffer to receive the list of zero or more null-terminated file names. The returned list is terminated with a terminating <b>NULL</b> character. For example, a list of two names could be:</para>
      <para>L"<i>first</i>.dll\0" L"<i>second</i>.dll\0" L"\0"</para>
      <para>To retrieve the number of wide characters the buffer must hold, this parameter can be <b>NULL</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcchDllList">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in wide characters, of the returned list pointed to by the <i>pwszDllList</i> parameter. When the function returns, the variable pointed to by the <i>pcchDllList</i> parameter contains the number of wide characters stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>This function has the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pwszDllList</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in wide characters, in the variable pointed to by <i>pcchDllList</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetDefaultOIDFunctionAddress">
    <summary>The <b>CryptGetDefaultOIDFunctionAddress</b> function loads the DLL that contains a default function address. It can also return the address of the first or next installed default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) function in an initialized function set and load the DLL that contains the address of that function.</summary>
    <param name="hFuncSet">Function set handle previously obtained from a call to<see cref="CryptInitOIDFunctionSet" />.</param>
    <param name="dwEncodingType">
      <para>Encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
    </param>
    <param name="pwszDll">Name of the DLL to load. Normally, the DLL name is obtained from the list returned by<see cref="CryptGetDefaultOIDDllList" />. If <i>pwszDll</i> is <b>NULL</b>, a search is performed on the list of installed default functions.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="ppvFuncAddr">A pointer to the address of the return function. If the function fails, a <b>NULL</b> is returned in <i>ppvFuncAddr</i>.</param>
    <param name="phFuncAddr">
      <para>Used only if <i>pwszDll</i> is <b>NULL</b>. On the first call to the function, *<i>phFuncAddr</i> must be <b>NULL</b> to acquire the first installed function.</para>
      <para>When this function is successful, *<i>phFuncAddr</i> is set to a function handle. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> for the function handle is incremented.</para>
      <para>After the first call to the function, <i>phFuncAddr</i> is set to the pointer returned by the previous call. This input pointer is always freed within the function through a call to<see cref="CryptFreeOIDFunctionAddress" /> by this function. The call to free the pointer is always made even when the main function returns an error.</para>
      <para>A non-<b>NULL</b><i>phFuncAddr</i> must be released either through a call to <see cref="CryptFreeOIDFunctionAddress" /> or by being passed back as input to this function or as input to<see cref="CryptGetOIDFunctionAddress" />.</para>
      <para>If <i>pwszDll</i> is not <b>NULL</b>, the value of this parameter is ignored and a non-<b>NULL</b> pointer is not freed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptGetDefaultProvider">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetDefaultProvider</b> function finds the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user. The name of the default CSP for the provider type specified in the <i>dwProvType</i> parameter is returned in the <i>pszProvName</i> buffer.</summary>
    <param name="dwProvType">
      <para>The provider type for which the default CSP name is to be found.</para>
      <para>Defined provider types are as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-full">PROV_RSA_FULL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-sig">PROV_RSA_SIG</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss">PROV_DSS</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss-dh">PROV_DSS_DH</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dh-schannel">PROV_DH_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-fortezza">PROV_FORTEZZA</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ms-exchange">PROV_MS_EXCHANGE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-schannel">PROV_RSA_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ssl">PROV_SSL</a>
          </description>
        </item>
      </list>
    </param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns the user-context default CSP of the specified type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Returns the computer default CSP of the specified type.</description>
        </listheader>
      </list>
    </param>
    <param name="pszProvName">
      <para>A pointer to a null-terminated character string buffer to receive the name of the default CSP.</para>
      <para>To find the size of the buffer for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by NTE is generated by the particular CSP being used. Possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer for the name is not large enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetDefaultProviderA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetDefaultProvider</b> function finds the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user. The name of the default CSP for the provider type specified in the <i>dwProvType</i> parameter is returned in the <i>pszProvName</i> buffer.</summary>
    <param name="dwProvType">
      <para>The provider type for which the default CSP name is to be found.</para>
      <para>Defined provider types are as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-full">PROV_RSA_FULL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-sig">PROV_RSA_SIG</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss">PROV_DSS</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss-dh">PROV_DSS_DH</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dh-schannel">PROV_DH_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-fortezza">PROV_FORTEZZA</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ms-exchange">PROV_MS_EXCHANGE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-schannel">PROV_RSA_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ssl">PROV_SSL</a>
          </description>
        </item>
      </list>
    </param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns the user-context default CSP of the specified type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Returns the computer default CSP of the specified type.</description>
        </listheader>
      </list>
    </param>
    <param name="pszProvName">
      <para>A pointer to a null-terminated character string buffer to receive the name of the default CSP.</para>
      <para>To find the size of the buffer for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by NTE is generated by the particular CSP being used. Possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer for the name is not large enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetDefaultProviderW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetDefaultProvider</b> function finds the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user. The name of the default CSP for the provider type specified in the <i>dwProvType</i> parameter is returned in the <i>pszProvName</i> buffer.</summary>
    <param name="dwProvType">
      <para>The provider type for which the default CSP name is to be found.</para>
      <para>Defined provider types are as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-full">PROV_RSA_FULL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-sig">PROV_RSA_SIG</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss">PROV_DSS</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss-dh">PROV_DSS_DH</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dh-schannel">PROV_DH_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-fortezza">PROV_FORTEZZA</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ms-exchange">PROV_MS_EXCHANGE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-schannel">PROV_RSA_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ssl">PROV_SSL</a>
          </description>
        </item>
      </list>
    </param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns the user-context default CSP of the specified type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Returns the computer default CSP of the specified type.</description>
        </listheader>
      </list>
    </param>
    <param name="pszProvName">
      <para>A pointer to a null-terminated character string buffer to receive the name of the default CSP.</para>
      <para>To find the size of the buffer for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by NTE is generated by the particular CSP being used. Possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer for the name is not large enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetDefaultProvider">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetDefaultProvider</b> function finds the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user. The name of the default CSP for the provider type specified in the <i>dwProvType</i> parameter is returned in the <i>pszProvName</i> buffer.</summary>
    <param name="dwProvType">
      <para>The provider type for which the default CSP name is to be found.</para>
      <para>Defined provider types are as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-full">PROV_RSA_FULL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-sig">PROV_RSA_SIG</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss">PROV_DSS</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss-dh">PROV_DSS_DH</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dh-schannel">PROV_DH_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-fortezza">PROV_FORTEZZA</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ms-exchange">PROV_MS_EXCHANGE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-schannel">PROV_RSA_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ssl">PROV_SSL</a>
          </description>
        </item>
      </list>
    </param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns the user-context default CSP of the specified type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Returns the computer default CSP of the specified type.</description>
        </listheader>
      </list>
    </param>
    <param name="pszProvName">
      <para>A pointer to a null-terminated character string buffer to receive the name of the default CSP.</para>
      <para>To find the size of the buffer for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by NTE is generated by the particular CSP being used. Possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer for the name is not large enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetDefaultProviderA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetDefaultProvider</b> function finds the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user. The name of the default CSP for the provider type specified in the <i>dwProvType</i> parameter is returned in the <i>pszProvName</i> buffer.</summary>
    <param name="dwProvType">
      <para>The provider type for which the default CSP name is to be found.</para>
      <para>Defined provider types are as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-full">PROV_RSA_FULL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-sig">PROV_RSA_SIG</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss">PROV_DSS</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss-dh">PROV_DSS_DH</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dh-schannel">PROV_DH_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-fortezza">PROV_FORTEZZA</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ms-exchange">PROV_MS_EXCHANGE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-schannel">PROV_RSA_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ssl">PROV_SSL</a>
          </description>
        </item>
      </list>
    </param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns the user-context default CSP of the specified type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Returns the computer default CSP of the specified type.</description>
        </listheader>
      </list>
    </param>
    <param name="pszProvName">
      <para>A pointer to a null-terminated character string buffer to receive the name of the default CSP.</para>
      <para>To find the size of the buffer for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by NTE is generated by the particular CSP being used. Possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer for the name is not large enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetDefaultProviderW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetDefaultProvider</b> function finds the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user. The name of the default CSP for the provider type specified in the <i>dwProvType</i> parameter is returned in the <i>pszProvName</i> buffer.</summary>
    <param name="dwProvType">
      <para>The provider type for which the default CSP name is to be found.</para>
      <para>Defined provider types are as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-full">PROV_RSA_FULL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-sig">PROV_RSA_SIG</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss">PROV_DSS</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dss-dh">PROV_DSS_DH</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-dh-schannel">PROV_DH_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-fortezza">PROV_FORTEZZA</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ms-exchange">PROV_MS_EXCHANGE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-rsa-schannel">PROV_RSA_SCHANNEL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/prov-ssl">PROV_SSL</a>
          </description>
        </item>
      </list>
    </param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns the user-context default CSP of the specified type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Returns the computer default CSP of the specified type.</description>
        </listheader>
      </list>
    </param>
    <param name="pszProvName">
      <para>A pointer to a null-terminated character string buffer to receive the name of the default CSP.</para>
      <para>To find the size of the buffer for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbProvName">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the buffer pointed to by the <i>pszProvName</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error code prefaced by NTE is generated by the particular CSP being used. Possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer for the name is not large enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter has an unrecognized value.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetHashParam">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetHashParam</b> function retrieves data that governs the operations of a hash object. The actual hash value can be retrieved by using this function.</summary>
    <param name="hHash">Handle of the hash object to be queried.</param>
    <param name="dwParam">
      <para>Query type. This parameter can be set to one of the following queries.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HP_ALGID</b>
                </term>
              </listheader>
              <listheader>
                <term>Hash algorithm</term>
              </listheader>
            </list>
          </description>
          <description>An <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> that indicates the algorithm specified when the hash object was created. For a list of hash algorithms, see <see cref="CryptCreateHash" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HP_HASHSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>Hash value size</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>DWORD</b> value indicating the number of bytes in the hash value. This value will vary depending on the hash algorithm. Applications must retrieve this value just before the HP_HASHVAL value so the correct amount of memory can be allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HP_HASHVAL</b>
                </term>
              </listheader>
              <listheader>
                <term>Hash value</term>
              </listheader>
            </list>
          </description>
          <description>The hash value or message hash for the hash object specified by <i>hHash</i>. This value is generated based on the data supplied to the hash object earlier through the <see cref="CryptHashData" /> and <see cref="CryptHashSessionKey" /> functions.<para>The <b>CryptGetHashParam</b> function completes the hash. After <b>CryptGetHashParam</b> has been called, no more data can be added to the hash. Additional calls to <see cref="CryptHashData" /> or <see cref="CryptHashSessionKey" /> fail. After the application is done with the hash,<see cref="CryptDestroyHash" /> should be called to destroy the hash object.</para></description>
        </listheader>
      </list> <div><b>Note</b>  CSPs can add more values that this function can query.</div></param>
    <param name="pbData">
      <para>A pointer to a buffer that receives the specified value data. The form of this data varies, depending on the value number.</para>
      <para>This parameter can be <b>NULL</b> to determine the memory size required.</para>
    </param>
    <param name="pdwDataLen">
      <para>A pointer to a <b>DWORD</b> value specifying the size, in bytes, of the <i>pbData</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <para>If <i>pbData</i> is <b>NULL</b>, set the value of <i>pdwDataLen</i> to zero.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbData</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by <i>pdwDataLen</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwParam</i> parameter specifies an unknown value number.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash was created cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetKeyIdentifierProperty">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetKeyIdentifierProperty</b> acquires a specific property from a specified key identifier.</summary>
    <param name="pKeyIdentifier">A pointer to the<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> that contains the key identifier.</param>
    <param name="dwPropId">Identifies the property to retrieve. The value of <i>dwPropId</i> determines the type and content of the <i>pvData</i> parameter. Any certificate property ID can be used.</param>
    <param name="dwFlags">
      <para>The following flags can be used. They can be combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_KEYID_MACHINE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Search the list of key identifiers of the LocalMachine (if <i>pwszComputerName</i> is <b>NULL</b>) or remote computer (if <i>pwszComputerName</i> is not <b>NULL</b>). For more information, see <i>pwszComputerName</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_KEYID_ALLOC_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>LocalAlloc()</b> function is called to allocate memory for <i>pvData</i>. *<i>pvData</i> is updated with a pointer to the allocated memory. <b>LocalFree()</b> must be called to free the allocated memory.</description>
        </listheader>
      </list>
    </param>
    <param name="pwszComputerName">A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer for a list of key identifiers. If the local computer is to be searched and not a remote computer, set <i>pwszComputerName</i> to <b>NULL</b>.</param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pvData">
      <para>A pointer to a buffer to receive the data as determined by <i>dwPropId</i>. Elements pointed to by fields in the <i>pvData</i> structure follow the structure. Therefore, the size contained in <i>pcbData</i> can exceed the size of the structure.</para>
      <para>If <i>dwPropId</i> is CERT_KEY_PROV_INFO_PROP_ID, <i>pvData</i> points to a CRYPT_KEY_PROV_INFO structure that contains the property of the key identifier.</para>
      <para>If <i>dwPropId</i> is not CERT_KEY_PROV_INFO_PROP_ID, <i>pvData</i> points to an array of bytes that contains the property of the key identifier.</para>
      <para>To get the size of this information for memory allocation purposes, this parameter can be <b>NULL</b> when the CRYPT_KEYID_ALLOC_FLAG is not set. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
      <para>When the CRYPT_KEYID_ALLOC_FLAG is set, <i>pvData</i> is the address of a pointer to the buffer that will be updated. Because memory is allocated and its pointer is stored at *<i>pvData</i>, <i>pvData</i> must not be <b>NULL</b>.</para>
    </param>
    <param name="pcbData">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pvData</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer. The size contained in the variable pointed to by <i>pcbData</i> can indicate a size larger than the<see cref="CRYPT_KEY_PROV_INFO" /> structure because the structure can contain pointers to auxiliary data. This size is the sum of the size needed by the structure and all auxiliary data.</para>
      <para>When the CRYPT_KEYID_ALLOC_FLAG is set, <i>pcbData</i> is the address of a pointer to the <b>DWORD</b> that will be updated.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptGetKeyParam">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetKeyParam</b> function retrieves data that governs the operations of a key. If the <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-cryptographic-service-providers">Microsoft Cryptographic Service Provider</a> is used, the base symmetric keying material is not obtainable by this or any other function.</summary>
    <param name="hKey">The handle of the key being queried.</param>
    <param name="dwParam">
      <para>Specifies the type of query being made.</para>
      <para>For all key types, this parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the key algorithm. The <i>pbData</i> parameter is a pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> value that receives the identifier of the algorithm that was specified when the key was created.<para>When <b>AT_KEYEXCHANGE</b> or <b>AT_SIGNATURE</b> is specified for the <i>Algid</i> parameter of the <see cref="CryptGenKey" /> function, the algorithm identifiers that are used to generate the key depend on the provider used. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_BLOCKLEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a session key is specified by the <i>hKey</i> parameter, retrieve the block length of the key cipher. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives the block length, in bits. For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">stream ciphers</a>, this value is always zero.<para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pair</a> is specified by <i>hKey</i>, retrieve the encryption granularity of the key pair. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives the encryption granularity, in bits. For example, the <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-base-cryptographic-provider">Microsoft Base Cryptographic Provider</a> generates 512-bit RSA key pairs, so a value of 512 is returned for these keys. If the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key algorithm</a> does not support <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, the value retrieved is undefined.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_CERTIFICATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pbData</i> is the address of a buffer that receives the X.509 certificate that has been encoded by using <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Distinguished Encoding Rules</a> (DER). The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> must match the corresponding signature or exchange key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_GET_USE_COUNT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_KEYLEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the actual length of the key. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives the key length, in bits. <b>KP_KEYLEN</b> can be used to get the length of any key type. Microsoft <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs) return a key length of 64 bits for <b>CALG_DES</b>, 128 bits for <b>CALG_3DES_112</b>, and 192 bits for <b>CALG_3DES</b>. These lengths are different from the lengths returned when you are enumerating algorithms with the <i>dwParam</i> value of the <see cref="CryptGetProvParam" /> function set to <b>PP_ENUMALGS</b>. The length returned by this call is the actual size of the key, including the parity bits included in the key.<para>Microsoft CSPs that support the <b>CALG_CYLINK_MEK</b><a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> return 64 bits for that algorithm. <b>CALG_CYLINK_MEK</b> is a 40-bit key but has parity and zeroed key bits to make the key length 64 bits.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_SALT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">salt value</a> of the key. The <i>pbData</i> parameter is a pointer to a <b>BYTE</b> array that receives the salt value in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">little-endian</a> form. The size of the salt value varies depending on the CSP and algorithm being used. Salt values do not apply to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_PERMISSIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the key permissions. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives the permission flags for the key.<para>The following permission identifiers are currently defined. The key permissions can be zero or a combination of one or more of the following values.</para><list type="table"><listheader><term>CRYPT_ARCHIVE</term></listheader><listheader><description>Allow export during the lifetime of the handle of the key. This permission can be set only if it is already set in the internal permissions field of the key. Attempts to clear this permission are ignored.</description></listheader><listheader><term>CRYPT_DECRYPT</term></listheader><listheader><description>Allow decryption.</description></listheader><listheader><term>CRYPT_ENCRYPT</term></listheader><listheader><description>Allow encryption.</description></listheader><listheader><term>CRYPT_EXPORT</term></listheader><listheader><description>Allow the key to be exported.</description></listheader><listheader><term>CRYPT_EXPORT_KEY</term></listheader><listheader><description>Allow the key to be used for exporting keys.</description></listheader><listheader><term>CRYPT_IMPORT_KEY</term></listheader><listheader><description>Allow the key to be used for importing keys.</description></listheader><listheader><term>CRYPT_MAC</term></listheader><listheader><description>Allow <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">Message Authentication Codes</a> (MACs) to be used with key.</description></listheader><listheader><term>CRYPT_READ</term></listheader><listheader><description>Allow values to be read.</description></listheader><listheader><term>CRYPT_WRITE</term></listheader><listheader><description>Allow values to be set.</description></listheader></list></description>
        </listheader>
      </list> <para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Digital Signature Standard</a> (DSS) key is specified by the <i>hKey</i> parameter, the <i>dwParam</i> value can also be set to one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_P</b></term></listheader></list></description><description>Retrieve the modulus prime number P of the DSS key. The <i>pbData</i> parameter is a pointer to a buffer that receives the value in little-endian form. The <i>pdwDataLen</i> parameter contains the size of the buffer, in bytes.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_Q</b></term></listheader></list></description><description>Retrieve the modulus prime number Q of the DSS key. The <i>pbData</i> parameter is a pointer to a buffer that receives the value in little-endian form. The <i>pdwDataLen</i> parameter contains the size of the buffer, in bytes.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_G</b></term></listheader></list></description><description>Retrieve the generator G of the DSS key. The <i>pbData</i> parameter is a pointer to a buffer that receives the value in little-endian form. The <i>pdwDataLen</i> parameter contains the size of the buffer, in bytes.</description></listheader></list> <para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">block cipher</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a> is specified by the <i>hKey</i> parameter, the <i>dwParam</i> value can also be set to one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_EFFECTIVE_KEYLEN</b></term></listheader></list></description><description>Retrieve the effective key length of an RC2 key. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives the effective key length.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_IV</b></term></listheader></list></description><description>Retrieve the initialization vector of the key. The <i>pbData</i> parameter is a pointer to a <b>BYTE</b> array that receives the initialization vector. The size of this array is the block size, in bytes. For example, if the block length is 64 bits, the initialization vector consists of 8 bytes.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_PADDING</b></term></listheader></list></description><description>Retrieve the padding mode. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives a numeric identifier that identifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">padding</a> method used by the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cipher</a>. This can be one of the following values.<list type="table"><listheader><term>PKCS5_PADDING</term></listheader><listheader><description>Specifies the PKCS 5 (sec 6.2) padding method.</description></listheader><listheader><term>RANDOM_PADDING</term></listheader><listheader><description>The padding uses random numbers. This padding method is not supported by the Microsoft supplied CSPs.</description></listheader><listheader><term>ZERO_PADDING</term></listheader><listheader><description>The padding uses zeros. This padding method is not supported by the Microsoft supplied CSPs.</description></listheader></list></description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_MODE</b></term></listheader></list></description><description>Retrieve the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cipher mode</a>. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives a cipher mode identifier. For more information about cipher modes, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/data-encryption-and-decryption">Data Encryption and Decryption</a>.<para>The following cipher mode identifiers are currently defined.</para><list type="table"><listheader><term>CRYPT_MODE_CBC</term></listheader><listheader><description>The cipher mode is <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cipher block chaining</a>.</description></listheader><listheader><term>CRYPT_MODE_CFB</term></listheader><listheader><description>The cipher mode is <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cipher feedback</a> (CFB). Microsoft CSPs currently support only 8-bit feedback in cipher feedback mode.</description></listheader><listheader><term>CRYPT_MODE_ECB</term></listheader><listheader><description>The cipher mode is <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">electronic codebook</a>.</description></listheader><listheader><term>CRYPT_MODE_OFB</term></listheader><listheader><description>The cipher mode is <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">Output Feedback</a> (OFB). Microsoft CSPs currently do not support Output Feedback Mode.</description></listheader><listheader><term>CRYPT_MODE_CTS</term></listheader><listheader><description>The cipher mode is <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">ciphertext</a> stealing mode.</description></listheader></list></description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_MODE_BITS</b></term></listheader></list></description><description>Retrieve the number of bits to feed back. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives the number of bits that are processed per cycle when the OFB or CFB cipher modes are used.</description></listheader></list> <para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Diffie-Hellman algorithm</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Digital Signature Algorithm</a> (DSA) key is specified by <i>hKey</i>, the <i>dwParam</i> value can also be set to the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_VERIFY_PARAMS</b></term></listheader></list></description><description>Verifies the parameters of a Diffie-Hellman algorithm or DSA key. The <i>pbData</i> parameter is not used, and the value pointed to by <i>pdwDataLen</i> receives zero.<para>This function returns a nonzero value if the key parameters are valid or zero otherwise.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_KEYVAL</b></term></listheader></list></description><description>This value is not used.<para><b>Windows Vista, Windows Server 2003 and Windows XP:  </b>Retrieve the secret agreement value from an imported <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Diffie-Hellman algorithm</a> key of type <b>CALG_AGREEDKEY_ANY</b>. The <i>pbData</i> parameter is the address of a buffer that receives the secret agreement value, in little-endian format. This buffer must be the same length as the key. The <i>dwFlags</i> parameter must be set to 0xF42A19B6. This property can only be retrieved by a thread running under the local system account.This property is available for use in the operating systems listed above. It may be altered or unavailable in subsequent versions.</para></description></listheader></list> <para>If a certificate is specified by <i>hKey</i>, the <i>dwParam</i> value can also be set to the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_CERTIFICATE</b></term></listheader></list></description><description>A buffer that contains the DER-encoded X.509 certificate. The <i>pbData</i> parameter is not used, and the value pointed to by <i>pdwDataLen</i> receives zero.<para>This function returns a nonzero value if the key parameters are valid or zero otherwise.</para></description></listheader></list></param>
    <param name="pbData">
      <para>A pointer to a buffer that receives the data. The form of this data depends on the value of <i>dwParam</i>.</para>
      <para>If the size of this buffer is not known, the required size can be retrieved at run time by passing <b>NULL</b> for this parameter and setting the value pointed to by <i>pdwDataLen</i> to zero. This function will place the required size of the buffer, in bytes, in the value pointed to by <i>pdwDataLen</i>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwDataLen">
      <para>A pointer to a <b>DWORD</b> value that, on entry, contains the size, in bytes, of the buffer pointed to by the <i>pbData</i> parameter. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are sometimes specified large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbData</i> parameter is not large enough to hold the returned data, the function sets the <b>ERROR_MORE_DATA</b> code and stores the required buffer size, in bytes, in the variable pointed to by <i>pdwDataLen</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY or NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key specified by the <i>hKey</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwParam</i> parameter specifies an unknown value number.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> that was specified when the key was created cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetMessageCertificates">
    <summary>The <b>CryptGetMessageCertificates</b> function returns the handle of an open <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> containing the message's certificates and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CRLs</a>. This function calls<see cref="CertOpenStore" /> using provider type CERT_STORE_PROV_PKCS7 as its <i>lpszStoreProvider</i> parameter.</summary>
    <param name="dwMsgAndCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>Handle of the CSP passed to<see cref="CertOpenStore" />. For more information, see<see cref="CertOpenStore" />.Unless there is a strong reason for passing a specific cryptographic provider in <i>hCryptProv</i>, pass zero to cause the default RSA or DSS provider to be acquired.</para>
      <para>This parameter's data type is <b>HCRYPTPROV</b>.</para>
    </param>
    <param name="dwFlags">Flags passed to <see cref="CertOpenStore" />. For more information, see<see cref="CertOpenStore" />.</param>
    <param name="pbSignedBlob">A pointer to a buffered<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> structure that contains the signed message.</param>
    <param name="cbSignedBlob">The size, in bytes, of the signed message.</param>
    <returns>
      <para>Returns the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> containing the message's certificates and CRLs. For an error, <b>NULL</b> is returned.</para>
      <para>The following lists the error code most commonly returned by the<see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING are supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptGetMessageSignerCount">
    <summary>
      <para>The <b>CryptGetMessageSignerCount</b> function returns the number of signers of a signed message.</para>
      <blockquote>[!NOTE] This function may return a count of duplicate signers and therefore may not be sufficient to avert attacks. We recommend using the sid (SignerIdentifier) field from SignerInfo to identify duplicate signers in a message.</blockquote>
    </summary>
    <param name="dwMsgEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbSignedBlob">A pointer to a buffer containing the signed message.</param>
    <param name="cbSignedBlob">The size, in bytes, of the signed message.</param>
    <returns>
      <para>Returns the number of signers of a signed message, zero when there are no signers, and minus one (–1) for an error.</para>
      <para>For extended error information, call<see cref="GetLastError" />. The following error code is most commonly returned.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a>. Currently only PKCS_7_ASN_ENCODING is supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptGetObjectUrl">
    <summary>
      <para>The <b>CryptGetObjectUrl</b> function acquires the URL of the remote object from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL), or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL).</para>
      <para>The function takes the object, decodes it, and provides a pointer to an array of URLs from the object. For example, from a certificate, a CRL distribution list of URLs would be in the array.</para>
    </summary>
    <param name="pszUrlOid">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) that identifies the URL being requested. If the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of the <i>pszUrlOid</i> parameter is zero, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> specifies the integer identifier for the type of the specified structure.</para>
      <para>This parameter can be one of the following values. For information about how these values affect the <i>pvPara</i> parameter, see the heading "For the <i>pvPara</i> parameter" in the <b>Meaning</b> column.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CERTIFICATE_ISSUER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides the URL of the certificate issuer retrieved from the authority information access extension or property of a certificate.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CERT_CONTEXT" /> structure that was issued by the issuer whose URL is being requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CERTIFICATE_CRL_DIST_POINT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides a list of URLs of the CRL distribution points retrieved from the CRL distribution point extension or property of a certificate.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CERT_CONTEXT" /> structure whose CRL distribution point is requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point extensions or properties of a certificate. The function returns any CRL distribution point URLs first. Before using any OCSP URLs, you must remove the L"ocsp:" prefix.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CERT_CONTEXT" /> structure whose OCSP and CRL distribution point URLs are requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CERTIFICATE_OCSP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides an OCSP URL from the authority information access (AIA) extension or property of a certificate.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CERT_CONTEXT" /> structure whose OCSP URL is requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA) and CRL distribution point extensions or properties of a certificate. The function returns any OCSP URLs first. Before using any OCSP URLs, you must remove the L"ocsp:" prefix.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CERT_CONTEXT" /> structure whose OCSP and CRL distribution point URLs are requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CERTIFICATE_ONLY_OCSP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides a list of OCSP URLs from the authority information access (AIA) extension or property of a certificate. Before using any OCSP URLs, you must remove the L"ocsp:" prefix.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CERT_CONTEXT" /> structure whose OCSP URLs are requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CTL_ISSUER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides the URL of the CTL issuer retrieved from an authority information access attribute method encoded in each signer information in the PKCS #7 CTL.<para>For the <i>pvPara</i> parameter: A pointer to a Signer Index<see cref="CTL_CONTEXT" /> structure that was issued by the issuer whose URL, identified by the signer index, is requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CTL_NEXT_UPDATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides the URL of the next update of that CTL retrieved from an authority information access CTL extension, property, or signer information attribute method.<para>For the <i>pvPara</i> parameter: A pointer to a Signer Index<see cref="CTL_CONTEXT" /> structure whose next update URL is requested, and an optional signer index, in case it is needed to check the signer information attributes.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CRL_ISSUER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Provides the URL of the CRL issuer retrieved from a property on a CRL that was inherited from the subject certificate (either from the subject certificate issuer or the subject certificate distribution point extension). It is encoded as an authority information access extension method.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CRL_CONTEXT" /> structure that was issued by the issuer whose URL is requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CERTIFICATE_FRESHEST_CRL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the most recent CRL extension or property of the certificate.<para>For the <i>pvPara</i> parameter: The PCCERT_CONTEXT of a certificate whose most recent CRL distribution point is being requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CRL_FRESHEST_CRL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the most recent CRL extension or property of the CRL.<para>For the <i>pvPara</i> parameter: A pointer to a<see cref="CERT_CRL_CONTEXT_PAIR" /> structure that contains the base CRL of a certificate whose most recent CRL distribution point is being requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CROSS_CERT_DIST_POINT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the cross certificate distribution point extension or property of the certificate.<para>For the <i>pvPara</i> parameter: The PCCERT_CONTEXT of a certificate whose cross certificate distribution point is being requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the cross certificate Subject Information Access extension or property of the certificate.<para>For the <i>pvPara</i> parameter: The PCCERT_CONTEXT of a certificate whose cross certificate Subject Information Access is being requested.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvPara">A structure determined by the value of <i>pszUrlOid</i>. For details, see the description for the <i>pszUrlOid</i> parameter.</param>
    <param name="dwFlags">
      <para>A set of flags used to get the URL locator for an object. This can be zero or a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_GET_URL_FROM_PROPERTY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Locates the URL from the property of the object (the location of the data).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_GET_URL_FROM_EXTENSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Locates the URL from the extension of the object.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Locates the URL from an unauthenticated attribute from the signer information data.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Locates the URL from an authenticated attribute from the signer information data.</description>
        </listheader>
      </list>
    </param>
    <param name="pUrlArray">
      <para>A pointer to a buffer to receive the data for the value entry. This parameter can be <b>NULL</b> to find the length of the buffer required to hold the data.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbUrlArray">A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pUrlArray</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer. This parameter can be <b>NULL</b> only if <i>pUrlArray</i> is <b>NULL</b>.</param>
    <param name="pUrlInfo">An optional pointer to a<see cref="CRYPT_URL_INFO" /> structure that receives the data for the value entry.</param>
    <param name="pcbUrlInfo">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pUrlArray</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptGetOIDFunctionAddress">
    <summary>The <b>CryptGetOIDFunctionAddress</b> function searches the list of registered and installed functions for an encoding type and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) match. If a match is found, the DLL that contains the function is, if necessary, loaded. If a match is found, a pointer to the function address and a pointer to the function handle are also returned. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> on the function handle is incremented.</summary>
    <param name="hFuncSet">The function set handle previously obtained from a call to the <see cref="CryptInitOIDFunctionSet" /> function.</param>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are used; however, additional encoding types can be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>For functions that do not use an encoding type, set this parameter to zero.</para>
    </param>
    <param name="pszOID">If the high-order word of the OID is nonzero, <i>pszOID</i> is a pointer to either an OID string such as "2.5.29.1" or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> string such as "file". If the high-order word of the OID is zero, the low-order word specifies the numeric identifier to be used as the object identifier. This resulting OID maps to the function that was either installed or registered with the same OID.</param>
    <param name="dwFlags">
      <para>This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_GET_INSTALLED_OID_FUNC_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Searches only the installed list of functions.</description>
        </listheader>
      </list>
    </param>
    <param name="ppvFuncAddr">A pointer to a pointer to a function address. If a match is found, <i>ppvFuncAddr</i> points to the function address.</param>
    <param name="phFuncAddr">
      <para>If a match is found, <i>phFuncAddr</i> points to the function handle. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> for the handle is incremented. When you have finished using the handle, release the handle by calling the <see cref="CryptFreeOIDFunctionAddress" /> function.</para>
      <div>
        <b>Note</b>  By default, both the registered and installed function lists are searched. To search only the installed list of functions, set CRYPT_GET_INSTALLED_OID_FUNC_FLAG. This flag would be set by a registered function to get the address of a preinstalled function it was replacing. For example, the registered function might handle a new special case and call the preinstalled function to handle the remaining cases.</div>
    </param>
    <returns>
      <para>If the function succeeds and a match is found, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails or no match is found, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptGetOIDFunctionValue">
    <summary>The <b>CryptGetOIDFunctionValue</b> function queries a value associated with an OID. The query is made for a specific named value associated with an OID, function name, and encoding type. The function can return the type of queried value, the value, itself, or both.</summary>
    <param name="dwEncodingType">Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</param>
    <param name="pszFuncName">A pointer to the null-terminated string that contains the name of the OID function set.</param>
    <param name="pszOID">If the high-order word of the OID is nonzero, <i>pszOID</i> is a pointer to either a null-terminated OID string such as "2.5.29.1" or a null-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> string such as "file." If the high-order word of the OID is zero, the low-order word specifies the numeric identifier to be used as the object identifier.</param>
    <param name="pwszValueName">A pointer to a null-terminated Unicode string that contains the name of the value to be queried.</param>
    <param name="pdwValueType">
      <para>A pointer to a variable to receive the value's type. The type returned through this parameter will be one of the following.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_DWORD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A 32-bit number.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_EXPAND_SZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A Unicode string that contains unexpanded references to environment variables such as "%PATH%". Applications should ensure that the string has a terminating null character before using it. For details about when the string does not have a terminating null character, see <see cref="RegQueryValueEx" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_MULTI_SZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An array of null-terminated Unicode strings. Applications should ensure that the array is properly terminated by two null characters before using it. For details about when the array is not terminated by two null characters, see <see cref="RegQueryValueEx" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_SZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A Unicode string. Applications should ensure that the string has a terminating null character before using it. For details about when the string does not have a terminating null character, see <see cref="RegQueryValueEx" />.</description>
        </listheader>
      </list> <para>The <i>pdwValueType</i> parameter can be <b>NULL</b> if a returned type is not required.</para></param>
    <param name="pbValueData">
      <para>A pointer to a buffer to receive the value associated with the <i>pwszValueName</i> parameter. The buffer must be big enough to contain the terminating <b>NULL</b> character. This parameter can be <b>NULL</b> if returned data is not required.</para>
      <para>This parameter can also be <b>NULL</b> to find the size of the buffer for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbValueData">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pbValueData</i>.</para>
      <para>In most cases the value returned in *<i>pcbValueData</i> includes the size of the terminating <b>NULL</b> character in the string. For information about situations where the <b>NULL</b> character is not included, see the Remarks section of <see cref="RegQueryValueEx" />.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>This function has the following error code.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbValueData</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbValueData</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetTimeValidObject">
    <summary>The <b>CryptGetTimeValidObject</b> function retrieves a CRL, an OCSP response, or CTL object that is valid within a given context and time.</summary>
    <param name="pszTimeValidOid">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) that identifies the object being requested. If the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of the <i>pszTimeValidOid</i> parameter is zero, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> specifies the integer identifier for the type of the specified structure.</para>
      <para>This parameter can be one of the following values. For information about how these values affect the pvPara parameter, see the heading "For the pvPara parameter" in the Meaning column.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIME_VALID_OID_GET_CTL</b>
                </term>
              </listheader>
              <listheader>
                <term>((LPCSTR)1)</term>
              </listheader>
            </list>
          </description>
          <description>Provides a certificate trust list (CTL) based on a URL obtained from the <b>NextUpdateLocation</b> property or extension of the current CTL context.<para>For the pvPara parameter: A pointer to a <see cref="PCCTL_CONTEXT" /> that represents the current certificate trust list.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIME_VALID_OID_GET_CRL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is reserved for future use.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIME_VALID_OID_GET_CRL_FROM_CERT</b>
                </term>
              </listheader>
              <listheader>
                <term>((LPCSTR)3)</term>
              </listheader>
            </list>
          </description>
          <description>Provides a CRL based on information obtained from the CRL distribution points extension of the current certificate context.<para>For the pvPara parameter: A pointer to a <see cref="PCCERT_CONTEXT" /> that represents the subject certificate.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT</b>
                </term>
              </listheader>
              <listheader>
                <term>((LPCSTR)4)</term>
              </listheader>
            </list>
          </description>
          <description>Provides a delta CRL based on information obtained from the freshest CRL extension of the current certificate context.<para>For the pvPara parameter: A pointer to a <see cref="PCCERT_CONTEXT" /> that represents the subject certificate.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>((LPCSTR)5)</term>
              </listheader>
            </list>
          </description>
          <description>Provides a delta CRL based on information obtained from the freshest CRL extension of the current CRL context.<para>For the pvPara parameter: A pointer to a <see cref="PCCERT_CRL_CONTEXT_PAIR" /> that represents the subject certificate and its base CRL.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvPara">A structure determined by the value of <i>pszTimeValidOid</i>. For details, see the description for the <i>pszTimeValidOid</i> parameter.</param>
    <param name="pIssuer">A pointer to a <see cref="CERT_CONTEXT" /> containing the issuer's certificate.</param>
    <param name="pftValidFor">A pointer to an optional <see cref="FILETIME" /> structure version of the current system time or a freshness time from the current context.</param>
    <param name="dwFlags">
      <para>A value that determines various retrieval factors such as time-out, source, and validity checks.</para>
      <para>The following table lists possible values for the <i>dwFlags</i> parameter.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ACCUMULATIVE_TIMEOUT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>Use the cumulative time-out registry setting of the client computer for revocation URL retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CACHE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the encoded bits from the client URL cache only. Do not use the wire to retrieve the URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CHECK_FRESHNESS_TIME_VALIDITY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>Check if the ThisUpdate property or extension of the current context is greater than or equal to the <i>ftValidFor</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_CHECK_TIME_VALIDITY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>Do not perform time validity check. Use this to retrieve a more recent base CRL over the wire or to bypass time validity check during a cache retrieval. When this flag is set, <i>pftValidFor</i> can be <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_VERIFY_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Do not perform signature verification. Use this when verification of the retrieved object will be performed outside of this function or to force a replacement of a retrieved cache entry with a new cache entry for the object.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_KEEP_TIME_VALID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>This value is reserved for future use.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OCSP_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the time valid object from an OCSP responder service only based on Authority Information Access URLs in the current context. The <see cref="CertVerifyRevocation" /> function sets this flag when it is called with the <i>dwFlags</i> parameter set to CERT_VERIFY_REV_SERVER_OCSP_FLAG.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_WIRE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the wire only. Does not use the URL cache.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">A value, in milliseconds, that specifies when to terminate an URL retrieval attempt that has not returned a result.</param>
    <param name="ppvObject">A pointer to an address for the returned object. The return type can be one of the supported types shown in the <i>pszObjectOid</i> parameter of the <see cref="CryptRetrieveObjectByUrl" /> function.</param>
    <param name="pCredentials">A pointer to an optional <see cref="CRYPT_CREDENTIALS" /> structure used to access the URL. The only type of credentials currently supported are user name and password credentials.</param>
    <param name="pExtraInfo">A pointer to an optional <see cref="CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO" /> structure that contains extra information about the cache entry for an object.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller specified <b>TIME_VALID_OID_GET_CRL</b> for the <i>pszTimeValidOid</i> parameter. This OID is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_IN_REVOCATION_DATABASE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller set the CRYPT_OCSP_ONLY_RETRIEVAL flag and the context includes a non-OCSP URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed to retrieve a CRL from a certificate context or retrieve a CTL, and it failed to copy any URLs from a cache entry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not allocate memory for an internal array operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_CONNECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller did not set the <b>CRYPT_CACHE_ONLY_RETRIEVAL</b> flag and is not connected to the Internet.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptGetUserKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptGetUserKey</b> function retrieves a handle of one of a user's two <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pairs</a>. This function is used only by the owner of the public/private key pairs and only when the handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) and its associated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> is available. If the CSP handle is not available and the user's certificate is, use <see cref="CryptAcquireCertificatePrivateKey" />.</summary>
    <param name="hProv">
      <b>HCRYPTPROV</b> handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) created by a call to<see cref="CryptAcquireContext" />.</param>
    <param name="dwKeySpec">
      <para>Identifies the private key to use from the key container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.</para>
      <para>Additionally, some providers allow access to other user-specific keys through this function. For details, see the documentation on the specific provider.</para>
    </param>
    <param name="phUserKey">A pointer to the<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptkey">HCRYPTKEY</a> handle of the retrieved keys. When you have finished using the key, delete the handle by calling the <see cref="CryptDestroyKey" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwKeySpec</i> parameter contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hProv</i> parameter does not contain a valid context handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key requested by the <i>dwKeySpec</i> parameter does not exist.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptHashCertificate">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptHashCertificate</b> function <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashes</a> the entire encoded content of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> including its signature.</summary>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) to use to compute the hash.</para>
      <para>This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>Unless there is a strong reason for passing in a specific CSP in <i>hCryptProv</i>, zero is passed in. Passing in zero causes the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">RSA</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Digital Signature Standard</a> (DSS) provider to be acquired before doing hash, signature verification, or recipient encryption operations.</para>
    </param>
    <param name="Algid">An<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> structure that specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash algorithm</a> to use. If <i>Algid</i> is zero, the default hash algorithm, SHA1, is used.</param>
    <param name="dwFlags">Value to be passed to the hash API. For details, see<see cref="CryptCreateHash" />.</param>
    <param name="pbEncoded">Address of the encoded content to be hashed.</param>
    <param name="cbEncoded">The size, in bytes, of the encoded content.</param>
    <param name="pbComputedHash">
      <para>A pointer to a buffer to receive the computed hash.</para>
      <para>To set the size of this information for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbComputedHash">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pbComputedHash</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptGetHashParam" /> and <see cref="CryptHashData" /> might be propagated to this function.</div>
    </returns>
  </member>
  <member name="Windows.CryptHashData">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptHashData</b> function adds data to a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>. This function and <see cref="CryptHashSessionKey" /> can be called multiple times to compute the hash of long or discontinuous data streams.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create a handle of a hash object.</para></summary>
    <param name="hHash">Handle of the hash object.</param>
    <param name="pbData">A pointer to a buffer that contains the data to be added to the hash object.</param>
    <param name="dwDataLen">Number of bytes of data to be added. This must be zero if the CRYPT_USERDATA flag is set.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OWF_REPL_LM_HASH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>All Microsoft Cryptographic Providers ignore this parameter. For any CSP that does not ignore this parameter, if this flag is set, the CSP prompts the user to input data directly. This data is added to the hash. The application is not allowed access to the data. This flag can be used to allow the user to enter a PIN into the system.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An attempt was made to add data to a hash object that is already marked "finished."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A keyed hash algorithm is being used, but the session key is no longer valid. This error is generated if the session key is destroyed before the hashing operation is complete.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_LEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP does not ignore the CRYPT_USERDATA flag, the flag is set, and the <i>dwDataLen</i> parameter has a nonzero value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptHashMessage">
    <summary>The <b>CryptHashMessage</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the message.</summary>
    <param name="pHashPara">A pointer to a<see cref="CRYPT_HASH_MESSAGE_PARA" /> structure that contains the hash parameters.</param>
    <param name="fDetachedHash">If this parameter is set to <b>TRUE</b>, only <i>pbComputedHash</i> is encoded in <i>pbHashedBlob</i>. Otherwise, both <i>rgpbToBeHashed</i> and <i>pbComputedHash</i> are encoded.</param>
    <param name="cToBeHashed">The number of array elements in <i>rgpbToBeHashed</i> and <i>rgcbToBeHashed</i>. This parameter can only be one unless <i>fDetachedHash</i> is set to <b>TRUE</b>.</param>
    <param name="rgpbToBeHashed">An array of pointers to buffers that contain the contents to be hashed.</param>
    <param name="rgcbToBeHashed">An array of sizes, in bytes, of the buffers pointed to by <i>rgpbToBeHashed</i>.</param>
    <param name="pbHashedBlob">
      <para>A pointer to a buffer to receive the hashed message encoded for transmission.</para>
      <para>This parameter can be <b>NULL</b> if the hashed message is not needed for additional processing or to set the size of the hashed message for memory allocation purposes. A hashed message will not be returned if this parameter is <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbHashedBlob">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashedBlob</i> parameter. When the function returns, this variable contains the size, in bytes, of the decrypted message copied to <i>pbHashedBlob</i>. This parameter must be the address of a <b>DWORD</b> and not <b>NULL</b> or the length of the buffer will not be returned.</para>
      <div>
        <b>Note</b>  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <param name="pbComputedHash">A pointer to a buffer to receive the newly created hash value. This parameter can be <b>NULL</b> if the newly created hash is not needed for additional processing, or to set the size of the hash for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</param>
    <param name="pcbComputedHash">
      <para>A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the buffer pointed to by the <i>pbComputedHash</i> parameter. When the function returns, this <b>DWORD</b> contains the size, in bytes, of the newly created hash that was copied to <i>pbComputedHash</i>.</para>
      <div>
        <b>Note</b>  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptHashData" />, and <see cref="CryptGetHashParam" /> might be propagated to this function.</div>The <see cref="GetLastError" /> function returns the following error codes most often.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>E_INVALIDARG</b></term></listheader></list></description><description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The <b>cbSize</b> in *<i>pHashPara</i> is not valid.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pbHashedBlob</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by <i>pbHashedBlob</i>.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptHashPublicKeyInfo">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptHashPublicKeyInfo</b> function encodes the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> information in a <see cref="CERT_PUBLIC_KEY_INFO" /> structure and computes the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the encoded bytes. The hash created is used with <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptography-functions">key identifier functions</a>.</summary>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) to use to compute the hash.This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>Unless there is a strong reason for passing in a specific cryptographic provider in <i>hCryptProv</i>, zero is passed in. Passing in zero causes the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">RSA</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Digital Signature Standard</a> (DSS) provider to be acquired before doing hash, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">signature verification</a>, or recipient <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a> operations.</para>
    </param>
    <param name="Algid">An <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> structure that specifies the CryptoAPI hash algorithm to use. If <i>Algid</i> is zero, the default hash algorithm, MD5, is used.</param>
    <param name="dwFlags">Values to be passed on to<see cref="CryptCreateHash" />.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pInfo">A pointer to a<see cref="CERT_PUBLIC_KEY_INFO" /> structure that contains the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> information to be encoded and hashed.</param>
    <param name="pbComputedHash">
      <para>A pointer to a buffer to receive the computed hash.</para>
      <para>To set the size of this information for memory allocation purposes, this parameter can be <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbComputedHash">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pbComputedHash</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptGetHashParam" />, and <see cref="CryptHashData" /> can be propagated to this function. This function has the following error codes.</div>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbComputedHash</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbComputedHash</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptHashSessionKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptHashSessionKey</b> function computes the cryptographic <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a> object. This function can be called multiple times with the same hash handle to compute the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of multiple keys. Calls to <b>CryptHashSessionKey</b> can be interspersed with calls to <see cref="CryptHashData" />.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create the handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.</para></summary>
    <param name="hHash">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.</param>
    <param name="hKey">A handle to the key object to be hashed.</param>
    <param name="dwFlags">
      <para>The following flag value is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LITTLE_ENDIAN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>When this flag is set, the bytes of the key are hashed in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">little-endian</a> form. Note that by default (when <i>dwFlags</i> is zero), the bytes of the key are hashed in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">big-endian</a> form.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An attempt was made to add data to a hash object that is already marked "finished."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A keyed hash algorithm is being used, but the session key is no longer valid. This error is generated if the session key is destroyed before the hashing operation is complete.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptHashToBeSigned">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptHashToBeSigned</b> function computes the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the encoded content from a signed and encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a>. The hash is performed on only the "to be signed" encoded content and its signature.</summary>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) to use to compute the hash.This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>Unless there is a strong reason for passing in a specific cryptographic provider in <i>hCryptProv</i>, zero is passed in. Passing in zero causes the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">RSA</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Digital Signature Standard</a> (DSS) provider to be acquired before doing hash, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">signature verification</a>, or recipient <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a> operations.</para>
    </param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate</a> and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbEncoded">Address of a buffer that contains the content to be hashed. This is the encoded form of a<see cref="CERT_SIGNED_CONTENT_INFO" />.</param>
    <param name="cbEncoded">The size, in bytes, of the buffer.</param>
    <param name="pbComputedHash">
      <para>A pointer to a buffer to receive the computed hash.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbComputedHash">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pbComputedHash</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptGetHashParam" />, and <see cref="CryptHashData" /> might be propagated to this function. This function has the following error codes.</div>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbComputedHash</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbComputedHash</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) of the signature algorithm does not map to a known or supported hash algorithm.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptImportKey">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptImportKey</b> function transfers a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic key</a> from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a> into a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This function can be used to import an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Schannel</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a>, regular session key, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pair</a>. For all but the public key, the key or key pair is encrypted.</summary>
    <param name="hProv">The handle of a CSP obtained with the <see cref="CryptAcquireContext" /> function.</param>
    <param name="pbData">A <b>BYTE</b> array that contains a<see cref="PUBLICKEYSTRUC" /> BLOB header followed by the encrypted key. This key BLOB is created by the<see cref="CryptExportKey" /> function, either in this application or by another application possibly running on a different computer.</param>
    <param name="dwDataLen">Contains the length, in bytes, of the key BLOB.</param>
    <param name="hPubKey">
      <para>A handle to the cryptographic key that decrypts the key stored in <i>pbData</i>. This key must come from the same CSP to which <i>hProv</i> refers. The meaning of this parameter differs depending on the CSP type and the type of key BLOB being imported:</para>
      <list type="bullet">
        <item>
          <description>If the key BLOB is encrypted with the key <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">exchange key pair</a>, for example, a <b>SIMPLEBLOB</b>, this parameter can be the handle to the key exchange key.</description>
        </item>
        <item>
          <description>If the key BLOB is encrypted with a session key, for example, an encrypted <b>PRIVATEKEYBLOB</b>, this parameter contains the handle of this session key.</description>
        </item>
        <item>
          <description>If the key BLOB is not encrypted, for example, a <b>PUBLICKEYBLOB</b>, this parameter is not used and must be zero.</description>
        </item>
        <item>
          <description>If the key BLOB is encrypted with a session key in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Schannel</a> CSP, for example, an encrypted <b>OPAQUEKEYBLOB</b> or any other vendor-specific <b>OPAQUEKEYBLOB</b>, this parameter is not used and must be set to zero.</description>
        </item>
      </list>
      <div>
        <b>Note</b>  Some CSPs may modify this parameter as a result of the operation. Applications that subsequently use this key for other purposes should call the <see cref="CryptDuplicateKey" /> function to create a duplicate key handle. When the application has finished using the handle, release it by calling the <see cref="CryptDestroyKey" /> function.</div>
    </param>
    <param name="dwFlags">
      <para>Currently used only when a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public/private key pair</a> in the form of a <b>PRIVATEKEYBLOB</b> is imported into the CSP.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_EXPORTABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key being imported is eventually to be reexported. If this flag is not used, then calls to <see cref="CryptExportKey" /> with the key handle fail.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OAEP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag causes PKCS #1 version 2 formatting to be checked with RSA encryption and decryption when importing <b>SIMPLEBLOB</b>s.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_SALT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">no-salt value</a> gets allocated for a 40-bit <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">symmetric key</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/salt-value-functionality">Salt Value Functionality</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_PROTECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the CSP notifies the user through a dialog box or some other method when certain actions are attempted using this key. The precise behavior is specified by the CSP or the CSP type used. If the provider context was acquired with CRYPT_SILENT set, using this flag causes a failure and the last error is set to NTE_SILENT_CONTEXT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_IPSEC_HMAC_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Allows for the import of an RC2 key that is larger than 16 bytes. If this flag is not set, calls to the <b>CryptImportKey</b> function with RC2 keys that are greater than 16 bytes fail, and a call to <see cref="GetLastError" /> will return <b>NTE_BAD_DATA</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="phKey">A pointer to a <b>HCRYPTKEY</b> value that receives the handle of the imported key. When you have finished using the key, release the handle by calling the <see cref="CryptDestroyKey" /> function.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />.</para>
      <para>Error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs set this error if a private key is imported into a container while another thread or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> is using this key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">simple key BLOB</a> to be imported is not encrypted with the expected <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key exchange algorithm</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either the algorithm that works with the public key to be imported is not supported by this CSP, or an attempt was made to import a session key that was encrypted with something other than one of your public keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter specified is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key BLOB type is not supported by this CSP and is possibly not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hProv</i> parameter does not contain a valid context handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_VER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The version number of the key BLOB does not match the CSP version. This usually indicates that the CSP needs to be upgraded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptImportPublicKeyInfo">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptImportPublicKeyInfo</b> function converts and imports the public key information into the provider and returns a handle of the public key. <see cref="CryptImportPublicKeyInfoEx" /> provides a revised version of this function.</summary>
    <param name="hCryptProv">The handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) to use when importing the public key. This handle must have already been created using<see cref="CryptAcquireContext" />.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pInfo">The address of a<see cref="CERT_PUBLIC_KEY_INFO" /> structure that contains the public key to import into the provider.</param>
    <param name="phKey">The address of an <b>HCRYPTKEY</b> variable that receives the handle of the imported public key. When you have finished using the public key, release the handle by calling the <see cref="CryptDestroyKey" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptGetUserKey" /> and <see cref="CryptExportKey" /> might be propagated to this function. This function has the following error code.</div>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An import function that can be installed or registered could not be found for the specified <i>dwCertEncodingType</i> and 								<i>pInfo-&gt;Algorithm.pszObjId</i> parameters.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptImportPublicKeyInfoEx">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptImportPublicKeyInfoEx</b> function imports public key information into the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) and returns a handle of the public key. Additional parameters to override defaults are provided to supplement those in <see cref="CERT_PUBLIC_KEY_INFO" />.</summary>
    <param name="hCryptProv">The handle of the CSP to receive the imported public key. This handle must have already been created using<see cref="CryptAcquireContext" />.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pInfo">
      <para>the address of a<see cref="CERT_PUBLIC_KEY_INFO" /> structure that contains the public key to import into the provider.</para>
      <div>
        <b>Note</b>  The <b>pzObjId</b> member of the <b>Algorithm</b> member pointed to by the <i>pInfo</i> and <i>dwCertEncodingType</i> parameters determine an installable <b>CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC</b> callback function. If an installable function is not found, an attempt is made to import the key as an RSA Public Key (szOID_RSA_RSA).</div>
    </param>
    <param name="aiKeyAlg">An <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a> structure that contains a CSP-specific algorithm to override the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CALG_RSA_KEYX</a> default algorithm.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <param name="pvAuxInfo">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="phKey">The address of an <b>HCRYPTKEY</b> variable that receives the handle of the imported public key. When you have finished using the public key, release the handle by calling the <see cref="CryptDestroyKey" /> function.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptGetUserKey" /> and <see cref="CryptExportKey" /> might be propagated to this function. This function has the following error code.</div>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An import function that can be installed or registered could not be found for the specified <i>dwCertEncodingType</i> and <i>pInfo</i> parameters.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptImportPublicKeyInfoEx2">
    <summary>The <b>CryptImportPublicKeyInfoEx2</b> function imports a public key into the CNG asymmetric provider that corresponds to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) and returns a CNG handle to the key.</summary>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encrypt the subject. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pInfo">The address of a <see cref="CERT_PUBLIC_KEY_INFO" /> structure that contains the public key information to import into the provider.</param>
    <param name="dwFlags">
      <para>A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.</description>
        </listheader>
      </list> <para>These flags are passed in the <i>dwKeyType</i> parameter of the <see cref="CryptFindOIDInfo" /> function when mapping the public key object identifier to the corresponding CNG public key algorithm identifier.</para></param>
    <param name="pvAuxInfo">This parameter is reserved for future use and must be set to <b>NULL</b>.</param>
    <param name="phKey">
      <para>The address of a <b>BCRYPT_KEY_HANDLE</b> variable that receives the handle of the imported key.</para>
      <para>When this handle is no longer needed, you must release it by calling the <see cref="BCryptDestroyKey" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Possible error codes include, but are not limited to, the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An import function that can be installed or registered could not be found for the specified <i>dwCertEncodingType</i> and <i>pInfo</i> parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptInitOIDFunctionSet">
    <summary>The <b>CryptInitOIDFunctionSet</b> initializes and returns the handle of the OID function set identified by a supplied function set name. If the set already exists, the handle of the existing set is returned. If the set does not exist, it is created. This allows different DLLs to install OID functions for the same function set name.</summary>
    <param name="pszFuncName">Name of the OID function set.</param>
    <param name="dwFlags">Reserved for future use and must be zero.</param>
    <returns>Returns the handle of the OID function set identified by <i>pszFuncName</i>, or <b>NULL</b> if the function fails.</returns>
  </member>
  <member name="Windows.CryptInstallDefaultContext">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptInstallDefaultContext</b> function installs a specific provider to be the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> provider for the specified algorithm.</summary>
    <param name="hCryptProv">The handle of the cryptographic service provider to be used as the default context. This handle is obtained by using the<see cref="CryptAcquireContext" /> function.</param>
    <param name="dwDefaultType">
      <para>Specifies the type of context to install. This must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the default provider used to verify a single certificate signature type. <para>The <i>pvDefaultPara</i> parameter is the address of a null-terminated ANSI string that contains the object identifier of the certificate signature algorithm to install the provider for, for example, <b>szOID_OIWSEC_md5RSA</b>. If the <i>pvDefaultPara</i> parameter is <b>NULL</b>, the specified provider is used to verify all certificate signatures. The <i>pvDefaultPara</i> parameter cannot be <b>NULL</b> when the <b>CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG</b> flag is set.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the default provider used to verify multiple certificate signature types. <para>The <i>pvDefaultPara</i> parameter is the address of a <see cref="CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA" /> structure that contains an array of object identifiers that identify the certificate signature algorithms to install the specified provider for.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvDefaultPara">Specifies the object or objects to install the default context provider for. The format of this parameter depends on the contents of the <i>dwDefaultType</i> parameter.</param>
    <param name="dwFlags">
      <para>A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The provider handle specified by the <i>hCryptProv</i> parameter is released automatically when the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> or thread ends. If this flag is not specified, it is the caller's responsibility to release the provider handle by using the <see cref="CryptReleaseContext" /> function when the handle is no longer needed. The provider handle is not released if the <see cref="CryptUninstallDefaultContext" /> function is called before the process or thread exits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The provider applies to all threads in the process. If this flag is not specified, the provider only applies to the calling thread. The <i>pvDefaultPara</i> parameter cannot be <b>NULL</b> when this flag is set.</description>
        </listheader>
      </list>
    </param>
    <param name="pvReserved">This parameter is reserved for future use.</param>
    <param name="phDefaultContext">The address of an <b>HCRYPTDEFAULTCONTEXT</b> variable that receives the default context handle. This handle is passed to the <see cref="CryptUninstallDefaultContext" /> function to uninstall the default context provider.</param>
    <returns>If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CryptInstallOIDFunctionAddress">
    <summary>The <b>CryptInstallOIDFunctionAddress</b> function installs a set of callable <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) function addresses.</summary>
    <param name="hModule">This parameter is updated with the <i>hModule</i> parameter passed to <b>DllMain</b> to prevent the DLL that contains the function addresses from being unloaded by<see cref="CryptGetOIDFunctionAddress" /> or<see cref="CryptFreeOIDFunctionAddress" />. This would be the case when the DLL has also registered OID functions through<see cref="CryptRegisterOIDFunction" />.</param>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
    </param>
    <param name="pszFuncName">Name of the function set being installed.</param>
    <param name="cFuncEntry">Number of array elements in <i>rgFuncEntry</i>[].</param>
    <param name="rgFuncEntry">
      <para>Array of <see cref="CRYPT_OID_FUNC_ENTRY" /> structures, each containing an OID and the starting address of its correlated routine.</para>
      <para>Default functions are installed by setting the <b>pszOID</b> member of the <see cref="CRYPT_OID_FUNC_ENTRY" /> structure for their array element to CRYPT_DEFAULT_OID.</para>
    </param>
    <param name="dwFlags">By default, a new function set is installed at the end of the list of function sets. Setting the CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG flag installs the function set at the beginning of the list.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptMemAlloc">
    <summary>The <b>CryptMemAlloc</b> function allocates memory for a buffer. It is used by all Crypt32.lib functions that return allocated buffers.</summary>
    <param name="cbSize">Number of bytes to be allocated.</param>
    <returns>Returns a pointer to the buffer allocated. If the function fails, <b>NULL</b> is returned. When you have finished using the buffer, free the memory by calling the <see cref="CryptMemFree" /> function.</returns>
  </member>
  <member name="Windows.CryptMemFree">
    <summary>The <b>CryptMemFree</b> function frees memory allocated by<see cref="CryptMemAlloc" /> or<see cref="CryptMemRealloc" />.</summary>
    <param name="pv">A pointer to the buffer to be freed.</param>
  </member>
  <member name="Windows.CryptMemRealloc">
    <summary>The <b>CryptMemRealloc</b> function frees the memory currently allocated for a buffer and allocates memory for a new buffer.</summary>
    <param name="pv">A pointer to a currently allocated buffer.</param>
    <param name="cbSize">Number of bytes to be allocated.</param>
    <returns>Returns a pointer to the buffer allocated. If the function fails, <b>NULL</b> is returned. When you have finished using the buffer, free the memory by calling the <see cref="CryptMemFree" /> function.</returns>
  </member>
  <member name="Windows.CryptMsgCalculateEncodedLength">
    <summary>The <b>CryptMsgCalculateEncodedLength</b> function calculates the maximum number of bytes needed for an encoded cryptographic message given the message type, encoding parameters, and total length of the data to be encoded. Note that the result will always be greater than or equal to the actual number of bytes needed.</summary>
    <param name="dwMsgEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>Currently defined flags are shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_BARE_CONTENT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be streamed into an enclosing message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_DETACHED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that there is detached data being supplied for the subsequent calls to <see cref="CryptMsgUpdate" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CONTENTS_OCTETS_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Used to calculate the size of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">DER</a> encoding of a message to be nested inside an enveloped message. This is particularly useful when streaming is being performed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CMS_ENCAPSULATED_CONTENT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Non-Data type <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a> is encapsulated within an OCTET STRING. This flag is applicable for both Signed and Enveloped messages.</description>
        </listheader>
      </list>
    </param>
    <param name="dwMsgType">
      <para>Currently defined message types are shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An octet (BYTE) string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CMSG_SIGNED_ENCODE_INFO" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENVELOPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CMSG_ENVELOPED_ENCODE_INFO" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNED_AND_ENVELOPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not implemented.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_HASHED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CMSG_HASHED_ENCODE_INFO" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENCRYPTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not implemented.</description>
        </listheader>
      </list>
    </param>
    <param name="pvMsgEncodeInfo">A pointer to the data to be encoded. The type of data pointed to depends on the value of <i>dwMsgType</i>. For details, see the <i>dwMsgType</i> table.</param>
    <param name="pszInnerContentObjID">
      <para>When calling <b>CryptMsgCalculateEncodedLength</b> with data provided to<see cref="CryptMsgUpdate" /> already encoded, the appropriate object identifier is passed in <i>pszInnerContentObjID</i>. If <i>pszInnerContentObjID</i> is <b>NULL</b>, the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a> type is assumed not to have been previously encoded, and is encoded as an octet string and given the type CMSG_DATA.</para>
      <para>When streaming is being used, <i>pszInnerContentObjID</i> must be either <b>NULL</b> or szOID_RSA_data.</para>
      <para>The following algorithm object identifiers are commonly used:</para>
      <list type="bullet">
        <item>
          <description>szOID_RSA_data</description>
        </item>
        <item>
          <description>szOID_RSA_signedData</description>
        </item>
        <item>
          <description>szOID_RSA_envelopedData</description>
        </item>
        <item>
          <description>szOID_RSA_signEnvData</description>
        </item>
        <item>
          <description>szOID_RSA_digestedData</description>
        </item>
        <item>
          <description>szOID_RSA_encryptedData</description>
        </item>
        <item>
          <description>SPC_INDIRECT_DATA_OBJID</description>
        </item>
      </list>A user can define new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a> usage. The user must ensure that the sender and receiver of the message agree upon the semantics associated with the object identifier.</param>
    <param name="cbData">The size, in bytes, of the content.</param>
    <returns>
      <para>Returns the required length for an encoded cryptographic message. This length might not be the exact length but it will not be less than the required length. Zero is returned if the function fails.</para>
      <para>To retrieve extended error information, use the <see cref="GetLastError" /> function. The following table lists the error codes most commonly returned.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_INVALID_MSG_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message type is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNKNOWN_ALGO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cryptographic algorithm is unknown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptMsgClose">
    <summary>The <b>CryptMsgClose</b> function closes a cryptographic message handle. At each call to this function, the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> on the message is reduced by one. When the reference count reaches zero, the message is fully released.</summary>
    <param name="hCryptMsg">Handle of the cryptographic message to be closed.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptMsgCountersign">
    <summary>The <b>CryptMsgCountersign</b> function countersigns an existing signature in a message. <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Countersignatures</a> are used to sign an existing signature's encrypted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the message. Countersignatures can be used for various purposes including time stamping a message.</summary>
    <param name="hCryptMsg">Cryptographic message handle to be used.</param>
    <param name="dwIndex">Zero-based index of the signer in the signed or signed-and-enveloped message to be countersigned.</param>
    <param name="cCountersigners">Number of countersigners in the <i>rgCountersigners</i> array.</param>
    <param name="rgCountersigners">Array of countersigners'<see cref="CMSG_SIGNER_ENCODE_INFO" /> structures.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, it returns zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>An error can be propagated from<see cref="CryptMsgCountersignEncoded" />.</para>
      <para>The following error codes are returned most often.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ran out of memory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified area is not large enough to hold the returned data.</description>
        </listheader>
      </list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptMsgCountersignEncoded">
    <summary>The <b>CryptMsgCountersignEncoded</b> function countersigns an existing PKCS #7 message signature. The <i>pbCountersignature</i><b>BYTE</b> buffer it creates is a PKCS #7 encoded SignerInfo that can be used as an unauthenticated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Countersignature</a> attribute of a PKCS #9 signed-data or signed-and-enveloped-data message.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pbSignerInfo">A pointer to the encoded SignerInfo that is to be countersigned.</param>
    <param name="cbSignerInfo">Count, in bytes, of the encoded SignerInfo data.</param>
    <param name="cCountersigners">Number of countersigners in the <i>rgCountersigners</i> array.</param>
    <param name="rgCountersigners">Array of countersigners'<see cref="CMSG_SIGNER_ENCODE_INFO" /> structures.</param>
    <param name="pbCountersignature">
      <para>A pointer to a buffer to receive an encoded PKCS #9 <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">countersignature</a> attribute.</para>
      <para>On input, this parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbCountersignature">A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbCountersignature</i> parameter. When the function returns, the variable pointed to by the <i>pcbCountersignature</i> parameter contains the number of bytes stored in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following table lists the error codes most commonly returned by the <see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_OID_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object identifier is badly formatted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ran out of memory.</description>
        </listheader>
      </list> <para>Propagated errors might be returned from one of the following functions:</para><list type="bullet"><item><description><see cref="CryptCreateHash" /></description></item><item><description><see cref="CryptHashData" /></description></item><item><description><see cref="CryptGetHashParam" /></description></item><item><description><see cref="CryptSignHash" /></description></item><item><description><see cref="CryptMsgOpenToEncode" /></description></item><item><description><see cref="CryptMsgUpdate" /></description></item><item><description><see cref="CryptMsgControl" /></description></item></list>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</returns>
  </member>
  <member name="Windows.CryptMsgDuplicate">
    <summary>The <b>CryptMsgDuplicate</b> function duplicates a cryptographic message handle by incrementing its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a>.</summary>
    <param name="hCryptMsg">Handle of the cryptographic message to be duplicated. Duplication is done by incrementing the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> of the message. A copy of the message is not made.</param>
    <returns>The returned handle is the same as the handle input. A copy of the message is not created. When you have finished using the duplicated message handle, decrease the reference count by calling the <see cref="CryptMsgClose" /> function.</returns>
  </member>
  <member name="Windows.CryptMsgEncodeAndSignCTL">
    <summary>
      <para>The <b>CryptMsgEncodeAndSignCTL</b> function encodes a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CTL</a> and creates a signed message containing the encoded CTL.</para>
      <para>This function first encodes the CTL pointed to by <i>pCtlInfo</i> and then calls<see cref="CryptMsgSignCTL" /> to sign the encoded message.</para>
    </summary>
    <param name="dwMsgEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pCtlInfo">A pointer to the<see cref="CTL_INFO" /> structure containing the CTL to be encoded and signed.</param>
    <param name="pSignInfo">
      <para>A pointer to a<see cref="CMSG_SIGNED_ENCODE_INFO" /> structure that contains an array of a<see cref="CMSG_SIGNER_ENCODE_INFO" /> structures.</para>
      <para>The message can be encoded without signers if the <b>cbSize</b> member of the structure is set to the size of the structure and all of the other members are set to zero.</para>
    </param>
    <param name="dwFlags">
      <para>CMSG_ENCODE_SORTED_CTL_FLAG is set if the CTL entries are to be sorted before encoding. This flag is set if the<see cref="CertFindSubjectInSortedCTL" /> or <see cref="CertEnumSubjectInSortedCTL" /> functions will be called.</para>
      <para>CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG is set if CMSG_ENCODE_SORTED_CTL_FLAG is set, and the identifier for the TrustedSubjects is a hash, such as MD5 or SHA1.</para>
      <para>If CMS_PKCS7 is defined, <i>dwFlags</i> can be set to CMSG_CMS_ENCAPSULATED_CTL_FLAG to encode a CMS compatible V3 SignedData message.</para>
    </param>
    <param name="pbEncoded">
      <para>A pointer to a buffer that receives the encoded, signed message created.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">A pointer to a <b>DWORD</b> that specifies the size, in bytes, of the <i>pbEncoded</i> buffer. When the function returns, the <b>DWORD</b> contains the number of bytes stored or to be stored in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). To get extended error information, call<see cref="GetLastError" />. Errors can be propagated from calls to<see cref="CryptMsgOpenToEncode" /> and<see cref="CryptMsgUpdate" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptMsgGetAndVerifySigner">
    <summary>The <b>CryptMsgGetAndVerifySigner</b> function verifies a cryptographic message's signature.</summary>
    <param name="hCryptMsg">Handle of a cryptographic message.</param>
    <param name="cSignerStore">Number of stores in the <i>rghSignerStore</i> array.</param>
    <param name="rghSignerStore">Array of certificate store handles that can be searched for a signer's certificate.</param>
    <param name="dwFlags">
      <para>Indicates particular use of the function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_TRUSTED_SIGNER_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The stores in <i>rghSignerStore</i> are assumed trusted and they are the only stores searched to find the certificate corresponding to the signer's issuer and serial number. Otherwise, signer stores can be provided to supplement the message's store of certificates. If a signer certificate is found, its public key is used to verify the message signature.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_ONLY_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Return the signer without doing the signature verification.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_USE_SIGNER_INDEX_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Only the signer specified by *<i>pdwSignerIndex</i> is returned. Otherwise, iterate through all the signers until a signature is verified or there are no more signers.</description>
        </listheader>
      </list>
    </param>
    <param name="ppSigner">If the signature is verified, <i>ppSigner</i> is updated to point to the signer's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a>. When you have finished using the certificate, free the context by calling the <see cref="CertFreeCertificateContext" /> function. This parameter can be <b>NULL</b> if the application has no need for the signer's certificate.</param>
    <param name="pdwSignerIndex">If the signature is verified, <i>pdwSigner</i> is updated to point to the index of the signer in the array of signers. This parameter can be <b>NULL</b> if the application has no need for the index of the signer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptMsgGetParam">
    <summary>The <b>CryptMsgGetParam</b> function acquires a message parameter after a cryptographic message has been encoded or decoded. This function is called after the final<see cref="CryptMsgUpdate" /> call.</summary>
    <param name="hCryptMsg">Handle of a cryptographic message.</param>
    <param name="dwParamType">
      <para>Indicates the parameter types of data to be retrieved. The type of data to be retrieved determines the type of structure to use for <i>pvData</i>.</para>
      <para>For an encoded message, only the CMSG_BARE_CONTENT, CMSG_ENCODE_SIGNER, CMSG_CONTENT_PARAM and CMSG_COMPUTED_HASH_PARAM <i>dwParamType</i>s are valid.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ATTR_CERT_COUNT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the count of the attribute certificates in a SIGNED or ENVELOPED message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ATTR_CERT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Retrieves an attribute certificate. To get all the attribute certificates, call <b>CryptMsgGetParam</b> varying <i>dwIndex</i> set to 0 the number of attributes minus one.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_BARE_CONTENT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Retrieves the encoded content of an encoded cryptographic message, without the outer layer of the CONTENT_INFO structure. That is, only the encoding of the PKCS #7 defined ContentInfo.content field is returned.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CERT_COUNT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to <b>DWORD</b><para>Returns the number of certificates in a received SIGNED or ENVELOPED message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CERT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Returns a signer's certificate. To get all of the signer's certificates, call <b>CryptMsgGetParam</b>, varying <i>dwIndex</i> from 0 to the number of available certificates minus one.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_COMPUTED_HASH_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Returns the hash calculated of the data in the message. This type is applicable to both encode and decode.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CONTENT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Returns the whole PKCS #7 message from a message opened to encode. Retrieves the inner content of a message opened to decode. If the message is enveloped, the inner type is data, and <see cref="CryptMsgControl" /> has been called to decrypt the message, the decrypted content is returned. If the inner type is not data, the encoded BLOB that requires further decoding is returned. If the message is not enveloped and the inner content is DATA, the returned data is the octets of the inner content. This type is applicable to both encode and decode.</para><para>For decoding, if the type is CMSG_DATA, the content's octets are returned; else, the encoded inner content is returned.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CRL_COUNT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to <b>DWORD</b><para>Returns the count of CRLs in a received, SIGNED or ENVELOPED message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CRL_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Returns a CRL. To get all the CRLs, call <b>CryptMsgGetParam</b>, varying <i>dwIndex</i> from 0 to the number of available CRLs minus one.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENCODED_MESSAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Changes the contents of an already encoded message. The message must first be decoded with a call to <see cref="CryptMsgOpenToDecode" />. Then the change to the message is made through a call to <see cref="CryptMsgControl" />, <see cref="CryptMsgCountersign" />, or <see cref="CryptMsgCountersignEncoded" />. The message is then encoded again with a call to <b>CryptMsgGetParam</b>, specifying CMSG_ENCODED_MESSAGE to get a new encoding that reflects the changes made. This can be used, for instance, to add a time-stamp attribute to a message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENCODED_SIGNER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Returns the encoded CMSG_SIGNER_INFO signer information for a message signer.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENCRYPTED_DIGEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Returns the encrypted hash of a signature. Typically used for performing time-stamping.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENCRYPT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array for a <see cref="CRYPT_ALGORITHM_IDENTIFIER" /> structure.<para>Returns the encryption algorithm used to encrypted the message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENVELOPE_ALGORITHM_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array for a <see cref="CRYPT_ALGORITHM_IDENTIFIER" /> structure.<para>Returns the encryption algorithm used to encrypt an ENVELOPED message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_HASH_ALGORITHM_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array for a <see cref="CRYPT_ALGORITHM_IDENTIFIER" /> structure.<para>Returns the hash algorithm used to hash the message when it was created.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_HASH_DATA_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array<para>Returns the hash value stored in the message when it was created.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_INNER_CONTENT_TYPE_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <b>null</b>-terminated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) string.<para>Returns the inner content type of a received message. This type is not applicable to messages of type DATA.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_RECIPIENT_COUNT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the number of key transport recipients of an ENVELOPED received message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CMS_RECIPIENT_COUNT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to <b>DWORD</b><para>Returns the total count of all message recipients including key agreement and mail list recipients.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_RECIPIENT_INDEX_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the index of the key transport recipient used to decrypt an ENVELOPED message. This value is available only after a message has been decrypted.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CMS_RECIPIENT_INDEX_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the index of the key transport, key agreement, or mail list recipient used to decrypt an ENVELOPED message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the index of the encrypted key of a key agreement recipient used to decrypt an ENVELOPED message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_RECIPIENT_INFO_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CERT_INFO" /> structure.<para>Returns certificate information about a key transport message's recipient. To get certificate information on all key transport message's recipients, repetitively call <b>CryptMsgGetParam</b>, varying <i>dwIndex</i> from 0 to the number of recipients minus one. Only the Issuer, SerialNumber, and PublicKeyAlgorithm members of the <see cref="CERT_INFO" /> structure returned are available and valid.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CMS_RECIPIENT_INFO_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CMSG_CMS_RECIPIENT_INFO" /> structure.<para>Returns information about a key transport, key agreement, or mail list recipient. It is not limited to key transport message recipients. To get information on all of a message's recipients, repetitively call <b>CryptMsgGetParam</b>, varying <i>dwIndex</i> from 0 to the number of recipients minus one.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_AUTH_ATTR_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CRYPT_ATTRIBUTES" /> structure.<para>Returns the authenticated attributes of a message signer. To retrieve the authenticated attributes for a specified signer, call <b>CryptMsgGetParam</b> with <i>dwIndex</i> equal to that signer's index.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_CERT_INFO_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive the <see cref="CERT_INFO" /> structure.<para>Returns information on a message signer needed to identify the signer's certificate. A certificate's Issuer and SerialNumber can be used to uniquely identify a certificate for retrieval. To retrieve information for all the signers, repetitively call <b>CryptMsgGetParam</b> varying <i>dwIndex</i> from 0 to the number of signers minus one. Only the Issuer and SerialNumber fields in the <see cref="CERT_INFO" /> structure returned contain available, valid data.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_CERT_ID_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CERT_ID" /> structure.<para>Returns information on a message signer needed to identify the signer's public key. This could be a certificate's Issuer and SerialNumber, a KeyID, or a HashId. To retrieve information for all the signers, call <b>CryptMsgGetParam</b> varying <i>dwIndex</i> from 0 to the number of signers minus one.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_COUNT_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the number of signers of a received SIGNED message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_HASH_ALGORITHM_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive the <see cref="CRYPT_ALGORITHM_IDENTIFIER" /> structure.<para>Returns the hash algorithm used by a signer of the message. To get the hash algorithm for a specified signer, call <b>CryptMsgGetParam</b> with <i>dwIndex</i> equal to that signer's index.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_INFO_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CMSG_SIGNER_INFO" /> structure.<para>Returns information on a message signer. This includes the issuer and serial number of the signer's certificate and authenticated and unauthenticated attributes of the signer's certificate. To retrieve signer information on all of the signers of a message, call <b>CryptMsgGetParam</b> varying <i>dwIndex</i> from 0 to the number of signers minus one.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CMS_SIGNER_INFO_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CMSG_CMS_SIGNER_INFO" /> structure.<para>Returns information on a message signer. This includes a signerId and authenticated and unauthenticated attributes. To retrieve signer information on all of the signers of a message, call <b>CryptMsgGetParam</b> varying <i>dwIndex</i> from 0 to the number of signers minus one.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNER_UNAUTH_ATTR_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CRYPT_ATTRIBUTES" /> structure.<para>Returns a message signer's unauthenticated attributes. To retrieve the unauthenticated attributes for a specified signer, call <b>CryptMsgGetParam</b> with <i>dwIndex</i> equal to that signer's index.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_TYPE_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the message type of a decoded message of unknown type. The retrieved message type can be compared to supported types to determine whether processing can continued. For supported message types, see the <i>dwMessageType</i> parameter of <see cref="CryptMsgOpenToDecode" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_UNPROTECTED_ATTR_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>BYTE</b> array to receive a <see cref="CMSG_ATTR" /> structure.<para>Returns the unprotected attributes in an enveloped message.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_VERSION_PARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvData</i> data type: pointer to a <b>DWORD</b><para>Returns the version of the decoded message. For more information, see the table in the Remarks section.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwIndex">Index for the parameter being retrieved, where applicable. When a parameter is not being retrieved, this parameter is ignored and is set to zero.</param>
    <param name="pvData">
      <para>A pointer to a buffer that receives the data retrieved. The form of this data will vary depending on the value of the <i>dwParamType</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
      <para>When processing the data returned in this buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</para>
    </param>
    <param name="pcbData">A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pvData</i> parameter. When the function returns, the variable pointed to by the <i>pcbData</i> parameter contains the number of bytes stored in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following table lists the error codes most commonly returned by the <see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_ATTRIBUTES_MISSING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message does not contain the requested attributes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_INVALID_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The index value is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_INVALID_MSG_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message type is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NOT_DECRYPTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message content has not been decrypted yet.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_OID_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object identifier is badly formatted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNEXPECTED_ENCODING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is not encoded as expected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified buffer is not large enough to hold the returned data.</description>
        </listheader>
      </list> <para>For <i>dwParamType</i> CMSG_COMPUTED_HASH_PARAM, an error can be propagated from<see cref="CryptGetHashParam" />.</para><para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptMsgOpenToDecode">
    <summary>
      <para>The <b>CryptMsgOpenToDecode</b> function opens a cryptographic message for decoding and returns a handle of the opened message. The message remains open until the <see cref="CryptMsgClose" /> function is called.</para>
      <para>Important changes that affect the handling of enveloped messages have been made to CryptoAPI to support <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">Secure/Multipurpose Internet Mail Extensions</a> (S/MIME) email interoperability. For details, see the Remarks section of<see cref="CryptMsgOpenToEncode" />.</para>
    </summary>
    <param name="dwMsgEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>This parameter can be one of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_DETACHED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the message to be decoded is detached. If this flag is not set, the message is not detached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CRYPT_RELEASE_CONTEXT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the <i>hCryptProv</i> passed to this function is released on the final <see cref="CryptMsgUpdate" />. The handle is not released if the function fails.</description>
        </listheader>
      </list>
    </param>
    <param name="dwMsgType">
      <para>Specifies the type of message to decode. In most cases, the message type is determined from the message header and zero is passed for this parameter. In some cases, notably with Internet Explorer 3.0, messages do not have headers and the type of message to be decoded must be supplied in this function call. If the header is missing and zero is passed for this parameter, the function fails.</para>
      <para>This parameter can be one of the following predefined message types.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is encoded data.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENVELOPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is an enveloped message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_HASHED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is a hashed message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is a signed message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNED_AND_ENVELOPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is a signed and enveloped message.</description>
        </listheader>
      </list>
    </param>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>Specifies a handle for the cryptographic provider to use for <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashing</a> the message. For signed messages, <i>hCryptProv</i> is used for signature verification.This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>Unless there is a strong reason for passing in a specific cryptographic provider in <i>hCryptProv</i>, set this parameter to <b>NULL</b>. Passing in <b>NULL</b> causes the default RSA or DSS provider to be acquired before performing hash, signature verification, or recipient encryption operations.</para>
    </param>
    <param name="pRecipientInfo">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="pStreamInfo">
      <para>When streaming is not being used, this parameter must be set to <b>NULL</b>.</para>
      <div>
        <b>Note</b>  Streaming is not used with CMSG_HASHED messages. When dealing with hashed data, this parameter must be set to <b>NULL</b>.</div>
      <para>When streaming is being used, the <i>pStreamInfo</i> parameter is a pointer to a<see cref="CMSG_STREAM_INFO" /> structure that contains a pointer to a callback to be called when<see cref="CryptMsgUpdate" /> is executed or when<see cref="CryptMsgControl" /> is executed when decoding a streamed enveloped message.</para>
      <para>For a signed message, the callback is passed a block of the decoded bytes from the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a> of the message.</para>
      <para>For an enveloped message, after each call to <see cref="CryptMsgUpdate" />, you must check to determine whether the CMSG_ENVELOPE_ALGORITHM_PARAM property is available by calling the <see cref="CryptMsgGetParam" /> function. <b>CryptMsgGetParam</b> will fail and <see cref="GetLastError" /> will return CRYPT_E_STREAM_MSG_NOT_READY until<b>CryptMsgUpdate</b> has processed enough of the message to make the CMSG_ENVELOPE_ALGORITHM_PARAM property available. When the CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you can iterate through the recipients, retrieving a<see cref="CERT_INFO" /> structure for each recipient by using the <b>CryptMsgGetParam</b> function to retrieve the CMSG_RECIPIENT_INFO_PARAM property. To prevent a denial of service attack from an enveloped message that has an artificially large header block, you must keep track of the amount of memory that has been passed to the <b>CryptMsgUpdate</b> function during this process. If the amount of data exceeds an application defined limit before the CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you must stop processing the message and call the <see cref="CryptMsgClose" /> function to cause the operating system to release any memory that has been allocated for the message. A suggested limit is the maximum allowable size of a message. For example, if the maximum message size is 10 MB, the limit for this test should be 10 MB.</para>
      <para>The <see cref="CERT_INFO" /> structure is used to find a matching certificate in a previously opened <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate store</a> by using the <see cref="CertGetSubjectCertificateFromStore" /> function. When the correct certificate is found, the <see cref="CertGetCertificateContextProperty" /> function with a CERT_KEY_PROV_INFO_PROP_ID parameter is called to retrieve a<see cref="CRYPT_KEY_PROV_INFO" /> structure. The structure contains the information necessary to acquire the recipient's private key by calling<see cref="CryptAcquireContext" />, using the <b>pwszContainerName</b>, <b>pwszProvName</b>, <b>dwProvType</b>, and <b>dwFlags</b> members of the <b>CRYPT_KEY_PROV_INFO</b> structure. The <b>hCryptProv</b> acquired and the <b>dwKeySpec</b> member of the <b>CRYPT_KEY_PROV_INFO</b> structure are passed to the <see cref="CryptMsgControl" /> structure as a member of the<see cref="CMSG_CTRL_DECRYPT_PARA" /> structure to permit the start of the decryption of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a>. The streaming code will then perform the decryption as the data is input. The resulting blocks of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">plaintext</a> are passed to the callback function specified by the <b>pfnStreamOutput</b> member of the <see cref="CMSG_STREAM_INFO" /> structure to handle the output of the decrypted message.</para>
      <div>
        <b>Note</b>  Streamed decoding of an enveloped message queues the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">ciphertext</a> in memory until <see cref="CryptMsgControl" /> is called to start the decryption. The application must initiate decrypting in a timely manner so that the data can be saved to disk or routed elsewhere before the accumulated <i>ciphertext</i> becomes too large and the system runs out of memory.</div>
      <para>In the case of a signed message enclosed in an enveloped message, the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">plaintext</a> output from the streaming decode of the enveloped message can be fed into another streaming decode to process the signed message.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns the handle of the opened message.</para>
      <para>If the function fails, it returns <b>NULL</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following table lists the error codes most commonly returned by the <see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A memory allocation failure occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptMsgOpenToEncode">
    <summary>The <b>CryptMsgOpenToEncode</b> function opens a cryptographic message for encoding and returns a handle of the opened message. The message remains open until<see cref="CryptMsgClose" /> is called.</summary>
    <param name="dwMsgEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>Currently defined <i>dwFlags</i> are shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_BARE_CONTENT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be streamed into an enclosing message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_DETACHED_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is detached data being supplied for the subsequent calls to <see cref="CryptMsgUpdate" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_AUTHENTICATED_ATTRIBUTES_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Authenticated attributes are forced to be included in the SignerInfo (as defined by PKCS #7) in cases where they would not otherwise be required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CONTENTS_OCTETS_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Used when calculating the size of a message that has been encoded by using <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Distinguished Encoding Rules</a> (DER) and that is nested inside an enveloped message. This is particularly useful when performing streaming.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CMS_ENCAPSULATED_CONTENT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, non-data type-<a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a> is encapsulated within an OCTET STRING. Applicable to both signed and enveloped messages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_CRYPT_RELEASE_CONTEXT_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the <b>hCryptProv</b> that is passed to this function is released on the final <see cref="CryptMsgUpdate" />. The handle is not released if the function fails.<div><b>Note</b>  The <b>hCryptProv</b>s of the envelope recipients are not released.</div></description>
        </listheader>
      </list>
    </param>
    <param name="dwMsgType">
      <para>Indicates the message type. This must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pvMsgEncodeInfo</i> parameter is the address of a <see cref="CMSG_SIGNED_ENCODE_INFO" /> structure that contains the encoding information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_ENVELOPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pvMsgEncodeInfo</i> parameter is the address of a <see cref="CMSG_ENVELOPED_ENCODE_INFO" /> structure that contains the encoding information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_SIGNED_AND_ENVELOPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not currently implemented.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_HASHED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pvMsgEncodeInfo</i> parameter is the address of a <see cref="CMSG_HASHED_ENCODE_INFO" /> structure that contains the encoding information.</description>
        </listheader>
      </list>
    </param>
    <param name="pvMsgEncodeInfo">The address of a structure that contains the encoding information. The type of data depends on the value of the <i>dwMsgType</i> parameter. For details, see <i>dwMsgType</i>.</param>
    <param name="pszInnerContentObjID">
      <para>If <see cref="CryptMsgCalculateEncodedLength" /> is called and the data for<see cref="CryptMsgUpdate" /> has already been message encoded, the appropriate <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is passed in <i>pszInnerContentObjID</i>. If <i>pszInnerContentObjID</i> is <b>NULL</b>, then the inner content type is assumed not to have been previously encoded and is therefore encoded as an octet string and given the type CMSG_DATA.</para>
      <div>
        <b>Note</b>  When streaming is being used, <i>pszInnerContentObjID</i> must be either <b>NULL</b> or szOID_RSA_data.</div>The following algorithm OIDs are commonly used. A user can define new inner content usage by ensuring that the sender and receiver of the message agree upon the semantics associated with the OID.<list type="bullet"><item><description>szOID_RSA_data</description></item><item><description>szOID_RSA_signedData</description></item><item><description>szOID_RSA_envelopedData</description></item><item><description>szOID_RSA_signEnvData</description></item><item><description>szOID_RSA_digestedData</description></item><item><description>szOID_RSA_encryptedData</description></item><item><description>SPC_INDIRECT_DATA_OBJID</description></item></list></param>
    <param name="pStreamInfo">
      <para>When streaming is being used, this parameter is the address of a<see cref="CMSG_STREAM_INFO" /> structure. The callback function specified by the <b>pfnStreamOutput</b> member of the <b>CMSG_STREAM_INFO</b> structure is called when<see cref="CryptMsgUpdate" /> is executed. The callback is passed the encoded bytes that result from the encoding. For more information about how to use the callback, see<b>CMSG_STREAM_INFO</b>.</para>
      <div>
        <b>Note</b>  When streaming is being used, the application must not release any data handles that are passed in the <i>pvMsgEncodeInfo</i> parameter, such as the provider handle in the <b>hCryptProv</b> member of the <see cref="CMSG_SIGNER_ENCODE_INFO" /> structure, until after the message handle returned by this function is closed by using the <see cref="CryptMsgClose" /> function.</div>When streaming is not being used, this parameter is set to <b>NULL</b>.<para>Streaming is not used with the <b>CMSG_HASHED</b> message type. When dealing with hashed data, this parameter must be set to <b>NULL</b>.</para><para>Consider the case of a signed message being enclosed in an enveloped message. The encoded output from the streamed encoding of the signed message feeds into another streaming encoding of the enveloped message. The callback for the streaming encoding calls <see cref="CryptMsgUpdate" /> to encode the enveloped message. The callback for the enveloped message receives the encoded bytes of the nested signed message.</para></param>
    <returns>
      <para>If the function succeeds, it returns a handle to the opened message. This handle must be closed when it is no longer needed by passing it to the <see cref="CryptMsgClose" /> function.</para>
      <para>If this function fails, <b>NULL</b> is returned.</para>
      <para>To retrieve extended error information, use the<see cref="GetLastError" /> function.</para>
      <para>The following table lists the error codes most commonly returned by the <see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_INVALID_MSG_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message type is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_OID_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The OID is badly formatted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNKNOWN_ALGO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cryptographic algorithm is unknown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is not enough memory.</description>
        </listheader>
      </list> <para>In addition, if <i>dwMsgType</i> is CMSG_SIGNED, errors can be propagated from<see cref="CryptCreateHash" />.</para><para>If <i>dwMsgType</i> is CMSG_ENVELOPED, errors can be propagated from<see cref="CryptGenKey" />,<see cref="CryptImportKey" />, and<see cref="CryptExportKey" />.</para><para>If <i>dwMsgType</i> is CMSG_HASHED, errors can be propagated from<see cref="CryptCreateHash" />.</para></returns>
  </member>
  <member name="Windows.CryptMsgSignCTL">
    <summary>The <b>CryptMsgSignCTL</b> function creates a signed message containing an encoded CTL.</summary>
    <param name="dwMsgEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbCtlContent">The encoded<see cref="CTL_INFO" /> that can be a member of a<see cref="CTL_CONTEXT" /> structure or can be created using the<see cref="CryptEncodeObject" /> function.</param>
    <param name="cbCtlContent">The size, in bytes, of the content pointed to by <i>pbCtlContent</i>.</param>
    <param name="pSignInfo">
      <para>A pointer to a<see cref="CMSG_SIGNED_ENCODE_INFO" /> structure containing an array of a<see cref="CMSG_SIGNER_ENCODE_INFO" /> structures.</para>
      <para>The message can be encoded without signers if the <b>cbSize</b> member of the structure is set to the size of the structure and all of the other members are set to zero.</para>
    </param>
    <param name="dwFlags">If CMS_PKCS7 is defined, can be set to CMSG_CMS_ENCAPSULATED_CTL_FLAG to encode a CMS compatible V3 SignedData message.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer to receives the encoded message.</para>
      <para>This parameter can be <b>NULL</b> to get the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">A pointer to a <b>DWORD</b> specifying the size, in bytes, of the <i>pbEncoded</i> buffer. When the function returns, the <b>DWORD</b> contains the number of bytes stored or to be stored in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. This function can return errors propagated from calls to<see cref="CryptMsgOpenToEncode" /> and<see cref="CryptMsgUpdate" />.</para>
    </returns>
  </member>
  <member name="Windows.CryptMsgVerifyCountersignatureEncoded">
    <summary>The <b>CryptMsgVerifyCountersignatureEncoded</b> function verifies a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">countersignature</a> in terms of the SignerInfo structure (as defined by PKCS #7).</summary>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>
        <b>NULL</b> or the handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic provider</a> to use to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> the encryptedDigest field of <i>pbSignerInfo</i>.This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>Unless there is a strong reason for passing in a specific cryptographic provider in <i>hCryptProv</i>, pass <b>NULL</b> to cause the default RSA or DSS provider to be used.</para>
    </param>
    <param name="dwEncodingType">
      <para>Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pbSignerInfo">A pointer to the encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> that contains the signer of the contents of a message to be countersigned.</param>
    <param name="cbSignerInfo">Count, in bytes, of the encoded BLOB for the signer of the contents.</param>
    <param name="pbSignerInfoCountersignature">A pointer to the encoded BLOB containing the countersigner information.</param>
    <param name="cbSignerInfoCountersignature">Count, in bytes, of the encoded BLOB for the countersigner of the message.</param>
    <param name="pciCountersigner">A pointer to a<see cref="CERT_INFO" /> that includes with the issuer and serial number of the countersigner. For more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following table lists the error codes most commonly returned by the <see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_AUTH_ATTR_MISSING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message does not contain an expected authenticated attribute.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_HASH_VALUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash value is not correct.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNEXPECTED_ENCODING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is not encoded as expected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNKNOWN_ALGO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cryptographic algorithm is unknown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ran out of memory.</description>
        </listheader>
      </list> <para>Propagated errors from the following functions might be returned.</para><list type="bullet"><item><description><see cref="CryptHashData" /></description></item><item><description><see cref="CryptGetHashParam" /></description></item><item><description><see cref="CryptImportKey" /></description></item><item><description><see cref="CryptVerifySignature" /></description></item><item><description><see cref="CryptCreateHash" /></description></item></list>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</returns>
  </member>
  <member name="Windows.CryptMsgVerifyCountersignatureEncodedEx">
    <summary>The <b>CryptMsgVerifyCountersignatureEncodedEx</b> function verifies that the <i>pbSignerInfoCounterSignature</i> parameter contains the encrypted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the <b>encryptedDigest</b> field of the <i>pbSignerInfo</i> parameter structure. The signer can be a <see cref="CERT_PUBLIC_KEY_INFO" /> structure, a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a>, or a chain context.</summary>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>
        <b>NULL</b> or the handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic provider</a> to use to <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> the encryptedDigest field of <i>pbSignerInfo</i>.This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>Unless there is a strong reason for passing in a specific cryptographic provider in <i>hCryptProv</i>, pass <b>NULL</b> to cause the default RSA or DSS provider to be used.</para>
    </param>
    <param name="dwEncodingType">
      <para>The encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pbSignerInfo">A pointer to the encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> that contains the signer of the contents of a message to be countersigned.</param>
    <param name="cbSignerInfo">The count, in bytes, of the encoded BLOB for the signer of the contents.</param>
    <param name="pbSignerInfoCountersignature">A pointer to the encoded BLOB containing the countersigner information.</param>
    <param name="cbSignerInfoCountersignature">The count, in bytes, of the encoded BLOB for the countersigner of the message.</param>
    <param name="dwSignerType">
      <para>The structure that contains the signer information. The following table shows the predefined values and the structures indicated.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>CMSG_VERIFY_SIGNER_PUBKEY</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSigner</i> is a pointer to a <see cref="CERT_PUBLIC_KEY_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>CMSG_VERIFY_SIGNER_CERT</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSigner</i> is a pointer to a <see cref="CERT_CONTEXT" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>CMSG_VERIFY_SIGNER_CHAIN</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSigner</i> is a pointer to a <see cref="CERT_CHAIN_CONTEXT" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pvSigner">A pointer to a <see cref="CERT_PUBLIC_KEY_INFO" /> structure, a certificate context, or a chain context depending on the value of <i>dwSignerType</i>.</param>
    <param name="dwFlags">
      <para>Flags that modify the function behavior. This can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Performs a strong signature check after successful signature verification. Set the <i>pvExtra</i> parameter to point to a <see cref="CERT_STRONG_SIGN_PARA" /> structure that contains the parameters needed to check the signature strength..<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvExtra">If you set the <i>dwFlags</i> parameter to <b>CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG</b>, set this parameter (<i>pvExtra</i>) to point to a <see cref="CERT_STRONG_SIGN_PARA" /> structure that contains the parameters used to check the signature strength.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following error codes are most commonly returned by the<see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_AUTH_ATTR_MISSING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message does not contain an expected authenticated attribute.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_HASH_VALUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash value is not correct.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNEXPECTED_ENCODING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message is not encoded as expected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNKNOWN_ALGO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cryptographic algorithm is unknown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ran out of memory.</description>
        </listheader>
      </list> <para>Propagated errors from the following functions might be returned.</para><list type="bullet"><item><description><see cref="CryptHashData" /></description></item><item><description><see cref="CryptGetHashParam" /></description></item><item><description><see cref="CryptImportKey" /></description></item><item><description><see cref="CryptVerifySignature" /></description></item><item><description><see cref="CryptCreateHash" /></description></item></list>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</returns>
  </member>
  <member name="Windows.CryptRegisterDefaultOIDFunction">
    <summary>The <b>CryptRegisterDefaultOIDFunction</b> registers a DLL containing the default function to be called for the specified encoding type and function name. Unlike<see cref="CryptRegisterOIDFunction" />, the function name to be exported by the DLL cannot be overridden.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pszFuncName">Name of the function being registered.</param>
    <param name="dwIndex">Index location for the insertion of the DLL in the list of DLLs. If <i>dwIndex</i> is zero, the DLL is inserted at the beginning of the list. If it is CRYPT_REGISTER_LAST_INDEX, the DLL is appended at the end of the list.</param>
    <param name="pwszDll">Optional environment-variable string to be expanded using <see cref="ExpandEnvironmentStrings" /> function before loading the DLL.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptRegisterOIDFunction">
    <summary>
      <para>The <b>CryptRegisterOIDFunction</b> function registers a DLL that contains the function to be called for the specified encoding type, function name, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID).</para>
      <para>By default, new function names are installed at the end of the list. To register a new function before the installed functions, call the <see cref="CryptSetOIDFunctionValue" /> function with <i>dwValueType</i> set to <b>REG_DWORD</b> and <i>pwszValueName</i> set to CRYPT_OID_REG_FLAGS_VALUE_NAME.</para>
      <para>CRYPT_OID_REG_FLAGS_VALUE_NAME is defined as L"CryptFlags".</para>
      <para>In addition to registering a DLL, the name of the function to be called can be overridden. For example, the <i>pszFuncName</i> parameter can be set to CryptDllEncodeObject and the <i>pszOverrideFuncName</i> parameter to MyEncodeXyz. The new form of CryptDllEncodeObject can then be referred to by using the name MyEncodeXyz. This allows a DLL to export multiple OID functions for the same function name without needing to interpose its own OID dispatcher function.</para>
    </summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pszFuncName">Name of the function being registered.</param>
    <param name="pszOID">OID of the function to be registered. If the high-order word of the OID is nonzero, <i>pszOID</i> is a pointer to either an OID string such as "2.5.29.1" or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> string such as "file." If the high-order word of the OID is zero, the low-order word specifies the numeric identifier to be used as the object identifier.</param>
    <param name="pwszDll">Name of the DLL file to be registered. It can contain environment-variable strings to be expanded by using the <see cref="ExpandEnvironmentStrings" /> function before loading the DLL.</param>
    <param name="pszOverrideFuncName">String that specifies a name for the function exported in the DLL. If <i>pszOverrideFuncName</i> is <b>NULL</b>, the function name specified by <i>pszFuncName</i> is used.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptReleaseContext">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptReleaseContext</b> function releases the handle of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) and a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a>. At each call to this function, the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">reference count</a> on the CSP is reduced by one. When the reference count reaches zero, the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> is fully released and it can no longer be used by any function in the application.<para>An application calls this function after finishing the use of the CSP. After this function is called, the released CSP handle is no longer valid. This function does not destroy <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key containers</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pairs</a>.</para></summary>
    <param name="hProv">Handle of a cryptographic service provider (CSP) created by a call to<see cref="CryptAcquireContext" />.</param>
    <param name="dwFlags">Reserved for future use and must be zero. If <i>dwFlags</i> is not set to zero, this function returns <b>FALSE</b> but the CSP is released.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> specified by <i>hProv</i> is currently being used by another <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hProv</i> parameter does not contain a valid context handle.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptRetrieveObjectByUrl">
    <summary>
      <para>The <b>CryptRetrieveObjectByUrl</b> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.</para>
      <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
    </summary>
    <param name="pszUrl">
      <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
      <list type="bullet">
        <item>
          <description>ldap (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Lightweight Directory Access Protocol</a>)</description>
        </item>
        <item>
          <description>http</description>
        </item>
        <item>
          <description>https (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) retrievals only)</description>
        </item>
        <item>
          <description>file</description>
        </item>
      </list>
    </param>
    <param name="pszObjectOid">
      <para>The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>BLOB</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more data <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a>. The encoded bits are returned in an array of BLOBs. <i>ppvObject</i> is the address of a <see cref="CRYPT_BLOB_ARRAY" /> structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by passing the address of this structure to the <see cref="CryptMemFree" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CERTIFICATE</b>
                </term>
              </listheader>
              <listheader>
                <term>certificate</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more certificates.<para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CERT_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CERT_CONTEXT</b> structure pointer to the <see cref="CertFreeCertificateContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>CRL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CRL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CRL_CONTEXT</b> structure pointer to the <see cref="CertFreeCRLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CRLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CTL</b>
                </term>
              </listheader>
              <listheader>
                <term>CTL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CTL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CTL_CONTEXT</b> structure pointer to the <see cref="CertFreeCTLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CTLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_PKCS7</b>
                </term>
              </listheader>
              <listheader>
                <term>PKCS7</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects from the message. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CAPI2_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>Function will determine appropriate item</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_OCSP_RESP</b>
                </term>
              </listheader>
              <listheader>
                <term>OCSP Response</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of a pointer to a <see cref="CRYPT_BLOB_ARRAY" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="dwRetrievalFlags">
      <para>Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is determined by the value of <i>pszObjectOid</i>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_AIA_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Validates the content retrieved by a wire URL before writing the URL to the cache.<para>The default provider does not support the HTTPS protocol for AIA retrievals.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ASYNC_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CACHE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_CACHE_RESULT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_HTTP_POST_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the POST method instead of the default GET method for HTTP retrievals.<para>In a POST URL, additional binary data and header strings are appended to the base URL in the following format:</para><para><i>BaseURL</i><b>/</b><i>OptionalURLEscaped&amp;Base64EncodedAdditionalData</i><b>?</b><i>OptionalAdditionalHTTPHeaders</i></para><para>The following example shows the additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended to a base URL.</para><para><code>http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request</code></para><para>When this flag is set, the <b>CryptRetrieveObjectByUrl</b> function parses the URL by using the last slash mark (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the <see cref="WinHttpSendRequest" /> function as the <i>lpOptional</i> parameter. The string delimited by a question mark (?) is passed to the <b>WinHttpSendRequest</b> function as the <i>pwszHeaders</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving host names. This flag should be used when passing a host name as opposed to a domain name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following ANSI string:<para>"<i>entry index in decimal</i>\0<i>attribute name</i>\0"</para><para>When this flag is set, <i>pszObjectOid</i> must be <b>NULL</b> so that a BLOB is returned. This flag only applies to the ldap scheme.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SIGN_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature provides integrity required by some applications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_AUTH_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits automatic authentication handling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOT_MODIFIED_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns <b>HTTP_STATUS_NOT_MODIFIED</b>, <b>CryptRetrieveObjectByUrl</b> returns <b>TRUE</b> and <i>ppvObject</i> is set to <b>NULL</b>. If <i>pAuxInfo</i> is not <b>NULL</b>, <b>dwHttpStatusCode</b> is set to <b>HTTP_STATUS_NOT_MODIFIED</b>. Otherwise, <i>ppvObject</i> is updated for a successful retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OFFLINE_CHECK_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_PROXY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, <b>fProxyCacheRetrieval</b> is set to <b>TRUE</b> in <i>pAuxInfo</i>. This value only applies to HTTP URL retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of <i>pszObjectOid</i>, unless the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) value is CONTEXT_OID_CAPI2_ANY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STICKY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CONTEXT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Acquires signature verification on the context created. In this case <i>pszObjectOid</i> must be non-<b>NULL</b> and <i>pvVerify</i> points to the signer certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_DATA_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is not implemented. Do not use it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_WIRE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the wire only. Does not use the URL cache.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time out. This parameter is not used if the URL scheme is file:///.</param>
    <param name="ppvObject">The address of a pointer to the returned object. The return type can be one of the supported types shown in <i>pszObjectOid</i>.</param>
    <param name="hAsyncRetrieve">This parameter is reserved and must be set to <b>NULL</b>.</param>
    <param name="pCredentials">This parameter is not used.</param>
    <param name="pvVerify">A pointer to a verification object. This object is a function of the <i>dwRetrievalFlags</i> parameter. It can be <b>NULL</b> to indicate that the caller is not interested in getting the certificate context or index of the signer if <i>dwRetrievalFlags</i> is CRYPT_VERIFY_CONTEXT_SIGNATURE.</param>
    <param name="pAuxInfo">An optional pointer to a<see cref="CRYPT_RETRIEVE_AUX_INFO" /> structure. If not <b>NULL</b> and if the <b>cbSize</b> member of the structure is set, this parameter returns the time of the last successful wire retrieval.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptRetrieveObjectByUrlA">
    <summary>
      <para>The <b>CryptRetrieveObjectByUrl</b> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.</para>
      <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
    </summary>
    <param name="pszUrl">
      <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
      <list type="bullet">
        <item>
          <description>ldap (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Lightweight Directory Access Protocol</a>)</description>
        </item>
        <item>
          <description>http</description>
        </item>
        <item>
          <description>https (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) retrievals only)</description>
        </item>
        <item>
          <description>file</description>
        </item>
      </list>
    </param>
    <param name="pszObjectOid">
      <para>The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>BLOB</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more data <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a>. The encoded bits are returned in an array of BLOBs. <i>ppvObject</i> is the address of a <see cref="CRYPT_BLOB_ARRAY" /> structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by passing the address of this structure to the <see cref="CryptMemFree" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CERTIFICATE</b>
                </term>
              </listheader>
              <listheader>
                <term>certificate</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more certificates.<para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CERT_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CERT_CONTEXT</b> structure pointer to the <see cref="CertFreeCertificateContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>CRL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CRL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CRL_CONTEXT</b> structure pointer to the <see cref="CertFreeCRLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CRLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CTL</b>
                </term>
              </listheader>
              <listheader>
                <term>CTL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CTL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CTL_CONTEXT</b> structure pointer to the <see cref="CertFreeCTLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CTLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_PKCS7</b>
                </term>
              </listheader>
              <listheader>
                <term>PKCS7</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects from the message. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CAPI2_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>Function will determine appropriate item</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_OCSP_RESP</b>
                </term>
              </listheader>
              <listheader>
                <term>OCSP Response</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of a pointer to a <see cref="CRYPT_BLOB_ARRAY" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="dwRetrievalFlags">
      <para>Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is determined by the value of <i>pszObjectOid</i>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_AIA_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Validates the content retrieved by a wire URL before writing the URL to the cache.<para>The default provider does not support the HTTPS protocol for AIA retrievals.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ASYNC_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CACHE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_CACHE_RESULT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_HTTP_POST_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the POST method instead of the default GET method for HTTP retrievals.<para>In a POST URL, additional binary data and header strings are appended to the base URL in the following format:</para><para><i>BaseURL</i><b>/</b><i>OptionalURLEscaped&amp;Base64EncodedAdditionalData</i><b>?</b><i>OptionalAdditionalHTTPHeaders</i></para><para>The following example shows the additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended to a base URL.</para><para><code>http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request</code></para><para>When this flag is set, the <b>CryptRetrieveObjectByUrl</b> function parses the URL by using the last slash mark (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the <see cref="WinHttpSendRequest" /> function as the <i>lpOptional</i> parameter. The string delimited by a question mark (?) is passed to the <b>WinHttpSendRequest</b> function as the <i>pwszHeaders</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving host names. This flag should be used when passing a host name as opposed to a domain name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following ANSI string:<para>"<i>entry index in decimal</i>\0<i>attribute name</i>\0"</para><para>When this flag is set, <i>pszObjectOid</i> must be <b>NULL</b> so that a BLOB is returned. This flag only applies to the ldap scheme.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SIGN_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature provides integrity required by some applications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_AUTH_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits automatic authentication handling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOT_MODIFIED_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns <b>HTTP_STATUS_NOT_MODIFIED</b>, <b>CryptRetrieveObjectByUrl</b> returns <b>TRUE</b> and <i>ppvObject</i> is set to <b>NULL</b>. If <i>pAuxInfo</i> is not <b>NULL</b>, <b>dwHttpStatusCode</b> is set to <b>HTTP_STATUS_NOT_MODIFIED</b>. Otherwise, <i>ppvObject</i> is updated for a successful retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OFFLINE_CHECK_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_PROXY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, <b>fProxyCacheRetrieval</b> is set to <b>TRUE</b> in <i>pAuxInfo</i>. This value only applies to HTTP URL retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of <i>pszObjectOid</i>, unless the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) value is CONTEXT_OID_CAPI2_ANY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STICKY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CONTEXT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Acquires signature verification on the context created. In this case <i>pszObjectOid</i> must be non-<b>NULL</b> and <i>pvVerify</i> points to the signer certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_DATA_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is not implemented. Do not use it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_WIRE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the wire only. Does not use the URL cache.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time out. This parameter is not used if the URL scheme is file:///.</param>
    <param name="ppvObject">The address of a pointer to the returned object. The return type can be one of the supported types shown in <i>pszObjectOid</i>.</param>
    <param name="hAsyncRetrieve">This parameter is reserved and must be set to <b>NULL</b>.</param>
    <param name="pCredentials">This parameter is not used.</param>
    <param name="pvVerify">A pointer to a verification object. This object is a function of the <i>dwRetrievalFlags</i> parameter. It can be <b>NULL</b> to indicate that the caller is not interested in getting the certificate context or index of the signer if <i>dwRetrievalFlags</i> is CRYPT_VERIFY_CONTEXT_SIGNATURE.</param>
    <param name="pAuxInfo">An optional pointer to a<see cref="CRYPT_RETRIEVE_AUX_INFO" /> structure. If not <b>NULL</b> and if the <b>cbSize</b> member of the structure is set, this parameter returns the time of the last successful wire retrieval.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptRetrieveObjectByUrlW">
    <summary>
      <para>The <b>CryptRetrieveObjectByUrl</b> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.</para>
      <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
    </summary>
    <param name="pszUrl">
      <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
      <list type="bullet">
        <item>
          <description>ldap (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Lightweight Directory Access Protocol</a>)</description>
        </item>
        <item>
          <description>http</description>
        </item>
        <item>
          <description>https (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) retrievals only)</description>
        </item>
        <item>
          <description>file</description>
        </item>
      </list>
    </param>
    <param name="pszObjectOid">
      <para>The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>BLOB</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more data <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a>. The encoded bits are returned in an array of BLOBs. <i>ppvObject</i> is the address of a <see cref="CRYPT_BLOB_ARRAY" /> structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by passing the address of this structure to the <see cref="CryptMemFree" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CERTIFICATE</b>
                </term>
              </listheader>
              <listheader>
                <term>certificate</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more certificates.<para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CERT_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CERT_CONTEXT</b> structure pointer to the <see cref="CertFreeCertificateContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>CRL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CRL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CRL_CONTEXT</b> structure pointer to the <see cref="CertFreeCRLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CRLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CTL</b>
                </term>
              </listheader>
              <listheader>
                <term>CTL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CTL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CTL_CONTEXT</b> structure pointer to the <see cref="CertFreeCTLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CTLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_PKCS7</b>
                </term>
              </listheader>
              <listheader>
                <term>PKCS7</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects from the message. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CAPI2_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>Function will determine appropriate item</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_OCSP_RESP</b>
                </term>
              </listheader>
              <listheader>
                <term>OCSP Response</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of a pointer to a <see cref="CRYPT_BLOB_ARRAY" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="dwRetrievalFlags">
      <para>Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is determined by the value of <i>pszObjectOid</i>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_AIA_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Validates the content retrieved by a wire URL before writing the URL to the cache.<para>The default provider does not support the HTTPS protocol for AIA retrievals.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ASYNC_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CACHE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_CACHE_RESULT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_HTTP_POST_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the POST method instead of the default GET method for HTTP retrievals.<para>In a POST URL, additional binary data and header strings are appended to the base URL in the following format:</para><para><i>BaseURL</i><b>/</b><i>OptionalURLEscaped&amp;Base64EncodedAdditionalData</i><b>?</b><i>OptionalAdditionalHTTPHeaders</i></para><para>The following example shows the additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended to a base URL.</para><para><code>http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request</code></para><para>When this flag is set, the <b>CryptRetrieveObjectByUrl</b> function parses the URL by using the last slash mark (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the <see cref="WinHttpSendRequest" /> function as the <i>lpOptional</i> parameter. The string delimited by a question mark (?) is passed to the <b>WinHttpSendRequest</b> function as the <i>pwszHeaders</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving host names. This flag should be used when passing a host name as opposed to a domain name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following ANSI string:<para>"<i>entry index in decimal</i>\0<i>attribute name</i>\0"</para><para>When this flag is set, <i>pszObjectOid</i> must be <b>NULL</b> so that a BLOB is returned. This flag only applies to the ldap scheme.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SIGN_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature provides integrity required by some applications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_AUTH_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits automatic authentication handling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOT_MODIFIED_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns <b>HTTP_STATUS_NOT_MODIFIED</b>, <b>CryptRetrieveObjectByUrl</b> returns <b>TRUE</b> and <i>ppvObject</i> is set to <b>NULL</b>. If <i>pAuxInfo</i> is not <b>NULL</b>, <b>dwHttpStatusCode</b> is set to <b>HTTP_STATUS_NOT_MODIFIED</b>. Otherwise, <i>ppvObject</i> is updated for a successful retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OFFLINE_CHECK_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_PROXY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, <b>fProxyCacheRetrieval</b> is set to <b>TRUE</b> in <i>pAuxInfo</i>. This value only applies to HTTP URL retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of <i>pszObjectOid</i>, unless the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) value is CONTEXT_OID_CAPI2_ANY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STICKY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CONTEXT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Acquires signature verification on the context created. In this case <i>pszObjectOid</i> must be non-<b>NULL</b> and <i>pvVerify</i> points to the signer certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_DATA_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is not implemented. Do not use it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_WIRE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the wire only. Does not use the URL cache.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time out. This parameter is not used if the URL scheme is file:///.</param>
    <param name="ppvObject">The address of a pointer to the returned object. The return type can be one of the supported types shown in <i>pszObjectOid</i>.</param>
    <param name="hAsyncRetrieve">This parameter is reserved and must be set to <b>NULL</b>.</param>
    <param name="pCredentials">This parameter is not used.</param>
    <param name="pvVerify">A pointer to a verification object. This object is a function of the <i>dwRetrievalFlags</i> parameter. It can be <b>NULL</b> to indicate that the caller is not interested in getting the certificate context or index of the signer if <i>dwRetrievalFlags</i> is CRYPT_VERIFY_CONTEXT_SIGNATURE.</param>
    <param name="pAuxInfo">An optional pointer to a<see cref="CRYPT_RETRIEVE_AUX_INFO" /> structure. If not <b>NULL</b> and if the <b>cbSize</b> member of the structure is set, this parameter returns the time of the last successful wire retrieval.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptRetrieveObjectByUrl">
    <summary>
      <para>The <b>CryptRetrieveObjectByUrl</b> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.</para>
      <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
    </summary>
    <param name="pszUrl">
      <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
      <list type="bullet">
        <item>
          <description>ldap (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Lightweight Directory Access Protocol</a>)</description>
        </item>
        <item>
          <description>http</description>
        </item>
        <item>
          <description>https (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) retrievals only)</description>
        </item>
        <item>
          <description>file</description>
        </item>
      </list>
    </param>
    <param name="pszObjectOid">
      <para>The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>BLOB</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more data <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a>. The encoded bits are returned in an array of BLOBs. <i>ppvObject</i> is the address of a <see cref="CRYPT_BLOB_ARRAY" /> structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by passing the address of this structure to the <see cref="CryptMemFree" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CERTIFICATE</b>
                </term>
              </listheader>
              <listheader>
                <term>certificate</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more certificates.<para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CERT_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CERT_CONTEXT</b> structure pointer to the <see cref="CertFreeCertificateContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>CRL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CRL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CRL_CONTEXT</b> structure pointer to the <see cref="CertFreeCRLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CRLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CTL</b>
                </term>
              </listheader>
              <listheader>
                <term>CTL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CTL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CTL_CONTEXT</b> structure pointer to the <see cref="CertFreeCTLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CTLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_PKCS7</b>
                </term>
              </listheader>
              <listheader>
                <term>PKCS7</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects from the message. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CAPI2_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>Function will determine appropriate item</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_OCSP_RESP</b>
                </term>
              </listheader>
              <listheader>
                <term>OCSP Response</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of a pointer to a <see cref="CRYPT_BLOB_ARRAY" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="dwRetrievalFlags">
      <para>Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is determined by the value of <i>pszObjectOid</i>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_AIA_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Validates the content retrieved by a wire URL before writing the URL to the cache.<para>The default provider does not support the HTTPS protocol for AIA retrievals.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ASYNC_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CACHE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_CACHE_RESULT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_HTTP_POST_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the POST method instead of the default GET method for HTTP retrievals.<para>In a POST URL, additional binary data and header strings are appended to the base URL in the following format:</para><para><i>BaseURL</i><b>/</b><i>OptionalURLEscaped&amp;Base64EncodedAdditionalData</i><b>?</b><i>OptionalAdditionalHTTPHeaders</i></para><para>The following example shows the additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended to a base URL.</para><para><code>http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request</code></para><para>When this flag is set, the <b>CryptRetrieveObjectByUrl</b> function parses the URL by using the last slash mark (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the <see cref="WinHttpSendRequest" /> function as the <i>lpOptional</i> parameter. The string delimited by a question mark (?) is passed to the <b>WinHttpSendRequest</b> function as the <i>pwszHeaders</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving host names. This flag should be used when passing a host name as opposed to a domain name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following ANSI string:<para>"<i>entry index in decimal</i>\0<i>attribute name</i>\0"</para><para>When this flag is set, <i>pszObjectOid</i> must be <b>NULL</b> so that a BLOB is returned. This flag only applies to the ldap scheme.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SIGN_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature provides integrity required by some applications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_AUTH_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits automatic authentication handling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOT_MODIFIED_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns <b>HTTP_STATUS_NOT_MODIFIED</b>, <b>CryptRetrieveObjectByUrl</b> returns <b>TRUE</b> and <i>ppvObject</i> is set to <b>NULL</b>. If <i>pAuxInfo</i> is not <b>NULL</b>, <b>dwHttpStatusCode</b> is set to <b>HTTP_STATUS_NOT_MODIFIED</b>. Otherwise, <i>ppvObject</i> is updated for a successful retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OFFLINE_CHECK_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_PROXY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, <b>fProxyCacheRetrieval</b> is set to <b>TRUE</b> in <i>pAuxInfo</i>. This value only applies to HTTP URL retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of <i>pszObjectOid</i>, unless the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) value is CONTEXT_OID_CAPI2_ANY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STICKY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CONTEXT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Acquires signature verification on the context created. In this case <i>pszObjectOid</i> must be non-<b>NULL</b> and <i>pvVerify</i> points to the signer certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_DATA_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is not implemented. Do not use it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_WIRE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the wire only. Does not use the URL cache.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time out. This parameter is not used if the URL scheme is file:///.</param>
    <param name="ppvObject">The address of a pointer to the returned object. The return type can be one of the supported types shown in <i>pszObjectOid</i>.</param>
    <param name="hAsyncRetrieve">This parameter is reserved and must be set to <b>NULL</b>.</param>
    <param name="pCredentials">This parameter is not used.</param>
    <param name="pvVerify">A pointer to a verification object. This object is a function of the <i>dwRetrievalFlags</i> parameter. It can be <b>NULL</b> to indicate that the caller is not interested in getting the certificate context or index of the signer if <i>dwRetrievalFlags</i> is CRYPT_VERIFY_CONTEXT_SIGNATURE.</param>
    <param name="pAuxInfo">An optional pointer to a<see cref="CRYPT_RETRIEVE_AUX_INFO" /> structure. If not <b>NULL</b> and if the <b>cbSize</b> member of the structure is set, this parameter returns the time of the last successful wire retrieval.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptRetrieveObjectByUrlA">
    <summary>
      <para>The <b>CryptRetrieveObjectByUrl</b> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.</para>
      <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
    </summary>
    <param name="pszUrl">
      <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
      <list type="bullet">
        <item>
          <description>ldap (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Lightweight Directory Access Protocol</a>)</description>
        </item>
        <item>
          <description>http</description>
        </item>
        <item>
          <description>https (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) retrievals only)</description>
        </item>
        <item>
          <description>file</description>
        </item>
      </list>
    </param>
    <param name="pszObjectOid">
      <para>The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>BLOB</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more data <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a>. The encoded bits are returned in an array of BLOBs. <i>ppvObject</i> is the address of a <see cref="CRYPT_BLOB_ARRAY" /> structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by passing the address of this structure to the <see cref="CryptMemFree" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CERTIFICATE</b>
                </term>
              </listheader>
              <listheader>
                <term>certificate</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more certificates.<para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CERT_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CERT_CONTEXT</b> structure pointer to the <see cref="CertFreeCertificateContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>CRL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CRL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CRL_CONTEXT</b> structure pointer to the <see cref="CertFreeCRLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CRLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CTL</b>
                </term>
              </listheader>
              <listheader>
                <term>CTL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CTL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CTL_CONTEXT</b> structure pointer to the <see cref="CertFreeCTLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CTLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_PKCS7</b>
                </term>
              </listheader>
              <listheader>
                <term>PKCS7</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects from the message. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CAPI2_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>Function will determine appropriate item</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_OCSP_RESP</b>
                </term>
              </listheader>
              <listheader>
                <term>OCSP Response</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of a pointer to a <see cref="CRYPT_BLOB_ARRAY" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="dwRetrievalFlags">
      <para>Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is determined by the value of <i>pszObjectOid</i>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_AIA_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Validates the content retrieved by a wire URL before writing the URL to the cache.<para>The default provider does not support the HTTPS protocol for AIA retrievals.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ASYNC_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CACHE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_CACHE_RESULT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_HTTP_POST_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the POST method instead of the default GET method for HTTP retrievals.<para>In a POST URL, additional binary data and header strings are appended to the base URL in the following format:</para><para><i>BaseURL</i><b>/</b><i>OptionalURLEscaped&amp;Base64EncodedAdditionalData</i><b>?</b><i>OptionalAdditionalHTTPHeaders</i></para><para>The following example shows the additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended to a base URL.</para><para><code>http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request</code></para><para>When this flag is set, the <b>CryptRetrieveObjectByUrl</b> function parses the URL by using the last slash mark (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the <see cref="WinHttpSendRequest" /> function as the <i>lpOptional</i> parameter. The string delimited by a question mark (?) is passed to the <b>WinHttpSendRequest</b> function as the <i>pwszHeaders</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving host names. This flag should be used when passing a host name as opposed to a domain name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following ANSI string:<para>"<i>entry index in decimal</i>\0<i>attribute name</i>\0"</para><para>When this flag is set, <i>pszObjectOid</i> must be <b>NULL</b> so that a BLOB is returned. This flag only applies to the ldap scheme.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SIGN_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature provides integrity required by some applications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_AUTH_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits automatic authentication handling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOT_MODIFIED_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns <b>HTTP_STATUS_NOT_MODIFIED</b>, <b>CryptRetrieveObjectByUrl</b> returns <b>TRUE</b> and <i>ppvObject</i> is set to <b>NULL</b>. If <i>pAuxInfo</i> is not <b>NULL</b>, <b>dwHttpStatusCode</b> is set to <b>HTTP_STATUS_NOT_MODIFIED</b>. Otherwise, <i>ppvObject</i> is updated for a successful retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OFFLINE_CHECK_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_PROXY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, <b>fProxyCacheRetrieval</b> is set to <b>TRUE</b> in <i>pAuxInfo</i>. This value only applies to HTTP URL retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of <i>pszObjectOid</i>, unless the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) value is CONTEXT_OID_CAPI2_ANY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STICKY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CONTEXT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Acquires signature verification on the context created. In this case <i>pszObjectOid</i> must be non-<b>NULL</b> and <i>pvVerify</i> points to the signer certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_DATA_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is not implemented. Do not use it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_WIRE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the wire only. Does not use the URL cache.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time out. This parameter is not used if the URL scheme is file:///.</param>
    <param name="ppvObject">The address of a pointer to the returned object. The return type can be one of the supported types shown in <i>pszObjectOid</i>.</param>
    <param name="hAsyncRetrieve">This parameter is reserved and must be set to <b>NULL</b>.</param>
    <param name="pCredentials">This parameter is not used.</param>
    <param name="pvVerify">A pointer to a verification object. This object is a function of the <i>dwRetrievalFlags</i> parameter. It can be <b>NULL</b> to indicate that the caller is not interested in getting the certificate context or index of the signer if <i>dwRetrievalFlags</i> is CRYPT_VERIFY_CONTEXT_SIGNATURE.</param>
    <param name="pAuxInfo">An optional pointer to a<see cref="CRYPT_RETRIEVE_AUX_INFO" /> structure. If not <b>NULL</b> and if the <b>cbSize</b> member of the structure is set, this parameter returns the time of the last successful wire retrieval.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptRetrieveObjectByUrlW">
    <summary>
      <para>The <b>CryptRetrieveObjectByUrl</b> function retrieves the public key infrastructure (PKI) object from a location specified by a URL.</para>
      <para>These remote objects are in encoded format and are retrieved in a "context" form.</para>
    </summary>
    <param name="pszUrl">
      <para>The address of a PKI object to be retrieved. The following schemes are supported:</para>
      <list type="bullet">
        <item>
          <description>ldap (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Lightweight Directory Access Protocol</a>)</description>
        </item>
        <item>
          <description>http</description>
        </item>
        <item>
          <description>https (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">online certificate status protocol</a> (OCSP) retrievals only)</description>
        </item>
        <item>
          <description>file</description>
        </item>
      </list>
    </param>
    <param name="pszObjectOid">
      <para>The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>BLOB</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more data <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOBs</a>. The encoded bits are returned in an array of BLOBs. <i>ppvObject</i> is the address of a <see cref="CRYPT_BLOB_ARRAY" /> structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by passing the address of this structure to the <see cref="CryptMemFree" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CERTIFICATE</b>
                </term>
              </listheader>
              <listheader>
                <term>certificate</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more certificates.<para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CERT_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CERT_CONTEXT</b> structure pointer to the <see cref="CertFreeCertificateContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>CRL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation lists</a> (CRLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CRL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CRL_CONTEXT</b> structure pointer to the <see cref="CertFreeCRLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CRLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CTL</b>
                </term>
              </listheader>
              <listheader>
                <term>CTL</term>
              </listheader>
            </list>
          </description>
          <description>Retrieve one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). <para>If a single object is being retrieved, <i>ppvObject</i> is the address of a <see cref="CTL_CONTEXT" /> structure pointer that receives the context. When this context is no longer needed, you must free it by passing the <b>CTL_CONTEXT</b> structure pointer to the <see cref="CertFreeCTLContext" /> function.</para><para>If multiple objects are being retrieved, <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the CTLs. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_PKCS7</b>
                </term>
              </listheader>
              <listheader>
                <term>PKCS7</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects from the message. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_CAPI2_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>Function will determine appropriate item</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of an <b>HCERTSTORE</b> variable that receives the handle of a store that contains the objects. When this store is no longer needed, you must close it by passing this handle to the <see cref="CertCloseStore" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_OID_OCSP_RESP</b>
                </term>
              </listheader>
              <listheader>
                <term>OCSP Response</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ppvObject</i> is the address of a pointer to a <see cref="CRYPT_BLOB_ARRAY" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="dwRetrievalFlags">
      <para>Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is determined by the value of <i>pszObjectOid</i>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_AIA_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Validates the content retrieved by a wire URL before writing the URL to the cache.<para>The default provider does not support the HTTPS protocol for AIA retrievals.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_ASYNC_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_CACHE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DONT_CACHE_RESULT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_HTTP_POST_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the POST method instead of the default GET method for HTTP retrievals.<para>In a POST URL, additional binary data and header strings are appended to the base URL in the following format:</para><para><i>BaseURL</i><b>/</b><i>OptionalURLEscaped&amp;Base64EncodedAdditionalData</i><b>?</b><i>OptionalAdditionalHTTPHeaders</i></para><para>The following example shows the additional binary data delimited by the last slash mark (/) and a Content-Type header delimited by a question mark (?) appended to a base URL.</para><para><code>http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request</code></para><para>When this flag is set, the <b>CryptRetrieveObjectByUrl</b> function parses the URL by using the last slash mark (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the <see cref="WinHttpSendRequest" /> function as the <i>lpOptional</i> parameter. The string delimited by a question mark (?) is passed to the <b>WinHttpSendRequest</b> function as the <i>pwszHeaders</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving host names. This flag should be used when passing a host name as opposed to a domain name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following ANSI string:<para>"<i>entry index in decimal</i>\0<i>attribute name</i>\0"</para><para>When this flag is set, <i>pszObjectOid</i> must be <b>NULL</b> so that a BLOB is returned. This flag only applies to the ldap scheme.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_LDAP_SIGN_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature provides integrity required by some applications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NO_AUTH_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inhibits automatic authentication handling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOT_MODIFIED_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns <b>HTTP_STATUS_NOT_MODIFIED</b>, <b>CryptRetrieveObjectByUrl</b> returns <b>TRUE</b> and <i>ppvObject</i> is set to <b>NULL</b>. If <i>pAuxInfo</i> is not <b>NULL</b>, <b>dwHttpStatusCode</b> is set to <b>HTTP_STATUS_NOT_MODIFIED</b>. Otherwise, <i>ppvObject</i> is updated for a successful retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_OFFLINE_CHECK_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_PROXY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, <b>fProxyCacheRetrieval</b> is set to <b>TRUE</b> in <i>pAuxInfo</i>. This value only applies to HTTP URL retrievals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_RETRIEVE_MULTIPLE_OBJECTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of <i>pszObjectOid</i>, unless the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) value is CONTEXT_OID_CAPI2_ANY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STICKY_CACHE_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CONTEXT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Acquires signature verification on the context created. In this case <i>pszObjectOid</i> must be non-<b>NULL</b> and <i>pvVerify</i> points to the signer certificate context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_DATA_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is not implemented. Do not use it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_WIRE_ONLY_RETRIEVAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the encoded bits from the wire only. Does not use the URL cache.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time out. This parameter is not used if the URL scheme is file:///.</param>
    <param name="ppvObject">The address of a pointer to the returned object. The return type can be one of the supported types shown in <i>pszObjectOid</i>.</param>
    <param name="hAsyncRetrieve">This parameter is reserved and must be set to <b>NULL</b>.</param>
    <param name="pCredentials">This parameter is not used.</param>
    <param name="pvVerify">A pointer to a verification object. This object is a function of the <i>dwRetrievalFlags</i> parameter. It can be <b>NULL</b> to indicate that the caller is not interested in getting the certificate context or index of the signer if <i>dwRetrievalFlags</i> is CRYPT_VERIFY_CONTEXT_SIGNATURE.</param>
    <param name="pAuxInfo">An optional pointer to a<see cref="CRYPT_RETRIEVE_AUX_INFO" /> structure. If not <b>NULL</b> and if the <b>cbSize</b> member of the structure is set, this parameter returns the time of the last successful wire retrieval.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptRetrieveTimeStamp">
    <summary>The <b>CryptRetrieveTimeStamp</b> function encodes a time stamp request and retrieves the time stamp token from a location specified by a URL to a Time Stamping Authority (TSA).</summary>
    <param name="wszUrl">A pointer to a null-terminated wide character string that contains the URL of the TSA to which to send the request.</param>
    <param name="dwRetrievalFlags">
      <para>A set of flags that specify how the time stamp is retrieved.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIMESTAMP_DONT_HASH_DATA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Inhibit hash calculation on the array of bytes pointed to by the <i>pbData</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIMESTAMP_VERIFY_CONTEXT_SIGNATURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Enforce signature validation on the retrieved time stamp.<div><b>Note</b>  The <b>TIMESTAMP_VERIFY_CONTEXT_SIGNATURE</b> flag is valid only if the <b>fRequestCerts</b> member of the <see cref="CRYPT_TIMESTAMP_PARA" /> pointed to by the <i>pPara</i> parameter is set to <b>TRUE</b>.</div></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIMESTAMP_NO_AUTH_RETRIEVAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00020000</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag to inhibit automatic authentication handling.</description>
        </listheader>
      </list>
    </param>
    <param name="dwTimeout">A <b>DWORD</b> value that specifies the maximum number of milliseconds to wait for retrieval. If this parameter is set to zero, this function does not time out.</param>
    <param name="pszHashId">A pointer to a null-terminated character string that contains the hash algorithm <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID).</param>
    <param name="pPara">A pointer to a <see cref="CRYPT_TIMESTAMP_PARA" /> structure that contains additional parameters for the request.</param>
    <param name="pbData">A pointer to an array of bytes to be time stamped.</param>
    <param name="cbData">The size, in bytes, of the array pointed to by the <i>pbData</i> parameter.</param>
    <param name="ppTsContext">A pointer to a <see cref="PCRYPT_TIMESTAMP_CONTEXT" /> structure. When you have finished using the context, you must free it by calling the <see cref="CryptMemFree" /> function.</param>
    <param name="ppTsSigner">
      <para>A pointer to a <see cref="PCERT_CONTEXT" /> that receives the certificate of the signer. When you have finished using this structure, you must free it by passing this pointer to the <see cref="CertFreeCertificateContext" /> function.</para>
      <para>Set this parameter to <b>NULL</b> if the TSA signer's certificate is not needed.</para>
    </param>
    <param name="phStore">
      <para>The handle of a certificate store initialized with certificates from the time stamp response. This store can be used for validating the signer certificate of the time stamp response.</para>
      <para>This parameter can be <b>NULL</b> if the TSA supporting certificates are not needed. When you have finished using this handle, release it by passing it to the <see cref="CertCloseStore" /> function.</para>
    </param>
    <returns>If the function is unable to retrieve, decode, and validate the time stamp context, it returns <b>FALSE</b>. For extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.CryptSetAsyncParam">
    <summary>Sets an async parameter.</summary>
    <param name="hAsync">An async handle.</param>
    <param name="pszParamOid">The parameter ID.</param>
    <param name="pvParam">The parameter value.</param>
    <param name="pfnFree">A callback function called when the parameter is freed.</param>
    <returns>S_OK on success.</returns>
  </member>
  <member name="Windows.CryptSetHashParam">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetHashParam</b> function customizes the operations of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>, including setting up initial hash contents and selecting a specific hashing algorithm.</summary>
    <param name="hHash">A handle to the hash object on which to set parameters.</param>
    <param name="dwParam">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HP_HMAC_INFO.</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A pointer to an <see cref="HMAC_INFO" /> structure that specifies the cryptographic hash algorithm and the inner and outer strings to be used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HP_HASHVAL.</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A byte array that contains a hash value to place directly into the hash object. Before setting this value, the size of the hash value must be determined by using the <see cref="CryptGetHashParam" /> function to read the HP_HASHSIZE value.<para>Some <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service providers</a> (CSPs) do not support this capability.</para></description>
        </listheader>
      </list> <div><b>Note</b>  Some CSP types can add additional values that can be set by using this function.</div></param>
    <param name="pbData">A value data buffer. Place the value data in this buffer before calling <b>CryptSetHashParam</b>. The form of this data varies, depending on the value number.</param>
    <param name="dwFlags">This parameter is reserved for future use and must be set to zero.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context is currently being used by another <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero or the <i>pbData</i> buffer contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwParam</i> parameter specifies an unknown value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the <i>hKey</i> key was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetKeyIdentifierProperty">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetKeyIdentifierProperty</b> function sets the property of a specified key identifier. This function can set the property on the computer identified in <i>pwszComputerName</i>.</summary>
    <param name="pKeyIdentifier">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_HASH_BLOB</a> containing the key identifier.</param>
    <param name="dwPropId">Identifies the property to be set. The value of <i>dwPropId</i> determines the type and content of the <i>pvData</i> parameter. Any certificate property ID can be used. CERT_KEY_PROV_INFO_PROP_ID is the property of most interest.</param>
    <param name="dwFlags">
      <para>The following flags can be set. They can be combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_KEYID_MACHINE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the property of the LocalMachine (if <i>pwszComputerName</i> is <b>NULL</b>) or remote computer (if <i>pwszComputerName</i> is not <b>NULL</b>). For more information, see <i>pwszComputerName</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_KEYID_DELETE_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key identifier and all of its properties are deleted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_KEYID_SET_NEW_FLAG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets a new key identifier property. If the property already exists, the attempt fails, and <b>FALSE</b> is returned with the last error code set to CRYPT_E_EXISTS.</description>
        </listheader>
      </list>
    </param>
    <param name="pwszComputerName">A pointer to a <b>null</b>-terminated string that contains the name of a remote computer that has the key identifier where the properties are set. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer for a list of key identifiers. If the local computer is to be set and not a remote computer, set <i>pwszComputerName</i> to <b>NULL</b>.</param>
    <param name="pvReserved">Reserved for future use and must be <b>NULL</b>.</param>
    <param name="pvData">
      <para>If <i>dwPropId</i> is CERT_KEY_PROV_INFO_PROP_ID, <i>pvData</i> points to a<see cref="CRYPT_KEY_PROV_INFO" /> structure containing the property of the key identifier.</para>
      <para>If <i>dwPropId</i> is not CERT_KEY_PROV_INFO_PROP_ID, <i>pvData</i> points to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure containing the property of the key identifier.</para>
      <para>Setting <i>pvData</i> to <b>NULL</b> deletes the property.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  If CRYPT_KEYID_SET_NEW_FLAG is set and the property already exists, <b>FALSE</b> is returned with the last error code set to CRYPT_E_EXISTS.</div>
    </returns>
  </member>
  <member name="Windows.CryptSetKeyParam">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetKeyParam</b> function customizes various aspects of a session key's operations. The values set by this function are not persisted to memory and can only be used with in a single session.<para>The<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/microsoft-base-cryptographic-provider">Microsoft Base Cryptographic Provider</a> does not permit setting values for key exchange or signature keys; however, custom providers can define values that can be set for its keys.</para></summary>
    <param name="hKey">A handle to the key for which values are to be set.</param>
    <param name="dwParam">
      <para>The following tables contain predefined values that can be used.</para>
      <para>For all key types, this parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pbData</i> points to an appropriate <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/alg-id">ALG_ID</a>. This is used when exchanging session keys with the Microsoft Base Digital Signature Standard (DSS), Diffie-Hellman Cryptographic Provider, or compatible CSPs. After a key is agreed upon with the <see cref="CryptImportKey" /> function, the session key is enabled for use by setting its algorithm type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_CERTIFICATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pbData</i> is the address of a buffer that contains the X.509 certificate that has been encoded by using <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Distinguished Encoding Rules</a> (DER). The public key in the certificate must match the corresponding signature or exchange key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_PERMISSIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pbData</i> points to a <b>DWORD</b> value that specifies zero or more permission flags. For a description of these flags, see <see cref="CryptGetKeyParam" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_SALT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pbData</i> points to a <b>BYTE</b> array that specifies a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">salt value</a> to be made part of the session key. The size of the salt value varies depending on the CSP being used. Before setting this value, determine the size of the salt value by calling the <see cref="CryptGetKeyParam" /> function. Salt values are used to make the session keys more unique, which makes dictionary attacks more difficult. The salt value is zero by default for Microsoft Base Cryptographic Provider.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KP_SALT_EX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pbData</i> points to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> structure that contains the salt. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/specifying-a-salt-value">Specifying a Salt Value</a>.</description>
        </listheader>
      </list> <para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Digital Signature Standard</a> (DSS) key is specified by the <i>hKey</i> parameter, the <i>dwParam</i> value can also be set to one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_G</b></term></listheader></list></description><description><i>pbData</i> points to the generator G from the DSS <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key BLOB</a>. The data is in the form of a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> structure, where the <b>pbData</b> member is the value, and the <b>cbData</b> member is the length of the value. The value is expected with no header information and in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">little-endian</a> form.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_P</b></term></listheader></list></description><description><i>pbData</i> points to the prime modulus P of a DSS key BLOB. The data is in the form of a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> structure. The <b>pbData</b> member is the value, and the <b>cbData</b> member is the length of the value. The value is expected with no header information and in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">little-endian</a> form.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_Q</b></term></listheader></list></description><description><i>pbData</i> points to the prime Q of a DSS key BLOB. The data is in the form of a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_INTEGER_BLOB</a> structure where the <b>pbData</b> member is the value, and the <b>cbData</b> member is the length of the value. The value is expected with no header information and in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">little-endian</a> form.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_X</b></term></listheader></list></description><description>After the P, Q, and G values have been set, a call that specifies the KP_X value for <i>dwParam</i> and <b>NULL</b> for the <i>pbData</i> parameter can be made to the <b>CryptSetKeyParam</b> function. This causes the X and Y values to be generated.</description></listheader></list> <para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Diffie-Hellman algorithm</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Digital Signature Algorithm</a> (DSA) key is specified by <i>hKey</i>, the <i>dwParam</i> value can also be set to one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_CMS_DH_KEY_INFO</b></term></listheader></list></description><description>Sets the information for an imported <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Diffie-Hellman</a> key. The <i>pbData</i> parameter is the address of a <see cref="CMS_DH_KEY_INFO" /> structure that contains the key information to be set.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_PUB_PARAMS</b></term></listheader></list></description><description>Sets the public parameters (P, Q, G, and so on) of a DSS or Diffie-Hellman key. The key handle for this key must be in the PREGEN state, generated with the CRYPT_PREGEN flag. The <i>pbData</i> parameter must be a pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">DATA_BLOB</a> structure where the data in this structure is a DHPUBKEY_VER3 or DSSPUBKEY_VER3 BLOB. The function copies the public parameters from this <b>CRYPT_INTEGER_BLOB</b> structure to the key handle. After this call is made, the KP_X parameter value should be used with <b>CryptSetKeyParam</b> to create the actual private key. The KP_PUB_PARAMS parameter is used as one call rather than multiple calls with the parameter values KP_P, KP_Q, and KP_G.</description></listheader></list> <para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">block cipher</a><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session key</a> is specified by the <i>hKey</i> parameter, the <i>dwParam</i> value can also be set to one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_EFFECTIVE_KEYLEN</b></term></listheader></list></description><description>This value type can only be used with RC2 keys and has been added because of the implementation of the <b>CryptSetKeyParam</b> function in the Microsoft Enhanced Cryptographic Provider prior to Windows 2000. In the previous implementation, the RC2 keys in the Enhanced Provider were 128 bits in strength, but the effective key length used to expand keys into the key table was only 40 bits. This reduced the strength of the algorithm to 40 bits. To maintain backward compatibility, the previous implementation will remain as is. However, the effective key length can be set to be greater than 40 bits by using KP_EFFECTIVE_KEYLEN in the <b>CryptSetKeyParam</b> call. The effective key length is passed in the <i>pbData</i> parameter as a pointer to a <b>DWORD</b> value with the effective key length value. The minimum effective key length on the Microsoft Base Cryptographic Provider is one, and the maximum is 40. In the Microsoft Enhanced Cryptographic Provider, the minimum is one and the maximum is 1,024. The key length must be set prior to encrypting or decrypting with the key.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_HIGHEST_VERSION</b></term></listheader></list></description><description>Sets the highest <a href="https://docs.microsoft.com//windows/desktop/SecGloss/t-gly">Transport Layer Security</a> (TLS) version allowed. This property only applies to SSL and TLS keys. The <i>pbData</i> parameter is the address of a <b>DWORD</b> variable that contains the highest TLS version number supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_IV</b></term></listheader></list></description><description><i>pbData</i> points to a <b>BYTE</b> array that specifies the initialization vector. This array must contain <i>BlockLength</i>/8 elements. For example, if the block length is 64 bits, the initialization vector consists of 8 bytes. <para>The initialization vector is set to zero by default for the Microsoft Base Cryptographic Provider.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_KEYVAL</b></term></listheader></list></description><description>Set the key value for a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">Data Encryption Standard</a> (DES) key. The <i>pbData</i> parameter is the address of a buffer that contains the key. This buffer must be the same length as the key. This property only applies to DES keys.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_PADDING</b></term></listheader></list></description><description>Set the padding mode. The <i>pbData</i> parameter is a pointer to a <b>DWORD</b> value that receives a numeric identifier that identifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">padding</a> method used by the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cipher</a>. This can be one of the following values.<list type="table"><listheader><term>PKCS5_PADDING</term></listheader><listheader><description>Specifies the PKCS 5 (sec 6.2) padding method.</description></listheader><listheader><term>RANDOM_PADDING</term></listheader><listheader><description>The padding uses a random number. This padding method is not supported by the Microsoft supplied CSPs.</description></listheader><listheader><term>ZERO_PADDING</term></listheader><listheader><description>The padding uses zeros. This padding method is not supported by the Microsoft supplied CSPs.</description></listheader></list></description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_MODE</b></term></listheader></list></description><description><i>pbData</i> points to a <b>DWORD</b> value that specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cipher mode</a> to be used. For a list of the defined cipher modes, see <see cref="CryptGetKeyParam" />. The cipher mode is set to CRYPT_MODE_CBC by default for the Microsoft Base Cryptographic Provider.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_MODE_BITS</b></term></listheader></list></description><description><i>pbData</i> points to a <b>DWORD</b> value that indicates the number of bits processed per cycle when the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">Output Feedback</a> (OFB) or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">Cipher Feedback</a> (CFB) cipher mode is used. The number of bits processed per cycle is set to 8 by default for the Microsoft Base Cryptographic Provider.</description></listheader></list> <para>If an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">RSA</a> key is specified in the <i>hKey</i> parameter, the <i>dwParam</i> parameter value can be the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>KP_OAEP_PARAMS</b></term></listheader></list></description><description>Set the Optimal Asymmetric Encryption Padding (OAEP) (PKCS #1 version 2) parameters for the key. The <i>pbData</i> parameter is the address of a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure that contains the OAEP label. This property only applies to RSA keys.</description></listheader></list> <para>Note that the following values are not used:</para><list type="bullet"><item><description>KP_ADMIN_PIN</description></item><item><description>KP_CMS_KEY_INFO</description></item><item><description>KP_INFO</description></item><item><description>KP_KEYEXCHANGE_PIN</description></item><item><description>KP_PRECOMP_MD5</description></item><item><description>KP_PRECOMP_SHA</description></item><item><description>KP_PREHASH</description></item><item><description>KP_PUB_EX_LEN</description></item><item><description>KP_PUB_EX_VAL</description></item><item><description>KP_RA</description></item><item><description>KP_RB</description></item><item><description>KP_ROUNDS</description></item><item><description>KP_RP</description></item><item><description>KP_SIGNATURE_PIN</description></item><item><description>KP_Y</description></item></list></param>
    <param name="pbData">A pointer to a buffer initialized with the value to be set before calling <b>CryptSetKeyParam</b>. The form of this data varies depending on the value of <i>dwParam</i>.</param>
    <param name="dwFlags">Used only when <i>dwParam</i> is KP_ALGID. The <i>dwFlags</i> parameter is used to pass in flag values for the enabled key. The <i>dwFlags</i> parameter can hold values such as the key size and the other flag values allowed when generating the same type of key with <see cref="CryptGenKey" />. For information about allowable flag values, see<b>CryptGenKey</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context is currently being used by another <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero, or the <i>pbData</i> buffer contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwParam</i> parameter specifies an unknown parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the <i>hKey</i> key was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FIXEDPARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Some CSPs have hard-coded P, Q, and G values. If this is the case, then using KP_P, KP_Q, and KP_G for the value of <i>dwParam</i> causes this error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetOIDFunctionValue">
    <summary>The <b>CryptSetOIDFunctionValue</b> function sets a value for the specified encoding type, function name, OID, and value name.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pszFuncName">Name of the function for which the encoding type, OID, and value name is being updated.</param>
    <param name="pszOID">If the high-order word of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is nonzero, <i>pszOID</i> is a pointer to either an OID string such as "2.5.29.1" or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> string such as "file". If the high-order word of the OID is zero, the low-order word specifies the integer identifier to be used as the object identifier.</param>
    <param name="pwszValueName">A pointer to a Unicode string containing the name of the value to set. If a value with this name is not already present, the function creates it.</param>
    <param name="dwValueType">
      <para>Specifies the type of information to be stored as the value's data. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_DWORD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A 32-bit number.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_EXPAND_SZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A null-terminated Unicode string that contains unexpanded references to environment variables (for example, "%PATH%").</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_MULTI_SZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An array of null-terminated Unicode strings, terminated by two <b>NULL</b> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_SZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A null-terminated Unicode string.</description>
        </listheader>
      </list>
    </param>
    <param name="pbValueData">Points to a buffer containing the data to be stored for the specified value name.</param>
    <param name="cbValueData">Specifies the size, in bytes, of the information pointed to by the <i>pbValueData</i> parameter. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, the size must include the terminating <b>NULL</b> wide character.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptSetProvider">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProvider</b> function specifies the current user's default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).<para>If a current user's default provider is set, that default provider is acquired by any call by that user to<see cref="CryptAcquireContext" /> specifying a <i>dwProvType</i> provider type but not a CSP name.</para><para>An enhanced version of this function,<see cref="CryptSetProviderEx" />, is also available.</para><div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">Provider type of the CSP specified by <i>pszProvName</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
      </list> <para>Errors can also be propagated from internal calls to <see cref="RegCreateKeyEx" /> and <see cref="RegSetValueEx" />.</para></returns>
  </member>
  <member name="Windows.CryptSetProviderA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProvider</b> function specifies the current user's default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).<para>If a current user's default provider is set, that default provider is acquired by any call by that user to<see cref="CryptAcquireContext" /> specifying a <i>dwProvType</i> provider type but not a CSP name.</para><para>An enhanced version of this function,<see cref="CryptSetProviderEx" />, is also available.</para><div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">Provider type of the CSP specified by <i>pszProvName</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
      </list> <para>Errors can also be propagated from internal calls to <see cref="RegCreateKeyEx" /> and <see cref="RegSetValueEx" />.</para></returns>
  </member>
  <member name="Windows.CryptSetProviderW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProvider</b> function specifies the current user's default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).<para>If a current user's default provider is set, that default provider is acquired by any call by that user to<see cref="CryptAcquireContext" /> specifying a <i>dwProvType</i> provider type but not a CSP name.</para><para>An enhanced version of this function,<see cref="CryptSetProviderEx" />, is also available.</para><div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">Provider type of the CSP specified by <i>pszProvName</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
      </list> <para>Errors can also be propagated from internal calls to <see cref="RegCreateKeyEx" /> and <see cref="RegSetValueEx" />.</para></returns>
  </member>
  <member name="Windows.CryptSetProviderEx">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProviderEx</b> function specifies the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user.<div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">The provider type of the CSP specified by <i>pszProvName</i>.</param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Causes the user-context default CSP of the specified type to be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Causes the computer default CSP of the specified type to be set.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Possible error codes include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetProviderExA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProviderEx</b> function specifies the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user.<div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">The provider type of the CSP specified by <i>pszProvName</i>.</param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Causes the user-context default CSP of the specified type to be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Causes the computer default CSP of the specified type to be set.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Possible error codes include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetProviderExW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProviderEx</b> function specifies the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user.<div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">The provider type of the CSP specified by <i>pszProvName</i>.</param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Causes the user-context default CSP of the specified type to be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Causes the computer default CSP of the specified type to be set.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Possible error codes include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetProviderEx">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProviderEx</b> function specifies the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user.<div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">The provider type of the CSP specified by <i>pszProvName</i>.</param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Causes the user-context default CSP of the specified type to be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Causes the computer default CSP of the specified type to be set.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Possible error codes include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetProviderExA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProviderEx</b> function specifies the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user.<div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">The provider type of the CSP specified by <i>pszProvName</i>.</param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Causes the user-context default CSP of the specified type to be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Causes the computer default CSP of the specified type to be set.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Possible error codes include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetProviderExW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProviderEx</b> function specifies the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) of a specified provider type for the local computer or current user.<div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">The provider type of the CSP specified by <i>pszProvName</i>.</param>
    <param name="pdwReserved">This parameter is reserved for future use and must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_DELETE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_USER_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Causes the user-context default CSP of the specified type to be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_MACHINE_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Causes the computer default CSP of the specified type to be set.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />. Possible error codes include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSetProvider">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProvider</b> function specifies the current user's default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).<para>If a current user's default provider is set, that default provider is acquired by any call by that user to<see cref="CryptAcquireContext" /> specifying a <i>dwProvType</i> provider type but not a CSP name.</para><para>An enhanced version of this function,<see cref="CryptSetProviderEx" />, is also available.</para><div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">Provider type of the CSP specified by <i>pszProvName</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
      </list> <para>Errors can also be propagated from internal calls to <see cref="RegCreateKeyEx" /> and <see cref="RegSetValueEx" />.</para></returns>
  </member>
  <member name="Windows.CryptSetProviderA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProvider</b> function specifies the current user's default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).<para>If a current user's default provider is set, that default provider is acquired by any call by that user to<see cref="CryptAcquireContext" /> specifying a <i>dwProvType</i> provider type but not a CSP name.</para><para>An enhanced version of this function,<see cref="CryptSetProviderEx" />, is also available.</para><div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">Provider type of the CSP specified by <i>pszProvName</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
      </list> <para>Errors can also be propagated from internal calls to <see cref="RegCreateKeyEx" /> and <see cref="RegSetValueEx" />.</para></returns>
  </member>
  <member name="Windows.CryptSetProviderW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProvider</b> function specifies the current user's default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP).<para>If a current user's default provider is set, that default provider is acquired by any call by that user to<see cref="CryptAcquireContext" /> specifying a <i>dwProvType</i> provider type but not a CSP name.</para><para>An enhanced version of this function,<see cref="CryptSetProviderEx" />, is also available.</para><div><b>Note</b>  Typical applications do not use this function. It is intended for use solely by administrative applications.</div></summary>
    <param name="pszProvName">Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/cryptographic-provider-names">Cryptographic Provider Names</a>.</param>
    <param name="dwProvType">Provider type of the CSP specified by <i>pszProvName</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />. Some possible error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system ran out of memory during the operation.</description>
        </listheader>
      </list> <para>Errors can also be propagated from internal calls to <see cref="RegCreateKeyEx" /> and <see cref="RegSetValueEx" />.</para></returns>
  </member>
  <member name="Windows.CryptSetProvParam">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSetProvParam</b> function customizes the operations of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP). This function is commonly used to set a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key container</a> associated with a CSP to control access to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private keys</a> in that key container.</summary>
    <param name="hProv">The handle of a CSP for which to set values. This handle must have already been created by using the <see cref="CryptAcquireContext" /> function.</param>
    <param name="dwParam">
      <para>Specifies the parameter to set. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_CLIENT_HWND</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Set the window handle that the provider uses as the parent of any dialog boxes it creates. <i>pbData</i> contains a pointer to an <b>HWND</b> that contains the parent window handle.<para>This parameter must be set before calling<see cref="CryptAcquireContext" /> because many CSPs will display a user interface when <b>CryptAcquireContext</b> is called. You can pass <b>NULL</b> for the <i>hProv</i> parameter to set this window handle for all cryptographic contexts subsequently acquired within this <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_DELETEKEY</b>
                </term>
              </listheader>
              <listheader>
                <term>24 (0x18)</term>
              </listheader>
            </list>
          </description>
          <description>Delete the ephemeral key associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">encryption</a>, or verification context. This will free memory and clear registry settings associated with the key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_KEYEXCHANGE_ALG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This constant is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_KEYEXCHANGE_PIN</b>
                </term>
              </listheader>
              <listheader>
                <term>32 (0x20)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the key exchange PIN is contained in <i>pbData</i>. The PIN is represented as a null-terminated ASCII string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_KEYEXCHANGE_KEYSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This constant is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_KEYSET_SEC_DESCR</b>
                </term>
              </listheader>
              <listheader>
                <term>8 (0x8)</term>
              </listheader>
            </list>
          </description>
          <description>Sets the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> on the key storage container. The <i>pbData</i> parameter is the address of a <see cref="SECURITY_DESCRIPTOR" /> structure that contains the new security descriptor for the key storage container.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_PIN_PROMPT_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>44 (0x2C)</term>
              </listheader>
            </list>
          </description>
          <description>Sets an alternate prompt string to display to the user when the user's PIN is requested. The <i>pbData</i> parameter is a pointer to a null-terminated Unicode string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_ROOT_CERTSTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>46 (0x2E)</term>
              </listheader>
            </list>
          </description>
          <description>Sets the root certificate store for the smart card. The provider will copy the root certificates from this store onto the smart card.<para>The <i>pbData</i> parameter is an <b>HCERTSTORE</b> variable that contains the handle of the new certificate store. The provider will copy the certificates from the store during this call, so it is safe to close this store after this function is called.</para><para><b>Windows XP and Windows Server 2003:  </b>This parameter is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_SIGNATURE_ALG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This constant is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_SIGNATURE_PIN</b>
                </term>
              </listheader>
              <listheader>
                <term>33 (0x21)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies the signature PIN. The <i>pbData</i> parameter is a null-terminated ASCII string that represents the PIN.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_SIGNATURE_KEYSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This constant is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_UI_PROMPT</b>
                </term>
              </listheader>
              <listheader>
                <term>21 (0x15)</term>
              </listheader>
            </list>
          </description>
          <description>For a smart card provider, sets the search string that is displayed to the user as a prompt to insert the smart card. This string is passed as the <b>lpstrSearchDesc</b> member of the <see cref="OPENCARDNAME_EX" /> structure that is passed to the <see cref="SCardUIDlgSelectCard" /> function. This string is used for the lifetime of the calling process.<para>The <i>pbData</i> parameter is a pointer to a null-terminated Unicode string.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_USE_HARDWARE_RNG</b>
                </term>
              </listheader>
              <listheader>
                <term>38 (0x26)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the CSP must exclusively use the hardware random number generator (RNG). When <b>PP_USE_HARDWARE_RNG</b> is set, random values are taken exclusively from the hardware RNG and no other sources are used. If a hardware RNG is supported by the CSP and it can be exclusively used, the function succeeds and returns <b>TRUE</b>; otherwise, the function fails and returns <b>FALSE</b>. The <i>pbData</i> parameter must be <b>NULL</b> and <i>dwFlags</i> must be zero when using this value.<para>None of the Microsoft CSPs currently support using a hardware RNG.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_USER_CERTSTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>42 (0x2A)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies the user certificate store for the smart card. This certificate store contains all of the user certificates that are stored on the smart card. The certificates in this store are encoded by using PKCS_7_ASN_ENCODING or X509_ASN_ENCODING encoding and should contain the <b>CERT_KEY_PROV_INFO_PROP_ID</b> property. <para>The <i>pbData</i> parameter is an <b>HCERTSTORE</b> variable that receives the handle of an in-memory certificate store. When this handle is no longer needed, the caller must close it by using the <see cref="CertCloseStore" /> function.</para><para><b>Windows Server 2003 and Windows XP:  </b>This parameter is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_SECURE_KEYEXCHANGE_PIN</b>
                </term>
              </listheader>
              <listheader>
                <term>47 (0x2F)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that an encrypted key exchange PIN is contained in <i>pbData</i>. The <i>pbData</i> parameter contains a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">DATA_BLOB</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_SECURE_SIGNATURE_PIN</b>
                </term>
              </listheader>
              <listheader>
                <term>48 (0x30)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that an encrypted signature PIN is contained in <i>pbData</i>. The <i>pbData</i> parameter contains a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">DATA_BLOB</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_SMARTCARD_READER</b>
                </term>
              </listheader>
              <listheader>
                <term>43 (0x2B)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies the name of the smart card reader. The <i>pbData</i> parameter is the address of an ANSI character array that contains a null-terminated ANSI string that contains the name of the smart card reader. <para><b>Windows Server 2003 and Windows XP:  </b>This parameter is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PP_SMARTCARD_GUID</b>
                </term>
              </listheader>
              <listheader>
                <term>45 (0x2D)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies the identifier of the smart card. The <i>pbData</i> parameter is the address of a <b>GUID</b> structure that contains the identifier of the smart card.<para><b>Windows Server 2003 and Windows XP:  </b>This parameter is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pbData">A pointer to a data buffer that contains the value to be set as a provider parameter. The form of this data varies depending on the <i>dwParam</i> value. If <i>dwParam</i> contains <b>PP_USE_HARDWARE_RNG</b>, this parameter must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>If <i>dwParam</i> contains <b>PP_KEYSET_SEC_DESCR</b>, <i>dwFlags</i> contains the <b>SECURITY_INFORMATION</b> applicable bit flags, as defined in the Platform SDK. Key-container security is handled by using<see cref="SetFileSecurity" /> and<see cref="GetFileSecurity" />.</para>
      <para>These bit flags can be combined by using a bitwise-<b>OR</b> operation. For more information, see<see cref="CryptGetProvParam" />.</para>
      <para>If <i>dwParam</i> is <b>PP_USE_HARDWARE_RNG</b> or <b>PP_DELETEKEY</b>, <i>dwFlags</i> must be set to zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP being used. Error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context is currently being used by another <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero or the <i>pbData</i> buffer contains a value that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwParam</i> parameter specifies an unknown parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the <i>hKey</i> key was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function failed in some unexpected way.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSignAndEncodeCertificate">
    <summary>
      <para>The <b>CryptSignAndEncodeCertificate</b> function encodes and signs a certificate, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL), <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust list</a> (CTL), or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate request</a>.</para>
      <para>This function performs the following operations:</para>
      <list type="bullet">
        <item>
          <description>Calls <see cref="CryptEncodeObject" /> using <i>lpszStructType</i> to encode the "to be signed" information.</description>
        </item>
        <item>
          <description>Calls <see cref="CryptSignCertificate" /> to sign this encoded information.</description>
        </item>
        <item>
          <description>Calls <see cref="CryptEncodeObject" /> again, with <i>lpszStructType</i> set to X509_CERT, to further encode the resulting signed, encoded information.</description>
        </item>
      </list>
    </summary>
    <param name="hBCryptKey">A handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) to do the signature. This handle is an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle that has been created by using the<see cref="CryptAcquireContext" /> function or an <b>NCRYPT_KEY_HANDLE</b> handle that has been created by using the <see cref="NCryptOpenKey" /> function. New applications should always pass in a <b>NCRYPT_KEY_HANDLE</b> handle of a CNG CSP.</param>
    <param name="dwKeySpec">
      <para>Identifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a> to use from the provider's container. This must be one of the following values. This parameter is ignored if a CNG key is passed in the <i>hCryptProvOrNCryptKey</i> parameter.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AT_KEYEXCHANGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the key exchange key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AT_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the digital signature key.</description>
        </listheader>
      </list>
    </param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. This can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="lpszStructType">
      <para>A pointer to a null-terminated ANSI string that contains the type of data to be encoded and signed. The following predefined <i>lpszStructType</i> constants are used with encode operations.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_CERT_CRL_TO_BE_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvStructInfo</i> is the address of a <see cref="CRL_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_CERT_REQUEST_TO_BE_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvStructInfo</i> is the address of a <see cref="CERT_REQUEST_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_CERT_TO_BE_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvStructInfo</i> is the address of a <see cref="CERT_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_KEYGEN_REQUEST_TO_BE_SIGNED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvStructInfo</i> is the address of a <see cref="CERT_KEYGEN_REQUEST_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pvStructInfo">The address of a structure that contains the data to be signed and encoded. The format of this structure is determined by the <i>lpszStructType</i> parameter.</param>
    <param name="pSignatureAlgorithm">
      <para>A pointer to a<see cref="CRYPT_ALGORITHM_IDENTIFIER" /> structure that contains the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) of the signature algorithm and any additional parameters needed. This function uses the following algorithm OIDs:</para>
      <list type="bullet">
        <item>
          <description>szOID_RSA_MD5RSA</description>
        </item>
        <item>
          <description>szOID_RSA_SHA1RSA</description>
        </item>
        <item>
          <description>szOID_X957_SHA1DSA</description>
        </item>
      </list>If the signature algorithm is a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> algorithm, the signature contains only the unencrypted hash octets. A private key is not used to encrypt the hash. <i>dwKeySpec</i> is not used and <i>hCryptProvOrNCryptKey</i> can be <b>NULL</b> if an appropriate default CSP can be used for hashing.</param>
    <param name="pvHashAuxInfo">Reserved. Must be <b>NULL</b>.</param>
    <param name="pbEncoded">
      <para>A pointer to a buffer to receive the signed and encoded output.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbEncoded">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pbEncoded</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptSignHash" /> and <see cref="CryptHashData" /> might be propagated to this function.</div>Possible error codes include, but are not limited to, the following.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pbEncoded</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbEncoded</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_FILE_NOT_FOUND</b></term></listheader></list></description><description>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>NTE_BAD_ALGID</b></term></listheader></list></description><description>The signature algorithm's OID does not map to a known or supported hash algorithm.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>CRYPT_E_BAD_ENCODE</b></term></listheader></list></description><description>An error was encountered while encoding or decoding. The most likely cause of this error is the improper initialization of the fields in the structure pointed to by <i>pvStructInfo</i>.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptSignAndEncryptMessage">
    <summary>The <b>CryptSignAndEncryptMessage</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the specified content, signs the hash, encrypts the content, hashes the encrypted contents and the signed hash, and then encodes both the encrypted content and the signed hash. The result is the same as if the hash were first signed and then encrypted.</summary>
    <param name="pSignPara">A pointer to a<see cref="CRYPT_SIGN_MESSAGE_PARA" /> structure that contains the signature parameters.</param>
    <param name="pEncryptPara">A pointer to a<see cref="CRYPT_ENCRYPT_MESSAGE_PARA" /> structure containing encryption parameters.</param>
    <param name="cRecipientCert">Number of array elements in <i>rgpRecipientCert</i>.</param>
    <param name="rgpRecipientCert">Array of pointers to<see cref="CERT_CONTEXT" /> structures. Each structure is the certificate of an intended recipients of the message.</param>
    <param name="pbToBeSignedAndEncrypted">A pointer to a buffer containing the content to be signed and encrypted.</param>
    <param name="cbToBeSignedAndEncrypted">The size, in bytes, of the <i>pbToBeSignedAndEncrypted</i> buffer.</param>
    <param name="pbSignedAndEncryptedBlob">
      <para>A pointer to a buffer to receive the encrypted and encoded message.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbSignedAndEncryptedBlob">
      <para>A pointer to <b>DWORD</b> specifying the size, in bytes, of the buffer pointed to by <i>pbSignedAndEncryptedBlob</i>. When the function returns, this variable contains the size, in bytes, of the signed and encrypted message copied to *<i>pbSignedAndEncryptedBlob</i>.</para>
      <div>
        <b>Note</b>  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE).</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following lists the error code most commonly returned by the<see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbSignedAndEncryptedBlob</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbSignedAndEncryptedBlob</i>.</description>
        </listheader>
      </list> <div><b>Note</b>  Errors from the called functions <see cref="CryptSignMessage" /> and <see cref="CryptEncryptMessage" /> might be propagated to this function.</div></returns>
  </member>
  <member name="Windows.CryptSignCertificate">
    <summary>The <b>CryptSignCertificate</b> function signs the "to be signed" information in the encoded signed content.</summary>
    <param name="hBCryptKey">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">CSP</a> that does the signature. This handle must be an <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/hcryptprov">HCRYPTPROV</a> handle that has been created by using the<see cref="CryptAcquireContext" /> function or an <b>NCRYPT_KEY_HANDLE</b> handle that has been created by using the <see cref="NCryptOpenKey" /> function. New applications should always pass in the <b>NCRYPT_KEY_HANDLE</b> handle of a CNG CSP.</param>
    <param name="dwKeySpec">Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is ignored if an <b>NCRYPT_KEY_HANDLE</b> is used in the <i>hCryptProvOrNCryptKey</i> parameter.</param>
    <param name="dwCertEncodingType">
      <para>Specifies the encoding type used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </param>
    <param name="pbEncodedToBeSigned">A pointer to the encoded content to be signed.</param>
    <param name="cbEncodedToBeSigned">The size, in bytes, of the encoded content, <i>pbEncodedToBeSigned</i>.</param>
    <param name="pSignatureAlgorithm">
      <para>A pointer to a<see cref="CRYPT_ALGORITHM_IDENTIFIER" /> structure with a <b>pszObjId</b> member set to one of the following:</para>
      <list type="bullet">
        <item>
          <description>szOID_RSA_MD5RSA</description>
        </item>
        <item>
          <description>szOID_RSA_SHA1RSA</description>
        </item>
        <item>
          <description>szOID_X957_SHA1DSA</description>
        </item>
        <item>
          <description>szOID_RSA_SSA_PSS</description>
        </item>
        <item>
          <description>szOID_ECDSA_SPECIFIED</description>
        </item>
      </list>If the signature algorithm is a hash algorithm, the signature contains only the un-encrypted hash octets. A private key is not used to encrypt the hash. <i>dwKeySpec</i> is not used and <i>hCryptProvOrNCryptKey</i> can be <b>NULL</b> if an appropriate default CSP can be used for hashing.</param>
    <param name="pvHashAuxInfo">Not currently used. Must be <b>NULL</b>.</param>
    <param name="pbSignature">
      <para>A pointer to a buffer to receive the signed <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the content.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbSignature">
      <para>A pointer to a <b>DWORD</b> that contains the size, in bytes, of the buffer pointed to by the <i>pbSignature</i> parameter. When the function returns, the <b>DWORD</b> contains the number of bytes stored or to be stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>). For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptSignHash" /> and <see cref="CryptHashData" /> might be propagated to this function.</div>This function has the following error codes.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_MORE_DATA</b></term></listheader></list></description><description>If the buffer specified by the <i>pbSignature</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbSignature</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>NTE_BAD_ALGID</b></term></listheader></list></description><description>The signature algorithm's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) does not map to a known or supported hash algorithm.</description></listheader></list></returns>
  </member>
  <member name="Windows.CryptSignHash">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSignHash</b> function signs data. Because all signature algorithms are asymmetric and thus slow, CryptoAPI does not allow data to be signed directly. Instead, data is first <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashed</a>, and <b>CryptSignHash</b> is used to sign the hash.</summary>
    <param name="hHash">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> to be signed.</param>
    <param name="dwKeySpec">
      <para>Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.</para>
      <para>The signature algorithm used is specified when the key pair is originally created.</para>
      <para>The only signature algorithm that the Microsoft Base Cryptographic Provider supports is the RSA Public Key algorithm.</para>
    </param>
    <param name="szDescription">This parameter is no longer used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Used with RSA providers. The hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not placed in the RSA public key encryption. If this flag is not set, the hash OID in the default signature is as specified in the definition of DigestInfo in PKCS #1.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use the RSA signature padding method specified in the ANSI X9.31 standard.</description>
        </listheader>
      </list>
    </param>
    <param name="pbSignature">
      <para>A pointer to a buffer receiving the signature data.</para>
      <para>This parameter can be <b>NULL</b> to set the buffer size for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwSigLen">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pbSignature</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by the <i>pbSignature</i> parameter is not large enough to hold the returned data. The required buffer size, in bytes, is in the <i>pdwSigLen</i><b>DWORD</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support, or the <i>dwKeySpec</i> parameter has an incorrect value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The private key specified by <i>dwKeySpec</i> does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSignHashA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSignHash</b> function signs data. Because all signature algorithms are asymmetric and thus slow, CryptoAPI does not allow data to be signed directly. Instead, data is first <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashed</a>, and <b>CryptSignHash</b> is used to sign the hash.</summary>
    <param name="hHash">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> to be signed.</param>
    <param name="dwKeySpec">
      <para>Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.</para>
      <para>The signature algorithm used is specified when the key pair is originally created.</para>
      <para>The only signature algorithm that the Microsoft Base Cryptographic Provider supports is the RSA Public Key algorithm.</para>
    </param>
    <param name="szDescription">This parameter is no longer used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Used with RSA providers. The hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not placed in the RSA public key encryption. If this flag is not set, the hash OID in the default signature is as specified in the definition of DigestInfo in PKCS #1.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use the RSA signature padding method specified in the ANSI X9.31 standard.</description>
        </listheader>
      </list>
    </param>
    <param name="pbSignature">
      <para>A pointer to a buffer receiving the signature data.</para>
      <para>This parameter can be <b>NULL</b> to set the buffer size for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwSigLen">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pbSignature</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by the <i>pbSignature</i> parameter is not large enough to hold the returned data. The required buffer size, in bytes, is in the <i>pdwSigLen</i><b>DWORD</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support, or the <i>dwKeySpec</i> parameter has an incorrect value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The private key specified by <i>dwKeySpec</i> does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSignHashW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSignHash</b> function signs data. Because all signature algorithms are asymmetric and thus slow, CryptoAPI does not allow data to be signed directly. Instead, data is first <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashed</a>, and <b>CryptSignHash</b> is used to sign the hash.</summary>
    <param name="hHash">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> to be signed.</param>
    <param name="dwKeySpec">
      <para>Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.</para>
      <para>The signature algorithm used is specified when the key pair is originally created.</para>
      <para>The only signature algorithm that the Microsoft Base Cryptographic Provider supports is the RSA Public Key algorithm.</para>
    </param>
    <param name="szDescription">This parameter is no longer used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Used with RSA providers. The hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not placed in the RSA public key encryption. If this flag is not set, the hash OID in the default signature is as specified in the definition of DigestInfo in PKCS #1.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use the RSA signature padding method specified in the ANSI X9.31 standard.</description>
        </listheader>
      </list>
    </param>
    <param name="pbSignature">
      <para>A pointer to a buffer receiving the signature data.</para>
      <para>This parameter can be <b>NULL</b> to set the buffer size for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwSigLen">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pbSignature</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by the <i>pbSignature</i> parameter is not large enough to hold the returned data. The required buffer size, in bytes, is in the <i>pdwSigLen</i><b>DWORD</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support, or the <i>dwKeySpec</i> parameter has an incorrect value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The private key specified by <i>dwKeySpec</i> does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSignHash">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSignHash</b> function signs data. Because all signature algorithms are asymmetric and thus slow, CryptoAPI does not allow data to be signed directly. Instead, data is first <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashed</a>, and <b>CryptSignHash</b> is used to sign the hash.</summary>
    <param name="hHash">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> to be signed.</param>
    <param name="dwKeySpec">
      <para>Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.</para>
      <para>The signature algorithm used is specified when the key pair is originally created.</para>
      <para>The only signature algorithm that the Microsoft Base Cryptographic Provider supports is the RSA Public Key algorithm.</para>
    </param>
    <param name="szDescription">This parameter is no longer used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Used with RSA providers. The hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not placed in the RSA public key encryption. If this flag is not set, the hash OID in the default signature is as specified in the definition of DigestInfo in PKCS #1.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use the RSA signature padding method specified in the ANSI X9.31 standard.</description>
        </listheader>
      </list>
    </param>
    <param name="pbSignature">
      <para>A pointer to a buffer receiving the signature data.</para>
      <para>This parameter can be <b>NULL</b> to set the buffer size for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwSigLen">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pbSignature</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by the <i>pbSignature</i> parameter is not large enough to hold the returned data. The required buffer size, in bytes, is in the <i>pdwSigLen</i><b>DWORD</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support, or the <i>dwKeySpec</i> parameter has an incorrect value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The private key specified by <i>dwKeySpec</i> does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSignHashA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSignHash</b> function signs data. Because all signature algorithms are asymmetric and thus slow, CryptoAPI does not allow data to be signed directly. Instead, data is first <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashed</a>, and <b>CryptSignHash</b> is used to sign the hash.</summary>
    <param name="hHash">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> to be signed.</param>
    <param name="dwKeySpec">
      <para>Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.</para>
      <para>The signature algorithm used is specified when the key pair is originally created.</para>
      <para>The only signature algorithm that the Microsoft Base Cryptographic Provider supports is the RSA Public Key algorithm.</para>
    </param>
    <param name="szDescription">This parameter is no longer used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Used with RSA providers. The hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not placed in the RSA public key encryption. If this flag is not set, the hash OID in the default signature is as specified in the definition of DigestInfo in PKCS #1.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use the RSA signature padding method specified in the ANSI X9.31 standard.</description>
        </listheader>
      </list>
    </param>
    <param name="pbSignature">
      <para>A pointer to a buffer receiving the signature data.</para>
      <para>This parameter can be <b>NULL</b> to set the buffer size for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwSigLen">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pbSignature</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by the <i>pbSignature</i> parameter is not large enough to hold the returned data. The required buffer size, in bytes, is in the <i>pdwSigLen</i><b>DWORD</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support, or the <i>dwKeySpec</i> parameter has an incorrect value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The private key specified by <i>dwKeySpec</i> does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSignHashW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptSignHash</b> function signs data. Because all signature algorithms are asymmetric and thus slow, CryptoAPI does not allow data to be signed directly. Instead, data is first <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hashed</a>, and <b>CryptSignHash</b> is used to sign the hash.</summary>
    <param name="hHash">Handle of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a> to be signed.</param>
    <param name="dwKeySpec">
      <para>Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.</para>
      <para>The signature algorithm used is specified when the key pair is originally created.</para>
      <para>The only signature algorithm that the Microsoft Base Cryptographic Provider supports is the RSA Public Key algorithm.</para>
    </param>
    <param name="szDescription">This parameter is no longer used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Used with RSA providers. The hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not placed in the RSA public key encryption. If this flag is not set, the hash OID in the default signature is as specified in the definition of DigestInfo in PKCS #1.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use the RSA signature padding method specified in the ANSI X9.31 standard.</description>
        </listheader>
      </list>
    </param>
    <param name="pbSignature">
      <para>A pointer to a buffer receiving the signature data.</para>
      <para>This parameter can be <b>NULL</b> to set the buffer size for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pdwSigLen">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pbSignature</i> buffer. When the function returns, the <b>DWORD</b> value contains the number of bytes stored in the buffer.</para>
      <div>
        <b>Note</b>  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by the <i>pbSignature</i> parameter is not large enough to hold the returned data. The required buffer size, in bytes, is in the <i>pdwSigLen</i><b>DWORD</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hHash</i> handle specifies an algorithm that this CSP does not support, or the <i>dwKeySpec</i> parameter has an incorrect value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The private key specified by <i>dwKeySpec</i> does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptSignMessage">
    <summary>The <b>CryptSignMessage</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> of the specified content, signs the hash, and then encodes both the original message content and the signed hash.</summary>
    <param name="pSignPara">A pointer to<see cref="CRYPT_SIGN_MESSAGE_PARA" /> structure containing the signature parameters.</param>
    <param name="fDetachedSignature">
      <b>TRUE</b> if this is to be a detached signature. Otherwise, <b>FALSE</b>. If this parameter is set to <b>TRUE</b>, only the signed hash is encoded in <i>pbSignedBlob</i>. Otherwise, both <i>rgpbToBeSigned</i> and the signed hash are encoded.</param>
    <param name="cToBeSigned">Count of the number of array elements in <i>rgpbToBeSigned</i> and <i>rgcbToBeSigned</i>. This parameter must be set to one unless <i>fDetachedSignature</i> is set to <b>TRUE</b>.</param>
    <param name="rgpbToBeSigned">Array of pointers to buffers that contain the contents to be signed.</param>
    <param name="rgcbToBeSigned">Array of sizes, in bytes, of the content buffers pointed to in <i>rgpbToBeSigned</i>.</param>
    <param name="pbSignedBlob">
      <para>A pointer to a buffer to receive the encoded signed hash, if <i>fDetachedSignature</i> is <b>TRUE</b>, or to both the encoded content and signed hash if <i>fDetachedSignature</i> is <b>FALSE</b>.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbSignedBlob">
      <para>A pointer to a <b>DWORD</b> specifying the size, in bytes, of the <i>pbSignedBlob</i> buffer. When the function returns, this variable contains the size, in bytes, of the signed and encoded message.</para>
      <div>
        <b>Note</b>  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following lists the error codes most commonly returned by the<see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbSignedBlob</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbSignedBlob</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The <b>cbSize</b> in *<i>pSignPara</i> is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_KEY_PROPERTY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pSigningCert</i> in *<i>pSignPara</i> does not have a CERT_KEY_PROV_INFO_PROP_ID or CERT_KEY_CONTEXT_PROP_ID property.</description>
        </listheader>
      </list> <div><b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptHashData" />, and <see cref="CryptSignHash" /> might be propagated to this function.</div>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</returns>
  </member>
  <member name="Windows.CryptSignMessageWithKey">
    <summary>The <b>CryptSignMessageWithKey</b> function signs a message by using a CSP's private key specified in the parameters. A placeholder <b>SignerId</b> is created and stored in the message.</summary>
    <param name="pSignPara">A pointer to a <see cref="CRYPT_KEY_SIGN_MESSAGE_PARA" /> structure that contains the signature parameters.</param>
    <param name="pbToBeSigned">A pointer to a buffer array that contains the message to be signed.</param>
    <param name="cbToBeSigned">The number of array elements in the <i>pbToBeSigned</i> buffer array.</param>
    <param name="pbSignedBlob">
      <para>A pointer to a buffer to receive the encoded signed message.</para>
      <para>This parameter can be <b>NULL</b> to set the size of this information for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbSignedBlob">
      <para>A pointer to a <b>DWORD</b> value that indicates the size, in bytes, of the <i>pbSignedBlob</i> buffer. When the function returns, this variable contains the size, in bytes, of the signed and encoded message.</para>
      <div>
        <b>Note</b>  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE).</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following lists the error codes most commonly returned by the<see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbSignedBlob</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbSignedBlob</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> is not valid. Currently only PKCS_7_ASN_ENCODING is supported. The <b>cbSize</b> in *<i>pSignPara</i> is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_KEY_PROPERTY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pSigningCert</i> in *<i>pSignPara</i> does not have a CERT_KEY_PROV_INFO_PROP_ID or CERT_KEY_CONTEXT_PROP_ID property.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptStringToBinary">
    <summary>The <b>CryptStringToBinary</b> function converts a formatted string into an array of bytes.</summary>
    <param name="pszString">A pointer to a string that contains the formatted string to be converted.</param>
    <param name="cchString">The number of characters of the formatted string to be converted, not including the terminating <b>NULL</b> character. If this parameter is zero, <i>pszString</i> is considered to be a null-terminated string.</param>
    <param name="dwFlags">
      <para>Indicates the format of the string to be converted. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal format with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000007</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals "=" signs.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pbBinary">A pointer to a buffer that receives the returned sequence of bytes. If this parameter is <b>NULL</b>, the function calculates the length of the buffer needed and returns the size, in bytes, of required memory in the <b>DWORD</b> pointed to by <i>pcbBinary</i>.</param>
    <param name="pcbBinary">
      <para>A pointer to a <b>DWORD</b> variable that, on entry, contains the size, in bytes, of the <i>pbBinary</i> buffer. After the function returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of the data, the function fails and <see cref="GetLastError" /> returns <b>ERROR_MORE_DATA</b>.</para>
      <para>If <i>pbBinary</i> is <b>NULL</b>, the <b>DWORD</b> pointed to by <i>pcbBinary</i> is ignored.</para>
    </param>
    <param name="pdwSkip">A pointer to a <b>DWORD</b> value that receives the number of characters skipped to reach the beginning of the<code>-----BEGIN ...-----</code> header. If no header is present, then the <b>DWORD</b> is set to zero. This parameter is optional and can be <b>NULL</b> if it is not needed.</param>
    <param name="pdwFlags">
      <para>A pointer to a <b>DWORD</b> value that receives the flags actually used in the conversion. These are the same flags used for the <i>dwFlags</i> parameter. In many cases, these will be the same flags that were passed in the <i>dwFlags</i> parameter. If <i>dwFlags</i> contains one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is optional and can be <b>NULL</b> if it is not needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptStringToBinaryA">
    <summary>The <b>CryptStringToBinary</b> function converts a formatted string into an array of bytes.</summary>
    <param name="pszString">A pointer to a string that contains the formatted string to be converted.</param>
    <param name="cchString">The number of characters of the formatted string to be converted, not including the terminating <b>NULL</b> character. If this parameter is zero, <i>pszString</i> is considered to be a null-terminated string.</param>
    <param name="dwFlags">
      <para>Indicates the format of the string to be converted. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal format with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000007</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals "=" signs.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pbBinary">A pointer to a buffer that receives the returned sequence of bytes. If this parameter is <b>NULL</b>, the function calculates the length of the buffer needed and returns the size, in bytes, of required memory in the <b>DWORD</b> pointed to by <i>pcbBinary</i>.</param>
    <param name="pcbBinary">
      <para>A pointer to a <b>DWORD</b> variable that, on entry, contains the size, in bytes, of the <i>pbBinary</i> buffer. After the function returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of the data, the function fails and <see cref="GetLastError" /> returns <b>ERROR_MORE_DATA</b>.</para>
      <para>If <i>pbBinary</i> is <b>NULL</b>, the <b>DWORD</b> pointed to by <i>pcbBinary</i> is ignored.</para>
    </param>
    <param name="pdwSkip">A pointer to a <b>DWORD</b> value that receives the number of characters skipped to reach the beginning of the<code>-----BEGIN ...-----</code> header. If no header is present, then the <b>DWORD</b> is set to zero. This parameter is optional and can be <b>NULL</b> if it is not needed.</param>
    <param name="pdwFlags">
      <para>A pointer to a <b>DWORD</b> value that receives the flags actually used in the conversion. These are the same flags used for the <i>dwFlags</i> parameter. In many cases, these will be the same flags that were passed in the <i>dwFlags</i> parameter. If <i>dwFlags</i> contains one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is optional and can be <b>NULL</b> if it is not needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptStringToBinaryW">
    <summary>The <b>CryptStringToBinary</b> function converts a formatted string into an array of bytes.</summary>
    <param name="pszString">A pointer to a string that contains the formatted string to be converted.</param>
    <param name="cchString">The number of characters of the formatted string to be converted, not including the terminating <b>NULL</b> character. If this parameter is zero, <i>pszString</i> is considered to be a null-terminated string.</param>
    <param name="dwFlags">
      <para>Indicates the format of the string to be converted. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal format with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000007</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals "=" signs.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pbBinary">A pointer to a buffer that receives the returned sequence of bytes. If this parameter is <b>NULL</b>, the function calculates the length of the buffer needed and returns the size, in bytes, of required memory in the <b>DWORD</b> pointed to by <i>pcbBinary</i>.</param>
    <param name="pcbBinary">
      <para>A pointer to a <b>DWORD</b> variable that, on entry, contains the size, in bytes, of the <i>pbBinary</i> buffer. After the function returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of the data, the function fails and <see cref="GetLastError" /> returns <b>ERROR_MORE_DATA</b>.</para>
      <para>If <i>pbBinary</i> is <b>NULL</b>, the <b>DWORD</b> pointed to by <i>pcbBinary</i> is ignored.</para>
    </param>
    <param name="pdwSkip">A pointer to a <b>DWORD</b> value that receives the number of characters skipped to reach the beginning of the<code>-----BEGIN ...-----</code> header. If no header is present, then the <b>DWORD</b> is set to zero. This parameter is optional and can be <b>NULL</b> if it is not needed.</param>
    <param name="pdwFlags">
      <para>A pointer to a <b>DWORD</b> value that receives the flags actually used in the conversion. These are the same flags used for the <i>dwFlags</i> parameter. In many cases, these will be the same flags that were passed in the <i>dwFlags</i> parameter. If <i>dwFlags</i> contains one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is optional and can be <b>NULL</b> if it is not needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptStringToBinary">
    <summary>The <b>CryptStringToBinary</b> function converts a formatted string into an array of bytes.</summary>
    <param name="pszString">A pointer to a string that contains the formatted string to be converted.</param>
    <param name="cchString">The number of characters of the formatted string to be converted, not including the terminating <b>NULL</b> character. If this parameter is zero, <i>pszString</i> is considered to be a null-terminated string.</param>
    <param name="dwFlags">
      <para>Indicates the format of the string to be converted. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal format with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000007</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals "=" signs.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pbBinary">A pointer to a buffer that receives the returned sequence of bytes. If this parameter is <b>NULL</b>, the function calculates the length of the buffer needed and returns the size, in bytes, of required memory in the <b>DWORD</b> pointed to by <i>pcbBinary</i>.</param>
    <param name="pcbBinary">
      <para>A pointer to a <b>DWORD</b> variable that, on entry, contains the size, in bytes, of the <i>pbBinary</i> buffer. After the function returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of the data, the function fails and <see cref="GetLastError" /> returns <b>ERROR_MORE_DATA</b>.</para>
      <para>If <i>pbBinary</i> is <b>NULL</b>, the <b>DWORD</b> pointed to by <i>pcbBinary</i> is ignored.</para>
    </param>
    <param name="pdwSkip">A pointer to a <b>DWORD</b> value that receives the number of characters skipped to reach the beginning of the<code>-----BEGIN ...-----</code> header. If no header is present, then the <b>DWORD</b> is set to zero. This parameter is optional and can be <b>NULL</b> if it is not needed.</param>
    <param name="pdwFlags">
      <para>A pointer to a <b>DWORD</b> value that receives the flags actually used in the conversion. These are the same flags used for the <i>dwFlags</i> parameter. In many cases, these will be the same flags that were passed in the <i>dwFlags</i> parameter. If <i>dwFlags</i> contains one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is optional and can be <b>NULL</b> if it is not needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptStringToBinaryA">
    <summary>The <b>CryptStringToBinary</b> function converts a formatted string into an array of bytes.</summary>
    <param name="pszString">A pointer to a string that contains the formatted string to be converted.</param>
    <param name="cchString">The number of characters of the formatted string to be converted, not including the terminating <b>NULL</b> character. If this parameter is zero, <i>pszString</i> is considered to be a null-terminated string.</param>
    <param name="dwFlags">
      <para>Indicates the format of the string to be converted. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal format with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000007</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals "=" signs.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pbBinary">A pointer to a buffer that receives the returned sequence of bytes. If this parameter is <b>NULL</b>, the function calculates the length of the buffer needed and returns the size, in bytes, of required memory in the <b>DWORD</b> pointed to by <i>pcbBinary</i>.</param>
    <param name="pcbBinary">
      <para>A pointer to a <b>DWORD</b> variable that, on entry, contains the size, in bytes, of the <i>pbBinary</i> buffer. After the function returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of the data, the function fails and <see cref="GetLastError" /> returns <b>ERROR_MORE_DATA</b>.</para>
      <para>If <i>pbBinary</i> is <b>NULL</b>, the <b>DWORD</b> pointed to by <i>pcbBinary</i> is ignored.</para>
    </param>
    <param name="pdwSkip">A pointer to a <b>DWORD</b> value that receives the number of characters skipped to reach the beginning of the<code>-----BEGIN ...-----</code> header. If no header is present, then the <b>DWORD</b> is set to zero. This parameter is optional and can be <b>NULL</b> if it is not needed.</param>
    <param name="pdwFlags">
      <para>A pointer to a <b>DWORD</b> value that receives the flags actually used in the conversion. These are the same flags used for the <i>dwFlags</i> parameter. In many cases, these will be the same flags that were passed in the <i>dwFlags</i> parameter. If <i>dwFlags</i> contains one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is optional and can be <b>NULL</b> if it is not needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptStringToBinaryW">
    <summary>The <b>CryptStringToBinary</b> function converts a formatted string into an array of bytes.</summary>
    <param name="pszString">A pointer to a string that contains the formatted string to be converted.</param>
    <param name="cchString">The number of characters of the formatted string to be converted, not including the terminating <b>NULL</b> character. If this parameter is zero, <i>pszString</i> is considered to be a null-terminated string.</param>
    <param name="dwFlags">
      <para>Indicates the format of the string to be converted. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Base64, without headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BINARY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Pure binary copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64REQUESTHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal only format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCII</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005</term>
              </listheader>
            </list>
          </description>
          <description>Hexadecimal format with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> character display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000007</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Tries the following, in order: <list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64X509CRLHEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>Base64 between lines of the form `-----BEGIN ...-----` and `-----END ...-----`. See Remarks below.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000a</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXASCIIADDR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000b</term>
              </listheader>
            </list>
          </description>
          <description>Hex, with ASCII character and address display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEXRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000c</term>
              </listheader>
            </list>
          </description>
          <description>A raw hexadecimal string.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_STRICT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000</term>
              </listheader>
            </list>
          </description>
          <description>Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals "=" signs.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pbBinary">A pointer to a buffer that receives the returned sequence of bytes. If this parameter is <b>NULL</b>, the function calculates the length of the buffer needed and returns the size, in bytes, of required memory in the <b>DWORD</b> pointed to by <i>pcbBinary</i>.</param>
    <param name="pcbBinary">
      <para>A pointer to a <b>DWORD</b> variable that, on entry, contains the size, in bytes, of the <i>pbBinary</i> buffer. After the function returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of the data, the function fails and <see cref="GetLastError" /> returns <b>ERROR_MORE_DATA</b>.</para>
      <para>If <i>pbBinary</i> is <b>NULL</b>, the <b>DWORD</b> pointed to by <i>pcbBinary</i> is ignored.</para>
    </param>
    <param name="pdwSkip">A pointer to a <b>DWORD</b> value that receives the number of characters skipped to reach the beginning of the<code>-----BEGIN ...-----</code> header. If no header is present, then the <b>DWORD</b> is set to zero. This parameter is optional and can be <b>NULL</b> if it is not needed.</param>
    <param name="pdwFlags">
      <para>A pointer to a <b>DWORD</b> value that receives the flags actually used in the conversion. These are the same flags used for the <i>dwFlags</i> parameter. In many cases, these will be the same flags that were passed in the <i>dwFlags</i> parameter. If <i>dwFlags</i> contains one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is optional and can be <b>NULL</b> if it is not needed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader><listheader><description>CRYPT_STRING_BINARY</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_BASE64_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_BASE64HEADER</description></listheader><listheader><description>CRYPT_STRING_BASE64</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_STRING_HEX_ANY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This variable will receive one of the following values. Each value indicates the actual format of the string.<list type="table"><listheader><description>CRYPT_STRING_HEXADDR</description></listheader><listheader><description>CRYPT_STRING_HEXASCIIADDR</description></listheader><listheader><description>CRYPT_STRING_HEX</description></listheader><listheader><description>CRYPT_STRING_HEXRAW</description></listheader><listheader><description>CRYPT_STRING_HEXASCII</description></listheader></list></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptUninstallDefaultContext">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptUninstallDefaultContext</b> function removes a default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">context</a> previously installed by <see cref="CryptInstallDefaultContext" />. This function will block until any threads currently using this context finish, if the default context was installed with CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG set.</summary>
    <param name="hDefaultContext">Handle of the context to be released.</param>
    <param name="dwFlags">Reserved for future use.</param>
    <param name="pvReserved">Reserved for future use.</param>
    <returns>If the function succeeds, the return value is nonzero (TRUE) .If the function fails, the return value is zero (FALSE). For extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CryptUnregisterDefaultOIDFunction">
    <summary>The <b>CryptUnregisterDefaultOIDFunction</b> removes the registration of a DLL containing the default function to be called for the specified encoding type and function name.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING.</para>
    </param>
    <param name="pszFuncName">Name of the function being unregistered.</param>
    <param name="pwszDll">Name of the DLL where the function is located.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptUnregisterOIDFunction">
    <summary>The <b>CryptUnregisterOIDFunction</b> function removes the registration of a DLL that contains the function to be called for the specified encoding type, function name, and OID.</summary>
    <param name="dwEncodingType">
      <para>Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are used; however, additional encoding types may be added in the future. To match both current encoding types, use:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>For functions that do not use an encoding type, set this parameter to zero.</para>
    </param>
    <param name="pszFuncName">Name of the function being unregistered.</param>
    <param name="pszOID">A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) that corresponds to the name of the function being unregistered. If the high order word of the OID is nonzero, <i>pszOID</i> is a pointer to either an OID string such as "2.5.29.1" or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ASCII</a> string such as "file." If the high order word of the OID is zero, the low order word specifies the integer identifier to be used as the object identifier.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (<b>TRUE</b>).</para>
      <para>If the function fails, the return value is zero (<b>FALSE</b>).</para>
    </returns>
  </member>
  <member name="Windows.CryptUnregisterOIDInfo">
    <summary>The <b>CryptUnregisterOIDInfo</b> function removes the registration of a specified<see cref="CRYPT_OID_INFO" /> OID information structure. The structure to be unregistered is identified by the structure's <b>pszOID</b> and <b>dwGroupId</b> members.</summary>
    <param name="pInfo">Specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) information for which the registration is to be removed. The group that the registration is removed for is specified by the <b>dwGroupId</b> member in the <i>pInfo</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero (TRUE).</para>
      <para>If the function fails, the return value is zero (FALSE).</para>
    </returns>
  </member>
  <member name="Windows.CryptVerifyCertificateSignature">
    <summary>The <b>CryptVerifyCertificateSignature</b> function verifies the signature of a certificate, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a> (CRL), or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate request</a> by using the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> in a<see cref="CERT_PUBLIC_KEY_INFO" /> structure. The function does not require access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>.</summary>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) used to verify the signature.This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>
        <b>NULL</b> is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in <b>NULL</b> causes the default RSA or DSS provider to be acquired.</para>
    </param>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encrypt the subject. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies <a href="https://docs.microsoft.com//windows/desktop/SecGloss/x-gly">X.509</a> certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="pbEncoded">A pointer to an encoded <a href="https://docs.microsoft.com//windows/desktop/SecGloss/b-gly">BLOB</a> of <see cref="CERT_SIGNED_CONTENT_INFO" /> content on which the signature is to be verified.</param>
    <param name="cbEncoded">The size, in bytes, of the encoded content in <i>pbEncoded</i>.</param>
    <param name="pPublicKey">A pointer to a<see cref="CERT_PUBLIC_KEY_INFO" /> structure that contains the public key to use when verifying the signature.</param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptImportKey" />, <see cref="CryptVerifySignature" />, and <see cref="CryptHashData" /> may be propagated to this function.</div>On failure, this function will cause the following error codes to be returned from <see cref="GetLastError" />.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_FILE_NOT_FOUND</b></term></listheader></list></description><description>Invalid certificate encoding type. Currently only <b>X509_ASN_ENCODING</b> is supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>NTE_BAD_ALGID</b></term></listheader></list></description><description>The signature algorithm's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) does not map to a known or supported <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> algorithm.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>NTE_BAD_SIGNATURE</b></term></listheader></list></description><description>The signature was not valid.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptVerifyCertificateSignatureEx">
    <summary>The <b>CryptVerifyCertificateSignatureEx</b> function verifies the signature of a subject certificate, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate revocation list</a>, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate request</a>, or keygen request by using the issuer's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>. The function does not require access to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private key</a>.</summary>
    <param name="hCryptProv">
      <para>This parameter is not used and should be set to <b>NULL</b>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> used to verify the signature.This parameter's data type is <b>HCRYPTPROV</b>.</para>
      <para>
        <b>NULL</b> is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in <b>NULL</b> causes the default RSA or DSS provider to be acquired.</para>
    </param>
    <param name="dwCertEncodingType">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate encoding type</a> that was used to encrypt the subject. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding type</a> identifier, contained in the high <b>WORD</b> of this value, is ignored by this function.</para>
      <para>This parameter can be the following currently defined certificate encoding type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>X509_ASN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies X.509 certificate encoding.</description>
        </listheader>
      </list>
    </param>
    <param name="dwSubjectType">
      <para>The subject type. This parameter can be one of the following subject types.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSubject</i> is a pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT</b>
                </term>
              </listheader>
              <listheader>
                <term>2 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSubject</i> is a pointer to a <see cref="CCERT_CONTEXT" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL</b>
                </term>
              </listheader>
              <listheader>
                <term>3 (0x3)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSubject</i> is a pointer to a <see cref="CCRL_CONTEXT" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE</b>
                </term>
              </listheader>
              <listheader>
                <term>4 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvSubject</i> is a pointer to an <see cref="OCSP_BASIC_SIGNED_RESPONSE_INFO" /> structure.<para><b>Windows Server 2003 and Windows XP:  </b>This subject type is not supported.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvSubject">A pointer to a structure of the type indicated by <i>dwSubjectType</i> that contains the signature to be verified.</param>
    <param name="dwIssuerType">
      <para>The issuer type. This parameter can be one of the following issuer types.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY</b>
                </term>
              </listheader>
              <listheader>
                <term>1 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvIssuer</i> is a pointer to a <see cref="CERT_PUBLIC_KEY_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT</b>
                </term>
              </listheader>
              <listheader>
                <term>2 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvIssuer</i> is a pointer to a <see cref="CCERT_CONTEXT" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>3 (0x3)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvIssuer</i> is a pointer to a <see cref="CCERT_CHAIN_CONTEXT" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>4 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pvIssuer</i> must be <b>NULL</b>.</description>
        </listheader>
      </list> <div><b>Note</b>  If <i>dwIssuerType</i> is <b>CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL</b> and the signature algorithm is a hashing algorithm, the signature is expected to contain only unencrypted hash octets. Only <b>CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL</b> can be specified in this nonencrypted signature case. If any other <i>dwIssuerType</i> is specified, verification fails and <see cref="GetLastError" /> returns E_INVALIDARG.</div></param>
    <param name="pvIssuer">A pointer to a structure of the type indicated by the value of <i>dwIssuerType</i>. The structure contains access to the public key needed to verify the signature.</param>
    <param name="dwFlags">
      <para>Flags that modify the function behavior. This can be zero or a bitwise <b>OR</b> of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>If you set this flag and <b>CryptVerifyCertificateSignatureEx</b> detects an MD2 or MD4 algorithm, the function returns <b>FALSE</b> and sets <see cref="GetLastError" /> to <b>NTE_BAD_ALGID</b>. The signature is still verified, but this combination of errors enables the caller, now knowing that an MD2 or MD4 algorithm was used, to decide whether to trust or reject the signature.<para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Sets strong signature properties, after successful verification, on the subject pointed to by the <i>pvSubject</i> parameter.<para>The following property is set on the certificate context:</para><list type="bullet"><item><description><b>CERT_SIGN_HASH_CNG_ALG_PROP_ID</b></description></item></list>The following properties are set on the CRL context:<list type="bullet"><item><description><b>CERT_SIGN_HASH_CNG_ALG_PROP_ID</b></description></item><item><description><b>CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID</b></description></item></list><div><b>Note</b>  This flag is only applicable if <b>CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL</b> is specified in the <i>dwSubjectType</i> parameter.</div><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Returns a pointer to a <see cref="CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO" /> structure in the <i>pvExtra</i> parameter. The structure contains the length, in bits, of the public key and the names of the signing and hashing algorithms used.<para>You must call <see cref="CryptMemFree" /> to free the structure. If memory cannot be allocated for the <see cref="CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO" /> structure, this function returns successfully but sets the <i>pvExtra</i> parameter to <b>NULL</b>.</para><div><b>Note</b>  This flag is only applicable if <b>CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE</b> is specified in the <i>dwSubjectType</i> parameter.</div><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</description>
        </listheader>
      </list>
    </param>
    <param name="pvExtra">
      <para>Pointer to a <see cref="CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO" /> structure if the <i>dwFlags</i> parameter is set to <b>CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG</b>.</para>
      <para>You must call <see cref="CryptMemFree" /> to free the structure.</para>
    </param>
    <returns>
      <para>Returns nonzero if successful or zero otherwise.</para>
      <para>For extended error information, call<see cref="GetLastError" />.</para>
      <div>
        <b>Note</b>  Errors from the called functions <see cref="CryptCreateHash" />, <see cref="CryptImportKey" />, <see cref="CryptVerifySignature" />, and <see cref="CryptHashData" /> may be propagated to this function.</div>On failure, this function will cause the following error codes to be returned from <see cref="GetLastError" />.<list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>ERROR_FILE_NOT_FOUND</b></term></listheader></list></description><description>Invalid certificate encoding type. Currently only <b>X509_ASN_ENCODING</b> is supported.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>NTE_BAD_ALGID</b></term></listheader></list></description><description>The signature algorithm's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) does not map to a known or supported <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash</a> algorithm.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>NTE_BAD_SIGNATURE</b></term></listheader></list></description><description>The signature was not valid.</description></listheader></list> <para>If the function fails, <see cref="GetLastError" /> may return an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Abstract Syntax Notation One</a> (ASN.1) encoding/decoding error. For information about these errors, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/asn-1-encoding-decoding-return-values">ASN.1 Encoding/Decoding Return Values</a>.</para></returns>
  </member>
  <member name="Windows.CryptVerifyMessageSignatureWithKey">
    <summary>The <b>CryptVerifyMessageSignatureWithKey</b> function verifies a signed message's signature by using specified public key information.</summary>
    <param name="pVerifyPara">A pointer to a<see cref="CRYPT_KEY_VERIFY_MESSAGE_PARA" /> structure that contains verification parameters.</param>
    <param name="pPublicKeyInfo">A pointer to a <see cref="CERT_PUBLIC_KEY_INFO" /> structure that contains the public key that is used to verify the signed message. If <b>NULL</b>, the signature is not verified.</param>
    <param name="pbSignedBlob">A pointer to a buffer that contains the signed message.</param>
    <param name="cbSignedBlob">The size, in bytes, of the signed message buffer.</param>
    <param name="pbDecoded">
      <para>A pointer to a buffer to receive the decoded message.</para>
      <para>This parameter can be <b>NULL</b> if the decoded message is not needed for additional processing or to set the size of the message for memory allocation purposes. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecCrypto/retrieving-data-of-unknown-length">Retrieving Data of Unknown Length</a>.</para>
    </param>
    <param name="pcbDecoded">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pbDecoded</i> buffer. When the function returns, this <b>DWORD</b> contains the size, in bytes, of the decoded message. The decoded message will not be returned if this parameter is <b>NULL</b>.</para>
      <div>
        <b>Note</b>  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.</div>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The following table shows the error codes most commonly returned by the<see cref="GetLastError" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_MORE_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the buffer specified by the <i>pbDecoded</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbDecoded</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported. Invalid <b>cbSize</b> in *<i>pVerifyPara</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_UNEXPECTED_MSG_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not a signed cryptographic message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_E_NO_SIGNER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message does not have any signers or a signer for the specified <i>dwSignerIndex</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_ALGID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message was hashed and signed by using an unknown or unsupported algorithm.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The message's signature was not verified.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptVerifySignature">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptVerifySignature</b> function verifies the signature of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create the handle of a hash object.<see cref="CryptHashData" /> or<see cref="CryptHashSessionKey" /> is then used to add data or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> to the hash object.</para><para>After <b>CryptVerifySignature</b> completes, only<see cref="CryptDestroyHash" /> can be called by using the <i>hHash</i> handle.</para></summary>
    <param name="hHash">A handle to the hash object to verify.</param>
    <param name="pbSignature">The address of the signature data to be verified.</param>
    <param name="dwSigLen">The number of bytes in the <i>pbSignature</i> signature data.</param>
    <param name="hPubKey">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> to use to authenticate the signature. This public key must belong to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pair</a> that was originally used to create the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a>.</param>
    <param name="szDescription">This parameter should no longer be used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is used with RSA providers. When verifying the signature, the hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not expected to be present or checked. If this flag is not set, the hash OID in the default signature is verified as specified in the definition of DigestInfo in PKCS #7.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use X.931 support for the FIPS 186-2–compliant version of RSA (rDSA).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hPubKey</i> parameter does not contain a handle to a valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The signature was not valid. This might be because the data itself has changed, the description string did not match, or the wrong public key was specified by <i>hPubKey</i>.<para>This error can also be returned if the hashing or signature algorithms do not match the ones used to create the signature.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptVerifySignatureA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptVerifySignature</b> function verifies the signature of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create the handle of a hash object.<see cref="CryptHashData" /> or<see cref="CryptHashSessionKey" /> is then used to add data or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> to the hash object.</para><para>After <b>CryptVerifySignature</b> completes, only<see cref="CryptDestroyHash" /> can be called by using the <i>hHash</i> handle.</para></summary>
    <param name="hHash">A handle to the hash object to verify.</param>
    <param name="pbSignature">The address of the signature data to be verified.</param>
    <param name="dwSigLen">The number of bytes in the <i>pbSignature</i> signature data.</param>
    <param name="hPubKey">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> to use to authenticate the signature. This public key must belong to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pair</a> that was originally used to create the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a>.</param>
    <param name="szDescription">This parameter should no longer be used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is used with RSA providers. When verifying the signature, the hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not expected to be present or checked. If this flag is not set, the hash OID in the default signature is verified as specified in the definition of DigestInfo in PKCS #7.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use X.931 support for the FIPS 186-2–compliant version of RSA (rDSA).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hPubKey</i> parameter does not contain a handle to a valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The signature was not valid. This might be because the data itself has changed, the description string did not match, or the wrong public key was specified by <i>hPubKey</i>.<para>This error can also be returned if the hashing or signature algorithms do not match the ones used to create the signature.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptVerifySignatureW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptVerifySignature</b> function verifies the signature of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create the handle of a hash object.<see cref="CryptHashData" /> or<see cref="CryptHashSessionKey" /> is then used to add data or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> to the hash object.</para><para>After <b>CryptVerifySignature</b> completes, only<see cref="CryptDestroyHash" /> can be called by using the <i>hHash</i> handle.</para></summary>
    <param name="hHash">A handle to the hash object to verify.</param>
    <param name="pbSignature">The address of the signature data to be verified.</param>
    <param name="dwSigLen">The number of bytes in the <i>pbSignature</i> signature data.</param>
    <param name="hPubKey">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> to use to authenticate the signature. This public key must belong to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pair</a> that was originally used to create the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a>.</param>
    <param name="szDescription">This parameter should no longer be used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is used with RSA providers. When verifying the signature, the hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not expected to be present or checked. If this flag is not set, the hash OID in the default signature is verified as specified in the definition of DigestInfo in PKCS #7.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use X.931 support for the FIPS 186-2–compliant version of RSA (rDSA).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hPubKey</i> parameter does not contain a handle to a valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The signature was not valid. This might be because the data itself has changed, the description string did not match, or the wrong public key was specified by <i>hPubKey</i>.<para>This error can also be returned if the hashing or signature algorithms do not match the ones used to create the signature.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptVerifySignature">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptVerifySignature</b> function verifies the signature of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create the handle of a hash object.<see cref="CryptHashData" /> or<see cref="CryptHashSessionKey" /> is then used to add data or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> to the hash object.</para><para>After <b>CryptVerifySignature</b> completes, only<see cref="CryptDestroyHash" /> can be called by using the <i>hHash</i> handle.</para></summary>
    <param name="hHash">A handle to the hash object to verify.</param>
    <param name="pbSignature">The address of the signature data to be verified.</param>
    <param name="dwSigLen">The number of bytes in the <i>pbSignature</i> signature data.</param>
    <param name="hPubKey">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> to use to authenticate the signature. This public key must belong to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pair</a> that was originally used to create the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a>.</param>
    <param name="szDescription">This parameter should no longer be used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is used with RSA providers. When verifying the signature, the hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not expected to be present or checked. If this flag is not set, the hash OID in the default signature is verified as specified in the definition of DigestInfo in PKCS #7.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use X.931 support for the FIPS 186-2–compliant version of RSA (rDSA).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hPubKey</i> parameter does not contain a handle to a valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The signature was not valid. This might be because the data itself has changed, the description string did not match, or the wrong public key was specified by <i>hPubKey</i>.<para>This error can also be returned if the hashing or signature algorithms do not match the ones used to create the signature.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptVerifySignatureA">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptVerifySignature</b> function verifies the signature of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create the handle of a hash object.<see cref="CryptHashData" /> or<see cref="CryptHashSessionKey" /> is then used to add data or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> to the hash object.</para><para>After <b>CryptVerifySignature</b> completes, only<see cref="CryptDestroyHash" /> can be called by using the <i>hHash</i> handle.</para></summary>
    <param name="hHash">A handle to the hash object to verify.</param>
    <param name="pbSignature">The address of the signature data to be verified.</param>
    <param name="dwSigLen">The number of bytes in the <i>pbSignature</i> signature data.</param>
    <param name="hPubKey">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> to use to authenticate the signature. This public key must belong to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pair</a> that was originally used to create the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a>.</param>
    <param name="szDescription">This parameter should no longer be used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is used with RSA providers. When verifying the signature, the hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not expected to be present or checked. If this flag is not set, the hash OID in the default signature is verified as specified in the definition of DigestInfo in PKCS #7.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use X.931 support for the FIPS 186-2–compliant version of RSA (rDSA).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hPubKey</i> parameter does not contain a handle to a valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The signature was not valid. This might be because the data itself has changed, the description string did not match, or the wrong public key was specified by <i>hPubKey</i>.<para>This error can also be returned if the hashing or signature algorithms do not match the ones used to create the signature.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptVerifySignatureW">
    <summary>
      <div>
        <b>Important</b>  This API is deprecated. New and existing software should start using <a href="https://docs.microsoft.com//windows/desktop/SecCNG/cng-portal">Cryptography Next Generation APIs.</a> Microsoft may remove this API in future releases.</div>The <b>CryptVerifySignature</b> function verifies the signature of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/h-gly">hash object</a>.<para>Before calling this function,<see cref="CryptCreateHash" /> must be called to create the handle of a hash object.<see cref="CryptHashData" /> or<see cref="CryptHashSessionKey" /> is then used to add data or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">session keys</a> to the hash object.</para><para>After <b>CryptVerifySignature</b> completes, only<see cref="CryptDestroyHash" /> can be called by using the <i>hHash</i> handle.</para></summary>
    <param name="hHash">A handle to the hash object to verify.</param>
    <param name="pbSignature">The address of the signature data to be verified.</param>
    <param name="dwSigLen">The number of bytes in the <i>pbSignature</i> signature data.</param>
    <param name="hPubKey">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a> to use to authenticate the signature. This public key must belong to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/k-gly">key pair</a> that was originally used to create the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">digital signature</a>.</param>
    <param name="szDescription">This parameter should no longer be used and must be set to <b>NULL</b> to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider.</param>
    <param name="dwFlags">
      <para>The following flag values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_NOHASHOID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>This flag is used with RSA providers. When verifying the signature, the hash <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID) is not expected to be present or checked. If this flag is not set, the hash OID in the default signature is verified as specified in the definition of DigestInfo in PKCS #7.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_TYPE2_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>This flag is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CRYPT_X931_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Use X.931 support for the FIPS 186-2–compliant version of RSA (rDSA).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. For extended error information, call<see cref="GetLastError" />.</para>
      <para>The error codes prefaced by "NTE" are generated by the particular CSP you are using. Some possible error codes follow.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters specifies a handle that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters contains a value that is not valid. This is most often a pointer that is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_FLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwFlags</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_HASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The hash object specified by the <i>hHash</i> parameter is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hPubKey</i> parameter does not contain a handle to a valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">public key</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_SIGNATURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The signature was not valid. This might be because the data itself has changed, the description string did not match, or the wrong public key was specified by <i>hPubKey</i>.<para>This error can also be returned if the hashing or signature algorithms do not match the ones used to create the signature.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_BAD_UID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) context that was specified when the hash object was created cannot be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NTE_NO_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CSP ran out of memory during the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CryptVerifyTimeStampSignature">
    <summary>The <b>CryptVerifyTimeStampSignature</b> function validates the time stamp signature on a specified array of bytes.</summary>
    <param name="pbTSContentInfo">A pointer to a buffer that contains time stamp content.</param>
    <param name="cbTSContentInfo">The size, in bytes, of the buffer pointed to by the <i>pbTSContentInfo</i> parameter.</param>
    <param name="pbData">A pointer to an array of bytes on which to validate the time stamp signature.</param>
    <param name="cbData">The size, in bytes, of the array pointed to by the <i>pbData</i> parameter.</param>
    <param name="hAdditionalStore">The handle of an additional store to search for supporting Time Stamping Authority (TSA) signing certificates and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate trust lists</a> (CTLs). This parameter can be <b>NULL</b> if no additional store is to be searched.</param>
    <param name="ppTsContext">A pointer to a <see cref="PCRYPT_TIMESTAMP_CONTEXT" /> structure. When you have finished using the context, you must free it by calling the <see cref="CryptMemFree" /> function.</param>
    <param name="ppTsSigner">
      <para>A pointer to a <see cref="PCERT_CONTEXT" /> that receives the certificate of the signer. When you have finished using this structure, you must free it by passing this pointer to the <see cref="CertFreeCertificateContext" /> function.</para>
      <para>Set this parameter to <b>NULL</b> if the TSA signer's certificate is not needed.</para>
    </param>
    <param name="phStore">
      <para>A pointer to a handle that receives the certificate store opened on CMS to search for supporting certificates.</para>
      <para>This parameter can be <b>NULL</b> if the TSA supporting certificates are not needed. When you have finished using this handle, you must release it by passing it to the <see cref="CertCloseStore" /> function.</para>
    </param>
    <returns>If the function succeeds, the function returns <b>TRUE</b>. For extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.PFXExportCertStore">
    <summary>The <b>PFXExportCertStore</b> function exports the certificates and, if available, the associated private keys from the referenced certificate store. This is an old function kept for compatibility with Internet Explorer 4.0 clients. New applications should use the<see cref="PfxExportCertStoreEx" /> function that provides enhanced private key security.</summary>
    <param name="hStore">Handle of the certificate store containing the certificates to be exported.</param>
    <param name="pPFX">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure to contain the PFX packet with the exported certificates and keys. If <i>pPFX</i>-&gt;<i>pbData</i> is <b>NULL</b>, the function calculates the number of bytes needed for the encoded BLOB and returns this in <i>pPFX</i>-&gt;<i>cbData</i>. When the function is called with <i>pPFX</i>-&gt;<i>pbData</i> pointing to an allocated buffer of the needed size, the function copies the encoded bytes into the buffer and updates <i>pPFX</i>-&gt;<i>cbData</i> with the encode byte length.</param>
    <param name="szPassword">String password used to encrypt and verify the PFX packet. When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</param>
    <param name="dwFlags">
      <para>Flag values can be set to any combination of the following.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXPORT_PRIVATE_KEYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Private keys are exported as well as the certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REPORT_NO_PRIVATE_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a certificate is encountered that has no associated private key, the function returns <b>FALSE</b> with the last error set to either CRYPT_E_NOT_FOUND or NTE_NO_KEY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If a certificate is encountered that has a non-exportable private key, the function returns <b>FALSE</b> and the last error set to NTE_BAD_KEY, NTE_BAD_KEY_STATE, or NTE_PERM.</description>
        </listheader>
      </list>
    </param>
    <returns>Returns <b>TRUE</b> (nonzero) if the function succeeds, and <b>FALSE</b> (zero) if the function fails. For extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.PFXExportCertStoreEx">
    <summary>The <b>PFXExportCertStoreEx</b> function exports the certificates and, if available, their associated private keys from the referenced certificate store. This function replaces the older<see cref="PfxExportCertStore" /> function. It should be used for its enhanced private key security. The PFX BLOB created by this function is protected by a password.</summary>
    <param name="hStore">Handle of the certificate store containing the certificates to be exported.</param>
    <param name="pPFX">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure to contain the PFX packet with the exported certificates and keys. If <i>pPFX</i>-&gt;<i>pbData</i> is <b>NULL</b>, the function calculates the number of bytes needed for the encoded BLOB and returns this in <i>pPFX</i>-&gt;<i>cbData</i>. When the function is called with <i>pPFX</i>-&gt;<i>pbData</i> pointing to an allocated buffer of the needed size, the function copies the encoded bytes into the buffer and updates <i>pPFX</i>-&gt;<i>cbData</i> with the encode byte length.</param>
    <param name="szPassword">String password used to encrypt and verify the PFX packet. When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</param>
    <param name="pvPara">
      <para>This parameter must be <b>NULL</b> if the <i>dwFlags</i> parameter does not contain <b>PKCS12_PROTECT_TO_DOMAIN_SIDS</b> or <b>PKCS12_EXPORT_PBES2_PARAMS</b>. Prior to Windows 8 and Windows Server 2012, therefore, this parameter must be <b>NULL</b>.</para>
      <para>Beginning with Windows 8 and Windows Server 2012, if the <i>dwFlags</i> parameter contains <b>PKCS12_PROTECT_TO_DOMAIN_SIDS</b>, you can set the <i>pvPara</i> parameter to point to an <b>NCRYPT_DESCRIPTOR_HANDLE</b> value to identify which Active Directory principal the PFX password will be protected to inside of the PFX BLOB. Currently, the password can be protected to an Active Directory user, computer, or group. For more information about protection descriptors, see <see cref="NCryptCreateProtectionDescriptor" />.</para>
      <para>Beginning with Windows 10 1709 (Fall Creators update) and Windows Server 2019, if the <i>dwFlags</i> parameter contains <b>PKCS12_EXPORT_PBES2_PARAMS</b>, you should set the <i>pvPara</i> to an <b><see cref="PKCS12_EXPORT_PBES2_PARAMS" /></b> value to select the password-based encryption algorithm to use.</para>
    </param>
    <param name="dwFlags">
      <para>Flag values can be set to any combination of the following.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXPORT_PRIVATE_KEYS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Private keys are exported as well as the certificates.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REPORT_NO_PRIVATE_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>If a certificate is encountered that has no associated private key, the function returns FALSE with the last error set to either CRYPT_E_NOT_FOUND or NTE_NO_KEY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>If a certificate is encountered that has a non-exportable private key, the function returns FALSE and the last error set to NTE_BAD_KEY, NTE_BAD_KEY_STATE, or NTE_PERM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PKCS12_INCLUDE_EXTENDED_PROPERTIES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Export all extended properties on the certificate.<para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PKCS12_PROTECT_TO_DOMAIN_SIDS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The PFX BLOB contains an embedded password that will be protected to the Active Directory (AD) protection descriptor pointed to by the <i>pvPara</i> parameter. If the <i>szPassword</i> parameter is not <b>NULL</b> or empty, the specified password is protected. If, however, the <i>szPassword</i> parameter is <b>NULL</b> or an empty string, a random forty (40) character password is created and protected.<para><see cref="PFXImportCertStore" /> uses the specified protection descriptor to decrypt the embedded password, whether specified by the user or randomly generated, and then uses the password to decrypt the PFX BLOB.</para><para><b>Windows 8 and Windows Server 2012:  </b>Support for this flag begins.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PKCS12_EXPORT_PBES2_PARAMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Export using the passowrd-based encryption algorithm specified by the <b><see cref="PKCS12_EXPORT_PBES2_PARAMS" /></b> value passed as <i>pvPara</i>.<para><b>Windows 10 1709 (Fall Creators update) and Windows Server 2019:  </b>Support for this flag begins.</para></description>
        </listheader>
      </list>
    </param>
    <returns>Returns <b>TRUE</b> (nonzero) if the function succeeds, and <b>FALSE</b> (zero) if the function fails. For extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.PFXIsPFXBlob">
    <summary>The <b>PFXIsPFXBlob</b> function attempts to decode the outer layer of a BLOB as a PFX packet.</summary>
    <param name="pPFX">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure that the function will attempt to decode as a PFX packet.</param>
    <returns>The function returns <b>TRUE</b> if the BLOB can be decoded as a PFX packet. If the outer layer of the BLOB cannot be decoded as a PFX packet, the function returns <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.PFXVerifyPassword">
    <summary>
      <para>The <b>PFXVerifyPassword</b> function attempts to decode the outer layer of a BLOB as a Personal Information Exchange (PFX) packet and to decrypt it with the given password. No data from the BLOB is imported.</para>
      <para>The PFX format is also known as the Public-Key Cryptography Standards #12 (PKCS #12) format.</para>
    </summary>
    <param name="pPFX">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa381414(v=vs.85)">CRYPT_DATA_BLOB</a> structure that the function will attempt to decode as a PFX packet.</param>
    <param name="szPassword">
      <para>String password to be checked. For this function to succeed, this password must be exactly the same as the password used to encrypt the packet.</para>
      <para>If you set this value to an empty string or <b>NULL</b>, this function typically attempts to decrypt the password embedded in the PFX BLOB by using the empty string or <b>NULL</b>.</para>
      <para>However, beginning with Windows 8 and Windows Server 2012, if a <b>NULL</b> or empty password was specified when the PFX BLOB was created and the application also specified that the password should be protected to an Active Directory (AD) principal, the Cryptography API (CAPI) randomly generates a password, encrypts it to the AD principal and embeds it in the PFX BLOB. The <b>PFXVerifyPassword</b> function will then try to use the specified AD principal (current user, computer, or AD group member) to decrypt the password. For more information about protecting PFX to an AD principal, see the <i>pvPara</i> parameter and the <b>PKCS12_PROTECT_TO_DOMAIN_SIDS</b> flag of the <see cref="PFXExportCertStoreEx" /> function.</para>
      <para>When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="dwFlags">Reserved for future use.</param>
    <returns>The function return <b>TRUE</b> if the password appears correct; otherwise, it returns <b>FALSE</b>.</returns>
  </member>
</doc>