<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="CRYPT_SIGN_MESSAGE_PARA">
    <summary>
      <para>The <b>CRYPT_SIGN_MESSAGE_PARA</b> structure contains information for signing messages using a specified signing <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">certificate context</a>.</para>
    </summary>
    <remarks>
      <para>The <b>HashEncryptionAlgorithm</b> and <b>pvHashEncryptionAuxInfo</b> members can only be used if CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS is defined.</para>
    </remarks>
    <seealso cref="CERT_CONTEXT" />
    <seealso cref="CRL_CONTEXT" />
    <seealso cref="CRYPT_ALGORITHM_IDENTIFIER" />
    <seealso cref="CRYPT_ATTRIBUTE" />
    <seealso cref="CryptSignAndEncryptMessage" />
    <seealso cref="CryptSignMessage" />
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.cbSize">
    <summary>
      <para>Size of this structure in bytes.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.dwMsgEncodingType">
    <summary>
      <para>Type of encoding used. It is always acceptable to specify both the certificate and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/m-gly">message encoding types</a> by combining them with a bitwise-<b>OR</b> operation as shown in the following example:</para>
      <para>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING</para>
      <para>Currently defined encoding types are:</para>
      <list type="bullet">
        <item>
          <description>X509_ASN_ENCODING</description>
        </item>
        <item>
          <description>PKCS_7_ASN_ENCODING</description>
        </item>
      </list>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.pSigningCert">
    <summary>
      <para>A pointer to the
<see cref="CERT_CONTEXT" /> to be used in the signing.</para>
      <para>Either the CERT_KEY_PROV_INFO_PROP_ID, or CERT_KEY_CONTEXT_PROP_ID property must be set for the context to provide access to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">private signature key</a>.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.HashAlgorithm">
    <summary>
      <para>CRYPT_ALGORITHM_IDENTIFIER containing the hashing algorithm used to hash the data to be signed.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.pvHashAuxInfo">
    <summary>
      <para>Not currently used, and must be set to <b>NULL</b>.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.cMsgCert">
    <summary>
      <para>Number of elements in the <b>rgpMsgCert</b> array of
<see cref="CERT_CONTEXT" /> structures. If set to zero no certificates are included in the signed message.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.rgpMsgCert">
    <summary>
      <para>Array of pointers to <see cref="CERT_CONTEXT" /> structures to be included in the signed message. If the <b>pSigningCert</b> is to be included, a pointer to it must be in the <b>rgpMsgCert</b> array.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.cMsgCrl">
    <summary>
      <para>Number of elements in the <b>rgpMsgCrl</b> array of pointers to
<see cref="CRL_CONTEXT" /> structures. If set to zero, no <b>CRL_CONTEXT</b> structures are included in the signed message.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.rgpMsgCrl">
    <summary>
      <para>Array of pointers to <see cref="CRL_CONTEXT" /> structures to be included in the signed message.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.cAuthAttr">
    <summary>
      <para>Number of elements in the <b>rgAuthAttr</b> array. If no authenticated attributes are present in <b>rgAuthAttr</b>, this member is set to zero.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.rgAuthAttr">
    <summary>
      <para>Array of pointers to
<see cref="CRYPT_ATTRIBUTE" /> structures, each holding authenticated attribute information. If there are authenticated attributes present, the PKCS #9 standard dictates that there must be at least two attributes present, the content type <a href="https://docs.microsoft.com//windows/desktop/SecGloss/o-gly">object identifier</a> (OID), and the hash of the message itself. These attributes are automatically added by the system.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.cUnauthAttr">
    <summary>
      <para>Number of elements in the <b>rgUnauthAttr</b> array. If no unauthenticated attributes are present in <b>rgUnauthAttr</b>, this member is zero.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.rgUnauthAttr">
    <summary>
      <para>Array of pointers to
<see cref="CRYPT_ATTRIBUTE" /> structures each holding an unauthenticated attribute information. Unauthenticated attributes can be used to contain <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">countersignatures</a>, among other uses.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.dwFlags">
    <summary>
      <para>Normally zero. If the encoded output is to be a CMSG_SIGNED <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a> of an outer cryptographic message such as a CMSG_ENVELOPED message, the CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG must be set. If it is not set, the message will be encoded as an <i>inner content</i> type of CMSG_DATA.</para>
      <para>CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG can be set to encapsulate non-data <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">inner content</a> into an OCTET STRING. CRYPT_MESSAGE_KEYID_SIGNER_FLAG can be set to identify signers by their Key Identifier and not their Issuer and Serial Number.</para>
      <para>CRYPT_MESSAGE_SILENT_KEYSET_FLAG can be set to suppress any UI by the CSP. For more information about the CRYPT_SILENT flag, see
<see cref="CryptAcquireContext" />.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.dwInnerContentType">
    <summary>
      <para>Normally zero. Set to the encoding type of the input message if that input to be signed is the encoded output of another cryptographic message.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.HashEncryptionAlgorithm">
    <summary>
      <para>A
<see cref="CRYPT_ALGORITHM_IDENTIFIER" />. If present and not <b>NULL</b>, it is used instead of the signer's certificate <b>PublicKeyInfo.Algorithm</b> member. Note that for RSA, the hash encryption algorithm is normally the same as the public key algorithm. For DSA, the hash encryption algorithm is normally a DSS signature algorithm. This member can only be used if CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS is defined.</para>
    </summary>
  </member>
  <member name="CRYPT_SIGN_MESSAGE_PARA.pvHashEncryptionAuxInfo">
    <summary>
      <para>Currently not used and must be set to <b>NULL</b>. This member can only be used if CRYPT_SIGN_MESSAGE_PARA_HAS_CMS_FIELDS is defined.</para>
    </summary>
  </member>
</doc>