<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.MsiAdvertiseProduct">
    <summary>
      <para>The
<b>MsiAdvertiseProduct</b> function generates an advertise script or advertises a product to the computer. The
<b>MsiAdvertiseProduct</b> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<see cref="MsiAdvertiseProductEx" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-machine installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The installation language to use if the source supports multiple languages.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductA">
    <summary>
      <para>The
<b>MsiAdvertiseProduct</b> function generates an advertise script or advertises a product to the computer. The
<b>MsiAdvertiseProduct</b> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<see cref="MsiAdvertiseProductEx" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-machine installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The installation language to use if the source supports multiple languages.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductW">
    <summary>
      <para>The
<b>MsiAdvertiseProduct</b> function generates an advertise script or advertises a product to the computer. The
<b>MsiAdvertiseProduct</b> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<see cref="MsiAdvertiseProductEx" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-machine installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The installation language to use if the source supports multiple languages.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductEx">
    <summary>
      <para>The
<b>MsiAdvertiseProductEx</b> function generates an advertise script or advertises a product to the computer. This
function enables Windows Installer to write to a script  the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<b>MsiAdvertiseProductEx</b>. The <b>MsiAdvertiseProductEx</b> function provides the same functionality as
<see cref="MsiAdvertiseProduct" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-computer installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The language to use if the source supports multiple languages.</para>
    </param>
    <param name="dwPlatform">
      <para>Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as
<see cref="MsiAdvertiseProduct" />. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the current platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_X86</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x86 platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_IA64</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for Itanium-based systems.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_AMD64</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x64 platform.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIADVERTISEOPTIONS_INSTANCE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductExA">
    <summary>
      <para>The
<b>MsiAdvertiseProductEx</b> function generates an advertise script or advertises a product to the computer. This
function enables Windows Installer to write to a script  the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<b>MsiAdvertiseProductEx</b>. The <b>MsiAdvertiseProductEx</b> function provides the same functionality as
<see cref="MsiAdvertiseProduct" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-computer installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The language to use if the source supports multiple languages.</para>
    </param>
    <param name="dwPlatform">
      <para>Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as
<see cref="MsiAdvertiseProduct" />. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the current platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_X86</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x86 platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_IA64</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for Itanium-based systems.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_AMD64</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x64 platform.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIADVERTISEOPTIONS_INSTANCE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductExW">
    <summary>
      <para>The
<b>MsiAdvertiseProductEx</b> function generates an advertise script or advertises a product to the computer. This
function enables Windows Installer to write to a script  the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<b>MsiAdvertiseProductEx</b>. The <b>MsiAdvertiseProductEx</b> function provides the same functionality as
<see cref="MsiAdvertiseProduct" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-computer installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The language to use if the source supports multiple languages.</para>
    </param>
    <param name="dwPlatform">
      <para>Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as
<see cref="MsiAdvertiseProduct" />. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the current platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_X86</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x86 platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_IA64</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for Itanium-based systems.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_AMD64</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x64 platform.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIADVERTISEOPTIONS_INSTANCE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductEx">
    <summary>
      <para>The
<b>MsiAdvertiseProductEx</b> function generates an advertise script or advertises a product to the computer. This
function enables Windows Installer to write to a script  the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<b>MsiAdvertiseProductEx</b>. The <b>MsiAdvertiseProductEx</b> function provides the same functionality as
<see cref="MsiAdvertiseProduct" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-computer installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The language to use if the source supports multiple languages.</para>
    </param>
    <param name="dwPlatform">
      <para>Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as
<see cref="MsiAdvertiseProduct" />. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the current platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_X86</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x86 platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_IA64</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for Itanium-based systems.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_AMD64</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x64 platform.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIADVERTISEOPTIONS_INSTANCE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductExA">
    <summary>
      <para>The
<b>MsiAdvertiseProductEx</b> function generates an advertise script or advertises a product to the computer. This
function enables Windows Installer to write to a script  the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<b>MsiAdvertiseProductEx</b>. The <b>MsiAdvertiseProductEx</b> function provides the same functionality as
<see cref="MsiAdvertiseProduct" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-computer installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The language to use if the source supports multiple languages.</para>
    </param>
    <param name="dwPlatform">
      <para>Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as
<see cref="MsiAdvertiseProduct" />. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the current platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_X86</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x86 platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_IA64</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for Itanium-based systems.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_AMD64</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x64 platform.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIADVERTISEOPTIONS_INSTANCE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductExW">
    <summary>
      <para>The
<b>MsiAdvertiseProductEx</b> function generates an advertise script or advertises a product to the computer. This
function enables Windows Installer to write to a script  the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<b>MsiAdvertiseProductEx</b>. The <b>MsiAdvertiseProductEx</b> function provides the same functionality as
<see cref="MsiAdvertiseProduct" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to the script file to be created with the advertised information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-computer installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon–delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path–transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The language to use if the source supports multiple languages.</para>
    </param>
    <param name="dwPlatform">
      <para>Bit flags that control for which platform the installer should create the script. This parameter is ignored if <i>szScriptfilePath</i> is null. If <i>dwPlatform</i> is zero (0), then the script is created based on the current platform. This is the same functionality as
<see cref="MsiAdvertiseProduct" />. If <i>dwPlatform</i> is 1 or 2, the installer creates script for the specified platform.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the current platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_X86</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x86 platform.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_IA64</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for Itanium-based systems.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIARCHITECTUREFLAGS_AMD64</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a script for the x64 platform.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 and Windows XP with SP1 and later.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIADVERTISEOPTIONS_INSTANCE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Multiple instances through product code changing transform support flag. Advertises a new instance of the product. Requires that the <i>szTransforms</i> parameter includes the instance transform that changes the product code. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Multiple instances through product code–changing transforms is only available for Windows Installer versions shipping with   Windows Server 2003  and Windows XP with SP1 and later.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProduct">
    <summary>
      <para>The
<b>MsiAdvertiseProduct</b> function generates an advertise script or advertises a product to the computer. The
<b>MsiAdvertiseProduct</b> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<see cref="MsiAdvertiseProductEx" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-machine installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The installation language to use if the source supports multiple languages.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductA">
    <summary>
      <para>The
<b>MsiAdvertiseProduct</b> function generates an advertise script or advertises a product to the computer. The
<b>MsiAdvertiseProduct</b> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<see cref="MsiAdvertiseProductEx" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-machine installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The installation language to use if the source supports multiple languages.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiAdvertiseProductW">
    <summary>
      <para>The
<b>MsiAdvertiseProduct</b> function generates an advertise script or advertises a product to the computer. The
<b>MsiAdvertiseProduct</b> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using
<see cref="MsiAdvertiseProductEx" />.</para>
    </summary>
    <param name="szPackagePath">
      <para>The full path to the package of the product being advertised.</para>
    </param>
    <param name="szScriptfilePath">
      <para>The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set ADVERTISEFLAGS_MACHINEASSIGN or ADVERTISEFLAGS_USERASSIGN.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-machine installation of the product available to all users.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ADVERTISEFLAGS_USERASSIGN</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Set to advertise a per-user installation of the product available to a particular user.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szTransforms">
      <para>A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/secured-transforms">Secured Transforms</a>. This parameter may be null.</para>
    </param>
    <param name="lgidLanguage">
      <para>The installation language to use if the source supports multiple languages.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An initialization error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiAdvertiseScript">
    <summary>
      <para>The
<b>MsiAdvertiseScript</b> function copies an advertised script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="dwFlags">
      <para>The following bit flags from SCRIPTFLAGS control advertisement. The value of <i>dwFlags</i> can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_CACHEINFO</b>
                </description>
              </item>
              <item>
                <description>0x001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the icons need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_SHORTCUTS</b>
                </description>
              </item>
              <item>
                <description>0x004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the shortcuts need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0x008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the product to be assigned to a computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CNFGINFO</b>
                </description>
              </item>
              <item>
                <description>0x020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the configuration and management information in the registry data needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST</b>
                </description>
              </item>
              <item>
                <description>0x040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag to force validation of the transforms listed in the script against previously registered transforms for this product. Note that transform conflicts are detected using a string comparison that is case insensitive and are evaluated between per-user and per-machine installations across all contexts. If the list of transforms in the script does not match the transforms registered for the product, the function returns ERROR_INSTALL_TRANSFORM_FAILURE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CLASSINFO</b>
                </description>
              </item>
              <item>
                <description>0x080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to COM classes needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_EXTENSIONINFO</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to an extension needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_APPINFO</b>
                </description>
              </item>
              <item>
                <description>0x180</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA</b>
                </description>
              </item>
              <item>
                <description>0x1A0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phRegData">
      <para>A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
      <para>Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.</para>
    </param>
    <param name="fRemoveItems">
      <para>TRUE if specified items are to be removed instead of being created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function  is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
  </member>
  <member name="Windows.MsiAdvertiseScriptA">
    <summary>
      <para>The
<b>MsiAdvertiseScript</b> function copies an advertised script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="dwFlags">
      <para>The following bit flags from SCRIPTFLAGS control advertisement. The value of <i>dwFlags</i> can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_CACHEINFO</b>
                </description>
              </item>
              <item>
                <description>0x001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the icons need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_SHORTCUTS</b>
                </description>
              </item>
              <item>
                <description>0x004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the shortcuts need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0x008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the product to be assigned to a computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CNFGINFO</b>
                </description>
              </item>
              <item>
                <description>0x020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the configuration and management information in the registry data needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST</b>
                </description>
              </item>
              <item>
                <description>0x040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag to force validation of the transforms listed in the script against previously registered transforms for this product. Note that transform conflicts are detected using a string comparison that is case insensitive and are evaluated between per-user and per-machine installations across all contexts. If the list of transforms in the script does not match the transforms registered for the product, the function returns ERROR_INSTALL_TRANSFORM_FAILURE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CLASSINFO</b>
                </description>
              </item>
              <item>
                <description>0x080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to COM classes needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_EXTENSIONINFO</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to an extension needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_APPINFO</b>
                </description>
              </item>
              <item>
                <description>0x180</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA</b>
                </description>
              </item>
              <item>
                <description>0x1A0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phRegData">
      <para>A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
      <para>Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.</para>
    </param>
    <param name="fRemoveItems">
      <para>TRUE if specified items are to be removed instead of being created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function  is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
  </member>
  <member name="Windows.MsiAdvertiseScriptW">
    <summary>
      <para>The
<b>MsiAdvertiseScript</b> function copies an advertised script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="dwFlags">
      <para>The following bit flags from SCRIPTFLAGS control advertisement. The value of <i>dwFlags</i> can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_CACHEINFO</b>
                </description>
              </item>
              <item>
                <description>0x001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the icons need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_SHORTCUTS</b>
                </description>
              </item>
              <item>
                <description>0x004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the shortcuts need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0x008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the product to be assigned to a computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CNFGINFO</b>
                </description>
              </item>
              <item>
                <description>0x020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the configuration and management information in the registry data needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST</b>
                </description>
              </item>
              <item>
                <description>0x040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag to force validation of the transforms listed in the script against previously registered transforms for this product. Note that transform conflicts are detected using a string comparison that is case insensitive and are evaluated between per-user and per-machine installations across all contexts. If the list of transforms in the script does not match the transforms registered for the product, the function returns ERROR_INSTALL_TRANSFORM_FAILURE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CLASSINFO</b>
                </description>
              </item>
              <item>
                <description>0x080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to COM classes needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_EXTENSIONINFO</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to an extension needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_APPINFO</b>
                </description>
              </item>
              <item>
                <description>0x180</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA</b>
                </description>
              </item>
              <item>
                <description>0x1A0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phRegData">
      <para>A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
      <para>Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.</para>
    </param>
    <param name="fRemoveItems">
      <para>TRUE if specified items are to be removed instead of being created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function  is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
  </member>
  <member name="Windows.MsiAdvertiseScript">
    <summary>
      <para>The
<b>MsiAdvertiseScript</b> function copies an advertised script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="dwFlags">
      <para>The following bit flags from SCRIPTFLAGS control advertisement. The value of <i>dwFlags</i> can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_CACHEINFO</b>
                </description>
              </item>
              <item>
                <description>0x001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the icons need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_SHORTCUTS</b>
                </description>
              </item>
              <item>
                <description>0x004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the shortcuts need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0x008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the product to be assigned to a computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CNFGINFO</b>
                </description>
              </item>
              <item>
                <description>0x020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the configuration and management information in the registry data needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST</b>
                </description>
              </item>
              <item>
                <description>0x040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag to force validation of the transforms listed in the script against previously registered transforms for this product. Note that transform conflicts are detected using a string comparison that is case insensitive and are evaluated between per-user and per-machine installations across all contexts. If the list of transforms in the script does not match the transforms registered for the product, the function returns ERROR_INSTALL_TRANSFORM_FAILURE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CLASSINFO</b>
                </description>
              </item>
              <item>
                <description>0x080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to COM classes needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_EXTENSIONINFO</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to an extension needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_APPINFO</b>
                </description>
              </item>
              <item>
                <description>0x180</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA</b>
                </description>
              </item>
              <item>
                <description>0x1A0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phRegData">
      <para>A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
      <para>Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.</para>
    </param>
    <param name="fRemoveItems">
      <para>TRUE if specified items are to be removed instead of being created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function  is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
  </member>
  <member name="Windows.MsiAdvertiseScriptA">
    <summary>
      <para>The
<b>MsiAdvertiseScript</b> function copies an advertised script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="dwFlags">
      <para>The following bit flags from SCRIPTFLAGS control advertisement. The value of <i>dwFlags</i> can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_CACHEINFO</b>
                </description>
              </item>
              <item>
                <description>0x001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the icons need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_SHORTCUTS</b>
                </description>
              </item>
              <item>
                <description>0x004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the shortcuts need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0x008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the product to be assigned to a computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CNFGINFO</b>
                </description>
              </item>
              <item>
                <description>0x020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the configuration and management information in the registry data needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST</b>
                </description>
              </item>
              <item>
                <description>0x040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag to force validation of the transforms listed in the script against previously registered transforms for this product. Note that transform conflicts are detected using a string comparison that is case insensitive and are evaluated between per-user and per-machine installations across all contexts. If the list of transforms in the script does not match the transforms registered for the product, the function returns ERROR_INSTALL_TRANSFORM_FAILURE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CLASSINFO</b>
                </description>
              </item>
              <item>
                <description>0x080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to COM classes needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_EXTENSIONINFO</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to an extension needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_APPINFO</b>
                </description>
              </item>
              <item>
                <description>0x180</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA</b>
                </description>
              </item>
              <item>
                <description>0x1A0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phRegData">
      <para>A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
      <para>Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.</para>
    </param>
    <param name="fRemoveItems">
      <para>TRUE if specified items are to be removed instead of being created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function  is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
  </member>
  <member name="Windows.MsiAdvertiseScriptW">
    <summary>
      <para>The
<b>MsiAdvertiseScript</b> function copies an advertised script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="dwFlags">
      <para>The following bit flags from SCRIPTFLAGS control advertisement. The value of <i>dwFlags</i> can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_CACHEINFO</b>
                </description>
              </item>
              <item>
                <description>0x001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the icons need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_SHORTCUTS</b>
                </description>
              </item>
              <item>
                <description>0x004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the shortcuts need to be created or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_MACHINEASSIGN</b>
                </description>
              </item>
              <item>
                <description>0x008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the product to be assigned to a computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CNFGINFO</b>
                </description>
              </item>
              <item>
                <description>0x020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the configuration and management information in the registry data needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST</b>
                </description>
              </item>
              <item>
                <description>0x040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag to force validation of the transforms listed in the script against previously registered transforms for this product. Note that transform conflicts are detected using a string comparison that is case insensitive and are evaluated between per-user and per-machine installations across all contexts. If the list of transforms in the script does not match the transforms registered for the product, the function returns ERROR_INSTALL_TRANSFORM_FAILURE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_CLASSINFO</b>
                </description>
              </item>
              <item>
                <description>0x080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to COM classes needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_EXTENSIONINFO</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if advertisement information in the registry related to an extension needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA_APPINFO</b>
                </description>
              </item>
              <item>
                <description>0x180</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCRIPTFLAGS_REGDATA</b>
                </description>
              </item>
              <item>
                <description>0x1A0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include this flag if the advertisement information in the registry needs to be written or removed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phRegData">
      <para>A registry key under which temporary information about registry data is to be written. If this parameter is null, the registry data is placed under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-null, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
      <para>Note that this registry key cannot be used when generating an advertisement of a product for a user or a computer because the provider of the registry key generally deletes the key. The registry key is located outside of the normal registry locations for shell, class, and .msi configuration information and it is not under <b>HKEY_CLASSES_ROOT</b>. This registry key is only intended for getting temporary information about registry data in a script.</para>
    </param>
    <param name="fRemoveItems">
      <para>TRUE if specified items are to be removed instead of being created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function  is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
  </member>
  <member name="Windows.MsiApplyMultiplePatches">
    <summary>
      <para>The <b>MsiApplyMultiplePatches</b> function applies one or more patches to products eligible to receive the patches.
The <b>MsiApplyMultiplePatches</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property with a list of patches delimited by semicolons and invokes the patching of the target products. Other properties can be set using a properties list.</para>
    </summary>
    <param name="szPatchPackages">
      <para>A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "</para>
    </param>
    <param name="szProductCode">
      <para>This parameter is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.</para>
    </param>
    <param name="szPropertiesList">
      <para>A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.</para>
      <para>
        <b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</para>
    </param>
    <returns>
      <para>The <b>MsiApplyMultiplePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Some arguments passed in are incorrect or contradicting.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <see cref="MsiApplyMultiplePatches" /> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_INITIATED</b>
            </para>
          </description>
          <description>
            <para>The restart initiated by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All the target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>The restart required by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide is not a valid one.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>Any error in Winerror.h</b>
            </para>
          </description>
          <description>
            <para>Implies possible partial completion or that one or more transactions failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
  </member>
  <member name="Windows.MsiApplyMultiplePatchesA">
    <summary>
      <para>The <b>MsiApplyMultiplePatches</b> function applies one or more patches to products eligible to receive the patches.
The <b>MsiApplyMultiplePatches</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property with a list of patches delimited by semicolons and invokes the patching of the target products. Other properties can be set using a properties list.</para>
    </summary>
    <param name="szPatchPackages">
      <para>A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "</para>
    </param>
    <param name="szProductCode">
      <para>This parameter is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.</para>
    </param>
    <param name="szPropertiesList">
      <para>A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.</para>
      <para>
        <b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</para>
    </param>
    <returns>
      <para>The <b>MsiApplyMultiplePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Some arguments passed in are incorrect or contradicting.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <see cref="MsiApplyMultiplePatches" /> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_INITIATED</b>
            </para>
          </description>
          <description>
            <para>The restart initiated by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All the target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>The restart required by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide is not a valid one.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>Any error in Winerror.h</b>
            </para>
          </description>
          <description>
            <para>Implies possible partial completion or that one or more transactions failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
  </member>
  <member name="Windows.MsiApplyMultiplePatchesW">
    <summary>
      <para>The <b>MsiApplyMultiplePatches</b> function applies one or more patches to products eligible to receive the patches.
The <b>MsiApplyMultiplePatches</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property with a list of patches delimited by semicolons and invokes the patching of the target products. Other properties can be set using a properties list.</para>
    </summary>
    <param name="szPatchPackages">
      <para>A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "</para>
    </param>
    <param name="szProductCode">
      <para>This parameter is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.</para>
    </param>
    <param name="szPropertiesList">
      <para>A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.</para>
      <para>
        <b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</para>
    </param>
    <returns>
      <para>The <b>MsiApplyMultiplePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Some arguments passed in are incorrect or contradicting.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <see cref="MsiApplyMultiplePatches" /> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_INITIATED</b>
            </para>
          </description>
          <description>
            <para>The restart initiated by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All the target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>The restart required by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide is not a valid one.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>Any error in Winerror.h</b>
            </para>
          </description>
          <description>
            <para>Implies possible partial completion or that one or more transactions failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
  </member>
  <member name="Windows.MsiApplyMultiplePatches">
    <summary>
      <para>The <b>MsiApplyMultiplePatches</b> function applies one or more patches to products eligible to receive the patches.
The <b>MsiApplyMultiplePatches</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property with a list of patches delimited by semicolons and invokes the patching of the target products. Other properties can be set using a properties list.</para>
    </summary>
    <param name="szPatchPackages">
      <para>A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "</para>
    </param>
    <param name="szProductCode">
      <para>This parameter is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.</para>
    </param>
    <param name="szPropertiesList">
      <para>A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.</para>
      <para>
        <b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</para>
    </param>
    <returns>
      <para>The <b>MsiApplyMultiplePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Some arguments passed in are incorrect or contradicting.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <see cref="MsiApplyMultiplePatches" /> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_INITIATED</b>
            </para>
          </description>
          <description>
            <para>The restart initiated by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All the target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>The restart required by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide is not a valid one.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>Any error in Winerror.h</b>
            </para>
          </description>
          <description>
            <para>Implies possible partial completion or that one or more transactions failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
  </member>
  <member name="Windows.MsiApplyMultiplePatchesA">
    <summary>
      <para>The <b>MsiApplyMultiplePatches</b> function applies one or more patches to products eligible to receive the patches.
The <b>MsiApplyMultiplePatches</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property with a list of patches delimited by semicolons and invokes the patching of the target products. Other properties can be set using a properties list.</para>
    </summary>
    <param name="szPatchPackages">
      <para>A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "</para>
    </param>
    <param name="szProductCode">
      <para>This parameter is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.</para>
    </param>
    <param name="szPropertiesList">
      <para>A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.</para>
      <para>
        <b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</para>
    </param>
    <returns>
      <para>The <b>MsiApplyMultiplePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Some arguments passed in are incorrect or contradicting.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <see cref="MsiApplyMultiplePatches" /> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_INITIATED</b>
            </para>
          </description>
          <description>
            <para>The restart initiated by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All the target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>The restart required by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide is not a valid one.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>Any error in Winerror.h</b>
            </para>
          </description>
          <description>
            <para>Implies possible partial completion or that one or more transactions failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
  </member>
  <member name="Windows.MsiApplyMultiplePatchesW">
    <summary>
      <para>The <b>MsiApplyMultiplePatches</b> function applies one or more patches to products eligible to receive the patches.
The <b>MsiApplyMultiplePatches</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property with a list of patches delimited by semicolons and invokes the patching of the target products. Other properties can be set using a properties list.</para>
    </summary>
    <param name="szPatchPackages">
      <para>A  semicolon-delimited list of the paths to patch files as a single string. For example: ""c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp"   "</para>
    </param>
    <param name="szProductCode">
      <para>This parameter is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product to be patched. The user or application calling <b>MsiApplyMultiplePatches</b> must have privileges to apply patches. When this parameter is <b>NULL</b>, the patches are applied to all eligible products. When this parameter is non-<b>NULL</b>, the patches are applied only to the specified product.</para>
    </param>
    <param name="szPropertiesList">
      <para>A null-terminated string that specifies command–line property settings used during the patching of products. If there are no command–line property settings, pass in a <b>NULL</b> pointer. An empty string is  an invalid parameter. These properties are shared by all  target products. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>.</para>
      <para>
        <b>Note</b>  The properties list should not contain the  <a href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</a> property. If the <b>PATCH</b> property is set in the command line the value is ignored and is overwritten with the patches being applied.</para>
    </param>
    <returns>
      <para>The <b>MsiApplyMultiplePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Some arguments passed in are incorrect or contradicting.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed and all  products are successfully patched. <b>ERROR_SUCCESS</b> is returned only if all the  products eligible for the patches are patched successfully. If none of the new patches are applicable, <see cref="MsiApplyMultiplePatches" /> returns <b>ERROR_SUCCESS</b> and product state remains unchanged.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_INITIATED</b>
            </para>
          </description>
          <description>
            <para>The restart initiated by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All the target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS_REBOOT_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>The restart required by the last transaction terminated this call to <see cref="MsiApplyMultiplePatches" />. All target products may not have been patched.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages provide is not a valid one.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>One of the patch packages is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>Any error in Winerror.h</b>
            </para>
          </description>
          <description>
            <para>Implies possible partial completion or that one or more transactions failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiApplyMultiplePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/patch">PATCH</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
  </member>
  <member name="Windows.MsiBeginTransaction">
    <summary>
      <para>The  <b>MsiBeginTransaction</b> function starts <a href="https://docs.microsoft.com//windows/desktop/Msi/t-gly">transaction processing</a> of a multiple-package installation and returns an identifier for the transaction. The  <see cref="MsiEndTransaction" /> function ends  the transaction.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="szName">
      <para>Name of the multiple-package installation.</para>
    </param>
    <param name="dwTransactionAttributes">
      <para>Attributes of the multiple-package installation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>When 0 or no value is set it Windows Installer closes the UI from the previous installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_CHAIN_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phTransactionHandle">
      <para>Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.</para>
    </param>
    <param name="phChangeOfOwnerEvent">
      <para>This parameter returns a handle to an event that  is set when the <see cref="MsiJoinTransaction" /> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.</para>
    </param>
    <returns>
      <para>The <b>MsiBeginTransaction</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed. This function requires the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ROLLBACK_DISABLED</b>
            </para>
          </description>
          <description>
            <para>
              <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="https://docs.microsoft.com//windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="https://docs.microsoft.com//windows/desktop/Msi/disablerollback">DisableRollback</a> policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiBeginTransactionA">
    <summary>
      <para>The  <b>MsiBeginTransaction</b> function starts <a href="https://docs.microsoft.com//windows/desktop/Msi/t-gly">transaction processing</a> of a multiple-package installation and returns an identifier for the transaction. The  <see cref="MsiEndTransaction" /> function ends  the transaction.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="szName">
      <para>Name of the multiple-package installation.</para>
    </param>
    <param name="dwTransactionAttributes">
      <para>Attributes of the multiple-package installation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>When 0 or no value is set it Windows Installer closes the UI from the previous installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_CHAIN_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phTransactionHandle">
      <para>Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.</para>
    </param>
    <param name="phChangeOfOwnerEvent">
      <para>This parameter returns a handle to an event that  is set when the <see cref="MsiJoinTransaction" /> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.</para>
    </param>
    <returns>
      <para>The <b>MsiBeginTransaction</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed. This function requires the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ROLLBACK_DISABLED</b>
            </para>
          </description>
          <description>
            <para>
              <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="https://docs.microsoft.com//windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="https://docs.microsoft.com//windows/desktop/Msi/disablerollback">DisableRollback</a> policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiBeginTransactionW">
    <summary>
      <para>The  <b>MsiBeginTransaction</b> function starts <a href="https://docs.microsoft.com//windows/desktop/Msi/t-gly">transaction processing</a> of a multiple-package installation and returns an identifier for the transaction. The  <see cref="MsiEndTransaction" /> function ends  the transaction.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="szName">
      <para>Name of the multiple-package installation.</para>
    </param>
    <param name="dwTransactionAttributes">
      <para>Attributes of the multiple-package installation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>When 0 or no value is set it Windows Installer closes the UI from the previous installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_CHAIN_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phTransactionHandle">
      <para>Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.</para>
    </param>
    <param name="phChangeOfOwnerEvent">
      <para>This parameter returns a handle to an event that  is set when the <see cref="MsiJoinTransaction" /> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.</para>
    </param>
    <returns>
      <para>The <b>MsiBeginTransaction</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed. This function requires the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ROLLBACK_DISABLED</b>
            </para>
          </description>
          <description>
            <para>
              <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="https://docs.microsoft.com//windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="https://docs.microsoft.com//windows/desktop/Msi/disablerollback">DisableRollback</a> policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiBeginTransaction">
    <summary>
      <para>The  <b>MsiBeginTransaction</b> function starts <a href="https://docs.microsoft.com//windows/desktop/Msi/t-gly">transaction processing</a> of a multiple-package installation and returns an identifier for the transaction. The  <see cref="MsiEndTransaction" /> function ends  the transaction.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="szName">
      <para>Name of the multiple-package installation.</para>
    </param>
    <param name="dwTransactionAttributes">
      <para>Attributes of the multiple-package installation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>When 0 or no value is set it Windows Installer closes the UI from the previous installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_CHAIN_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phTransactionHandle">
      <para>Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.</para>
    </param>
    <param name="phChangeOfOwnerEvent">
      <para>This parameter returns a handle to an event that  is set when the <see cref="MsiJoinTransaction" /> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.</para>
    </param>
    <returns>
      <para>The <b>MsiBeginTransaction</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed. This function requires the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ROLLBACK_DISABLED</b>
            </para>
          </description>
          <description>
            <para>
              <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="https://docs.microsoft.com//windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="https://docs.microsoft.com//windows/desktop/Msi/disablerollback">DisableRollback</a> policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiBeginTransactionA">
    <summary>
      <para>The  <b>MsiBeginTransaction</b> function starts <a href="https://docs.microsoft.com//windows/desktop/Msi/t-gly">transaction processing</a> of a multiple-package installation and returns an identifier for the transaction. The  <see cref="MsiEndTransaction" /> function ends  the transaction.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="szName">
      <para>Name of the multiple-package installation.</para>
    </param>
    <param name="dwTransactionAttributes">
      <para>Attributes of the multiple-package installation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>When 0 or no value is set it Windows Installer closes the UI from the previous installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_CHAIN_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phTransactionHandle">
      <para>Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.</para>
    </param>
    <param name="phChangeOfOwnerEvent">
      <para>This parameter returns a handle to an event that  is set when the <see cref="MsiJoinTransaction" /> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.</para>
    </param>
    <returns>
      <para>The <b>MsiBeginTransaction</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed. This function requires the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ROLLBACK_DISABLED</b>
            </para>
          </description>
          <description>
            <para>
              <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="https://docs.microsoft.com//windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="https://docs.microsoft.com//windows/desktop/Msi/disablerollback">DisableRollback</a> policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiBeginTransactionW">
    <summary>
      <para>The  <b>MsiBeginTransaction</b> function starts <a href="https://docs.microsoft.com//windows/desktop/Msi/t-gly">transaction processing</a> of a multiple-package installation and returns an identifier for the transaction. The  <see cref="MsiEndTransaction" /> function ends  the transaction.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="szName">
      <para>Name of the multiple-package installation.</para>
    </param>
    <param name="dwTransactionAttributes">
      <para>Attributes of the multiple-package installation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>When 0 or no value is set it Windows Installer closes the UI from the previous installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_CHAIN_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phTransactionHandle">
      <para>Transaction ID is a <b>MSIHANDLE</b> value that identifies the transaction. Only one process can own a transaction at a  time.</para>
    </param>
    <param name="phChangeOfOwnerEvent">
      <para>This parameter returns a handle to an event that  is set when the <see cref="MsiJoinTransaction" /> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.</para>
    </param>
    <returns>
      <para>The <b>MsiBeginTransaction</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed. This function requires the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>Only one transaction can be open on a system at a time. The function returns this error if  called while another transaction is running.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ROLLBACK_DISABLED</b>
            </para>
          </description>
          <description>
            <para>
              <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installations</a> have been disabled by the <a href="https://docs.microsoft.com//windows/desktop/Msi/-disablerollback">DISABLEROLLBACK</a> property or <a href="https://docs.microsoft.com//windows/desktop/Msi/disablerollback">DisableRollback</a> policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiBeginTransaction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiCloseAllHandles">
    <summary>
      <para>The
<b>MsiCloseAllHandles</b> function closes all open installation handles allocated by the current thread. This is a diagnostic function and should not be used for cleanup.</para>
    </summary>
    <returns>
      <para>This function returns 0 if all handles are closed. Otherwise, the function returns the number of handles open prior to its call.</para>
    </returns>
    <remarks>
      <para>
        <b>MsiCloseAllHandles</b> only closes handles allocated by the calling thread, and does not affect handles allocated by other threads, such as the install handle passed to custom actions.</para>
      <para>The
<see cref="MsiOpenPackage" /> function opens a handle to a package and the
<see cref="MsiOpenProduct" /> function opens a handle to a product. These function are for use with functions that access the product database.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Handle Management Functions</seealso>
  </member>
  <member name="Windows.MsiCloseHandle">
    <summary>
      <para>The
<b>MsiCloseHandle</b> function closes an open installation handle.</para>
    </summary>
    <param name="hAny">
      <para>Specifies any open installation handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid handle was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>MsiCloseHandle</b> must be called from the same thread that requested the creation of the handle.</para>
      <para>The following functions supply handles that should be closed after use by calling
<b>MsiCloseHandle</b>:</para>
      <para>
        <see cref="MsiCreateRecord" />
        <see cref="MsiGetActiveDatabase" />
        <see cref="MsiGetLastErrorRecord" />
        <see cref="MsiOpenPackage" />
        <see cref="MsiOpenProduct" />
        <see cref="MsiOpenDatabase" />
        <see cref="MsiDatabaseOpenView" />
        <see cref="MsiViewFetch" />
        <see cref="MsiViewGetColumnInfo" />
        <see cref="MsiDatabaseGetPrimaryKeys" />
        <see cref="MsiGetSummaryInformation" />
        <see cref="MsiEnableUIPreview" />
      </para>
      <para>Note that when writing custom actions, it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<b>MsiCloseHandle</b>.</para>
      <para>For example, if you use code like this:</para>
      <para>MSIHANDLE hRec = MsiCreateRecord(3);</para>
      <para>Change it to:</para>
      <para>PMSIHANDLE hRec = MsiCreateRecord(3);</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Handle Management Functions</seealso>
  </member>
  <member name="Windows.MsiCollectUserInfo">
    <summary>
      <para>The
<b>MsiCollectUserInfo</b> function obtains and stores the user information and product ID from an installation wizard.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which the user information is collected.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls
<see cref="MsiGetUserInfo" />. If that call fails, the application calls
<b>MsiCollectUserInfo</b>.
<b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling
<see cref="MsiSetInternalUI" /> as INSTALLUILEVEL_FULL.</para>
      <para>The
<b>MsiCollectUserInfo</b> invokes a
<a href="https://docs.microsoft.com//windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
  </member>
  <member name="Windows.MsiCollectUserInfoA">
    <summary>
      <para>The
<b>MsiCollectUserInfo</b> function obtains and stores the user information and product ID from an installation wizard.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which the user information is collected.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls
<see cref="MsiGetUserInfo" />. If that call fails, the application calls
<b>MsiCollectUserInfo</b>.
<b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling
<see cref="MsiSetInternalUI" /> as INSTALLUILEVEL_FULL.</para>
      <para>The
<b>MsiCollectUserInfo</b> invokes a
<a href="https://docs.microsoft.com//windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
  </member>
  <member name="Windows.MsiCollectUserInfoW">
    <summary>
      <para>The
<b>MsiCollectUserInfo</b> function obtains and stores the user information and product ID from an installation wizard.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which the user information is collected.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls
<see cref="MsiGetUserInfo" />. If that call fails, the application calls
<b>MsiCollectUserInfo</b>.
<b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling
<see cref="MsiSetInternalUI" /> as INSTALLUILEVEL_FULL.</para>
      <para>The
<b>MsiCollectUserInfo</b> invokes a
<a href="https://docs.microsoft.com//windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
  </member>
  <member name="Windows.MsiCollectUserInfo">
    <summary>
      <para>The
<b>MsiCollectUserInfo</b> function obtains and stores the user information and product ID from an installation wizard.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which the user information is collected.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls
<see cref="MsiGetUserInfo" />. If that call fails, the application calls
<b>MsiCollectUserInfo</b>.
<b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling
<see cref="MsiSetInternalUI" /> as INSTALLUILEVEL_FULL.</para>
      <para>The
<b>MsiCollectUserInfo</b> invokes a
<a href="https://docs.microsoft.com//windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
  </member>
  <member name="Windows.MsiCollectUserInfoA">
    <summary>
      <para>The
<b>MsiCollectUserInfo</b> function obtains and stores the user information and product ID from an installation wizard.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which the user information is collected.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls
<see cref="MsiGetUserInfo" />. If that call fails, the application calls
<b>MsiCollectUserInfo</b>.
<b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling
<see cref="MsiSetInternalUI" /> as INSTALLUILEVEL_FULL.</para>
      <para>The
<b>MsiCollectUserInfo</b> invokes a
<a href="https://docs.microsoft.com//windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
  </member>
  <member name="Windows.MsiCollectUserInfoW">
    <summary>
      <para>The
<b>MsiCollectUserInfo</b> function obtains and stores the user information and product ID from an installation wizard.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which the user information is collected.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiCollectUserInfo</b> function is typically called by an application during the first run of the application. The application first calls
<see cref="MsiGetUserInfo" />. If that call fails, the application calls
<b>MsiCollectUserInfo</b>.
<b>MsiCollectUserInfo</b> opens the product's installation package and invokes a wizard sequence that collects user information. Upon completion of the sequence, user information is registered. Since this API requires an authored user interface, the user interface level should be set to full by calling
<see cref="MsiSetInternalUI" /> as INSTALLUILEVEL_FULL.</para>
      <para>The
<b>MsiCollectUserInfo</b> invokes a
<a href="https://docs.microsoft.com//windows/desktop/Msi/firstrun-dialog">FirstRun Dialog</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiCollectUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
  </member>
  <member name="Windows.MsiConfigureFeature">
    <summary>
      <para>The
<b>MsiConfigureFeature</b> function configures the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID for the feature to be configured.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the feature. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is installed to its default location.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to the initialization has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureFeatureA">
    <summary>
      <para>The
<b>MsiConfigureFeature</b> function configures the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID for the feature to be configured.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the feature. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is installed to its default location.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to the initialization has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureFeatureW">
    <summary>
      <para>The
<b>MsiConfigureFeature</b> function configures the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID for the feature to be configured.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the feature. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is installed to its default location.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to the initialization has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureFeature">
    <summary>
      <para>The
<b>MsiConfigureFeature</b> function configures the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID for the feature to be configured.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the feature. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is installed to its default location.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to the initialization has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureFeatureA">
    <summary>
      <para>The
<b>MsiConfigureFeature</b> function configures the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID for the feature to be configured.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the feature. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is installed to its default location.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to the initialization has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureFeatureW">
    <summary>
      <para>The
<b>MsiConfigureFeature</b> function configures the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID for the feature to be configured.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the feature. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is installed to its default location.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to the initialization has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProduct">
    <summary>
      <para>The
<b>MsiConfigureProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" /> or <see cref="MsiSetExternalUIRecord" />.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use
<see cref="MsiConfigureFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductA">
    <summary>
      <para>The
<b>MsiConfigureProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" /> or <see cref="MsiSetExternalUIRecord" />.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use
<see cref="MsiConfigureFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductW">
    <summary>
      <para>The
<b>MsiConfigureProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" /> or <see cref="MsiSetExternalUIRecord" />.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use
<see cref="MsiConfigureFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductEx">
    <summary>
      <para>The
<b>MsiConfigureProductEx</b> function installs or uninstalls a product. A product command line can also be specified.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szCommandLine">
      <para>Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The command line passed in as <i>szCommandLine</i> can contain any of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use
<see cref="MsiConfigureFeature" />.</para>
      <para>The
<b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductExA">
    <summary>
      <para>The
<b>MsiConfigureProductEx</b> function installs or uninstalls a product. A product command line can also be specified.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szCommandLine">
      <para>Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The command line passed in as <i>szCommandLine</i> can contain any of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use
<see cref="MsiConfigureFeature" />.</para>
      <para>The
<b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductExW">
    <summary>
      <para>The
<b>MsiConfigureProductEx</b> function installs or uninstalls a product. A product command line can also be specified.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szCommandLine">
      <para>Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The command line passed in as <i>szCommandLine</i> can contain any of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use
<see cref="MsiConfigureFeature" />.</para>
      <para>The
<b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductEx">
    <summary>
      <para>The
<b>MsiConfigureProductEx</b> function installs or uninstalls a product. A product command line can also be specified.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szCommandLine">
      <para>Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The command line passed in as <i>szCommandLine</i> can contain any of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use
<see cref="MsiConfigureFeature" />.</para>
      <para>The
<b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductExA">
    <summary>
      <para>The
<b>MsiConfigureProductEx</b> function installs or uninstalls a product. A product command line can also be specified.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szCommandLine">
      <para>Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The command line passed in as <i>szCommandLine</i> can contain any of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use
<see cref="MsiConfigureFeature" />.</para>
      <para>The
<b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductExW">
    <summary>
      <para>The
<b>MsiConfigureProductEx</b> function installs or uninstalls a product. A product command line can also be specified.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameters are ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any value other than <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between <b>INSTALLLEVEL_MINIMUM</b> and <b>INSTALLLEVEL_MAXIMUM</b> to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szCommandLine">
      <para>Specifies the command-line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The command line passed in as <i>szCommandLine</i> can contain any of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-reference">Feature Installation Options Properties</a>. In this case, the <i>eInstallState</i> passed must be <b>INSTALLSTATE_DEFAULT</b>.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored and all features of the product are installed if the <i>eInstallState</i> parameter is set to any other value than <b>INSTALLSTATE_DEFAULT</b>. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to <b>INSTALLSTATE_DEFAULT</b> use
<see cref="MsiConfigureFeature" />.</para>
      <para>The
<b>MsiConfigureProductEx</b> function displays the user interface using the current settings. User interface settings can be changed with
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProductEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProduct">
    <summary>
      <para>The
<b>MsiConfigureProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" /> or <see cref="MsiSetExternalUIRecord" />.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use
<see cref="MsiConfigureFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductA">
    <summary>
      <para>The
<b>MsiConfigureProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" /> or <see cref="MsiSetExternalUIRecord" />.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use
<see cref="MsiConfigureFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiConfigureProductW">
    <summary>
      <para>The
<b>MsiConfigureProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be configured.</para>
    </param>
    <param name="iInstallLevel">
      <para>Specifies how much of the product should be installed when installing the product to its default state. The <i>iInstallLevel</i> parameter is ignored, and all features are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLEVEL_DEFAULT</b>
          </description>
          <description>
            <para>The authored default features are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MINIMUM</b>
          </description>
          <description>
            <para>Only the required features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLEVEL_MAXIMUM</b>
          </description>
          <description>
            <para>All features are installed. You can specify a value between INSTALLLEVEL_MINIMUM and INSTALLLEVEL_MAXIMUM to install a subset of available features.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="eInstallState">
      <para>Specifies the installation state for the product. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product is to be installed with all features installed to the default states specified in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The product is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error that relates to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiConfigureProduct</b> function displays the user interface (UI) using the current settings. User interface settings can be changed by using
<see cref="MsiSetInternalUI" />, <see cref="MsiSetExternalUI" /> or <see cref="MsiSetExternalUIRecord" />.</para>
      <para>The <i>iInstallLevel</i> parameter is ignored, and all features of the product are installed, if the <i>eInstallState</i> parameter is set to any other value than INSTALLSTATE_DEFAULT. To control the installation of individual features when the <i>eInstallState</i> parameter is not set to INSTALLSTATE_DEFAULT, use
<see cref="MsiConfigureFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiConfigureProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiDetermineApplicablePatches">
    <summary>
      <para>The <b>MsiDetermineApplicablePatches</b> function takes a set  of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer  package and in what sequence. The function can account for  superseded or obsolete patches. This function does not account for products or patches that are installed on the system that are not specified in the set.</para>
    </summary>
    <param name="szProductPackagePath">
      <para>Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.</para>
    </param>
    <param name="cPatchInfo">
      <para>Number of patches in the array. Must be greater than zero.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The
<b>MsiDetermineApplicablePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDetermineApplicablePatchesA">
    <summary>
      <para>The <b>MsiDetermineApplicablePatches</b> function takes a set  of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer  package and in what sequence. The function can account for  superseded or obsolete patches. This function does not account for products or patches that are installed on the system that are not specified in the set.</para>
    </summary>
    <param name="szProductPackagePath">
      <para>Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.</para>
    </param>
    <param name="cPatchInfo">
      <para>Number of patches in the array. Must be greater than zero.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The
<b>MsiDetermineApplicablePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDetermineApplicablePatchesW">
    <summary>
      <para>The <b>MsiDetermineApplicablePatches</b> function takes a set  of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer  package and in what sequence. The function can account for  superseded or obsolete patches. This function does not account for products or patches that are installed on the system that are not specified in the set.</para>
    </summary>
    <param name="szProductPackagePath">
      <para>Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.</para>
    </param>
    <param name="cPatchInfo">
      <para>Number of patches in the array. Must be greater than zero.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The
<b>MsiDetermineApplicablePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDetermineApplicablePatches">
    <summary>
      <para>The <b>MsiDetermineApplicablePatches</b> function takes a set  of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer  package and in what sequence. The function can account for  superseded or obsolete patches. This function does not account for products or patches that are installed on the system that are not specified in the set.</para>
    </summary>
    <param name="szProductPackagePath">
      <para>Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.</para>
    </param>
    <param name="cPatchInfo">
      <para>Number of patches in the array. Must be greater than zero.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The
<b>MsiDetermineApplicablePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDetermineApplicablePatchesA">
    <summary>
      <para>The <b>MsiDetermineApplicablePatches</b> function takes a set  of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer  package and in what sequence. The function can account for  superseded or obsolete patches. This function does not account for products or patches that are installed on the system that are not specified in the set.</para>
    </summary>
    <param name="szProductPackagePath">
      <para>Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.</para>
    </param>
    <param name="cPatchInfo">
      <para>Number of patches in the array. Must be greater than zero.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The
<b>MsiDetermineApplicablePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDetermineApplicablePatchesW">
    <summary>
      <para>The <b>MsiDetermineApplicablePatches</b> function takes a set  of patch files, XML files, and XML blobs and determines which patches apply to a specified Windows Installer  package and in what sequence. The function can account for  superseded or obsolete patches. This function does not account for products or patches that are installed on the system that are not specified in the set.</para>
    </summary>
    <param name="szProductPackagePath">
      <para>Full path to an .msi file. The function determines the patches that are applicable to this package and in what sequence.</para>
    </param>
    <param name="cPatchInfo">
      <para>Number of patches in the array. Must be greater than zero.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The
<b>MsiDetermineApplicablePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this function is called from a custom action it fails and returns ERROR_CALL_NOT_IMPLEMENTED.  The function requires MSXML version 3.0 to process XML and returns ERROR_CALL_NOT_IMPLEMENTED if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDetermineApplicablePatches</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of ERROR_SUCCESS and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  ERROR_SUCCESS indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of ERROR_PATCH_TARGET_NOT_FOUND indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, ERROR_PATCH_NO_SEQUENCE is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDetermineApplicablePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDeterminePatchSequence">
    <summary>
      <para>The <b>MsiDeterminePatchSequence</b> function takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the  patches to a specified installed product. This function accounts for patches that have already been applied to the product and accounts for obsolete and superseded patches.</para>
    </summary>
    <param name="szProductCode">
      <para>The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>.
For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="cPatchInfo">
      <para>The number of patches in the array.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The <b>MsiDeterminePatchSequence</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The installation package was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user that is not an administrator attempted to call the function with a context of a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data for a registered patch or product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.</para>
      <para>If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MSIPATCHSEQUENCEINFO" />
    <seealso cref="MsiDetermineApplicablePatches" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDeterminePatchSequenceA">
    <summary>
      <para>The <b>MsiDeterminePatchSequence</b> function takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the  patches to a specified installed product. This function accounts for patches that have already been applied to the product and accounts for obsolete and superseded patches.</para>
    </summary>
    <param name="szProductCode">
      <para>The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>.
For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="cPatchInfo">
      <para>The number of patches in the array.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The <b>MsiDeterminePatchSequence</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The installation package was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user that is not an administrator attempted to call the function with a context of a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data for a registered patch or product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.</para>
      <para>If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MSIPATCHSEQUENCEINFO" />
    <seealso cref="MsiDetermineApplicablePatches" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDeterminePatchSequenceW">
    <summary>
      <para>The <b>MsiDeterminePatchSequence</b> function takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the  patches to a specified installed product. This function accounts for patches that have already been applied to the product and accounts for obsolete and superseded patches.</para>
    </summary>
    <param name="szProductCode">
      <para>The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>.
For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="cPatchInfo">
      <para>The number of patches in the array.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The <b>MsiDeterminePatchSequence</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The installation package was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user that is not an administrator attempted to call the function with a context of a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data for a registered patch or product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.</para>
      <para>If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MSIPATCHSEQUENCEINFO" />
    <seealso cref="MsiDetermineApplicablePatches" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDeterminePatchSequence">
    <summary>
      <para>The <b>MsiDeterminePatchSequence</b> function takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the  patches to a specified installed product. This function accounts for patches that have already been applied to the product and accounts for obsolete and superseded patches.</para>
    </summary>
    <param name="szProductCode">
      <para>The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>.
For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="cPatchInfo">
      <para>The number of patches in the array.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The <b>MsiDeterminePatchSequence</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The installation package was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user that is not an administrator attempted to call the function with a context of a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data for a registered patch or product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.</para>
      <para>If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MSIPATCHSEQUENCEINFO" />
    <seealso cref="MsiDetermineApplicablePatches" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDeterminePatchSequenceA">
    <summary>
      <para>The <b>MsiDeterminePatchSequence</b> function takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the  patches to a specified installed product. This function accounts for patches that have already been applied to the product and accounts for obsolete and superseded patches.</para>
    </summary>
    <param name="szProductCode">
      <para>The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>.
For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="cPatchInfo">
      <para>The number of patches in the array.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The <b>MsiDeterminePatchSequence</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The installation package was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user that is not an administrator attempted to call the function with a context of a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data for a registered patch or product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.</para>
      <para>If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MSIPATCHSEQUENCEINFO" />
    <seealso cref="MsiDetermineApplicablePatches" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiDeterminePatchSequenceW">
    <summary>
      <para>The <b>MsiDeterminePatchSequence</b> function takes a set of patch files, XML files, and XML blobs and determines the best sequence of application for the  patches to a specified installed product. This function accounts for patches that have already been applied to the product and accounts for obsolete and superseded patches.</para>
    </summary>
    <param name="szProductCode">
      <para>The product that is the target for the set of patches. The value must be the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string  that specifies  a security identifier (SID) of a user. This parameter restricts the context of enumeration for  this user account. This parameter cannot be   the special SID strings "S-1-1-0" (everyone) or "S-1-5-18" (local system). For the machine context <i>dwContext</i> is set to<b> MSIINSTALLCONTEXT_MACHINE</b> and <i>szUserSid</i> must be <b>NULL</b>.
For the current user context <i>szUserSid</i> can be null and  <i>dwContext</i> can be set to <b>MSIINSTALLCONTEXT_USERMANAGED</b> or <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-managed installations of the product for  the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Patches are considered for all per-user-unmanaged installations for the user specified by <i>szUserSid</i>. A null <i>szUserSid</i> with this context means the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Patches are considered for the per-machine installation. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b>  the <i>szUserSid</i> parameter must be null.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="cPatchInfo">
      <para>The number of patches in the array.</para>
    </param>
    <param name="pPatchInfo">
      <para>Pointer to an array of <see cref="MSIPATCHSEQUENCEINFO" /> structures.</para>
    </param>
    <returns>
      <para>The <b>MsiDeterminePatchSequence</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a manner not covered in the other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An argument is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_NO_SEQUENCE</b>
            </para>
          </description>
          <description>
            <para>No valid sequence could be found for the set of patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>An installation package referenced by path cannot be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patches were successfully sorted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATH_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The path to the .msi file was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PATCH_XML</b>
            </para>
          </description>
          <description>
            <para>The XML patch data is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The installation package was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user that is not an administrator attempted to call the function with a context of a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data for a registered patch or product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID specified is not registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer version 3.0 is required to determine the best patch sequence. The function was called with <i>szProductCode</i> not yet installed with  Windows Installer version 3.0.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned if the function was called from a <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">custom action</a>  or if MSXML 3.0 is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Users that do not have administrator privileges  can call this function only in their own or machine context. Users that are administrators can call it for other users.</para>
      <para>If this function is called from a custom action it fails and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b>. The function requires MSXML version 3.0 to process XML and returns <b>ERROR_CALL_NOT_IMPLEMENTED</b> if MSXML 3.0 is not installed.</para>
      <para>The <b>MsiDeterminePatchSequence</b> function sets the <b>uStatus</b> and <b>dwOrder</b> members of each <see cref="MSIPATCHSEQUENCEINFO" /> structure pointed to by <i>pPatchInfo</i>. Each structure contains information about a particular patch.</para>
      <para>If the function succeeds, the <see cref="MSIPATCHSEQUENCEINFO" /> structure of every patch that can be applied  to the product returns with a  <b>uStatus</b> of <b>ERROR_SUCCESS</b> and a <b>dwOrder</b> greater than or equal to zero. The values of <b>dwOrder</b>  greater than or equal to zero indicate the best application sequence for the patches starting with zero.</para>
      <para>If the function succeeds, patches excluded from the best patching sequence return a <see cref="MSIPATCHSEQUENCEINFO" /> structure with a <b>dwOrder</b> equal to -1.  In these cases, a <b>uStatus</b> field of  <b>ERROR_SUCCESS</b> indicates a patch that is  obsolete or superseded for the product.   A <b>uStatus</b> field of <b>ERROR_PATCH_TARGET_NOT_FOUND</b> indicates a patch that is inapplicable to the product.</para>
      <para>If the function fails, the <see cref="MSIPATCHSEQUENCEINFO" /> structure for every patch  returns a  <b>dwOrder</b> equal to -1.  In this case, the <b>uStatus</b> fields  can contain errors with more information about individual patches. For example, <b>ERROR_PATCH_NO_SEQUENCE</b> is returned for patches that have circular sequencing information.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiDeterminePatchSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MSIPATCHSEQUENCEINFO" />
    <seealso cref="MsiDetermineApplicablePatches" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiEnableLog">
    <summary>
      <para>The
<b>MsiEnableLog</b> function sets the log mode for all subsequent installations that are initiated in the calling process.</para>
    </summary>
    <param name="dwLogMode">
      <para>Specifies the log mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Logs out of memory or fatal exit information.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>Logs the error messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_EXTRADEBUG</b>
          </description>
          <description>
            <para>Sends extra debugging information, such as handle creation information, to the log file.</para>
            <para>
              <b>Windows 2000 and Windows XP:  </b>This feature is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>Logs the warning messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>Logs the user requests.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>Logs the status messages that are not displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>Indicates insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>Logs the start of new installation actions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>Logs the data record with the installation action.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>Logs the parameters for user-interface initialization.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROPERTYDUMP</b>
          </description>
          <description>
            <para>Logs the property values at termination.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_VERBOSE</b>
          </description>
          <description>
            <para>Logs the information in all the other log modes, except for <b>INSTALLLOGMODE_EXTRADEBUG</b>. This sends large amounts of information to a log file not generally useful to users. May be used for technical support.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_LOGONLYONERROR</b>
          </description>
          <description>
            <para>Logging information is collected but is is less frequently saved to the log file. This can improve the performance of some installations, but may have little benefit for large installations. The log file is removed when the installation succeeds. If the installation fails, all logging information is saved to the log file.</para>
            <para>
              <b>Windows Installer 2.0:  </b>This log mode is not available.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szLogFile">
      <para>Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.</para>
    </param>
    <param name="dwLogAttributes">
      <para>Specifies how frequently the log buffer is to be flushed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_APPEND</b>
          </description>
          <description>
            <para>If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b>
          </description>
          <description>
            <para>Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling
<see cref="FlushFileBuffers" />.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid log mode was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For a description of the Logging policy, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/system-policy">System Policy</a>.</para>
      <para>The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/logging">Logging</seealso>
  </member>
  <member name="Windows.MsiEnableLogA">
    <summary>
      <para>The
<b>MsiEnableLog</b> function sets the log mode for all subsequent installations that are initiated in the calling process.</para>
    </summary>
    <param name="dwLogMode">
      <para>Specifies the log mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Logs out of memory or fatal exit information.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>Logs the error messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_EXTRADEBUG</b>
          </description>
          <description>
            <para>Sends extra debugging information, such as handle creation information, to the log file.</para>
            <para>
              <b>Windows 2000 and Windows XP:  </b>This feature is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>Logs the warning messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>Logs the user requests.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>Logs the status messages that are not displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>Indicates insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>Logs the start of new installation actions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>Logs the data record with the installation action.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>Logs the parameters for user-interface initialization.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROPERTYDUMP</b>
          </description>
          <description>
            <para>Logs the property values at termination.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_VERBOSE</b>
          </description>
          <description>
            <para>Logs the information in all the other log modes, except for <b>INSTALLLOGMODE_EXTRADEBUG</b>. This sends large amounts of information to a log file not generally useful to users. May be used for technical support.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_LOGONLYONERROR</b>
          </description>
          <description>
            <para>Logging information is collected but is is less frequently saved to the log file. This can improve the performance of some installations, but may have little benefit for large installations. The log file is removed when the installation succeeds. If the installation fails, all logging information is saved to the log file.</para>
            <para>
              <b>Windows Installer 2.0:  </b>This log mode is not available.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szLogFile">
      <para>Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.</para>
    </param>
    <param name="dwLogAttributes">
      <para>Specifies how frequently the log buffer is to be flushed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_APPEND</b>
          </description>
          <description>
            <para>If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b>
          </description>
          <description>
            <para>Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling
<see cref="FlushFileBuffers" />.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid log mode was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For a description of the Logging policy, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/system-policy">System Policy</a>.</para>
      <para>The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/logging">Logging</seealso>
  </member>
  <member name="Windows.MsiEnableLogW">
    <summary>
      <para>The
<b>MsiEnableLog</b> function sets the log mode for all subsequent installations that are initiated in the calling process.</para>
    </summary>
    <param name="dwLogMode">
      <para>Specifies the log mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Logs out of memory or fatal exit information.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>Logs the error messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_EXTRADEBUG</b>
          </description>
          <description>
            <para>Sends extra debugging information, such as handle creation information, to the log file.</para>
            <para>
              <b>Windows 2000 and Windows XP:  </b>This feature is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>Logs the warning messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>Logs the user requests.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>Logs the status messages that are not displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>Indicates insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>Logs the start of new installation actions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>Logs the data record with the installation action.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>Logs the parameters for user-interface initialization.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROPERTYDUMP</b>
          </description>
          <description>
            <para>Logs the property values at termination.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_VERBOSE</b>
          </description>
          <description>
            <para>Logs the information in all the other log modes, except for <b>INSTALLLOGMODE_EXTRADEBUG</b>. This sends large amounts of information to a log file not generally useful to users. May be used for technical support.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_LOGONLYONERROR</b>
          </description>
          <description>
            <para>Logging information is collected but is is less frequently saved to the log file. This can improve the performance of some installations, but may have little benefit for large installations. The log file is removed when the installation succeeds. If the installation fails, all logging information is saved to the log file.</para>
            <para>
              <b>Windows Installer 2.0:  </b>This log mode is not available.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szLogFile">
      <para>Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.</para>
    </param>
    <param name="dwLogAttributes">
      <para>Specifies how frequently the log buffer is to be flushed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_APPEND</b>
          </description>
          <description>
            <para>If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b>
          </description>
          <description>
            <para>Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling
<see cref="FlushFileBuffers" />.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid log mode was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For a description of the Logging policy, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/system-policy">System Policy</a>.</para>
      <para>The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/logging">Logging</seealso>
  </member>
  <member name="Windows.MsiEnableLog">
    <summary>
      <para>The
<b>MsiEnableLog</b> function sets the log mode for all subsequent installations that are initiated in the calling process.</para>
    </summary>
    <param name="dwLogMode">
      <para>Specifies the log mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Logs out of memory or fatal exit information.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>Logs the error messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_EXTRADEBUG</b>
          </description>
          <description>
            <para>Sends extra debugging information, such as handle creation information, to the log file.</para>
            <para>
              <b>Windows 2000 and Windows XP:  </b>This feature is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>Logs the warning messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>Logs the user requests.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>Logs the status messages that are not displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>Indicates insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>Logs the start of new installation actions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>Logs the data record with the installation action.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>Logs the parameters for user-interface initialization.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROPERTYDUMP</b>
          </description>
          <description>
            <para>Logs the property values at termination.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_VERBOSE</b>
          </description>
          <description>
            <para>Logs the information in all the other log modes, except for <b>INSTALLLOGMODE_EXTRADEBUG</b>. This sends large amounts of information to a log file not generally useful to users. May be used for technical support.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_LOGONLYONERROR</b>
          </description>
          <description>
            <para>Logging information is collected but is is less frequently saved to the log file. This can improve the performance of some installations, but may have little benefit for large installations. The log file is removed when the installation succeeds. If the installation fails, all logging information is saved to the log file.</para>
            <para>
              <b>Windows Installer 2.0:  </b>This log mode is not available.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szLogFile">
      <para>Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.</para>
    </param>
    <param name="dwLogAttributes">
      <para>Specifies how frequently the log buffer is to be flushed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_APPEND</b>
          </description>
          <description>
            <para>If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b>
          </description>
          <description>
            <para>Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling
<see cref="FlushFileBuffers" />.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid log mode was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For a description of the Logging policy, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/system-policy">System Policy</a>.</para>
      <para>The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/logging">Logging</seealso>
  </member>
  <member name="Windows.MsiEnableLogA">
    <summary>
      <para>The
<b>MsiEnableLog</b> function sets the log mode for all subsequent installations that are initiated in the calling process.</para>
    </summary>
    <param name="dwLogMode">
      <para>Specifies the log mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Logs out of memory or fatal exit information.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>Logs the error messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_EXTRADEBUG</b>
          </description>
          <description>
            <para>Sends extra debugging information, such as handle creation information, to the log file.</para>
            <para>
              <b>Windows 2000 and Windows XP:  </b>This feature is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>Logs the warning messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>Logs the user requests.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>Logs the status messages that are not displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>Indicates insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>Logs the start of new installation actions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>Logs the data record with the installation action.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>Logs the parameters for user-interface initialization.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROPERTYDUMP</b>
          </description>
          <description>
            <para>Logs the property values at termination.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_VERBOSE</b>
          </description>
          <description>
            <para>Logs the information in all the other log modes, except for <b>INSTALLLOGMODE_EXTRADEBUG</b>. This sends large amounts of information to a log file not generally useful to users. May be used for technical support.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_LOGONLYONERROR</b>
          </description>
          <description>
            <para>Logging information is collected but is is less frequently saved to the log file. This can improve the performance of some installations, but may have little benefit for large installations. The log file is removed when the installation succeeds. If the installation fails, all logging information is saved to the log file.</para>
            <para>
              <b>Windows Installer 2.0:  </b>This log mode is not available.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szLogFile">
      <para>Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.</para>
    </param>
    <param name="dwLogAttributes">
      <para>Specifies how frequently the log buffer is to be flushed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_APPEND</b>
          </description>
          <description>
            <para>If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b>
          </description>
          <description>
            <para>Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling
<see cref="FlushFileBuffers" />.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid log mode was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For a description of the Logging policy, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/system-policy">System Policy</a>.</para>
      <para>The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/logging">Logging</seealso>
  </member>
  <member name="Windows.MsiEnableLogW">
    <summary>
      <para>The
<b>MsiEnableLog</b> function sets the log mode for all subsequent installations that are initiated in the calling process.</para>
    </summary>
    <param name="dwLogMode">
      <para>Specifies the log mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Logs out of memory or fatal exit information.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>Logs the error messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_EXTRADEBUG</b>
          </description>
          <description>
            <para>Sends extra debugging information, such as handle creation information, to the log file.</para>
            <para>
              <b>Windows 2000 and Windows XP:  </b>This feature is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>Logs the warning messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>Logs the user requests.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>Logs the status messages that are not displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>Indicates insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>Logs the start of new installation actions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>Logs the data record with the installation action.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>Logs the parameters for user-interface initialization.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROPERTYDUMP</b>
          </description>
          <description>
            <para>Logs the property values at termination.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_VERBOSE</b>
          </description>
          <description>
            <para>Logs the information in all the other log modes, except for <b>INSTALLLOGMODE_EXTRADEBUG</b>. This sends large amounts of information to a log file not generally useful to users. May be used for technical support.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_LOGONLYONERROR</b>
          </description>
          <description>
            <para>Logging information is collected but is is less frequently saved to the log file. This can improve the performance of some installations, but may have little benefit for large installations. The log file is removed when the installation succeeds. If the installation fails, all logging information is saved to the log file.</para>
            <para>
              <b>Windows Installer 2.0:  </b>This log mode is not available.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szLogFile">
      <para>Specifies the string that holds the full path to the log file. Entering a null disables logging, in which case <i>dwlogmode</i> is ignored. If a path is supplied, then <i>dwlogmode</i> must not be zero.</para>
    </param>
    <param name="dwLogAttributes">
      <para>Specifies how frequently the log buffer is to be flushed.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_APPEND</b>
          </description>
          <description>
            <para>If this value is set, the installer appends the existing log specified by <i>szLogFile</i>. If not set, any existing log specified by <i>szLogFile</i> is overwritten.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGATTRIBUTES_FLUSHEACHLINE</b>
          </description>
          <description>
            <para>Forces the log buffer to be flushed after each line. If this value is not set, the installer flushes the log buffer after 20 lines by calling
<see cref="FlushFileBuffers" />.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid log mode was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For a description of the Logging policy, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/system-policy">System Policy</a>.</para>
      <para>The path to the log file location must already exist when using this function. The Installer does not create the directory structure for the log file.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnableLog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/logging">Logging</seealso>
  </member>
  <member name="Windows.MsiEndTransaction">
    <summary>
      <para>The  <b>MsiEndTransaction</b> function can commit or roll back all the installations belonging to the transaction opened by the <see cref="MsiBeginTransaction" /> function. This function should be called by the current owner of the transaction.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="dwTransactionState">
      <para>The value of this parameter determines whether the installer commits or rolls back all the installations belonging to the transaction. The value can be one of the following.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>MSITRANSACTIONSTATE_ROLLBACK</para>
          </description>
          <description>
            <para>Performs a <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installation</a> to undo changes to the system belonging to the transaction opened by the <see cref="MsiBeginTransaction" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTIONSTATE_COMMIT</para>
          </description>
          <description>
            <para>Commits all changes to the system belonging to the transaction. Runs any <a href="https://docs.microsoft.com//windows/desktop/Msi/commit-custom-actions">Commit Custom Actions</a> and commits to the system any changes to Win32 or common language runtime assemblies. Deletes the rollback script, and after using this option, the transaction's changes can no longer be undone with a  <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">Rollback Installation</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiEndTransaction</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A transaction can be ended only by the current owner.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>An installation belonging to the transaction could not be completed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>An installation belonging to the transaction is still in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ROLLBACK_DISABLED</b>
            </para>
          </description>
          <description>
            <para>An installation belonging to the transaction did not complete. During the installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablerollback-action">DisableRollback</a> action disabled <a href="https://docs.microsoft.com//windows/desktop/Msi/rollback-installation">rollback installations</a> of the package. The installer rolls back the installation up to the point where rollback was disabled, and the function returns this error.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiEnumClients">
    <summary>
      <para>The
<b>MsiEnumClients</b> function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component whose clients are to be enumerated.</para>
    </param>
    <param name="iProductIndex">
      <para>Specifies the index of the client to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no clients to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate clients, an application should initially call the
<b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call
<b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumClientsA">
    <summary>
      <para>The
<b>MsiEnumClients</b> function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component whose clients are to be enumerated.</para>
    </param>
    <param name="iProductIndex">
      <para>Specifies the index of the client to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no clients to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate clients, an application should initially call the
<b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call
<b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumClientsW">
    <summary>
      <para>The
<b>MsiEnumClients</b> function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component whose clients are to be enumerated.</para>
    </param>
    <param name="iProductIndex">
      <para>Specifies the index of the client to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no clients to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate clients, an application should initially call the
<b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call
<b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumClientsEx">
    <summary>
      <para>The
<b>MsiEnumClientsEx</b> function enumerates the installed applications that use a specified component. The function retrieves a  <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> for an application each time it is called.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 or earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 5.0.</para>
    </summary>
    <param name="szComponent">
      <para>The component code GUID that identifies the component. The function enumerates the applications that use this component.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies an enumeration for all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwProductIndex">
      <para>Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.</para>
    </param>
    <param name="szProductBuf">
      <para>A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>A flag that gives the installation context of the application.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is in the per-machine installation installation context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szSid">
      <para>Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context.</para>
      <para>The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>Empty string</para>
          </description>
          <description>
            <para>The application is installed in a per-machine installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The SID for the user that installed the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchSid">
      <para>Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumClientsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Administratator privileges are required to enumerate components of applications installed by users other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more applications to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumClientsExA">
    <summary>
      <para>The
<b>MsiEnumClientsEx</b> function enumerates the installed applications that use a specified component. The function retrieves a  <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> for an application each time it is called.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 or earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 5.0.</para>
    </summary>
    <param name="szComponent">
      <para>The component code GUID that identifies the component. The function enumerates the applications that use this component.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies an enumeration for all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwProductIndex">
      <para>Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.</para>
    </param>
    <param name="szProductBuf">
      <para>A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>A flag that gives the installation context of the application.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is in the per-machine installation installation context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szSid">
      <para>Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context.</para>
      <para>The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>Empty string</para>
          </description>
          <description>
            <para>The application is installed in a per-machine installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The SID for the user that installed the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchSid">
      <para>Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumClientsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Administratator privileges are required to enumerate components of applications installed by users other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more applications to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumClientsExW">
    <summary>
      <para>The
<b>MsiEnumClientsEx</b> function enumerates the installed applications that use a specified component. The function retrieves a  <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> for an application each time it is called.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 or earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 5.0.</para>
    </summary>
    <param name="szComponent">
      <para>The component code GUID that identifies the component. The function enumerates the applications that use this component.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies an enumeration for all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwProductIndex">
      <para>Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.</para>
    </param>
    <param name="szProductBuf">
      <para>A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>A flag that gives the installation context of the application.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is in the per-machine installation installation context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szSid">
      <para>Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context.</para>
      <para>The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>Empty string</para>
          </description>
          <description>
            <para>The application is installed in a per-machine installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The SID for the user that installed the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchSid">
      <para>Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumClientsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Administratator privileges are required to enumerate components of applications installed by users other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more applications to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumClientsEx">
    <summary>
      <para>The
<b>MsiEnumClientsEx</b> function enumerates the installed applications that use a specified component. The function retrieves a  <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> for an application each time it is called.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 or earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 5.0.</para>
    </summary>
    <param name="szComponent">
      <para>The component code GUID that identifies the component. The function enumerates the applications that use this component.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies an enumeration for all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwProductIndex">
      <para>Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.</para>
    </param>
    <param name="szProductBuf">
      <para>A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>A flag that gives the installation context of the application.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is in the per-machine installation installation context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szSid">
      <para>Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context.</para>
      <para>The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>Empty string</para>
          </description>
          <description>
            <para>The application is installed in a per-machine installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The SID for the user that installed the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchSid">
      <para>Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumClientsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Administratator privileges are required to enumerate components of applications installed by users other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more applications to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumClientsExA">
    <summary>
      <para>The
<b>MsiEnumClientsEx</b> function enumerates the installed applications that use a specified component. The function retrieves a  <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> for an application each time it is called.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 or earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 5.0.</para>
    </summary>
    <param name="szComponent">
      <para>The component code GUID that identifies the component. The function enumerates the applications that use this component.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies an enumeration for all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwProductIndex">
      <para>Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.</para>
    </param>
    <param name="szProductBuf">
      <para>A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>A flag that gives the installation context of the application.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is in the per-machine installation installation context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szSid">
      <para>Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context.</para>
      <para>The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>Empty string</para>
          </description>
          <description>
            <para>The application is installed in a per-machine installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The SID for the user that installed the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchSid">
      <para>Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumClientsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Administratator privileges are required to enumerate components of applications installed by users other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more applications to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumClientsExW">
    <summary>
      <para>The
<b>MsiEnumClientsEx</b> function enumerates the installed applications that use a specified component. The function retrieves a  <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> for an application each time it is called.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 or earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 5.0.</para>
    </summary>
    <param name="szComponent">
      <para>The component code GUID that identifies the component. The function enumerates the applications that use this component.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string value that contains a security identifier (SID.) The enumeration of applications extends to users identified by this SID. The special SID string s-1-1-0 (Everyone) enumerates all applications for all users in the system. A SID value other than s-1-1-0 specifies a user SID for a particular user and enumerates the instances of  applications installed by the specified user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies an enumeration for a particular user. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies an enumeration for all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate applications that exist in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that extends the enumeration to instances of applications installed in the specified installation context. The enumeration includes only instances of applications that are installed by the users identified by  <i>szUserSid</i>.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the value of the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwProductIndex">
      <para>Specifies the index of the application to retrieve.  The value of this parameter must be zero (0) in the first call to the function.  For each subsequent call, the index must be incremented by 1.  The index should only be incremented if the previous call to the function returns <b>ERROR_SUCCESS</b>.</para>
    </param>
    <param name="szProductBuf">
      <para>A string value that receives the product code for the application. The length of the buffer at this location should be large enough to hold a  null-terminated string value containing the product code. The first 38 <b>TCHAR</b> characters receives the GUID for the component, and the 39th character receives a terminating  NULL character.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>A flag that gives the installation context of the application.</para>
      <para>This can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is installed  in the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The application is in the per-machine installation installation context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szSid">
      <para>Receives the security identifier (SID) that identifies the user that installed the application. The location receives an empty string value if this instance of the application exists in a per-machine installation context.</para>
      <para>The length of the buffer should be large enough to hold a null-terminated string  value containing the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and the location pointed to by <i>pcchSid</i> receives  the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is a valid pointer to a location in memory, the function returns <b>ERROR_SUCCESS</b> and the location receives the number of <b>TCHAR</b> in the SID, not including the terminating null character. The function can then be called again to retrieve the value, with the <i>szSid</i> buffer resized large enough to contain *pcchSid + 1 characters.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>Empty string</para>
          </description>
          <description>
            <para>The application is installed in a per-machine installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The SID for the user that installed the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchSid">
      <para>Pointer to a location in memory that contains a variable that specifies the number of <b>TCHAR</b> in the SID, not including the terminating null character. When the function returns, this variable is set to the size of the requested SID whether or not the function can successfully copy the SID and terminating null character into the buffer location pointed to by <i>szSid</i>. The size is returned as the number of TCHAR in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns <b>ERROR_INVALID_PARAMETER</b>. If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the SID exists, without retrieving the SID value.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumClientsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Administratator privileges are required to enumerate components of applications installed by users other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more applications to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClientsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumClients">
    <summary>
      <para>The
<b>MsiEnumClients</b> function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component whose clients are to be enumerated.</para>
    </param>
    <param name="iProductIndex">
      <para>Specifies the index of the client to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no clients to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate clients, an application should initially call the
<b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call
<b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumClientsA">
    <summary>
      <para>The
<b>MsiEnumClients</b> function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component whose clients are to be enumerated.</para>
    </param>
    <param name="iProductIndex">
      <para>Specifies the index of the client to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no clients to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate clients, an application should initially call the
<b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call
<b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumClientsW">
    <summary>
      <para>The
<b>MsiEnumClients</b> function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component whose clients are to be enumerated.</para>
    </param>
    <param name="iProductIndex">
      <para>Specifies the index of the client to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumClients</b> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no clients to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate clients, an application should initially call the
<b>MsiEnumClients</b> function with the<i> iProductIndex</i> parameter set to zero. The application should then increment the <i> iProductIndex</i> parameter and call
<b>MsiEnumClients</b> until there are no more clients (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumClients</b> to enumerate all of the component's clients, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumClients as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentQualifiers">
    <summary>
      <para>The
<b>MsiEnumComponentQualifiers</b> function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies component whose qualifiers are to be enumerated.</para>
    </param>
    <param name="iIndex">
      <para>Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.</para>
    </param>
    <param name="lpQualifierBuf">
      <para>Pointer to a buffer that receives the qualifier code.</para>
    </param>
    <param name="pcchQualifierBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.</para>
    </param>
    <param name="lpApplicationDataBuf">
      <para>Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.</para>
    </param>
    <param name="pcchApplicationDataBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no qualifiers to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate qualifiers, an application should initially call the
<b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call
<b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When
<b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.</para>
      <para>When making multiple calls to
<b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentQualifiersA">
    <summary>
      <para>The
<b>MsiEnumComponentQualifiers</b> function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies component whose qualifiers are to be enumerated.</para>
    </param>
    <param name="iIndex">
      <para>Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.</para>
    </param>
    <param name="lpQualifierBuf">
      <para>Pointer to a buffer that receives the qualifier code.</para>
    </param>
    <param name="pcchQualifierBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.</para>
    </param>
    <param name="lpApplicationDataBuf">
      <para>Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.</para>
    </param>
    <param name="pcchApplicationDataBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no qualifiers to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate qualifiers, an application should initially call the
<b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call
<b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When
<b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.</para>
      <para>When making multiple calls to
<b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentQualifiersW">
    <summary>
      <para>The
<b>MsiEnumComponentQualifiers</b> function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies component whose qualifiers are to be enumerated.</para>
    </param>
    <param name="iIndex">
      <para>Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.</para>
    </param>
    <param name="lpQualifierBuf">
      <para>Pointer to a buffer that receives the qualifier code.</para>
    </param>
    <param name="pcchQualifierBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.</para>
    </param>
    <param name="lpApplicationDataBuf">
      <para>Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.</para>
    </param>
    <param name="pcchApplicationDataBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no qualifiers to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate qualifiers, an application should initially call the
<b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call
<b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When
<b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.</para>
      <para>When making multiple calls to
<b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentQualifiers">
    <summary>
      <para>The
<b>MsiEnumComponentQualifiers</b> function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies component whose qualifiers are to be enumerated.</para>
    </param>
    <param name="iIndex">
      <para>Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.</para>
    </param>
    <param name="lpQualifierBuf">
      <para>Pointer to a buffer that receives the qualifier code.</para>
    </param>
    <param name="pcchQualifierBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.</para>
    </param>
    <param name="lpApplicationDataBuf">
      <para>Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.</para>
    </param>
    <param name="pcchApplicationDataBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no qualifiers to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate qualifiers, an application should initially call the
<b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call
<b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When
<b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.</para>
      <para>When making multiple calls to
<b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentQualifiersA">
    <summary>
      <para>The
<b>MsiEnumComponentQualifiers</b> function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies component whose qualifiers are to be enumerated.</para>
    </param>
    <param name="iIndex">
      <para>Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.</para>
    </param>
    <param name="lpQualifierBuf">
      <para>Pointer to a buffer that receives the qualifier code.</para>
    </param>
    <param name="pcchQualifierBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.</para>
    </param>
    <param name="lpApplicationDataBuf">
      <para>Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.</para>
    </param>
    <param name="pcchApplicationDataBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no qualifiers to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate qualifiers, an application should initially call the
<b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call
<b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When
<b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.</para>
      <para>When making multiple calls to
<b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentQualifiersW">
    <summary>
      <para>The
<b>MsiEnumComponentQualifiers</b> function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies component whose qualifiers are to be enumerated.</para>
    </param>
    <param name="iIndex">
      <para>Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponentQualifiers</b> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.</para>
    </param>
    <param name="lpQualifierBuf">
      <para>Pointer to a buffer that receives the qualifier code.</para>
    </param>
    <param name="pcchQualifierBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpQualifierBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character.</para>
    </param>
    <param name="lpApplicationDataBuf">
      <para>Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be null.</para>
    </param>
    <param name="pcchApplicationDataBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpApplicationDataBuf</i> parameter. On input, this size should include the terminating null character. On return, the value does not include the null character. This parameter can be null only if the <i>lpApplicationDataBuf </i> parameter is null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no qualifiers to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate qualifiers, an application should initially call the
<b>MsiEnumComponentQualifiers</b> function with the<i> iIndex </i> parameter set to zero. The application should then increment the <i> iIndex </i> parameter and call
<b>MsiEnumComponentQualifiers</b> until there are no more qualifiers (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When
<b>MsiEnumComponentQualifiers</b> returns, the <i>pcchQualifierBuf</i> parameter contains the length of the qualifier string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiEnumComponentQualifiers</b> returns ERROR_MORE_DATA, and this parameter contains the size of the string, in characters, without counting the null character. The same mechanism applies to <i>pcchDescriptionBuf</i>.</para>
      <para>When making multiple calls to
<b>MsiEnumComponentQualifiers</b> to enumerate all of the component's advertised qualifiers, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponentQualifiers as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponents">
    <summary>
      <para>The
<b>MsiEnumComponents</b> function enumerates the installed components for all products. This function retrieves one component code each time it is called.</para>
    </summary>
    <param name="iComponentIndex">
      <para>Specifies the index of the component to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.</para>
    </param>
    <param name="lpComponentBuf">
      <para>Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no components to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate components, an application should initially call the
<b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call
<b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentsA">
    <summary>
      <para>The
<b>MsiEnumComponents</b> function enumerates the installed components for all products. This function retrieves one component code each time it is called.</para>
    </summary>
    <param name="iComponentIndex">
      <para>Specifies the index of the component to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.</para>
    </param>
    <param name="lpComponentBuf">
      <para>Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no components to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate components, an application should initially call the
<b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call
<b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentsW">
    <summary>
      <para>The
<b>MsiEnumComponents</b> function enumerates the installed components for all products. This function retrieves one component code each time it is called.</para>
    </summary>
    <param name="iComponentIndex">
      <para>Specifies the index of the component to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.</para>
    </param>
    <param name="lpComponentBuf">
      <para>Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no components to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate components, an application should initially call the
<b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call
<b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponents">
    <summary>
      <para>The
<b>MsiEnumComponents</b> function enumerates the installed components for all products. This function retrieves one component code each time it is called.</para>
    </summary>
    <param name="iComponentIndex">
      <para>Specifies the index of the component to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.</para>
    </param>
    <param name="lpComponentBuf">
      <para>Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no components to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate components, an application should initially call the
<b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call
<b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentsA">
    <summary>
      <para>The
<b>MsiEnumComponents</b> function enumerates the installed components for all products. This function retrieves one component code each time it is called.</para>
    </summary>
    <param name="iComponentIndex">
      <para>Specifies the index of the component to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.</para>
    </param>
    <param name="lpComponentBuf">
      <para>Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no components to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate components, an application should initially call the
<b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call
<b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentsW">
    <summary>
      <para>The
<b>MsiEnumComponents</b> function enumerates the installed components for all products. This function retrieves one component code each time it is called.</para>
    </summary>
    <param name="iComponentIndex">
      <para>Specifies the index of the component to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumComponents</b> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.</para>
    </param>
    <param name="lpComponentBuf">
      <para>Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no components to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate components, an application should initially call the
<b>MsiEnumComponents</b> function with the <i>iComponentIndex</i> parameter set to zero. The application should then increment the <i>iComponentIndex</i> parameter and call
<b>MsiEnumComponents</b> until there are no more components (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumComponents</b> to enumerate all of the product's components, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumComponents as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumFeatures">
    <summary>
      <para>The
<b>MsiEnumFeatures</b> function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.</para>
    </summary>
    <param name="szProduct">
      <para>Null-terminated string specifying the product code of the product whose features are to be enumerated.</para>
    </param>
    <param name="iFeatureIndex">
      <para>Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.</para>
    </param>
    <param name="lpFeatureBuf">
      <para>Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.</para>
    </param>
    <param name="lpParentBuf">
      <para>Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no features to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate features, an application should initially call the
<b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call
<b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumFeaturesA">
    <summary>
      <para>The
<b>MsiEnumFeatures</b> function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.</para>
    </summary>
    <param name="szProduct">
      <para>Null-terminated string specifying the product code of the product whose features are to be enumerated.</para>
    </param>
    <param name="iFeatureIndex">
      <para>Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.</para>
    </param>
    <param name="lpFeatureBuf">
      <para>Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.</para>
    </param>
    <param name="lpParentBuf">
      <para>Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no features to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate features, an application should initially call the
<b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call
<b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumFeaturesW">
    <summary>
      <para>The
<b>MsiEnumFeatures</b> function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.</para>
    </summary>
    <param name="szProduct">
      <para>Null-terminated string specifying the product code of the product whose features are to be enumerated.</para>
    </param>
    <param name="iFeatureIndex">
      <para>Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.</para>
    </param>
    <param name="lpFeatureBuf">
      <para>Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.</para>
    </param>
    <param name="lpParentBuf">
      <para>Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no features to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate features, an application should initially call the
<b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call
<b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumFeatures">
    <summary>
      <para>The
<b>MsiEnumFeatures</b> function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.</para>
    </summary>
    <param name="szProduct">
      <para>Null-terminated string specifying the product code of the product whose features are to be enumerated.</para>
    </param>
    <param name="iFeatureIndex">
      <para>Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.</para>
    </param>
    <param name="lpFeatureBuf">
      <para>Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.</para>
    </param>
    <param name="lpParentBuf">
      <para>Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no features to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate features, an application should initially call the
<b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call
<b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumFeaturesA">
    <summary>
      <para>The
<b>MsiEnumFeatures</b> function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.</para>
    </summary>
    <param name="szProduct">
      <para>Null-terminated string specifying the product code of the product whose features are to be enumerated.</para>
    </param>
    <param name="iFeatureIndex">
      <para>Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.</para>
    </param>
    <param name="lpFeatureBuf">
      <para>Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.</para>
    </param>
    <param name="lpParentBuf">
      <para>Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no features to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate features, an application should initially call the
<b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call
<b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumFeaturesW">
    <summary>
      <para>The
<b>MsiEnumFeatures</b> function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.</para>
    </summary>
    <param name="szProduct">
      <para>Null-terminated string specifying the product code of the product whose features are to be enumerated.</para>
    </param>
    <param name="iFeatureIndex">
      <para>Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumFeatures</b> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.</para>
    </param>
    <param name="lpFeatureBuf">
      <para>Pointer to a buffer that receives the feature ID. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  The function returns <b>ERROR_MORE_DATA</b> if the length of the feature ID exceeds <b>MAX_FEATURE_CHARS</b>.</para>
    </param>
    <param name="lpParentBuf">
      <para>Pointer to a buffer that receives the feature ID of the parent of the feature. The size of the buffer must hold a string value of length MAX_FEATURE_CHARS+1.  If the length of the feature ID of the parent feature exceeds <b>MAX_FEATURE_CHARS</b>, only the first <b>MAX_FEATURE_CHARS</b> characters get copied into the buffer.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no features to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate features, an application should initially call the
<b>MsiEnumFeatures</b> function with the <i>iFeatureIndex</i> parameter set to zero. The application should then increment the <i>iFeatureIndex</i> parameter and call
<b>MsiEnumFeatures</b> until there are no more features (that is, until the function returns ERROR_NO_MORE_ITEMS).</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumFeatures as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumPatches">
    <summary>
      <para>The
<b>MsiEnumPatches</b> function enumerates all of the patches that have been applied to a product. The function returns the patch code GUID for each patch that has been applied to the product and returns a list of transforms from each patch that apply to the product. Note that patches may have many transforms only some of which are applicable to a particular product. The list of transforms are returned in the same format as the value of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/transforms">TRANSFORMS</a> property.
<b>Note</b>  <i>pcchTransformsBuf</i> is not set to the number of characters copied to <i>lpTransformsBuf</i> upon a successful return of
<b>MsiEnumPatches</b>.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which patches are to be enumerated.</para>
    </param>
    <param name="iPatchIndex">
      <para>Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumPatches</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="lpPatchBuf">
      <para>Pointer to a buffer that receives the patch's GUID. This argument is required.</para>
    </param>
    <param name="lpTransformsBuf">
      <para>Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.</para>
    </param>
    <param name="pcchTransformsBuf">
      <para>Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no patches to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate patches, an application should initially call the
<b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call
<b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumPatchesA">
    <summary>
      <para>The
<b>MsiEnumPatches</b> function enumerates all of the patches that have been applied to a product. The function returns the patch code GUID for each patch that has been applied to the product and returns a list of transforms from each patch that apply to the product. Note that patches may have many transforms only some of which are applicable to a particular product. The list of transforms are returned in the same format as the value of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/transforms">TRANSFORMS</a> property.
<b>Note</b>  <i>pcchTransformsBuf</i> is not set to the number of characters copied to <i>lpTransformsBuf</i> upon a successful return of
<b>MsiEnumPatches</b>.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which patches are to be enumerated.</para>
    </param>
    <param name="iPatchIndex">
      <para>Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumPatches</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="lpPatchBuf">
      <para>Pointer to a buffer that receives the patch's GUID. This argument is required.</para>
    </param>
    <param name="lpTransformsBuf">
      <para>Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.</para>
    </param>
    <param name="pcchTransformsBuf">
      <para>Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no patches to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate patches, an application should initially call the
<b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call
<b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumPatchesW">
    <summary>
      <para>The
<b>MsiEnumPatches</b> function enumerates all of the patches that have been applied to a product. The function returns the patch code GUID for each patch that has been applied to the product and returns a list of transforms from each patch that apply to the product. Note that patches may have many transforms only some of which are applicable to a particular product. The list of transforms are returned in the same format as the value of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/transforms">TRANSFORMS</a> property.
<b>Note</b>  <i>pcchTransformsBuf</i> is not set to the number of characters copied to <i>lpTransformsBuf</i> upon a successful return of
<b>MsiEnumPatches</b>.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which patches are to be enumerated.</para>
    </param>
    <param name="iPatchIndex">
      <para>Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumPatches</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="lpPatchBuf">
      <para>Pointer to a buffer that receives the patch's GUID. This argument is required.</para>
    </param>
    <param name="lpTransformsBuf">
      <para>Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.</para>
    </param>
    <param name="pcchTransformsBuf">
      <para>Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no patches to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate patches, an application should initially call the
<b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call
<b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumPatchesEx">
    <summary>
      <para>The <b>MsiEnumPatchesEx</b> function enumerates all patches in a specific context or across all contexts. Patches already applied to products are enumerated. Patches that have been registered but not yet applied to products are also enumerated.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string that specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>An enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFilter">
      <para>The filter for enumeration. This parameter can be one or a combination of the following parameters.</para>
      <list type="table">
        <listheader>
          <description>Filter</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_APPLIED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_SUPERSEDED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as superseded.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_OBSOLETED</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as obsolete.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_REGISTERED</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are registered but not yet applied. The <see cref="MsiSourceListAddSourceEx" /> function can register new patches.</para>
            <para>
              <b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_ALL</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes all applied, obsolete, superseded, and registered patches.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szPatchCode">
      <para>An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetProductCode">
      <para>An output buffer to contain the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwTargetProductContext">
      <para>Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetUserSid">
      <para>An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.</para>
      <para>If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchTargetUserSid">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumPatchesEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more patches to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is successfully enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <see cref="MsiEnumPatchesEx" />  again for the same index value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="MsiSourceListAddSourceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiEnumPatchesExA">
    <summary>
      <para>The <b>MsiEnumPatchesEx</b> function enumerates all patches in a specific context or across all contexts. Patches already applied to products are enumerated. Patches that have been registered but not yet applied to products are also enumerated.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string that specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>An enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFilter">
      <para>The filter for enumeration. This parameter can be one or a combination of the following parameters.</para>
      <list type="table">
        <listheader>
          <description>Filter</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_APPLIED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_SUPERSEDED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as superseded.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_OBSOLETED</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as obsolete.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_REGISTERED</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are registered but not yet applied. The <see cref="MsiSourceListAddSourceEx" /> function can register new patches.</para>
            <para>
              <b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_ALL</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes all applied, obsolete, superseded, and registered patches.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szPatchCode">
      <para>An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetProductCode">
      <para>An output buffer to contain the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwTargetProductContext">
      <para>Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetUserSid">
      <para>An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.</para>
      <para>If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchTargetUserSid">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumPatchesEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more patches to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is successfully enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <see cref="MsiEnumPatchesEx" />  again for the same index value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="MsiSourceListAddSourceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiEnumPatchesExW">
    <summary>
      <para>The <b>MsiEnumPatchesEx</b> function enumerates all patches in a specific context or across all contexts. Patches already applied to products are enumerated. Patches that have been registered but not yet applied to products are also enumerated.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string that specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>An enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFilter">
      <para>The filter for enumeration. This parameter can be one or a combination of the following parameters.</para>
      <list type="table">
        <listheader>
          <description>Filter</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_APPLIED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_SUPERSEDED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as superseded.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_OBSOLETED</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as obsolete.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_REGISTERED</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are registered but not yet applied. The <see cref="MsiSourceListAddSourceEx" /> function can register new patches.</para>
            <para>
              <b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_ALL</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes all applied, obsolete, superseded, and registered patches.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szPatchCode">
      <para>An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetProductCode">
      <para>An output buffer to contain the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwTargetProductContext">
      <para>Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetUserSid">
      <para>An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.</para>
      <para>If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchTargetUserSid">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumPatchesEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more patches to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is successfully enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <see cref="MsiEnumPatchesEx" />  again for the same index value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="MsiSourceListAddSourceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiEnumPatchesEx">
    <summary>
      <para>The <b>MsiEnumPatchesEx</b> function enumerates all patches in a specific context or across all contexts. Patches already applied to products are enumerated. Patches that have been registered but not yet applied to products are also enumerated.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string that specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>An enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFilter">
      <para>The filter for enumeration. This parameter can be one or a combination of the following parameters.</para>
      <list type="table">
        <listheader>
          <description>Filter</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_APPLIED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_SUPERSEDED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as superseded.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_OBSOLETED</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as obsolete.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_REGISTERED</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are registered but not yet applied. The <see cref="MsiSourceListAddSourceEx" /> function can register new patches.</para>
            <para>
              <b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_ALL</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes all applied, obsolete, superseded, and registered patches.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szPatchCode">
      <para>An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetProductCode">
      <para>An output buffer to contain the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwTargetProductContext">
      <para>Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetUserSid">
      <para>An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.</para>
      <para>If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchTargetUserSid">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumPatchesEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more patches to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is successfully enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <see cref="MsiEnumPatchesEx" />  again for the same index value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="MsiSourceListAddSourceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiEnumPatchesExA">
    <summary>
      <para>The <b>MsiEnumPatchesEx</b> function enumerates all patches in a specific context or across all contexts. Patches already applied to products are enumerated. Patches that have been registered but not yet applied to products are also enumerated.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string that specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>An enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFilter">
      <para>The filter for enumeration. This parameter can be one or a combination of the following parameters.</para>
      <list type="table">
        <listheader>
          <description>Filter</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_APPLIED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_SUPERSEDED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as superseded.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_OBSOLETED</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as obsolete.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_REGISTERED</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are registered but not yet applied. The <see cref="MsiSourceListAddSourceEx" /> function can register new patches.</para>
            <para>
              <b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_ALL</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes all applied, obsolete, superseded, and registered patches.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szPatchCode">
      <para>An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetProductCode">
      <para>An output buffer to contain the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwTargetProductContext">
      <para>Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetUserSid">
      <para>An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.</para>
      <para>If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchTargetUserSid">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumPatchesEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more patches to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is successfully enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <see cref="MsiEnumPatchesEx" />  again for the same index value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="MsiSourceListAddSourceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiEnumPatchesExW">
    <summary>
      <para>The <b>MsiEnumPatchesEx</b> function enumerates all patches in a specific context or across all contexts. Patches already applied to products are enumerated. Patches that have been registered but not yet applied to products are also enumerated.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string that specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product whose patches are enumerated. If non-<b>NULL</b>, patch enumeration is restricted to instances of this product under the user and context specified by <i>szUserSid</i> and <i>dwContext</i>. If <b>NULL</b>, the patches for all products under the specified context are enumerated.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string "S-1-1-0" (Everyone) specifies enumeration across all users in the system. A SID value other than "S-1-1-0" is considered a user SID and restricts enumeration to that user.  When enumerating for a user other than current user, any patches that were applied in a per-user-unmanaged context using a version less than Windows Installer version 3.0, are not enumerated. This parameter can be set to <b>NULL</b> to specify the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>An enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (System) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to "S-1-5-18" returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to one or a combination of contexts. This parameter can be any one or a combination of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The enumeration that is extended to all per-user-managed installations for the users that <i>szUserSid</i> specifies. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>In this context, only patches installed with Windows Installer version 3.0 are enumerated for users that are not the current user.  For the current user, the function enumerates all installed and new  patches. An invalid SID for <i>szUserSid</i> returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>An enumeration that is  extended to all per-machine installations. When <i>dwContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSid</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFilter">
      <para>The filter for enumeration. This parameter can be one or a combination of the following parameters.</para>
      <list type="table">
        <listheader>
          <description>Filter</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_APPLIED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that have been applied. Enumeration does not include superseded or obsolete patches.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_SUPERSEDED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as superseded.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_OBSOLETED</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are marked as obsolete.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_REGISTERED</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes patches that are registered but not yet applied. The <see cref="MsiSourceListAddSourceEx" /> function can register new patches.</para>
            <para>
              <b>Note</b>  Patches registered for users other than current user and applied in the per-user-unmanaged context are not enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIPATCHSTATE_ALL</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The enumeration includes all applied, obsolete, superseded, and registered patches.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the patch to retrieve. This parameter must be zero for the first call to the <b>MsiEnumPatchesEx</b> function and then incremented for subsequent calls. The <i>dwIndex</i> parameter should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szPatchCode">
      <para>An output buffer to contain the GUID of the patch being enumerated. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetProductCode">
      <para>An output buffer to contain the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that receives this patch. The buffer should be large enough to hold the GUID. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwTargetProductContext">
      <para>Returns the context of the patch being enumerated. The output value can be  <b>MSIINSTALLCONTEXT_USERMANAGED</b>,  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>, or <b>MSIINSTALLCONTEXT_MACHINE</b>. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szTargetUserSid">
      <para>An output buffer that receives  the string SID of the account under which this patch instance exists. This buffer returns an empty string for a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szTargetUserSid</i> is set to <b>NULL</b> and <i>pcchTargetUserSid</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchTargetUserSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>szTargetUserSid</i> buffer large enough to contain *<i>pcchTargetUserSid</i> + 1 characters.</para>
      <para>If <i>szTargetUserSid</i> and <i>pcchTargetUserSid</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchTargetUserSid">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szTargetUserSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szTargetUserSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumPatchesEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more patches to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is successfully enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that  <i>szProduct</i> specifies is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>This is returned when <i>pcchTargetUserSid</i> points to a buffer size less than required to copy the SID. In this case, the user can fix the buffer and call <see cref="MsiEnumPatchesEx" />  again for the same index value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Non-administrators can  enumerate patches within  their visibility only. Administrators can enumerate patches for other user contexts.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatchesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="MsiSourceListAddSourceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiEnumPatches">
    <summary>
      <para>The
<b>MsiEnumPatches</b> function enumerates all of the patches that have been applied to a product. The function returns the patch code GUID for each patch that has been applied to the product and returns a list of transforms from each patch that apply to the product. Note that patches may have many transforms only some of which are applicable to a particular product. The list of transforms are returned in the same format as the value of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/transforms">TRANSFORMS</a> property.
<b>Note</b>  <i>pcchTransformsBuf</i> is not set to the number of characters copied to <i>lpTransformsBuf</i> upon a successful return of
<b>MsiEnumPatches</b>.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which patches are to be enumerated.</para>
    </param>
    <param name="iPatchIndex">
      <para>Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumPatches</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="lpPatchBuf">
      <para>Pointer to a buffer that receives the patch's GUID. This argument is required.</para>
    </param>
    <param name="lpTransformsBuf">
      <para>Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.</para>
    </param>
    <param name="pcchTransformsBuf">
      <para>Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no patches to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate patches, an application should initially call the
<b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call
<b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumPatchesA">
    <summary>
      <para>The
<b>MsiEnumPatches</b> function enumerates all of the patches that have been applied to a product. The function returns the patch code GUID for each patch that has been applied to the product and returns a list of transforms from each patch that apply to the product. Note that patches may have many transforms only some of which are applicable to a particular product. The list of transforms are returned in the same format as the value of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/transforms">TRANSFORMS</a> property.
<b>Note</b>  <i>pcchTransformsBuf</i> is not set to the number of characters copied to <i>lpTransformsBuf</i> upon a successful return of
<b>MsiEnumPatches</b>.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which patches are to be enumerated.</para>
    </param>
    <param name="iPatchIndex">
      <para>Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumPatches</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="lpPatchBuf">
      <para>Pointer to a buffer that receives the patch's GUID. This argument is required.</para>
    </param>
    <param name="lpTransformsBuf">
      <para>Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.</para>
    </param>
    <param name="pcchTransformsBuf">
      <para>Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no patches to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate patches, an application should initially call the
<b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call
<b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumPatchesW">
    <summary>
      <para>The
<b>MsiEnumPatches</b> function enumerates all of the patches that have been applied to a product. The function returns the patch code GUID for each patch that has been applied to the product and returns a list of transforms from each patch that apply to the product. Note that patches may have many transforms only some of which are applicable to a particular product. The list of transforms are returned in the same format as the value of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/transforms">TRANSFORMS</a> property.
<b>Note</b>  <i>pcchTransformsBuf</i> is not set to the number of characters copied to <i>lpTransformsBuf</i> upon a successful return of
<b>MsiEnumPatches</b>.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product for which patches are to be enumerated.</para>
    </param>
    <param name="iPatchIndex">
      <para>Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumPatches</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="lpPatchBuf">
      <para>Pointer to a buffer that receives the patch's GUID. This argument is required.</para>
    </param>
    <param name="lpTransformsBuf">
      <para>Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be Null.</para>
    </param>
    <param name="pcchTransformsBuf">
      <para>Set to the number of characters copied to <i>lpTransformsBuf</i> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no patches to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate patches, an application should initially call the
<b>MsiEnumPatches</b> function with the <i>iPatchIndex</i> parameter set to zero. The application should then increment the <i>iPatchIndex</i> parameter and call
<b>MsiEnumPatches</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiEnumPatches</b> returns ERROR_MORE_DATA and <i>pcchTransformsBuf</i> contains the number of characters copied to <i>lpTransformsBuf</i>, without counting the Null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumPatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumProducts">
    <summary>
      <para>The
<b>MsiEnumProducts</b> function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine <a href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">installation context</a> and advertisements are enumerated.</para>
    </summary>
    <param name="iProductIndex">
      <para>Specifies the index of the product to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application should initially call the
<b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumProductsA">
    <summary>
      <para>The
<b>MsiEnumProducts</b> function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine <a href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">installation context</a> and advertisements are enumerated.</para>
    </summary>
    <param name="iProductIndex">
      <para>Specifies the index of the product to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application should initially call the
<b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumProductsW">
    <summary>
      <para>The
<b>MsiEnumProducts</b> function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine <a href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">installation context</a> and advertisements are enumerated.</para>
    </summary>
    <param name="iProductIndex">
      <para>Specifies the index of the product to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application should initially call the
<b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumProductsEx">
    <summary>
      <para>The <b>MsiEnumProductsEx</b> function enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. This function supersedes <see cref="MsiEnumProducts" />.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="szInstalledProductCode">
      <para>Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szSid">
      <para>An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.</para>
      <para>If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSid">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumProductsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>If the scope includes users other than the current user, you need administrator privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more products to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A product is enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The <i>szSid</i> parameter is too small to get the user SID.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not installed on the computer in the specified context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.</para>
      <para>When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.</para>
      <para>A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.</para>
      <para>Use <see cref="MsiGetProductInfoEx" /> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiEnumProducts" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiEnumProductsExA">
    <summary>
      <para>The <b>MsiEnumProductsEx</b> function enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. This function supersedes <see cref="MsiEnumProducts" />.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="szInstalledProductCode">
      <para>Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szSid">
      <para>An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.</para>
      <para>If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSid">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumProductsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>If the scope includes users other than the current user, you need administrator privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more products to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A product is enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The <i>szSid</i> parameter is too small to get the user SID.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not installed on the computer in the specified context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.</para>
      <para>When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.</para>
      <para>A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.</para>
      <para>Use <see cref="MsiGetProductInfoEx" /> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiEnumProducts" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiEnumProductsExW">
    <summary>
      <para>The <b>MsiEnumProductsEx</b> function enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. This function supersedes <see cref="MsiEnumProducts" />.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="szInstalledProductCode">
      <para>Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szSid">
      <para>An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.</para>
      <para>If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSid">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumProductsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>If the scope includes users other than the current user, you need administrator privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more products to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A product is enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The <i>szSid</i> parameter is too small to get the user SID.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not installed on the computer in the specified context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.</para>
      <para>When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.</para>
      <para>A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.</para>
      <para>Use <see cref="MsiGetProductInfoEx" /> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiEnumProducts" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiEnumProductsEx">
    <summary>
      <para>The <b>MsiEnumProductsEx</b> function enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. This function supersedes <see cref="MsiEnumProducts" />.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="szInstalledProductCode">
      <para>Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szSid">
      <para>An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.</para>
      <para>If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSid">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumProductsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>If the scope includes users other than the current user, you need administrator privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more products to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A product is enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The <i>szSid</i> parameter is too small to get the user SID.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not installed on the computer in the specified context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.</para>
      <para>When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.</para>
      <para>A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.</para>
      <para>Use <see cref="MsiGetProductInfoEx" /> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiEnumProducts" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiEnumProductsExA">
    <summary>
      <para>The <b>MsiEnumProductsEx</b> function enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. This function supersedes <see cref="MsiEnumProducts" />.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="szInstalledProductCode">
      <para>Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szSid">
      <para>An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.</para>
      <para>If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSid">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumProductsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>If the scope includes users other than the current user, you need administrator privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more products to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A product is enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The <i>szSid</i> parameter is too small to get the user SID.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not installed on the computer in the specified context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.</para>
      <para>When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.</para>
      <para>A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.</para>
      <para>Use <see cref="MsiGetProductInfoEx" /> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiEnumProducts" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiEnumProductsExW">
    <summary>
      <para>The <b>MsiEnumProductsEx</b> function enumerates through one or all the instances of products that are currently advertised or installed in the specified contexts. This function supersedes <see cref="MsiEnumProducts" />.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product  to be enumerated.  Only instances of products within the scope of the context specified by the <i>szUserSid</i> and <i>dwContext</i> parameters are enumerated. This parameter can be set to <b>NULL</b> to enumerate all products in the specified context.</para>
    </param>
    <param name="szUserSid">
      <para>Null-terminated string that specifies a security identifier (SID) that restricts the context of enumeration. The special SID string s-1-1-0 (Everyone) specifies enumeration across all users in the system. A SID value other than s-1-1-0 is considered a user-SID and restricts enumeration to the current user or any user in the system. This parameter can be set to <b>NULL</b> to restrict the enumeration scope to the current user.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to enumerate products or patches installed as per-machine.  When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the enumeration to a context. This parameter can be any one or a combination of the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–managed installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Enumeration extended to all per–user–unmanaged installations for the users specified by <i>szUserSid</i>. An invalid SID returns no items.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Enumeration extended to all per-machine installations. When <i>dwInstallContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>Specifies the index of the product to retrieve. This parameter must be zero for the first call to the <b>MsiEnumProductsEx</b> function and then incremented for subsequent calls. The index should be incremented, only if the previous call has returned ERROR_SUCCESS. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="szInstalledProductCode">
      <para>Null-terminated string of <b>TCHAR</b> that gives the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance being enumerated. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pdwInstalledContext">
      <para>Returns the context of the product instance  being enumerated. The output value can be MSIINSTALLCONTEXT_USERMANAGED, MSIINSTALLCONTEXT_USERUNMANAGED, or MSIINSTALLCONTEXT_MACHINE. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="szSid">
      <para>An output buffer that receives the string SID of the account under which this product instance exists.  This buffer returns an empty string for an instance installed in a per-machine context.</para>
      <para>This buffer should be large enough to contain the SID. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the SID, not including the terminating NULL character.</para>
      <para>If <i>szSid</i> is set to <b>NULL</b> and <i>pcchSid</i> is set to a valid pointer, the function returns ERROR_SUCCESS and sets *<i>pcchSid</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b>.  The function can then be called again to retrieve the value, with the  <i>szSid</i> buffer large enough to contain *<i>pcchSid</i> + 1 characters.</para>
      <para>If <i>szSid</i> and <i>pcchSid</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSid">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSid</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSid</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiEnumProductsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>If the scope includes users other than the current user, you need administrator privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more products to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A product is enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The <i>szSid</i> parameter is too small to get the user SID.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not installed on the computer in the specified context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application must initially call the <b>MsiEnumProductsEx</b> function with the <i>iIndex</i> parameter set to zero. The application must then increment the <i>iProductIndex</i> parameter and call <b>MsiEnumProductsEx</b> until it returns <b>ERROR_NO_MORE_ITEMS</b> and there are no more products to enumerate.</para>
      <para>When making multiple calls to <b>MsiEnumProductsEx</b> to enumerate all of the products, each call must be made from the same thread.</para>
      <para>A user must have administrator privileges to enumerate products across all user accounts or a user account other than the current user account. The enumeration skips products that are advertised only (such as products  not installed) in the per-user-unmanaged context when enumerating across all users or a user other than the current user.</para>
      <para>Use <see cref="MsiGetProductInfoEx" /> to get the state or other information about each product instance enumerated by <b>MsiEnumProductsEx</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProductsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiEnumProducts" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiEnumProducts">
    <summary>
      <para>The
<b>MsiEnumProducts</b> function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine <a href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">installation context</a> and advertisements are enumerated.</para>
    </summary>
    <param name="iProductIndex">
      <para>Specifies the index of the product to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application should initially call the
<b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumProductsA">
    <summary>
      <para>The
<b>MsiEnumProducts</b> function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine <a href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">installation context</a> and advertisements are enumerated.</para>
    </summary>
    <param name="iProductIndex">
      <para>Specifies the index of the product to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application should initially call the
<b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumProductsW">
    <summary>
      <para>The
<b>MsiEnumProducts</b> function enumerates through all the products currently advertised or installed. Products that are installed in both the per-user and per-machine <a href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">installation context</a> and advertisements are enumerated.</para>
    </summary>
    <param name="iProductIndex">
      <para>Specifies the index of the product to retrieve. This parameter should be zero for the first call to the
<b>MsiEnumProducts</b> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</para>
    </param>
    <param name="lpProductBuf">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To enumerate products, an application should initially call the
<b>MsiEnumProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumProducts</b> until there are no more products (until the function returns ERROR_NO_MORE_ITEMS).</para>
      <para>When making multiple calls to
<b>MsiEnumProducts</b> to enumerate all of the products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiEnumRelatedProducts">
    <summary>
      <para>The
<b>MsiEnumRelatedProducts</b> function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property in their
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property table</a>.</para>
    </summary>
    <param name="lpUpgradeCode">
      <para>The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.</para>
    </param>
    <param name="dwReserved">
      <para>This parameter is reserved and must be 0.</para>
    </param>
    <param name="iProductIndex">
      <para>The zero-based index into the registered products.</para>
    </param>
    <param name="lpProductBuf">
      <para>A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property.</para>
      <para>To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the
<b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.</para>
      <para>When making multiple calls to
<b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumRelatedProductsA">
    <summary>
      <para>The
<b>MsiEnumRelatedProducts</b> function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property in their
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property table</a>.</para>
    </summary>
    <param name="lpUpgradeCode">
      <para>The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.</para>
    </param>
    <param name="dwReserved">
      <para>This parameter is reserved and must be 0.</para>
    </param>
    <param name="iProductIndex">
      <para>The zero-based index into the registered products.</para>
    </param>
    <param name="lpProductBuf">
      <para>A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property.</para>
      <para>To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the
<b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.</para>
      <para>When making multiple calls to
<b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumRelatedProductsW">
    <summary>
      <para>The
<b>MsiEnumRelatedProducts</b> function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property in their
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property table</a>.</para>
    </summary>
    <param name="lpUpgradeCode">
      <para>The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.</para>
    </param>
    <param name="dwReserved">
      <para>This parameter is reserved and must be 0.</para>
    </param>
    <param name="iProductIndex">
      <para>The zero-based index into the registered products.</para>
    </param>
    <param name="lpProductBuf">
      <para>A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property.</para>
      <para>To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the
<b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.</para>
      <para>When making multiple calls to
<b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumRelatedProducts">
    <summary>
      <para>The
<b>MsiEnumRelatedProducts</b> function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property in their
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property table</a>.</para>
    </summary>
    <param name="lpUpgradeCode">
      <para>The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.</para>
    </param>
    <param name="dwReserved">
      <para>This parameter is reserved and must be 0.</para>
    </param>
    <param name="iProductIndex">
      <para>The zero-based index into the registered products.</para>
    </param>
    <param name="lpProductBuf">
      <para>A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property.</para>
      <para>To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the
<b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.</para>
      <para>When making multiple calls to
<b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumRelatedProductsA">
    <summary>
      <para>The
<b>MsiEnumRelatedProducts</b> function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property in their
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property table</a>.</para>
    </summary>
    <param name="lpUpgradeCode">
      <para>The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.</para>
    </param>
    <param name="dwReserved">
      <para>This parameter is reserved and must be 0.</para>
    </param>
    <param name="iProductIndex">
      <para>The zero-based index into the registered products.</para>
    </param>
    <param name="lpProductBuf">
      <para>A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property.</para>
      <para>To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the
<b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.</para>
      <para>When making multiple calls to
<b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumRelatedProductsW">
    <summary>
      <para>The
<b>MsiEnumRelatedProducts</b> function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property in their
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property table</a>.</para>
    </summary>
    <param name="lpUpgradeCode">
      <para>The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.</para>
    </param>
    <param name="dwReserved">
      <para>This parameter is reserved and must be 0.</para>
    </param>
    <param name="iProductIndex">
      <para>The zero-based index into the registered products.</para>
    </param>
    <param name="lpProductBuf">
      <para>A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no products to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available starting with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> property.</para>
      <para>To enumerate currently installed and advertised products that have a specific upgrade code, an application should initially call the
<b>MsiEnumRelatedProducts</b> function with the <i>iProductIndex</i> parameter set to zero. The application should then increment the <i>iProductIndex</i> parameter and call
<b>MsiEnumRelatedProducts</b> until the function returns ERROR_NO_MORE_ITEMS, which means there are no more products with the specified upgrade code.</para>
      <para>When making multiple calls to
<b>MsiEnumRelatedProducts</b> to enumerate all of the related products, each call should be made from the same thread.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiEnumRelatedProducts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiExtractPatchXMLData">
    <summary>
      <para>The <b>MsiExtractPatchXMLData</b> function extracts information from a patch  that can be used to determine if the patch applies to a target system. The function returns an XML string that can be provided to <see cref="MsiDeterminePatchSequence" /> and <see cref="MsiDetermineApplicablePatches" /> instead of the full patch file. The returned information  can be used to determine whether the patch is applicable.</para>
    </summary>
    <param name="szPatchPath">
      <para>The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwReserved">
      <para>A reserved argument that must be 0 (zero).</para>
    </param>
    <param name="szXMLData">
      <para>A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.</para>
    </param>
    <param name="pcchXMLData">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiExtractPatchXMLData</b> function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a way that is not identified by any of the return values in this table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned  if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDetermineApplicablePatches " />
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiExtractPatchXMLDataA">
    <summary>
      <para>The <b>MsiExtractPatchXMLData</b> function extracts information from a patch  that can be used to determine if the patch applies to a target system. The function returns an XML string that can be provided to <see cref="MsiDeterminePatchSequence" /> and <see cref="MsiDetermineApplicablePatches" /> instead of the full patch file. The returned information  can be used to determine whether the patch is applicable.</para>
    </summary>
    <param name="szPatchPath">
      <para>The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwReserved">
      <para>A reserved argument that must be 0 (zero).</para>
    </param>
    <param name="szXMLData">
      <para>A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.</para>
    </param>
    <param name="pcchXMLData">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiExtractPatchXMLData</b> function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a way that is not identified by any of the return values in this table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned  if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDetermineApplicablePatches " />
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiExtractPatchXMLDataW">
    <summary>
      <para>The <b>MsiExtractPatchXMLData</b> function extracts information from a patch  that can be used to determine if the patch applies to a target system. The function returns an XML string that can be provided to <see cref="MsiDeterminePatchSequence" /> and <see cref="MsiDetermineApplicablePatches" /> instead of the full patch file. The returned information  can be used to determine whether the patch is applicable.</para>
    </summary>
    <param name="szPatchPath">
      <para>The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwReserved">
      <para>A reserved argument that must be 0 (zero).</para>
    </param>
    <param name="szXMLData">
      <para>A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.</para>
    </param>
    <param name="pcchXMLData">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiExtractPatchXMLData</b> function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a way that is not identified by any of the return values in this table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned  if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDetermineApplicablePatches " />
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiExtractPatchXMLData">
    <summary>
      <para>The <b>MsiExtractPatchXMLData</b> function extracts information from a patch  that can be used to determine if the patch applies to a target system. The function returns an XML string that can be provided to <see cref="MsiDeterminePatchSequence" /> and <see cref="MsiDetermineApplicablePatches" /> instead of the full patch file. The returned information  can be used to determine whether the patch is applicable.</para>
    </summary>
    <param name="szPatchPath">
      <para>The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwReserved">
      <para>A reserved argument that must be 0 (zero).</para>
    </param>
    <param name="szXMLData">
      <para>A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.</para>
    </param>
    <param name="pcchXMLData">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiExtractPatchXMLData</b> function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a way that is not identified by any of the return values in this table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned  if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDetermineApplicablePatches " />
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiExtractPatchXMLDataA">
    <summary>
      <para>The <b>MsiExtractPatchXMLData</b> function extracts information from a patch  that can be used to determine if the patch applies to a target system. The function returns an XML string that can be provided to <see cref="MsiDeterminePatchSequence" /> and <see cref="MsiDetermineApplicablePatches" /> instead of the full patch file. The returned information  can be used to determine whether the patch is applicable.</para>
    </summary>
    <param name="szPatchPath">
      <para>The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwReserved">
      <para>A reserved argument that must be 0 (zero).</para>
    </param>
    <param name="szXMLData">
      <para>A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.</para>
    </param>
    <param name="pcchXMLData">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiExtractPatchXMLData</b> function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a way that is not identified by any of the return values in this table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned  if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDetermineApplicablePatches " />
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiExtractPatchXMLDataW">
    <summary>
      <para>The <b>MsiExtractPatchXMLData</b> function extracts information from a patch  that can be used to determine if the patch applies to a target system. The function returns an XML string that can be provided to <see cref="MsiDeterminePatchSequence" /> and <see cref="MsiDetermineApplicablePatches" /> instead of the full patch file. The returned information  can be used to determine whether the patch is applicable.</para>
    </summary>
    <param name="szPatchPath">
      <para>The  full path to the patch that is being queried. Pass in as a null-terminated string. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwReserved">
      <para>A reserved argument that must be 0 (zero).</para>
    </param>
    <param name="szXMLData">
      <para>A pointer to a buffer to hold the XML string that contains the extracted patch information. This buffer should be large enough to contain the received information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szXMLData</i> is set to <b>NULL</b> and <i>pcchXMLData</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchXMLData</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szXMLData</i> buffer large enough to contain *<i>pcchXMLData</i> + 1 characters.</para>
    </param>
    <param name="pcchXMLData">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szXMLData</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>If this parameter is set to <b>NULL</b>, the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiExtractPatchXMLData</b> function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed in a way that is not identified by any of the return values in this table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This error can be returned  if MSXML 3.0 is not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-extractpatchxmldata">ExtractPatchXMLData</a> method of the <a href="https://docs.microsoft.com//windows/desktop/Msi/installer-object">Installer</a> object uses the <b>MsiExtractPatchXMLData</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiExtractPatchXMLData as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiDetermineApplicablePatches " />
    <seealso cref="MsiDeterminePatchSequence" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiGetComponentPath">
    <summary>
      <para>The
<b>MsiGetComponentPath</b> function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the client product.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPath</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathA">
    <summary>
      <para>The
<b>MsiGetComponentPath</b> function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the client product.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPath</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathW">
    <summary>
      <para>The
<b>MsiGetComponentPath</b> function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the client product.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPath</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathEx">
    <summary>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the full path to an installed component. If the key path for the component is a registry key then the function returns the registry key.</para>
      <para>This function extends the existing <see cref="MsiGetComponentPath" /> function to enable searches for components across user accounts and installation contexts.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.</para>
    </param>
    <param name="szComponentCode">
      <para>A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.</para>
    </param>
    <param name="szUserSid">
      <para>A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that specifies the installation context. The function gets the paths of installed components of applications installed in the specified installation context. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed  in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpOutPathBuffer">
      <para>A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchOutPathBuffer">
      <para>Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>Configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BROKEN</b>
            </para>
          </description>
          <description>
            <para>The component is corrupt or partially missing in some way and requires repair.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathExA">
    <summary>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the full path to an installed component. If the key path for the component is a registry key then the function returns the registry key.</para>
      <para>This function extends the existing <see cref="MsiGetComponentPath" /> function to enable searches for components across user accounts and installation contexts.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.</para>
    </param>
    <param name="szComponentCode">
      <para>A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.</para>
    </param>
    <param name="szUserSid">
      <para>A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that specifies the installation context. The function gets the paths of installed components of applications installed in the specified installation context. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed  in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpOutPathBuffer">
      <para>A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchOutPathBuffer">
      <para>Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>Configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BROKEN</b>
            </para>
          </description>
          <description>
            <para>The component is corrupt or partially missing in some way and requires repair.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathExW">
    <summary>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the full path to an installed component. If the key path for the component is a registry key then the function returns the registry key.</para>
      <para>This function extends the existing <see cref="MsiGetComponentPath" /> function to enable searches for components across user accounts and installation contexts.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.</para>
    </param>
    <param name="szComponentCode">
      <para>A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.</para>
    </param>
    <param name="szUserSid">
      <para>A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that specifies the installation context. The function gets the paths of installed components of applications installed in the specified installation context. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed  in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpOutPathBuffer">
      <para>A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchOutPathBuffer">
      <para>Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>Configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BROKEN</b>
            </para>
          </description>
          <description>
            <para>The component is corrupt or partially missing in some way and requires repair.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathEx">
    <summary>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the full path to an installed component. If the key path for the component is a registry key then the function returns the registry key.</para>
      <para>This function extends the existing <see cref="MsiGetComponentPath" /> function to enable searches for components across user accounts and installation contexts.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.</para>
    </param>
    <param name="szComponentCode">
      <para>A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.</para>
    </param>
    <param name="szUserSid">
      <para>A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that specifies the installation context. The function gets the paths of installed components of applications installed in the specified installation context. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed  in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpOutPathBuffer">
      <para>A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchOutPathBuffer">
      <para>Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>Configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BROKEN</b>
            </para>
          </description>
          <description>
            <para>The component is corrupt or partially missing in some way and requires repair.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathExA">
    <summary>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the full path to an installed component. If the key path for the component is a registry key then the function returns the registry key.</para>
      <para>This function extends the existing <see cref="MsiGetComponentPath" /> function to enable searches for components across user accounts and installation contexts.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.</para>
    </param>
    <param name="szComponentCode">
      <para>A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.</para>
    </param>
    <param name="szUserSid">
      <para>A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that specifies the installation context. The function gets the paths of installed components of applications installed in the specified installation context. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed  in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpOutPathBuffer">
      <para>A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchOutPathBuffer">
      <para>Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>Configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BROKEN</b>
            </para>
          </description>
          <description>
            <para>The component is corrupt or partially missing in some way and requires repair.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathExW">
    <summary>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the full path to an installed component. If the key path for the component is a registry key then the function returns the registry key.</para>
      <para>This function extends the existing <see cref="MsiGetComponentPath" /> function to enable searches for components across user accounts and installation contexts.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value that specifies an application's product code GUID. The function gets  the path of installed components used by this application.</para>
    </param>
    <param name="szComponentCode">
      <para>A null-terminated string value that specifies a component code GUID. The function gets the path of an installed component having this component code.</para>
    </param>
    <param name="szUserSid">
      <para>A  null-terminated string value that specifies the security identifier (SID) for a user in the system.  The function gets the paths of installed components  of applications installed under the user accounts identified by this SID. The special SID string s-1-1-0 (Everyone) specifies all users in the system. If this parameter is <b>NULL</b>, the function gets the path of an installed component for the currently logged-on user only.</para>
      <list type="table">
        <listheader>
          <description>SID type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies a particular user in the system. An example of an user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>Specifies all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (System) cannot be used to search applications installed in the per-machine installation context.  Setting the SID value to s-1-5-18 returns <b>ERROR_INVALID_PARAMETER</b>. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>A flag that specifies the installation context. The function gets the paths of installed components of applications installed in the specified installation context. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed  in  the per–user–managed installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in  the per–user–unmanaged installation context.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include applications installed in the per-machine installation context. When <i>dwInstallContext</i> is set to <b>MSIINSTALLCONTEXT_MACHINE</b> only, the <i>szUserSID</i> parameter must be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpOutPathBuffer">
      <para>A string value that receives the path to the component. This parameter can be <b>NULL</b>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchOutPathBuffer">
      <para>Pointer to a location that receives the size of the buffer, in <b>TCHAR</b>, pointed to by the <i>szPathBuf</i> parameter.  The value in this location should be set to the count of  <b>TCHAR</b> in the string including the terminating null character. If the size of the  buffer  is too small, this parameter receives the length of the string value without including the terminating null character in the count.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPathEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>Configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BROKEN</b>
            </para>
          </description>
          <description>
            <para>The component is corrupt or partially missing in some way and requires repair.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiGetComponentPathEx</b> function might return <b>INSTALLSTATE_ABSENT</b> or <b>INSTALL_STATE_UNKNOWN</b>, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPathEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPath">
    <summary>
      <para>The
<b>MsiGetComponentPath</b> function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the client product.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPath</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathA">
    <summary>
      <para>The
<b>MsiGetComponentPath</b> function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the client product.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPath</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentPathW">
    <summary>
      <para>The
<b>MsiGetComponentPath</b> function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the client product.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path on a 32-bit operating system of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "01:\SOFTWARE\Microsoft". The registry roots returned on 32-bit operating systems are defined as shown in the following table.</para>
      <para>
        <b>Note</b>  On 64-bit operating systems, a value of 20 is added to the numerical registry roots in this table to distinguish them from registry key paths on 32-bit operating systems.
For example, a registry key path of <b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b>\<b>Microsoft</b> is returned as "21:\SOFTWARE\Microsoft", if the component path is a registry key on a 64-bit operating system.</para>
      <list type="table">
        <listheader>
          <description>Root</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
          <description>
            <para>00</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
          <description>
            <para>01</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>02</para>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
          <description>
            <para>03</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentPath</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiGetComponentPath</b> function, the <i>pcchBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiGetComponentPath</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetComponentPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureInfo">
    <summary>
      <para>The
<b>MsiGetFeatureInfo</b> function returns descriptive information for a feature.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product that owns the feature. This handle is obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Feature code for the feature about which information should be returned.</para>
    </param>
    <param name="lpAttributes">
      <para>Pointer to a location containing one or more of the following Attribute flags.</para>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h4>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>. The values that <b>MsiGetFeatureInfo</b> returns are double the values in the Attributes column of the Feature Table.</para>
    </param>
    <param name="lpTitleBuf">
      <para>Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
      <para>This parameter is optional and can be null.</para>
    </param>
    <param name="pcchTitleBuf">
      <para>As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpHelpBuf">
      <para>Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.
This parameter is optional and can be null.</para>
    </param>
    <param name="pcchHelpBuf">
      <para>As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The product handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function returns successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature is not known.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The buffer sizes for the
<b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureInfoA">
    <summary>
      <para>The
<b>MsiGetFeatureInfo</b> function returns descriptive information for a feature.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product that owns the feature. This handle is obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Feature code for the feature about which information should be returned.</para>
    </param>
    <param name="lpAttributes">
      <para>Pointer to a location containing one or more of the following Attribute flags.</para>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h4>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>. The values that <b>MsiGetFeatureInfo</b> returns are double the values in the Attributes column of the Feature Table.</para>
    </param>
    <param name="lpTitleBuf">
      <para>Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
      <para>This parameter is optional and can be null.</para>
    </param>
    <param name="pcchTitleBuf">
      <para>As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpHelpBuf">
      <para>Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.
This parameter is optional and can be null.</para>
    </param>
    <param name="pcchHelpBuf">
      <para>As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The product handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function returns successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature is not known.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The buffer sizes for the
<b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureInfoW">
    <summary>
      <para>The
<b>MsiGetFeatureInfo</b> function returns descriptive information for a feature.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product that owns the feature. This handle is obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Feature code for the feature about which information should be returned.</para>
    </param>
    <param name="lpAttributes">
      <para>Pointer to a location containing one or more of the following Attribute flags.</para>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h4>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>. The values that <b>MsiGetFeatureInfo</b> returns are double the values in the Attributes column of the Feature Table.</para>
    </param>
    <param name="lpTitleBuf">
      <para>Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
      <para>This parameter is optional and can be null.</para>
    </param>
    <param name="pcchTitleBuf">
      <para>As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpHelpBuf">
      <para>Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.
This parameter is optional and can be null.</para>
    </param>
    <param name="pcchHelpBuf">
      <para>As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The product handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function returns successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature is not known.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The buffer sizes for the
<b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureInfo">
    <summary>
      <para>The
<b>MsiGetFeatureInfo</b> function returns descriptive information for a feature.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product that owns the feature. This handle is obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Feature code for the feature about which information should be returned.</para>
    </param>
    <param name="lpAttributes">
      <para>Pointer to a location containing one or more of the following Attribute flags.</para>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h4>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>. The values that <b>MsiGetFeatureInfo</b> returns are double the values in the Attributes column of the Feature Table.</para>
    </param>
    <param name="lpTitleBuf">
      <para>Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
      <para>This parameter is optional and can be null.</para>
    </param>
    <param name="pcchTitleBuf">
      <para>As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpHelpBuf">
      <para>Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.
This parameter is optional and can be null.</para>
    </param>
    <param name="pcchHelpBuf">
      <para>As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h5>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The product handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function returns successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature is not known.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The buffer sizes for the
<b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureInfoA">
    <summary>
      <para>The
<b>MsiGetFeatureInfo</b> function returns descriptive information for a feature.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product that owns the feature. This handle is obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Feature code for the feature about which information should be returned.</para>
    </param>
    <param name="lpAttributes">
      <para>Pointer to a location containing one or more of the following Attribute flags.</para>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h4>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>. The values that <b>MsiGetFeatureInfo</b> returns are double the values in the Attributes column of the Feature Table.</para>
    </param>
    <param name="lpTitleBuf">
      <para>Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
      <para>This parameter is optional and can be null.</para>
    </param>
    <param name="pcchTitleBuf">
      <para>As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpHelpBuf">
      <para>Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.
This parameter is optional and can be null.</para>
    </param>
    <param name="pcchHelpBuf">
      <para>As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h5>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The product handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function returns successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature is not known.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The buffer sizes for the
<b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureInfoW">
    <summary>
      <para>The
<b>MsiGetFeatureInfo</b> function returns descriptive information for a feature.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product that owns the feature. This handle is obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Feature code for the feature about which information should be returned.</para>
    </param>
    <param name="lpAttributes">
      <para>Pointer to a location containing one or more of the following Attribute flags.</para>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h4>
      <h4>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h4>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>. The values that <b>MsiGetFeatureInfo</b> returns are double the values in the Attributes column of the Feature Table.</para>
    </param>
    <param name="lpTitleBuf">
      <para>Pointer to a buffer to receive the localized name of the feature, which corresponds to the Title field in the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</a>.</para>
      <para>This parameter is optional and can be null.</para>
    </param>
    <param name="pcchTitleBuf">
      <para>As input, the size of <i>lpTitleBuf</i>. As output, the number of characters returned in <i>lpTitleBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer that is passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpHelpBuf">
      <para>Pointer to a buffer to receive the localized description of the feature, which corresponds to the Description field for the feature in the  <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.
This parameter is optional and can be null.</para>
    </param>
    <param name="pcchHelpBuf">
      <para>As input, the size of <i>lpHelpBuf</i>. As output, the number of characters returned in <i>lpHelpBuf</i>. On input, this is the full size of the buffer, and includes a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE (16)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORADVERTISE (8)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORLOCAL (1)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FAVORSOURCE (2)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_FOLLOWPARENT (4)</h5>
      <h5>- lpAttributes.INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE (32)</h5>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The product handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function returns successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature is not known.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The buffer sizes for the
<b>MsiGetFeatureInfo</b> function should include an extra character for the terminating null character. If a buffer is too small, the returned string is truncated with null, and the buffer size contains the number of characters in the whole string, not including the terminating null character. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureUsage">
    <summary>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the usage metrics for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature code for the feature for which metrics are to be returned.</para>
    </param>
    <param name="pdwUseCount">
      <para>Indicates the number of times the feature has been used.</para>
    </param>
    <param name="pwDateUsed">
      <para>Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Bits</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0 – 4</para>
          </description>
          <description>
            <para>Day of the month (1-31)</para>
          </description>
        </item>
        <item>
          <description>
            <para>5 – 8</para>
          </description>
          <description>
            <para>Month (1 = January, 2 = February, and so on)</para>
          </description>
        </item>
        <item>
          <description>
            <para>9 – 15</para>
          </description>
          <description>
            <para>Year offset from 1980 (add 1980 to get actual year)</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>No usage information is available or the product or feature is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureUsageA">
    <summary>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the usage metrics for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature code for the feature for which metrics are to be returned.</para>
    </param>
    <param name="pdwUseCount">
      <para>Indicates the number of times the feature has been used.</para>
    </param>
    <param name="pwDateUsed">
      <para>Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Bits</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0 – 4</para>
          </description>
          <description>
            <para>Day of the month (1-31)</para>
          </description>
        </item>
        <item>
          <description>
            <para>5 – 8</para>
          </description>
          <description>
            <para>Month (1 = January, 2 = February, and so on)</para>
          </description>
        </item>
        <item>
          <description>
            <para>9 – 15</para>
          </description>
          <description>
            <para>Year offset from 1980 (add 1980 to get actual year)</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>No usage information is available or the product or feature is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureUsageW">
    <summary>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the usage metrics for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature code for the feature for which metrics are to be returned.</para>
    </param>
    <param name="pdwUseCount">
      <para>Indicates the number of times the feature has been used.</para>
    </param>
    <param name="pwDateUsed">
      <para>Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Bits</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0 – 4</para>
          </description>
          <description>
            <para>Day of the month (1-31)</para>
          </description>
        </item>
        <item>
          <description>
            <para>5 – 8</para>
          </description>
          <description>
            <para>Month (1 = January, 2 = February, and so on)</para>
          </description>
        </item>
        <item>
          <description>
            <para>9 – 15</para>
          </description>
          <description>
            <para>Year offset from 1980 (add 1980 to get actual year)</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>No usage information is available or the product or feature is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureUsage">
    <summary>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the usage metrics for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature code for the feature for which metrics are to be returned.</para>
    </param>
    <param name="pdwUseCount">
      <para>Indicates the number of times the feature has been used.</para>
    </param>
    <param name="pwDateUsed">
      <para>Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Bits</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0 – 4</para>
          </description>
          <description>
            <para>Day of the month (1-31)</para>
          </description>
        </item>
        <item>
          <description>
            <para>5 – 8</para>
          </description>
          <description>
            <para>Month (1 = January, 2 = February, and so on)</para>
          </description>
        </item>
        <item>
          <description>
            <para>9 – 15</para>
          </description>
          <description>
            <para>Year offset from 1980 (add 1980 to get actual year)</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>No usage information is available or the product or feature is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureUsageA">
    <summary>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the usage metrics for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature code for the feature for which metrics are to be returned.</para>
    </param>
    <param name="pdwUseCount">
      <para>Indicates the number of times the feature has been used.</para>
    </param>
    <param name="pwDateUsed">
      <para>Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Bits</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0 – 4</para>
          </description>
          <description>
            <para>Day of the month (1-31)</para>
          </description>
        </item>
        <item>
          <description>
            <para>5 – 8</para>
          </description>
          <description>
            <para>Month (1 = January, 2 = February, and so on)</para>
          </description>
        </item>
        <item>
          <description>
            <para>9 – 15</para>
          </description>
          <description>
            <para>Year offset from 1980 (add 1980 to get actual year)</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>No usage information is available or the product or feature is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureUsageW">
    <summary>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the usage metrics for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature code for the feature for which metrics are to be returned.</para>
    </param>
    <param name="pdwUseCount">
      <para>Indicates the number of times the feature has been used.</para>
    </param>
    <param name="pwDateUsed">
      <para>Specifies the date that the feature was last used. The date is in the MS-DOS date format, as shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Bits</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0 – 4</para>
          </description>
          <description>
            <para>Day of the month (1-31)</para>
          </description>
        </item>
        <item>
          <description>
            <para>5 – 8</para>
          </description>
          <description>
            <para>Month (1 = January, 2 = February, and so on)</para>
          </description>
        </item>
        <item>
          <description>
            <para>9 – 15</para>
          </description>
          <description>
            <para>Year offset from 1980 (add 1980 to get actual year)</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureUsage</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>No usage information is available or the product or feature is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFeatureUsage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFileHash">
    <summary>
      <para>The
<b>MsiGetFileHash</b> function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use
<b>MsiGetFileHash</b> to obtain the file hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</a>.</para>
      <para>Windows Installer uses file hashing as a means to detect and eliminate unnecessary file copying. A file hash stored in the MsiFileHash table may be compared to a hash of an existing file on the user's computer.</para>
    </summary>
    <param name="szFilePath">
      <para>Path to file that is to be hashed.</para>
    </param>
    <param name="dwOptions">
      <para>The value in this column must be 0. This parameter is reserved for future use.</para>
    </param>
    <param name="pHash">
      <para>Pointer to the returned file hash information.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The file does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by
<b>MsiGetFileHash</b> correspond to the four fields of the
<see cref="MSIFILEHASHINFO" /> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.</para>
      <para>The hash information entered into the MsiFileHash table must be obtained by calling
<b>MsiGetFileHash</b> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/default-file-versioning">Default File Versioning</seealso>
    <seealso cref="MSIFILEHASHINFO" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</seealso>
  </member>
  <member name="Windows.MsiGetFileHashA">
    <summary>
      <para>The
<b>MsiGetFileHash</b> function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use
<b>MsiGetFileHash</b> to obtain the file hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</a>.</para>
      <para>Windows Installer uses file hashing as a means to detect and eliminate unnecessary file copying. A file hash stored in the MsiFileHash table may be compared to a hash of an existing file on the user's computer.</para>
    </summary>
    <param name="szFilePath">
      <para>Path to file that is to be hashed.</para>
    </param>
    <param name="dwOptions">
      <para>The value in this column must be 0. This parameter is reserved for future use.</para>
    </param>
    <param name="pHash">
      <para>Pointer to the returned file hash information.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The file does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by
<b>MsiGetFileHash</b> correspond to the four fields of the
<see cref="MSIFILEHASHINFO" /> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.</para>
      <para>The hash information entered into the MsiFileHash table must be obtained by calling
<b>MsiGetFileHash</b> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/default-file-versioning">Default File Versioning</seealso>
    <seealso cref="MSIFILEHASHINFO" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</seealso>
  </member>
  <member name="Windows.MsiGetFileHashW">
    <summary>
      <para>The
<b>MsiGetFileHash</b> function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use
<b>MsiGetFileHash</b> to obtain the file hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</a>.</para>
      <para>Windows Installer uses file hashing as a means to detect and eliminate unnecessary file copying. A file hash stored in the MsiFileHash table may be compared to a hash of an existing file on the user's computer.</para>
    </summary>
    <param name="szFilePath">
      <para>Path to file that is to be hashed.</para>
    </param>
    <param name="dwOptions">
      <para>The value in this column must be 0. This parameter is reserved for future use.</para>
    </param>
    <param name="pHash">
      <para>Pointer to the returned file hash information.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The file does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by
<b>MsiGetFileHash</b> correspond to the four fields of the
<see cref="MSIFILEHASHINFO" /> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.</para>
      <para>The hash information entered into the MsiFileHash table must be obtained by calling
<b>MsiGetFileHash</b> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/default-file-versioning">Default File Versioning</seealso>
    <seealso cref="MSIFILEHASHINFO" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</seealso>
  </member>
  <member name="Windows.MsiGetFileHash">
    <summary>
      <para>The
<b>MsiGetFileHash</b> function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use
<b>MsiGetFileHash</b> to obtain the file hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</a>.</para>
      <para>Windows Installer uses file hashing as a means to detect and eliminate unnecessary file copying. A file hash stored in the MsiFileHash table may be compared to a hash of an existing file on the user's computer.</para>
    </summary>
    <param name="szFilePath">
      <para>Path to file that is to be hashed.</para>
    </param>
    <param name="dwOptions">
      <para>The value in this column must be 0. This parameter is reserved for future use.</para>
    </param>
    <param name="pHash">
      <para>Pointer to the returned file hash information.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The file does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by
<b>MsiGetFileHash</b> correspond to the four fields of the
<see cref="MSIFILEHASHINFO" /> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.</para>
      <para>The hash information entered into the MsiFileHash table must be obtained by calling
<b>MsiGetFileHash</b> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/default-file-versioning">Default File Versioning</seealso>
    <seealso cref="MSIFILEHASHINFO" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</seealso>
  </member>
  <member name="Windows.MsiGetFileHashA">
    <summary>
      <para>The
<b>MsiGetFileHash</b> function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use
<b>MsiGetFileHash</b> to obtain the file hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</a>.</para>
      <para>Windows Installer uses file hashing as a means to detect and eliminate unnecessary file copying. A file hash stored in the MsiFileHash table may be compared to a hash of an existing file on the user's computer.</para>
    </summary>
    <param name="szFilePath">
      <para>Path to file that is to be hashed.</para>
    </param>
    <param name="dwOptions">
      <para>The value in this column must be 0. This parameter is reserved for future use.</para>
    </param>
    <param name="pHash">
      <para>Pointer to the returned file hash information.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The file does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by
<b>MsiGetFileHash</b> correspond to the four fields of the
<see cref="MSIFILEHASHINFO" /> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.</para>
      <para>The hash information entered into the MsiFileHash table must be obtained by calling
<b>MsiGetFileHash</b> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/default-file-versioning">Default File Versioning</seealso>
    <seealso cref="MSIFILEHASHINFO" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</seealso>
  </member>
  <member name="Windows.MsiGetFileHashW">
    <summary>
      <para>The
<b>MsiGetFileHash</b> function takes the path to a file and returns a 128-bit hash of that file. Authoring tools may use
<b>MsiGetFileHash</b> to obtain the file hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</a>.</para>
      <para>Windows Installer uses file hashing as a means to detect and eliminate unnecessary file copying. A file hash stored in the MsiFileHash table may be compared to a hash of an existing file on the user's computer.</para>
    </summary>
    <param name="szFilePath">
      <para>Path to file that is to be hashed.</para>
    </param>
    <param name="dwOptions">
      <para>The value in this column must be 0. This parameter is reserved for future use.</para>
    </param>
    <param name="pHash">
      <para>Pointer to the returned file hash information.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The file does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The entire 128-bit file hash is returned as four 32-bit fields. The numbering of the four fields is zero-based. The values returned by
<b>MsiGetFileHash</b> correspond to the four fields of the
<see cref="MSIFILEHASHINFO" /> structure. The first field corresponds to the HashPart1 column of the MsiFileHash table, the second field corresponds to the HashPart2 column, the third field corresponds to the HashPart3 column, and the fourth field corresponds to the HashPart4 column.</para>
      <para>The hash information entered into the MsiFileHash table must be obtained by calling
<b>MsiGetFileHash</b> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installer-filehash">FileHash</a> method. Do not attempt to use other methods to generate the file hash.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileHash as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/default-file-versioning">Default File Versioning</seealso>
    <seealso cref="MSIFILEHASHINFO" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msifilehash-table">MsiFileHash table</seealso>
  </member>
  <member name="Windows.MsiGetFileSignatureInformation">
    <summary>
      <para>The
<b>MsiGetFileSignatureInformation</b> function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
<b>MsiGetFileSignatureInformation</b> may be called to obtain the signer certificate and hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> tables.</para>
      <para>
        <b>Windows Installer 3.0 and later:  </b>Beginning with Windows Installer 3.0, the Windows Installer can verify the digital signatures of patches (.msp files) by using the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/guidelines-for-authoring-secure-installations">Guidelines for Authoring Secure Installations</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>.</para>
      <para>
        <b>Windows Installer 2.0:  </b>Digital signatures of patches is not supported. Windows Installer 2.0 uses digital signatures as a means to detect corrupted resources, and can only verify the digital signatures of external cabinets, and only by the use of the <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables.</para>
    </summary>
    <param name="szSignedObjectPath">
      <para>Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.</para>
    </param>
    <param name="dwFlags">
      <para>Special error case flags.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSI_INVALID_HASH_IS_FATAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error.</para>
            <para>To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppcCertContext">
      <para>Returned signer certificate context</para>
    </param>
    <param name="pbHashData">
      <para>Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.</para>
    </param>
    <param name="pcbHashData">
      <para>Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS/S_OK</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Invalid parameter was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>
              <see cref="WinVerifyTrust" /> is not available on the system.
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_NOSIGNATURE</b>
            </para>
          </description>
          <description>
            <para>File is not signed</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_BAD_DIGEST</b>
            </para>
          </description>
          <description>
            <para>The file's current hash is invalid according to the hash stored in the file's digital signature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_REVOKED</b>
            </para>
          </description>
          <description>
            <para>The file's signer certificate has been revoked. The file's digital signature is compromised.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_NOT_TRUSTED</b>
            </para>
          </description>
          <description>
            <para>The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_PROVIDER_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider is not recognized on this system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_ACTION_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the specified action.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_FORM_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the form specified for the subject.</para>
          </description>
        </item>
      </list>
      <para>
        <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by
<b>HRESULT_FROM_WIN32</b>.</para>
    </returns>
    <remarks>
      <para>When requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.</para>
      <para>The certificate context and hash information is extracted from the file by a call to <see cref="WinVerifyTrust" />. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.</para>
      <para>Note that
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/digital-signatures-and-windows-installer">Digital Signatures and Windows Installer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate table</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature table</seealso>
  </member>
  <member name="Windows.MsiGetFileSignatureInformationA">
    <summary>
      <para>The
<b>MsiGetFileSignatureInformation</b> function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
<b>MsiGetFileSignatureInformation</b> may be called to obtain the signer certificate and hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> tables.</para>
      <para>
        <b>Windows Installer 3.0 and later:  </b>Beginning with Windows Installer 3.0, the Windows Installer can verify the digital signatures of patches (.msp files) by using the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/guidelines-for-authoring-secure-installations">Guidelines for Authoring Secure Installations</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>.</para>
      <para>
        <b>Windows Installer 2.0:  </b>Digital signatures of patches is not supported. Windows Installer 2.0 uses digital signatures as a means to detect corrupted resources, and can only verify the digital signatures of external cabinets, and only by the use of the <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables.</para>
    </summary>
    <param name="szSignedObjectPath">
      <para>Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.</para>
    </param>
    <param name="dwFlags">
      <para>Special error case flags.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSI_INVALID_HASH_IS_FATAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error.</para>
            <para>To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppcCertContext">
      <para>Returned signer certificate context</para>
    </param>
    <param name="pbHashData">
      <para>Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.</para>
    </param>
    <param name="pcbHashData">
      <para>Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS/S_OK</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Invalid parameter was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>
              <see cref="WinVerifyTrust" /> is not available on the system.
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_NOSIGNATURE</b>
            </para>
          </description>
          <description>
            <para>File is not signed</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_BAD_DIGEST</b>
            </para>
          </description>
          <description>
            <para>The file's current hash is invalid according to the hash stored in the file's digital signature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_REVOKED</b>
            </para>
          </description>
          <description>
            <para>The file's signer certificate has been revoked. The file's digital signature is compromised.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_NOT_TRUSTED</b>
            </para>
          </description>
          <description>
            <para>The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_PROVIDER_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider is not recognized on this system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_ACTION_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the specified action.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_FORM_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the form specified for the subject.</para>
          </description>
        </item>
      </list>
      <para>
        <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by
<b>HRESULT_FROM_WIN32</b>.</para>
    </returns>
    <remarks>
      <para>When requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.</para>
      <para>The certificate context and hash information is extracted from the file by a call to <see cref="WinVerifyTrust" />. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.</para>
      <para>Note that
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/digital-signatures-and-windows-installer">Digital Signatures and Windows Installer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate table</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature table</seealso>
  </member>
  <member name="Windows.MsiGetFileSignatureInformationW">
    <summary>
      <para>The
<b>MsiGetFileSignatureInformation</b> function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
<b>MsiGetFileSignatureInformation</b> may be called to obtain the signer certificate and hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> tables.</para>
      <para>
        <b>Windows Installer 3.0 and later:  </b>Beginning with Windows Installer 3.0, the Windows Installer can verify the digital signatures of patches (.msp files) by using the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/guidelines-for-authoring-secure-installations">Guidelines for Authoring Secure Installations</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>.</para>
      <para>
        <b>Windows Installer 2.0:  </b>Digital signatures of patches is not supported. Windows Installer 2.0 uses digital signatures as a means to detect corrupted resources, and can only verify the digital signatures of external cabinets, and only by the use of the <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables.</para>
    </summary>
    <param name="szSignedObjectPath">
      <para>Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.</para>
    </param>
    <param name="dwFlags">
      <para>Special error case flags.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSI_INVALID_HASH_IS_FATAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error.</para>
            <para>To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppcCertContext">
      <para>Returned signer certificate context</para>
    </param>
    <param name="pbHashData">
      <para>Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.</para>
    </param>
    <param name="pcbHashData">
      <para>Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS/S_OK</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Invalid parameter was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>
              <see cref="WinVerifyTrust" /> is not available on the system.
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_NOSIGNATURE</b>
            </para>
          </description>
          <description>
            <para>File is not signed</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_BAD_DIGEST</b>
            </para>
          </description>
          <description>
            <para>The file's current hash is invalid according to the hash stored in the file's digital signature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_REVOKED</b>
            </para>
          </description>
          <description>
            <para>The file's signer certificate has been revoked. The file's digital signature is compromised.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_NOT_TRUSTED</b>
            </para>
          </description>
          <description>
            <para>The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_PROVIDER_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider is not recognized on this system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_ACTION_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the specified action.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_FORM_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the form specified for the subject.</para>
          </description>
        </item>
      </list>
      <para>
        <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by
<b>HRESULT_FROM_WIN32</b>.</para>
    </returns>
    <remarks>
      <para>When requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.</para>
      <para>The certificate context and hash information is extracted from the file by a call to <see cref="WinVerifyTrust" />. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.</para>
      <para>Note that
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/digital-signatures-and-windows-installer">Digital Signatures and Windows Installer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate table</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature table</seealso>
  </member>
  <member name="Windows.MsiGetFileSignatureInformation">
    <summary>
      <para>The
<b>MsiGetFileSignatureInformation</b> function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
<b>MsiGetFileSignatureInformation</b> may be called to obtain the signer certificate and hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> tables.</para>
      <para>
        <b>Windows Installer 3.0 and later:  </b>Beginning with Windows Installer 3.0, the Windows Installer can verify the digital signatures of patches (.msp files) by using the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/guidelines-for-authoring-secure-installations">Guidelines for Authoring Secure Installations</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>.</para>
      <para>
        <b>Windows Installer 2.0:  </b>Digital signatures of patches is not supported. Windows Installer 2.0 uses digital signatures as a means to detect corrupted resources, and can only verify the digital signatures of external cabinets, and only by the use of the <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables.</para>
    </summary>
    <param name="szSignedObjectPath">
      <para>Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.</para>
    </param>
    <param name="dwFlags">
      <para>Special error case flags.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSI_INVALID_HASH_IS_FATAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error.</para>
            <para>To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppcCertContext">
      <para>Returned signer certificate context</para>
    </param>
    <param name="pbHashData">
      <para>Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.</para>
    </param>
    <param name="pcbHashData">
      <para>Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS/S_OK</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Invalid parameter was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>
              <see cref="WinVerifyTrust" /> is not available on the system.
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_NOSIGNATURE</b>
            </para>
          </description>
          <description>
            <para>File is not signed</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_BAD_DIGEST</b>
            </para>
          </description>
          <description>
            <para>The file's current hash is invalid according to the hash stored in the file's digital signature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_REVOKED</b>
            </para>
          </description>
          <description>
            <para>The file's signer certificate has been revoked. The file's digital signature is compromised.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_NOT_TRUSTED</b>
            </para>
          </description>
          <description>
            <para>The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_PROVIDER_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider is not recognized on this system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_ACTION_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the specified action.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_FORM_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the form specified for the subject.</para>
          </description>
        </item>
      </list>
      <para>
        <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by
<b>HRESULT_FROM_WIN32</b>.</para>
    </returns>
    <remarks>
      <para>When requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.</para>
      <para>The certificate context and hash information is extracted from the file by a call to <see cref="WinVerifyTrust" />. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.</para>
      <para>Note that
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/digital-signatures-and-windows-installer">Digital Signatures and Windows Installer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate table</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature table</seealso>
  </member>
  <member name="Windows.MsiGetFileSignatureInformationA">
    <summary>
      <para>The
<b>MsiGetFileSignatureInformation</b> function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
<b>MsiGetFileSignatureInformation</b> may be called to obtain the signer certificate and hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> tables.</para>
      <para>
        <b>Windows Installer 3.0 and later:  </b>Beginning with Windows Installer 3.0, the Windows Installer can verify the digital signatures of patches (.msp files) by using the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/guidelines-for-authoring-secure-installations">Guidelines for Authoring Secure Installations</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>.</para>
      <para>
        <b>Windows Installer 2.0:  </b>Digital signatures of patches is not supported. Windows Installer 2.0 uses digital signatures as a means to detect corrupted resources, and can only verify the digital signatures of external cabinets, and only by the use of the <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables.</para>
    </summary>
    <param name="szSignedObjectPath">
      <para>Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.</para>
    </param>
    <param name="dwFlags">
      <para>Special error case flags.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSI_INVALID_HASH_IS_FATAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error.</para>
            <para>To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppcCertContext">
      <para>Returned signer certificate context</para>
    </param>
    <param name="pbHashData">
      <para>Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.</para>
    </param>
    <param name="pcbHashData">
      <para>Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS/S_OK</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Invalid parameter was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>
              <see cref="WinVerifyTrust" /> is not available on the system.
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_NOSIGNATURE</b>
            </para>
          </description>
          <description>
            <para>File is not signed</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_BAD_DIGEST</b>
            </para>
          </description>
          <description>
            <para>The file's current hash is invalid according to the hash stored in the file's digital signature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_REVOKED</b>
            </para>
          </description>
          <description>
            <para>The file's signer certificate has been revoked. The file's digital signature is compromised.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_NOT_TRUSTED</b>
            </para>
          </description>
          <description>
            <para>The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_PROVIDER_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider is not recognized on this system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_ACTION_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the specified action.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_FORM_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the form specified for the subject.</para>
          </description>
        </item>
      </list>
      <para>
        <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by
<b>HRESULT_FROM_WIN32</b>.</para>
    </returns>
    <remarks>
      <para>When requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.</para>
      <para>The certificate context and hash information is extracted from the file by a call to <see cref="WinVerifyTrust" />. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.</para>
      <para>Note that
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/digital-signatures-and-windows-installer">Digital Signatures and Windows Installer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate table</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature table</seealso>
  </member>
  <member name="Windows.MsiGetFileSignatureInformationW">
    <summary>
      <para>The
<b>MsiGetFileSignatureInformation</b> function takes the path to a file that has been digitally signed and returns the file's signer certificate and hash.
<b>MsiGetFileSignatureInformation</b> may be called to obtain the signer certificate and hash needed to populate the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> tables.</para>
      <para>
        <b>Windows Installer 3.0 and later:  </b>Beginning with Windows Installer 3.0, the Windows Installer can verify the digital signatures of patches (.msp files) by using the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchcertificate-table">MsiPatchCertificate</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/guidelines-for-authoring-secure-installations">Guidelines for Authoring Secure Installations</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>.</para>
      <para>
        <b>Windows Installer 2.0:  </b>Digital signatures of patches is not supported. Windows Installer 2.0 uses digital signatures as a means to detect corrupted resources, and can only verify the digital signatures of external cabinets, and only by the use of the <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate</a> tables.</para>
    </summary>
    <param name="szSignedObjectPath">
      <para>Pointer to a null-terminated string specifying the full path to the file that contains the digital signature.</para>
    </param>
    <param name="dwFlags">
      <para>Special error case flags.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSI_INVALID_HASH_IS_FATAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Without this flag set, and when requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error.</para>
            <para>To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppcCertContext">
      <para>Returned signer certificate context</para>
    </param>
    <param name="pbHashData">
      <para>Returned hash buffer. This parameter can be <b>NULL</b> if the hash data is not being requested.</para>
    </param>
    <param name="pcbHashData">
      <para>Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbHashData</i> parameter. This parameter cannot be <b>NULL</b> if <i>pbHashData</i> is non-<b>NULL</b>. If ERROR_MORE_DATA is returned, <i>pbHashData</i> gives the size of the buffer required to hold the hash data. If ERROR_SUCCESS is returned, it gives the number of bytes written to the hash buffer. The <i>pcbHashData</i> parameter is ignored if <i>pbHashData</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS/S_OK</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Invalid parameter was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>
              <see cref="WinVerifyTrust" /> is not available on the system.
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data. If ERROR_MORE_DATA is returned, <i>pcbHashData</i> gives the size of the buffer required to hold the hash data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_NOSIGNATURE</b>
            </para>
          </description>
          <description>
            <para>File is not signed</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_BAD_DIGEST</b>
            </para>
          </description>
          <description>
            <para>The file's current hash is invalid according to the hash stored in the file's digital signature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_REVOKED</b>
            </para>
          </description>
          <description>
            <para>The file's signer certificate has been revoked. The file's digital signature is compromised.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_NOT_TRUSTED</b>
            </para>
          </description>
          <description>
            <para>The subject failed the specified verification action. Most trust providers return a more detailed error code that describes the reason for the failure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_PROVIDER_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider is not recognized on this system.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_ACTION_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the specified action.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TRUST_E_SUBJECT_FORM_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The trust provider does not support the form specified for the subject.</para>
          </description>
        </item>
      </list>
      <para>
        <b>MsiGetFileSignatureInformation</b> also returns all the Win32 error values mapped to their equivalent <b>HRESULT</b> data type by
<b>HRESULT_FROM_WIN32</b>.</para>
    </returns>
    <remarks>
      <para>When requesting only the certificate context, an invalid hash in the digital signature does not cause
<b>MsiGetFileSignatureInformation</b> to return a fatal error. To return a fatal error for an invalid hash, set the MSI_INVALID_HASH_IS_FATAL flag in the <i>dwFlags</i> parameter.</para>
      <para>The certificate context and hash information is extracted from the file by a call to <see cref="WinVerifyTrust" />. The <i>ppcCertContext</i> parameter is a duplicate of the signer certificate context from the signature. It is the responsibility of the caller to call <i>CertFreeCertificateContext</i> to free the certificate context when finished.</para>
      <para>Note that
<b>MsiGetFileSignatureInformation</b> requires the presence of the Wintrust.dll file on the system.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileSignatureInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/digital-signatures-and-windows-installer">Digital Signatures and Windows Installer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalcertificate-table">MsiDigitalCertificate table</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/msidigitalsignature-table">MsiDigitalSignature table</seealso>
  </member>
  <member name="Windows.MsiGetFileVersion">
    <summary>
      <para>The
<b>MsiGetFileVersion</b> returns the version string and language string in the format that the installer expects to find them in the database. If you want only version information, set <i>lpLangBuf</i> and <i>pcchLangBuf</i> to 0 (zero). If you just want language information, set <i>lpVersionBuf</i> and <i>pcchVersionBuf</i> to 0 (zero).</para>
    </summary>
    <param name="szFilePath">
      <para>Specifies the path to the file.</para>
    </param>
    <param name="lpVersionBuf">
      <para>Returns the file version.</para>
      <para>Set to 0 for language information only.</para>
    </param>
    <param name="pcchVersionBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpLangBuf">
      <para>Returns the file language.</para>
      <para>Set to 0 (zero) for version information only.</para>
    </param>
    <param name="pcchLangBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>File does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>File cannot be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_INVALID</b>
            </para>
          </description>
          <description>
            <para>File does not contain version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The version information is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFileVersionA">
    <summary>
      <para>The
<b>MsiGetFileVersion</b> returns the version string and language string in the format that the installer expects to find them in the database. If you want only version information, set <i>lpLangBuf</i> and <i>pcchLangBuf</i> to 0 (zero). If you just want language information, set <i>lpVersionBuf</i> and <i>pcchVersionBuf</i> to 0 (zero).</para>
    </summary>
    <param name="szFilePath">
      <para>Specifies the path to the file.</para>
    </param>
    <param name="lpVersionBuf">
      <para>Returns the file version.</para>
      <para>Set to 0 for language information only.</para>
    </param>
    <param name="pcchVersionBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpLangBuf">
      <para>Returns the file language.</para>
      <para>Set to 0 (zero) for version information only.</para>
    </param>
    <param name="pcchLangBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>File does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>File cannot be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_INVALID</b>
            </para>
          </description>
          <description>
            <para>File does not contain version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The version information is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFileVersionW">
    <summary>
      <para>The
<b>MsiGetFileVersion</b> returns the version string and language string in the format that the installer expects to find them in the database. If you want only version information, set <i>lpLangBuf</i> and <i>pcchLangBuf</i> to 0 (zero). If you just want language information, set <i>lpVersionBuf</i> and <i>pcchVersionBuf</i> to 0 (zero).</para>
    </summary>
    <param name="szFilePath">
      <para>Specifies the path to the file.</para>
    </param>
    <param name="lpVersionBuf">
      <para>Returns the file version.</para>
      <para>Set to 0 for language information only.</para>
    </param>
    <param name="pcchVersionBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpLangBuf">
      <para>Returns the file language.</para>
      <para>Set to 0 (zero) for version information only.</para>
    </param>
    <param name="pcchLangBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>File does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>File cannot be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_INVALID</b>
            </para>
          </description>
          <description>
            <para>File does not contain version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The version information is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFileVersion">
    <summary>
      <para>The
<b>MsiGetFileVersion</b> returns the version string and language string in the format that the installer expects to find them in the database. If you want only version information, set <i>lpLangBuf</i> and <i>pcchLangBuf</i> to 0 (zero). If you just want language information, set <i>lpVersionBuf</i> and <i>pcchVersionBuf</i> to 0 (zero).</para>
    </summary>
    <param name="szFilePath">
      <para>Specifies the path to the file.</para>
    </param>
    <param name="lpVersionBuf">
      <para>Returns the file version.</para>
      <para>Set to 0 for language information only.</para>
    </param>
    <param name="pcchVersionBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpLangBuf">
      <para>Returns the file language.</para>
      <para>Set to 0 (zero) for version information only.</para>
    </param>
    <param name="pcchLangBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>File does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>File cannot be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_INVALID</b>
            </para>
          </description>
          <description>
            <para>File does not contain version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The version information is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFileVersionA">
    <summary>
      <para>The
<b>MsiGetFileVersion</b> returns the version string and language string in the format that the installer expects to find them in the database. If you want only version information, set <i>lpLangBuf</i> and <i>pcchLangBuf</i> to 0 (zero). If you just want language information, set <i>lpVersionBuf</i> and <i>pcchVersionBuf</i> to 0 (zero).</para>
    </summary>
    <param name="szFilePath">
      <para>Specifies the path to the file.</para>
    </param>
    <param name="lpVersionBuf">
      <para>Returns the file version.</para>
      <para>Set to 0 for language information only.</para>
    </param>
    <param name="pcchVersionBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpLangBuf">
      <para>Returns the file language.</para>
      <para>Set to 0 (zero) for version information only.</para>
    </param>
    <param name="pcchLangBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>File does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>File cannot be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_INVALID</b>
            </para>
          </description>
          <description>
            <para>File does not contain version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The version information is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetFileVersionW">
    <summary>
      <para>The
<b>MsiGetFileVersion</b> returns the version string and language string in the format that the installer expects to find them in the database. If you want only version information, set <i>lpLangBuf</i> and <i>pcchLangBuf</i> to 0 (zero). If you just want language information, set <i>lpVersionBuf</i> and <i>pcchVersionBuf</i> to 0 (zero).</para>
    </summary>
    <param name="szFilePath">
      <para>Specifies the path to the file.</para>
    </param>
    <param name="lpVersionBuf">
      <para>Returns the file version.</para>
      <para>Set to 0 for language information only.</para>
    </param>
    <param name="pcchVersionBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpLangBuf">
      <para>Returns the file language.</para>
      <para>Set to 0 (zero) for version information only.</para>
    </param>
    <param name="pcchLangBuf">
      <para>In and out buffer count as the number of <b>TCHAR</b>.</para>
      <para>Set to 0 (zero) for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>Successful completion.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>File does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>File cannot be opened to get version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_INVALID</b>
            </para>
          </description>
          <description>
            <para>File does not contain version information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The version information is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>Unexpected error.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetFileVersion as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetPatchFileList">
    <summary>
      <para>The <b>MsiGetPatchFileList</b> function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value containing the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szPatchPackages">
      <para>A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.</para>
    </param>
    <param name="pcFiles">
      <para>A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.</para>
    </param>
    <param name="pphFileRecords">
      <para>A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchFileList</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".</para>
      <para>This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.</para>
      <para>You must close all MSIHANDLE objects that are returned by this function by calling
the <see cref="MsiCloseHandle" /> function.</para>
      <para>If the function fails, you can obtain extended error information by using the <see cref="MsiGetLastErrorRecord" /> function.</para>
      <para>For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com//windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-1">Not Supported in Windows Installer 3.1 and earlier versions</seealso>
  </member>
  <member name="Windows.MsiGetPatchFileListA">
    <summary>
      <para>The <b>MsiGetPatchFileList</b> function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value containing the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szPatchPackages">
      <para>A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.</para>
    </param>
    <param name="pcFiles">
      <para>A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.</para>
    </param>
    <param name="pphFileRecords">
      <para>A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchFileList</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".</para>
      <para>This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.</para>
      <para>You must close all MSIHANDLE objects that are returned by this function by calling
the <see cref="MsiCloseHandle" /> function.</para>
      <para>If the function fails, you can obtain extended error information by using the <see cref="MsiGetLastErrorRecord" /> function.</para>
      <para>For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com//windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-1">Not Supported in Windows Installer 3.1 and earlier versions</seealso>
  </member>
  <member name="Windows.MsiGetPatchFileListW">
    <summary>
      <para>The <b>MsiGetPatchFileList</b> function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value containing the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szPatchPackages">
      <para>A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.</para>
    </param>
    <param name="pcFiles">
      <para>A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.</para>
    </param>
    <param name="pphFileRecords">
      <para>A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchFileList</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".</para>
      <para>This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.</para>
      <para>You must close all MSIHANDLE objects that are returned by this function by calling
the <see cref="MsiCloseHandle" /> function.</para>
      <para>If the function fails, you can obtain extended error information by using the <see cref="MsiGetLastErrorRecord" /> function.</para>
      <para>For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com//windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-1">Not Supported in Windows Installer 3.1 and earlier versions</seealso>
  </member>
  <member name="Windows.MsiGetPatchFileList">
    <summary>
      <para>The <b>MsiGetPatchFileList</b> function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value containing the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szPatchPackages">
      <para>A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.</para>
    </param>
    <param name="pcFiles">
      <para>A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.</para>
    </param>
    <param name="pphFileRecords">
      <para>A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchFileList</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".</para>
      <para>This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.</para>
      <para>You must close all MSIHANDLE objects that are returned by this function by calling
the <see cref="MsiCloseHandle" /> function.</para>
      <para>If the function fails, you can obtain extended error information by using the <see cref="MsiGetLastErrorRecord" /> function.</para>
      <para>For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com//windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-1">Not Supported in Windows Installer 3.1 and earlier versions</seealso>
  </member>
  <member name="Windows.MsiGetPatchFileListA">
    <summary>
      <para>The <b>MsiGetPatchFileList</b> function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value containing the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szPatchPackages">
      <para>A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.</para>
    </param>
    <param name="pcFiles">
      <para>A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.</para>
    </param>
    <param name="pphFileRecords">
      <para>A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchFileList</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".</para>
      <para>This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.</para>
      <para>You must close all MSIHANDLE objects that are returned by this function by calling
the <see cref="MsiCloseHandle" /> function.</para>
      <para>If the function fails, you can obtain extended error information by using the <see cref="MsiGetLastErrorRecord" /> function.</para>
      <para>For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com//windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-1">Not Supported in Windows Installer 3.1 and earlier versions</seealso>
  </member>
  <member name="Windows.MsiGetPatchFileListW">
    <summary>
      <para>The <b>MsiGetPatchFileList</b> function is provided a list of .msp files, delimited by semicolons, and retrieves the list of files that can be updated by the patches.</para>
    </summary>
    <param name="szProductCode">
      <para>A null-terminated string value containing the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product which is the target of the patches.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szPatchPackages">
      <para>A null-terminated string value that contains the list of Windows Installer patches (.msp files).  Each patch can be specified by the full path to the patch package. The patches in the list are delimited by semicolons. At least one patch must be specified.</para>
    </param>
    <param name="pcFiles">
      <para>A pointer to a location that receives the number of files that will be updated on this system by this list of patches specified by <i>szPatchList</i>. This parameter is required.</para>
    </param>
    <param name="pphFileRecords">
      <para>A pointer to a location that receives a pointer to an array of records. The first field (0-index) of each record  contains the full file path of a file that can be updated when the list of patches in <i>szPatchList</i> are applied on this computer. This parameter is required.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchFileList</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For example, <i>szPatchList</i> could have the value: "c:\sus\download\cache\Office\sp1.msp; c:\sus\download\cache\Office\QFE1.msp; c:\sus\download\cache\Office\QFEn.msp".</para>
      <para>This function runs in the context of the caller. The product code is searched in the order of user-unmanaged context, user-managed context, and machine context.</para>
      <para>You must close all MSIHANDLE objects that are returned by this function by calling
the <see cref="MsiCloseHandle" /> function.</para>
      <para>If the function fails, you can obtain extended error information by using the <see cref="MsiGetLastErrorRecord" /> function.</para>
      <para>For more information about using the <b>MsiGetPatchFileList</b> function  see <a href="https://docs.microsoft.com//windows/desktop/Msi/listing-the-files-that-can-be-updated">Listing the Files that can be Updated</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchFileList as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-1">Not Supported in Windows Installer 3.1 and earlier versions</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfo">
    <summary>
      <para>The
<b>MsiGetPatchInfo</b> function returns information about a patch.</para>
    </summary>
    <param name="szPatch">
      <para>Specifies the patch code for the patch package.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the attribute to be retrieved.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The patch package is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoA">
    <summary>
      <para>The
<b>MsiGetPatchInfo</b> function returns information about a patch.</para>
    </summary>
    <param name="szPatch">
      <para>Specifies the patch code for the patch package.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the attribute to be retrieved.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The patch package is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoW">
    <summary>
      <para>The
<b>MsiGetPatchInfo</b> function returns information about a patch.</para>
    </summary>
    <param name="szPatch">
      <para>Specifies the patch code for the patch package.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the attribute to be retrieved.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The patch package is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoEx">
    <summary>
      <para>The <b>MsiGetPatchInfoEx</b>  function queries for information about the application of a patch to a specified instance of a product.</para>
    </summary>
    <param name="szPatchCode">
      <para>A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that contains the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the user that is logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per-machine installations.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LOCALPACKAGE</b>
                </description>
              </item>
              <item>
                <description>"LocalPackage"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the cached patch file that the product uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_TRANSFORMS</b>
                </description>
              </item>
              <item>
                <description>"Transforms"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_INSTALLDATE</b>
                </description>
              </item>
              <item>
                <description>"InstallDate"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_UNINSTALLABLE</b>
                </description>
              </item>
              <item>
                <description>"Uninstallable"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PATCHSTATE</b>
                </description>
              </item>
              <item>
                <description>"State"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <see cref="MsiEnumPatchesEx" /> uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISPLAYNAME</b>
                </description>
              </item>
              <item>
                <description>"DisplayName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered display name for the patch. For patches that do not
include the DisplayName property in the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
returned display name is an empty string ("").</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MOREINFOURL</b>
                </description>
              </item>
              <item>
                <description>"MoreInfoURL"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
empty string ("").</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValue">
      <para>This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails and the error is not identified in other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that <i>szProduct</i> specifies is not installed on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.</para>
      <para>A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoExA">
    <summary>
      <para>The <b>MsiGetPatchInfoEx</b>  function queries for information about the application of a patch to a specified instance of a product.</para>
    </summary>
    <param name="szPatchCode">
      <para>A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that contains the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the user that is logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per-machine installations.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LOCALPACKAGE</b>
                </description>
              </item>
              <item>
                <description>"LocalPackage"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the cached patch file that the product uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_TRANSFORMS</b>
                </description>
              </item>
              <item>
                <description>"Transforms"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_INSTALLDATE</b>
                </description>
              </item>
              <item>
                <description>"InstallDate"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_UNINSTALLABLE</b>
                </description>
              </item>
              <item>
                <description>"Uninstallable"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PATCHSTATE</b>
                </description>
              </item>
              <item>
                <description>"State"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <see cref="MsiEnumPatchesEx" /> uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISPLAYNAME</b>
                </description>
              </item>
              <item>
                <description>"DisplayName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered display name for the patch. For patches that do not
include the DisplayName property in the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
returned display name is an empty string ("").</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MOREINFOURL</b>
                </description>
              </item>
              <item>
                <description>"MoreInfoURL"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
empty string ("").</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValue">
      <para>This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails and the error is not identified in other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that <i>szProduct</i> specifies is not installed on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.</para>
      <para>A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoExW">
    <summary>
      <para>The <b>MsiGetPatchInfoEx</b>  function queries for information about the application of a patch to a specified instance of a product.</para>
    </summary>
    <param name="szPatchCode">
      <para>A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that contains the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the user that is logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per-machine installations.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LOCALPACKAGE</b>
                </description>
              </item>
              <item>
                <description>"LocalPackage"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the cached patch file that the product uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_TRANSFORMS</b>
                </description>
              </item>
              <item>
                <description>"Transforms"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_INSTALLDATE</b>
                </description>
              </item>
              <item>
                <description>"InstallDate"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_UNINSTALLABLE</b>
                </description>
              </item>
              <item>
                <description>"Uninstallable"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PATCHSTATE</b>
                </description>
              </item>
              <item>
                <description>"State"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <see cref="MsiEnumPatchesEx" /> uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISPLAYNAME</b>
                </description>
              </item>
              <item>
                <description>"DisplayName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered display name for the patch. For patches that do not
include the DisplayName property in the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
returned display name is an empty string ("").</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MOREINFOURL</b>
                </description>
              </item>
              <item>
                <description>"MoreInfoURL"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
empty string ("").</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValue">
      <para>This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails and the error is not identified in other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that <i>szProduct</i> specifies is not installed on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.</para>
      <para>A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoEx">
    <summary>
      <para>The <b>MsiGetPatchInfoEx</b>  function queries for information about the application of a patch to a specified instance of a product.</para>
    </summary>
    <param name="szPatchCode">
      <para>A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that contains the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the user that is logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per-machine installations.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LOCALPACKAGE</b>
                </description>
              </item>
              <item>
                <description>"LocalPackage"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the cached patch file that the product uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_TRANSFORMS</b>
                </description>
              </item>
              <item>
                <description>"Transforms"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_INSTALLDATE</b>
                </description>
              </item>
              <item>
                <description>"InstallDate"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_UNINSTALLABLE</b>
                </description>
              </item>
              <item>
                <description>"Uninstallable"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PATCHSTATE</b>
                </description>
              </item>
              <item>
                <description>"State"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <see cref="MsiEnumPatchesEx" /> uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISPLAYNAME</b>
                </description>
              </item>
              <item>
                <description>"DisplayName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered display name for the patch. For patches that do not
include the DisplayName property in the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
returned display name is an empty string ("").</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MOREINFOURL</b>
                </description>
              </item>
              <item>
                <description>"MoreInfoURL"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
empty string ("").</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValue">
      <para>This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails and the error is not identified in other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that <i>szProduct</i> specifies is not installed on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.</para>
      <para>A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoExA">
    <summary>
      <para>The <b>MsiGetPatchInfoEx</b>  function queries for information about the application of a patch to a specified instance of a product.</para>
    </summary>
    <param name="szPatchCode">
      <para>A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that contains the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the user that is logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per-machine installations.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LOCALPACKAGE</b>
                </description>
              </item>
              <item>
                <description>"LocalPackage"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the cached patch file that the product uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_TRANSFORMS</b>
                </description>
              </item>
              <item>
                <description>"Transforms"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_INSTALLDATE</b>
                </description>
              </item>
              <item>
                <description>"InstallDate"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_UNINSTALLABLE</b>
                </description>
              </item>
              <item>
                <description>"Uninstallable"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PATCHSTATE</b>
                </description>
              </item>
              <item>
                <description>"State"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <see cref="MsiEnumPatchesEx" /> uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISPLAYNAME</b>
                </description>
              </item>
              <item>
                <description>"DisplayName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered display name for the patch. For patches that do not
include the DisplayName property in the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
returned display name is an empty string ("").</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MOREINFOURL</b>
                </description>
              </item>
              <item>
                <description>"MoreInfoURL"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
empty string ("").</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValue">
      <para>This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails and the error is not identified in other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that <i>szProduct</i> specifies is not installed on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.</para>
      <para>A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoExW">
    <summary>
      <para>The <b>MsiGetPatchInfoEx</b>  function queries for information about the application of a patch to a specified instance of a product.</para>
    </summary>
    <param name="szPatchCode">
      <para>A null-terminated string that contains the GUID of the patch. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that contains the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A null-terminated string that specifies the security identifier (SID) under which the instance of the patch being queried exists.  Using a <b>NULL</b> value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>Specifies the user that is logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies the enumeration for a specific user ID in the system.  The following example identifies a possible user SID: "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>Restricts the  enumeration to a per-user-unmanaged,  per-user-managed, or per-machine context. This parameter can be any one of the  following values.</para>
      <list type="table">
        <listheader>
          <description>Context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERMANAGED</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-managed installations for the users that <i>szUserSid</i>  specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per–user-unmanaged installations for the users that  <i>szUserSid</i> specifies.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIINSTALLCONTEXT_MACHINE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Query that is extended to all per-machine installations.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LOCALPACKAGE</b>
                </description>
              </item>
              <item>
                <description>"LocalPackage"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the cached patch file that the product uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_TRANSFORMS</b>
                </description>
              </item>
              <item>
                <description>"Transforms"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the set of patch transforms that the last patch installation applied to the product. This value may not be available for per-user, non-managed applications if the user is not logged on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_INSTALLDATE</b>
                </description>
              </item>
              <item>
                <description>"InstallDate"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Gets the last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_UNINSTALLABLE</b>
                </description>
              </item>
              <item>
                <description>"Uninstallable"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if the patch is marked as possible to uninstall from the product.  In this case, the installer can still block the uninstallation if this patch is required by another patch that cannot be uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PATCHSTATE</b>
                </description>
              </item>
              <item>
                <description>"State"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Returns "1" if this patch is currently applied to the product. Returns "2" if this patch is superseded by another patch. Returns  "4" if this patch is obsolete.   These values correspond to the constants the <i>dwFilter</i> parameter of <see cref="MsiEnumPatchesEx" /> uses.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISPLAYNAME</b>
                </description>
              </item>
              <item>
                <description>"DisplayName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered display name for the patch. For patches that do not
include the DisplayName property in the <a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the
returned display name is an empty string ("").</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MOREINFOURL</b>
                </description>
              </item>
              <item>
                <description>"MoreInfoURL"</description>
              </item>
            </list>
          </description>
          <description>
            <para>Get the registered support information URL for the patch. For patches that do not include the MoreInfoURL property in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/msipatchmetadata-table">MsiPatchMetadata</a> table, the returned support information URL is an
empty string ("").</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValue">
      <para>This parameter is a pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the property value, not including the terminating <b>NULL</b> character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating <b>NULL</b> character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>When calling the function, this parameter should be a pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The function fails trying to access a resource with insufficient privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails and the error is not identified in other error codes.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The value does not fit in the provided buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product that <i>szProduct</i> specifies is not installed on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0:  </b>Not supported. This function is available beginning with Windows Installer version 3.0.</para>
      <para>A user may query patch data for any product instance that is visible. The administrator group can query patch data for any product instance and any user on the computer. Not all values are guaranteed to be available for per-user, non-managed applications if the user is not logged on.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfo">
    <summary>
      <para>The
<b>MsiGetPatchInfo</b> function returns information about a patch.</para>
    </summary>
    <param name="szPatch">
      <para>Specifies the patch code for the patch package.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the attribute to be retrieved.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The patch package is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoA">
    <summary>
      <para>The
<b>MsiGetPatchInfo</b> function returns information about a patch.</para>
    </summary>
    <param name="szPatch">
      <para>Specifies the patch code for the patch package.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the attribute to be retrieved.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The patch package is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiGetPatchInfoW">
    <summary>
      <para>The
<b>MsiGetPatchInfo</b> function returns information about a patch.</para>
    </summary>
    <param name="szPatch">
      <para>Specifies the patch code for the patch package.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the attribute to be retrieved.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The <b>MsiGetPatchInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The patch package is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetPatchInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character.</para>
      <para>If the buffer is too small to hold the requested data,
<b>MsiGetPatchInfo</b> returns ERROR_MORE_DATA, and <i>pcchValueBuf</i> contains the number of characters copied to <i>lpValueBuf</i>, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetPatchInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiGetProductCode">
    <summary>
      <para>The
<b>MsiGetProductCode</b> function returns the product code of an application by using the component code of an installed or advertised component of the application. During initialization, an application must determine under which product code it has been installed or advertised.</para>
    </summary>
    <param name="szComponent">
      <para>This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.</para>
    </param>
    <param name="lpBuf39">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product code could not be determined.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductCodeA">
    <summary>
      <para>The
<b>MsiGetProductCode</b> function returns the product code of an application by using the component code of an installed or advertised component of the application. During initialization, an application must determine under which product code it has been installed or advertised.</para>
    </summary>
    <param name="szComponent">
      <para>This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.</para>
    </param>
    <param name="lpBuf39">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product code could not be determined.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductCodeW">
    <summary>
      <para>The
<b>MsiGetProductCode</b> function returns the product code of an application by using the component code of an installed or advertised component of the application. During initialization, an application must determine under which product code it has been installed or advertised.</para>
    </summary>
    <param name="szComponent">
      <para>This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.</para>
    </param>
    <param name="lpBuf39">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product code could not be determined.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductCode">
    <summary>
      <para>The
<b>MsiGetProductCode</b> function returns the product code of an application by using the component code of an installed or advertised component of the application. During initialization, an application must determine under which product code it has been installed or advertised.</para>
    </summary>
    <param name="szComponent">
      <para>This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.</para>
    </param>
    <param name="lpBuf39">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product code could not be determined.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductCodeA">
    <summary>
      <para>The
<b>MsiGetProductCode</b> function returns the product code of an application by using the component code of an installed or advertised component of the application. During initialization, an application must determine under which product code it has been installed or advertised.</para>
    </summary>
    <param name="szComponent">
      <para>This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.</para>
    </param>
    <param name="lpBuf39">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product code could not be determined.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductCodeW">
    <summary>
      <para>The
<b>MsiGetProductCode</b> function returns the product code of an application by using the component code of an installed or advertised component of the application. During initialization, an application must determine under which product code it has been installed or advertised.</para>
    </summary>
    <param name="szComponent">
      <para>This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.</para>
    </param>
    <param name="lpBuf39">
      <para>Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product code could not be determined.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>During initialization, an application must determine the product code under which it was installed. An application can be part of different products in different installations. For example, an application can be part of a suite of applications, or it can be installed by itself.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductCode as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfo">
    <summary>
      <para>The
<b>MsiGetProductInfo</b> function returns product information for published and installed products.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the property to be retrieved.</para>
      <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>Support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>Support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>Installed product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>Installation location. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>Installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>Publisher. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>Minor product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>Major product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>Product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier for the product. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company registered to use this product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner registered to use this product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The advertised properties in the following list can be retrieved from applications that are advertised or installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>INSTALLPROPERTY_TRANSFORMS</description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_LANGUAGE</description>
          <description>Product language.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTNAME</description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_ASSIGNMENTTYPE</description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals 1 (one) if the product is advertised or installed per-machine for all users.</para></description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGECODE</description>
          <description>Identifier of the package this product was installed from. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a>.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_VERSION</description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTICON</description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGENAME</description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_AUTHORIZED_LUA_APP</description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough,
<b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and
<i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.</para>
      <para>
        <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoA">
    <summary>
      <para>The
<b>MsiGetProductInfo</b> function returns product information for published and installed products.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the property to be retrieved.</para>
      <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>Support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>Support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>Installed product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>Installation location. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>Installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>Publisher. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>Minor product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>Major product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>Product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier for the product. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company registered to use this product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner registered to use this product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The advertised properties in the following list can be retrieved from applications that are advertised or installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>INSTALLPROPERTY_TRANSFORMS</description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_LANGUAGE</description>
          <description>Product language.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTNAME</description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_ASSIGNMENTTYPE</description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals 1 (one) if the product is advertised or installed per-machine for all users.</para></description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGECODE</description>
          <description>Identifier of the package this product was installed from. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a>.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_VERSION</description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTICON</description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGENAME</description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_AUTHORIZED_LUA_APP</description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough,
<b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and
<i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.</para>
      <para>
        <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoW">
    <summary>
      <para>The
<b>MsiGetProductInfo</b> function returns product information for published and installed products.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the property to be retrieved.</para>
      <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>Support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>Support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>Installed product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>Installation location. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>Installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>Publisher. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>Minor product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>Major product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>Product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier for the product. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company registered to use this product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner registered to use this product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The advertised properties in the following list can be retrieved from applications that are advertised or installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>INSTALLPROPERTY_TRANSFORMS</description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_LANGUAGE</description>
          <description>Product language.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTNAME</description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_ASSIGNMENTTYPE</description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals 1 (one) if the product is advertised or installed per-machine for all users.</para></description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGECODE</description>
          <description>Identifier of the package this product was installed from. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a>.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_VERSION</description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTICON</description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGENAME</description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_AUTHORIZED_LUA_APP</description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough,
<b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and
<i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.</para>
      <para>
        <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoEx">
    <summary>
      <para>The <b>MsiGetProductInfoEx</b> function returns product information for advertised and installed products. This function can  retrieve information</para>
      <para>about an instance of a  product that is installed under a user account other than the current user.</para>
      <para>The calling process must have administrative privileges for a user who is different from the current user. The <b>MsiGetProductInfoEx</b> function cannot query an instance of a product  that is advertised under a per-user-unmanaged context for a user account other than the current user.</para>
      <para>This function is an extension of the <see cref="MsiGetProductInfo" /> function.</para>
    </summary>
    <param name="szProductCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.</para>
    </param>
    <param name="szUserSid">
      <para>The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>The currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance that is being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–unmanaged instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the product property for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>Property being queried.</para>
      <para>The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTSTATE</b>
          </description>
          <description>
            <para>The state of the product returned in string form as "1" for advertised and "5" for installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>The support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>The support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>The installed product name. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>The installation location. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>The installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>The local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>The publisher. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>The URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>The minor product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>The major product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>The product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company that is registered to use the product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner who is registered to use the product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com//windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_TRANSFORMS</b>
          </description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LANGUAGE</b>
          </description>
          <description>Product language.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTNAME</b>
          </description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_ASSIGNMENTTYPE</b>
          </description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals one (1) if the product is advertised or installed per-computer for all users.</para></description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGECODE</b>
          </description>
          <description>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSION</b>
          </description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTICON</b>
          </description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGENAME</b>
          </description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b>
          </description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetProductInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and
the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.</para>
      <para>The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</seealso>
    <seealso cref="MsiConfigureFeature" />
    <seealso cref="MsiConfigureProduct" />
    <seealso cref="MsiConfigureProductEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoExA">
    <summary>
      <para>The <b>MsiGetProductInfoEx</b> function returns product information for advertised and installed products. This function can  retrieve information</para>
      <para>about an instance of a  product that is installed under a user account other than the current user.</para>
      <para>The calling process must have administrative privileges for a user who is different from the current user. The <b>MsiGetProductInfoEx</b> function cannot query an instance of a product  that is advertised under a per-user-unmanaged context for a user account other than the current user.</para>
      <para>This function is an extension of the <see cref="MsiGetProductInfo" /> function.</para>
    </summary>
    <param name="szProductCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.</para>
    </param>
    <param name="szUserSid">
      <para>The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>The currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance that is being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–unmanaged instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the product property for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>Property being queried.</para>
      <para>The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTSTATE</b>
          </description>
          <description>
            <para>The state of the product returned in string form as "1" for advertised and "5" for installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>The support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>The support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>The installed product name. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>The installation location. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>The installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>The local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>The publisher. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>The URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>The minor product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>The major product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>The product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company that is registered to use the product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner who is registered to use the product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com//windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_TRANSFORMS</b>
          </description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LANGUAGE</b>
          </description>
          <description>Product language.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTNAME</b>
          </description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_ASSIGNMENTTYPE</b>
          </description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals one (1) if the product is advertised or installed per-computer for all users.</para></description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGECODE</b>
          </description>
          <description>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSION</b>
          </description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTICON</b>
          </description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGENAME</b>
          </description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b>
          </description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetProductInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and
the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.</para>
      <para>The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</seealso>
    <seealso cref="MsiConfigureFeature" />
    <seealso cref="MsiConfigureProduct" />
    <seealso cref="MsiConfigureProductEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoExW">
    <summary>
      <para>The <b>MsiGetProductInfoEx</b> function returns product information for advertised and installed products. This function can  retrieve information</para>
      <para>about an instance of a  product that is installed under a user account other than the current user.</para>
      <para>The calling process must have administrative privileges for a user who is different from the current user. The <b>MsiGetProductInfoEx</b> function cannot query an instance of a product  that is advertised under a per-user-unmanaged context for a user account other than the current user.</para>
      <para>This function is an extension of the <see cref="MsiGetProductInfo" /> function.</para>
    </summary>
    <param name="szProductCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.</para>
    </param>
    <param name="szUserSid">
      <para>The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>The currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance that is being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–unmanaged instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the product property for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>Property being queried.</para>
      <para>The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTSTATE</b>
          </description>
          <description>
            <para>The state of the product returned in string form as "1" for advertised and "5" for installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>The support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>The support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>The installed product name. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>The installation location. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>The installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>The local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>The publisher. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>The URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>The minor product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>The major product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>The product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company that is registered to use the product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner who is registered to use the product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com//windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_TRANSFORMS</b>
          </description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LANGUAGE</b>
          </description>
          <description>Product language.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTNAME</b>
          </description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_ASSIGNMENTTYPE</b>
          </description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals one (1) if the product is advertised or installed per-computer for all users.</para></description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGECODE</b>
          </description>
          <description>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSION</b>
          </description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTICON</b>
          </description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGENAME</b>
          </description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b>
          </description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetProductInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and
the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.</para>
      <para>The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</seealso>
    <seealso cref="MsiConfigureFeature" />
    <seealso cref="MsiConfigureProduct" />
    <seealso cref="MsiConfigureProductEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoEx">
    <summary>
      <para>The <b>MsiGetProductInfoEx</b> function returns product information for advertised and installed products. This function can  retrieve information</para>
      <para>about an instance of a  product that is installed under a user account other than the current user.</para>
      <para>The calling process must have administrative privileges for a user who is different from the current user. The <b>MsiGetProductInfoEx</b> function cannot query an instance of a product  that is advertised under a per-user-unmanaged context for a user account other than the current user.</para>
      <para>This function is an extension of the <see cref="MsiGetProductInfo" /> function.</para>
    </summary>
    <param name="szProductCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.</para>
    </param>
    <param name="szUserSid">
      <para>The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>The currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance that is being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–unmanaged instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the product property for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>Property being queried.</para>
      <para>The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTSTATE</b>
          </description>
          <description>
            <para>The state of the product returned in string form as "1" for advertised and "5" for installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>The support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>The support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>The installed product name. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>The installation location. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>The installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>The local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>The publisher. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>The URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>The minor product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>The major product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>The product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company that is registered to use the product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner who is registered to use the product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com//windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_TRANSFORMS</b>
          </description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LANGUAGE</b>
          </description>
          <description>Product language.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTNAME</b>
          </description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_ASSIGNMENTTYPE</b>
          </description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals one (1) if the product is advertised or installed per-computer for all users.</para></description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGECODE</b>
          </description>
          <description>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSION</b>
          </description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTICON</b>
          </description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGENAME</b>
          </description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b>
          </description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetProductInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and
the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.</para>
      <para>The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</seealso>
    <seealso cref="MsiConfigureFeature" />
    <seealso cref="MsiConfigureProduct" />
    <seealso cref="MsiConfigureProductEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoExA">
    <summary>
      <para>The <b>MsiGetProductInfoEx</b> function returns product information for advertised and installed products. This function can  retrieve information</para>
      <para>about an instance of a  product that is installed under a user account other than the current user.</para>
      <para>The calling process must have administrative privileges for a user who is different from the current user. The <b>MsiGetProductInfoEx</b> function cannot query an instance of a product  that is advertised under a per-user-unmanaged context for a user account other than the current user.</para>
      <para>This function is an extension of the <see cref="MsiGetProductInfo" /> function.</para>
    </summary>
    <param name="szProductCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.</para>
    </param>
    <param name="szUserSid">
      <para>The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>The currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance that is being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–unmanaged instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the product property for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>Property being queried.</para>
      <para>The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTSTATE</b>
          </description>
          <description>
            <para>The state of the product returned in string form as "1" for advertised and "5" for installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>The support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>The support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>The installed product name. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>The installation location. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>The installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>The local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>The publisher. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>The URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>The minor product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>The major product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>The product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company that is registered to use the product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner who is registered to use the product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com//windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_TRANSFORMS</b>
          </description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LANGUAGE</b>
          </description>
          <description>Product language.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTNAME</b>
          </description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_ASSIGNMENTTYPE</b>
          </description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals one (1) if the product is advertised or installed per-computer for all users.</para></description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGECODE</b>
          </description>
          <description>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSION</b>
          </description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTICON</b>
          </description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGENAME</b>
          </description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b>
          </description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetProductInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and
the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.</para>
      <para>The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</seealso>
    <seealso cref="MsiConfigureFeature" />
    <seealso cref="MsiConfigureProduct" />
    <seealso cref="MsiConfigureProductEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoExW">
    <summary>
      <para>The <b>MsiGetProductInfoEx</b> function returns product information for advertised and installed products. This function can  retrieve information</para>
      <para>about an instance of a  product that is installed under a user account other than the current user.</para>
      <para>The calling process must have administrative privileges for a user who is different from the current user. The <b>MsiGetProductInfoEx</b> function cannot query an instance of a product  that is advertised under a per-user-unmanaged context for a user account other than the current user.</para>
      <para>This function is an extension of the <see cref="MsiGetProductInfo" /> function.</para>
    </summary>
    <param name="szProductCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product instance that is being queried.</para>
    </param>
    <param name="szUserSid">
      <para>The security identifier (SID) of the account under which the instance of the product that is being queried exists. A <b>NULL</b> specifies the current user SID.</para>
      <list type="table">
        <listheader>
          <description>SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>The currently logged-on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>The enumeration for a specific user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is "MSIINSTALLCONTEXT_MACHINE", <i>szUserSid</i> must be <b>NULL</b>.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance that is being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the product property for the per–user–unmanaged instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the product property for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>Property being queried.</para>
      <para>The property to be retrieved. The properties in the following table can only be retrieved from applications that are already installed. All required properties are guaranteed to be available, but other properties are available only if the property is set. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTSTATE</b>
          </description>
          <description>
            <para>The state of the product returned in string form as "1" for advertised and "5" for installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>The support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>The support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>The installed product name. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>The installation location. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>The installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>The local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>The publisher. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>The URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>The minor product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>The major product version that is derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>The product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company that is registered to use the product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner who is registered to use the product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of one (1) indicates a product installed using a multiple instance transform and the <a href="https://docs.microsoft.com//windows/desktop/Msi/msinewinstance">MSINEWINSTANCE</a> property.   For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The properties in the following table can be retrieved from applications that are advertised or installed. These properties cannot be retrieved for product instances that are installed under a per-user-unmanaged context for user accounts other than current user account.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_TRANSFORMS</b>
          </description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LANGUAGE</b>
          </description>
          <description>Product language.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTNAME</b>
          </description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_ASSIGNMENTTYPE</b>
          </description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals one (1) if the product is advertised or installed per-computer for all users.</para></description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGECODE</b>
          </description>
          <description>Identifier of the package that  a product is installed from. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSION</b>
          </description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PRODUCTICON</b>
          </description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PACKAGENAME</b>
          </description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_AUTHORIZED_LUA_APP</b>
          </description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>A pointer to a  buffer that receives the property value. This buffer should be large enough to contain the information. If the buffer is too small, the function returns <b>ERROR_MORE_DATA</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>lpValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns <b>ERROR_SUCCESS</b> and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>lpValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>lpValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns <b>ERROR_SUCCESS</b> if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>lpValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>lpValue</i> is also <b>NULL</b>. Otherwise, the function returns <b>ERROR_INVALID_PARAMETER</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiGetProductInfoEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfoEx</b> function returns, the <i>pcchValue</i> parameter contains the length of the string that is stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductInfoEx</b> returns <b>ERROR_MORE_DATA</b>, and
the <i>pcchValue</i> parameter contains the size of the string, in <b>TCHAR</b>, without counting the null character.</para>
      <para>The <b>MsiGetProductInfoEx</b> function  (<b>INSTALLPROPERTY_LOCALPACKAGE</b>) returns a path to the cached package. The cached package is for internal use only. Maintenance mode installations must be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>The <see cref="MsiGetProductInfo" /> function returns   <b>ERROR_UNKNOWN_PROPERTY</b> if the application being queried is advertised and not installed.  For example, if the application is advertised and not installed, a query for <b>INSTALLPROPERTY_INSTALLLOCATION</b> returns an error of <b>ERROR_UNKNOWN_PROPERTY</b>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</seealso>
    <seealso cref="MsiConfigureFeature" />
    <seealso cref="MsiConfigureProduct" />
    <seealso cref="MsiConfigureProductEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoFromScript">
    <summary>
      <para>The
<b>MsiGetProductInfoFromScript</b> function returns product information for a Windows Installer script file.</para>
    </summary>
    <param name="szScriptFile">
      <para>A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <see cref="MsiAdvertiseProduct" /> or <see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="lpProductBuf39">
      <para>Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <param name="plgidLanguage">
      <para>Points to a variable that receives the product language.</para>
    </param>
    <param name="pdwVersion">
      <para>Points to a buffer that receives the product version.</para>
    </param>
    <param name="lpNameBuf">
      <para>Points to a buffer that receives the product name. The buffer includes a terminating null character.</para>
    </param>
    <param name="pcchNameBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <param name="lpPackageBuf">
      <para>Points to a buffer that receives the package name. The buffer includes the terminating null character.</para>
    </param>
    <param name="pcchPackageBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not get script information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetProductInfoFromScriptA">
    <summary>
      <para>The
<b>MsiGetProductInfoFromScript</b> function returns product information for a Windows Installer script file.</para>
    </summary>
    <param name="szScriptFile">
      <para>A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <see cref="MsiAdvertiseProduct" /> or <see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="lpProductBuf39">
      <para>Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <param name="plgidLanguage">
      <para>Points to a variable that receives the product language.</para>
    </param>
    <param name="pdwVersion">
      <para>Points to a buffer that receives the product version.</para>
    </param>
    <param name="lpNameBuf">
      <para>Points to a buffer that receives the product name. The buffer includes a terminating null character.</para>
    </param>
    <param name="pcchNameBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <param name="lpPackageBuf">
      <para>Points to a buffer that receives the package name. The buffer includes the terminating null character.</para>
    </param>
    <param name="pcchPackageBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not get script information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetProductInfoFromScriptW">
    <summary>
      <para>The
<b>MsiGetProductInfoFromScript</b> function returns product information for a Windows Installer script file.</para>
    </summary>
    <param name="szScriptFile">
      <para>A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <see cref="MsiAdvertiseProduct" /> or <see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="lpProductBuf39">
      <para>Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <param name="plgidLanguage">
      <para>Points to a variable that receives the product language.</para>
    </param>
    <param name="pdwVersion">
      <para>Points to a buffer that receives the product version.</para>
    </param>
    <param name="lpNameBuf">
      <para>Points to a buffer that receives the product name. The buffer includes a terminating null character.</para>
    </param>
    <param name="pcchNameBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <param name="lpPackageBuf">
      <para>Points to a buffer that receives the package name. The buffer includes the terminating null character.</para>
    </param>
    <param name="pcchPackageBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not get script information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetProductInfoFromScript">
    <summary>
      <para>The
<b>MsiGetProductInfoFromScript</b> function returns product information for a Windows Installer script file.</para>
    </summary>
    <param name="szScriptFile">
      <para>A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <see cref="MsiAdvertiseProduct" /> or <see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="lpProductBuf39">
      <para>Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <param name="plgidLanguage">
      <para>Points to a variable that receives the product language.</para>
    </param>
    <param name="pdwVersion">
      <para>Points to a buffer that receives the product version.</para>
    </param>
    <param name="lpNameBuf">
      <para>Points to a buffer that receives the product name. The buffer includes a terminating null character.</para>
    </param>
    <param name="pcchNameBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <param name="lpPackageBuf">
      <para>Points to a buffer that receives the package name. The buffer includes the terminating null character.</para>
    </param>
    <param name="pcchPackageBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not get script information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetProductInfoFromScriptA">
    <summary>
      <para>The
<b>MsiGetProductInfoFromScript</b> function returns product information for a Windows Installer script file.</para>
    </summary>
    <param name="szScriptFile">
      <para>A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <see cref="MsiAdvertiseProduct" /> or <see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="lpProductBuf39">
      <para>Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <param name="plgidLanguage">
      <para>Points to a variable that receives the product language.</para>
    </param>
    <param name="pdwVersion">
      <para>Points to a buffer that receives the product version.</para>
    </param>
    <param name="lpNameBuf">
      <para>Points to a buffer that receives the product name. The buffer includes a terminating null character.</para>
    </param>
    <param name="pcchNameBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <param name="lpPackageBuf">
      <para>Points to a buffer that receives the package name. The buffer includes the terminating null character.</para>
    </param>
    <param name="pcchPackageBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not get script information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetProductInfoFromScriptW">
    <summary>
      <para>The
<b>MsiGetProductInfoFromScript</b> function returns product information for a Windows Installer script file.</para>
    </summary>
    <param name="szScriptFile">
      <para>A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <see cref="MsiAdvertiseProduct" /> or <see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="lpProductBuf39">
      <para>Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character.</para>
    </param>
    <param name="plgidLanguage">
      <para>Points to a variable that receives the product language.</para>
    </param>
    <param name="pdwVersion">
      <para>Points to a buffer that receives the product version.</para>
    </param>
    <param name="lpNameBuf">
      <para>Points to a buffer that receives the product name. The buffer includes a terminating null character.</para>
    </param>
    <param name="pcchNameBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <param name="lpPackageBuf">
      <para>Points to a buffer that receives the package name. The buffer includes the terminating null character.</para>
    </param>
    <param name="pcchPackageBuf">
      <para>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPackageNameBuf</i> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string in characters, without counting the null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer was too small to hold the entire value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not get script information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is only available on Windows 2000 and Windows XP.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfoFromScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetProductInfo">
    <summary>
      <para>The
<b>MsiGetProductInfo</b> function returns product information for published and installed products.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the property to be retrieved.</para>
      <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>Support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>Support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>Installed product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>Installation location. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>Installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>Publisher. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>Minor product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>Major product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>Product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier for the product. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company registered to use this product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner registered to use this product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The advertised properties in the following list can be retrieved from applications that are advertised or installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>INSTALLPROPERTY_TRANSFORMS</description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_LANGUAGE</description>
          <description>Product language.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTNAME</description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_ASSIGNMENTTYPE</description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals 1 (one) if the product is advertised or installed per-machine for all users.</para></description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGECODE</description>
          <description>Identifier of the package this product was installed from. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a>.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_VERSION</description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTICON</description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGENAME</description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_AUTHORIZED_LUA_APP</description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough,
<b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and
<i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.</para>
      <para>
        <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoA">
    <summary>
      <para>The
<b>MsiGetProductInfo</b> function returns product information for published and installed products.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the property to be retrieved.</para>
      <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>Support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>Support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>Installed product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>Installation location. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>Installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>Publisher. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>Minor product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>Major product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>Product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier for the product. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company registered to use this product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner registered to use this product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The advertised properties in the following list can be retrieved from applications that are advertised or installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>INSTALLPROPERTY_TRANSFORMS</description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_LANGUAGE</description>
          <description>Product language.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTNAME</description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_ASSIGNMENTTYPE</description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals 1 (one) if the product is advertised or installed per-machine for all users.</para></description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGECODE</description>
          <description>Identifier of the package this product was installed from. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a>.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_VERSION</description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTICON</description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGENAME</description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_AUTHORIZED_LUA_APP</description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough,
<b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and
<i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.</para>
      <para>
        <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductInfoW">
    <summary>
      <para>The
<b>MsiGetProductInfo</b> function returns product information for published and installed products.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product.</para>
    </param>
    <param name="szAttribute">
      <para>Specifies the property to be retrieved.</para>
      <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/required-properties">Required Properties</a> are guaranteed to be available, but other properties are available only if that property is set. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/properties">Properties</a>. The properties in the following list can be retrieved only from applications that are installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPLINK</b>
          </description>
          <description>
            <para>Support link. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelplink">ARPHELPLINK</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_HELPTELEPHONE</b>
          </description>
          <description>
            <para>Support telephone. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arphelptelephone">ARPHELPTELEPHONE</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLDATE</b>
          </description>
          <description>
            <para>The last time this product received service. The value of this property is replaced each time a patch is applied or removed from the product or the /v <a href="https://docs.microsoft.com//windows/desktop/Msi/command-line-options">Command-Line Option</a> is used to repair the product.  If the product has received no repairs or patches this property contains the time this product was installed on this computer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDLANGUAGE</b>
          </description>
          <description>
            <para>Installed language.</para>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-5">Windows Installer 4.5 and earlier</a>:  </b>Not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLEDPRODUCTNAME</b>
          </description>
          <description>
            <para>Installed product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLLOCATION</b>
          </description>
          <description>
            <para>Installation location. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpinstalllocation">ARPINSTALLLOCATION</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_INSTALLSOURCE</b>
          </description>
          <description>
            <para>Installation source. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcedir">SourceDir</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_LOCALPACKAGE</b>
          </description>
          <description>
            <para>Local cached package.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_PUBLISHER</b>
          </description>
          <description>
            <para>Publisher. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/manufacturer">Manufacturer</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLINFOABOUT</b>
          </description>
          <description>
            <para>URL information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlinfoabout">ARPURLINFOABOUT</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_URLUPDATEINFO</b>
          </description>
          <description>
            <para>URL update information. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpurlupdateinfo">ARPURLUPDATEINFO</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMINOR</b>
          </description>
          <description>
            <para>Minor product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONMAJOR</b>
          </description>
          <description>
            <para>Major product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLPROPERTY_VERSIONSTRING</b>
          </description>
          <description>
            <para>Product version. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</para>
          </description>
        </item>
      </list>
      <para>To retrieve the product ID, registered owner, or registered company from applications that are installed, set <i>szProperty</i> to one of the following text string values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ProductID</description>
          <description>The product identifier for the product. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productid">ProductID</a> property.</description>
        </item>
        <item>
          <description>RegCompany</description>
          <description>The company registered to use this product.</description>
        </item>
        <item>
          <description>RegOwner</description>
          <description>The owner registered to use this product.</description>
        </item>
      </list>
      <para>To retrieve the instance type of the product, set <i>szProperty</i> to the following value.  This property is available for advertised or installed products.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>InstanceType</description>
          <description>A missing value or a value of 0 (zero) indicates a normal product installation.  A value of 1 (one) indicates a product installed using a multiple instance transform and the MSINEWINSTANCE property.   Available with the installer running Windows Server 2003 or Windows XP with SP1.  For more information see, <a href="https://docs.microsoft.com//windows/desktop/Msi/installing-multiple-instances-of-products-and-patches">Installing Multiple Instances of Products and Patches</a>.</description>
        </item>
      </list>
      <para>The advertised properties in the following list can be retrieved from applications that are advertised or installed.</para>
      <list type="table">
        <listheader>
          <description>Property</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>INSTALLPROPERTY_TRANSFORMS</description>
          <description>Transforms.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_LANGUAGE</description>
          <description>Product language.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTNAME</description>
          <description>Human readable product name. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productname">ProductName</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_ASSIGNMENTTYPE</description>
          <description>Equals 0 (zero) if the product is advertised or installed per-user.
<para>Equals 1 (one) if the product is advertised or installed per-machine for all users.</para></description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGECODE</description>
          <description>Identifier of the package this product was installed from. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/package-codes">Package Codes</a>.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_VERSION</description>
          <description>Product version derived from
the <a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PRODUCTICON</description>
          <description>Primary icon for the package. For more information, see
the <a href="https://docs.microsoft.com//windows/desktop/Msi/arpproducticon">ARPPRODUCTICON</a> property.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_PACKAGENAME</description>
          <description>Name of the original installation package.</description>
        </item>
        <item>
          <description>INSTALLPROPERTY_AUTHORIZED_LUA_APP</description>
          <description>A value of one (1) indicates a product that can be serviced by non-administrators using <a href="https://docs.microsoft.com//windows/desktop/Msi/user-account-control--uac--patching">User Account Control (UAC) Patching</a>. A missing value or a value of 0 (zero) indicates that least-privilege patching is not enabled. Available in Windows Installer 3.0 or later.</description>
        </item>
      </list>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null. In this case, the function checks that the property is registered correctly with the product.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is unadvertised or uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property is unrecognized.</para>
            <para>
              <b>Note</b>  The <see cref="MsiGetProductInfo" /> function  returns   ERROR_UNKNOWN_PROPERTY if the application being queried is advertised and not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductInfo</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough,
<b>MsiGetProductInfo</b> returns ERROR_MORE_DATA and
<i>pcchValueBuf</i> contains the size of the string, in characters, without counting the null character.</para>
      <para>
        <b>MsiGetProductInfo</b>(INSTALLPROPERTY_LOCALPACKAGE) does not necessarily return a path to the cached package. The cached package is for internal use only. Maintenance mode installations should be invoked through the
<see cref="MsiConfigureFeature" />,
<see cref="MsiConfigureProduct" />, or
<see cref="MsiConfigureProductEx" /> functions.</para>
      <para>If you attempt to use <b>MsiGetProductInfo</b> to query an advertised product  for a property that is only available to installed products, the function returns   ERROR_UNKNOWN_PROPERTY. For example, if the application is advertised and not installed, a query for the INSTALLPROPERTY_INSTALLLOCATION property returns an error of ERROR_UNKNOWN_PROPERTY.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductProperty">
    <summary>
      <para>The
<b>MsiGetProductProperty</b> function retrieves product properties. These properties are in the product database.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szProperty">
      <para>Specifies the property to retrieve. This is case-sensitive.</para>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetProductProperty</b> function return the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid handle was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the entire property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and
<b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductPropertyA">
    <summary>
      <para>The
<b>MsiGetProductProperty</b> function retrieves product properties. These properties are in the product database.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szProperty">
      <para>Specifies the property to retrieve. This is case-sensitive.</para>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetProductProperty</b> function return the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid handle was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the entire property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and
<b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductPropertyW">
    <summary>
      <para>The
<b>MsiGetProductProperty</b> function retrieves product properties. These properties are in the product database.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szProperty">
      <para>Specifies the property to retrieve. This is case-sensitive.</para>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetProductProperty</b> function return the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid handle was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the entire property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and
<b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductProperty">
    <summary>
      <para>The
<b>MsiGetProductProperty</b> function retrieves product properties. These properties are in the product database.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szProperty">
      <para>Specifies the property to retrieve. This is case-sensitive.</para>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetProductProperty</b> function return the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid handle was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the entire property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and
<b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductPropertyA">
    <summary>
      <para>The
<b>MsiGetProductProperty</b> function retrieves product properties. These properties are in the product database.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szProperty">
      <para>Specifies the property to retrieve. This is case-sensitive.</para>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetProductProperty</b> function return the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid handle was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the entire property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and
<b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetProductPropertyW">
    <summary>
      <para>The
<b>MsiGetProductProperty</b> function retrieves product properties. These properties are in the product database.</para>
    </summary>
    <param name="hProduct">
      <para>Handle to the product obtained from
<see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szProperty">
      <para>Specifies the property to retrieve. This is case-sensitive.</para>
    </param>
    <param name="lpValueBuf">
      <para>Pointer to a buffer that receives the property value. The value is truncated and null-terminated if <i>lpValueBuf</i> is too small. This parameter can be null.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpValueBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpValueBuf</i> is null, <i>pcchValueBuf</i> can be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetProductProperty</b> function return the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid handle was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the entire property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetProductProperty</b> function returns, the <i>pcchValueBuf</i> parameter contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough,
<b>MsiGetProductProperty</b> returns ERROR_MORE_DATA, and
<b>MsiGetProductProperty</b> contains the size of the string, in characters, without counting the null character.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetProductProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiGetShortcutTarget">
    <summary>
      <para>The
<b>MsiGetShortcutTarget</b> function examines a shortcut and returns its product, feature name, and component if available.</para>
    </summary>
    <param name="szShortcutPath">
      <para>A null-terminated string specifying the full path to a shortcut.</para>
    </param>
    <param name="szProductCode">
      <para>A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <param name="szFeatureId">
      <para>The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.</para>
    </param>
    <param name="szComponentCode">
      <para>A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the
<see cref="IShellLink" /> interface.</para>
      <para>Otherwise, the state of the target may be determined by using the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetShortcutTargetA">
    <summary>
      <para>The
<b>MsiGetShortcutTarget</b> function examines a shortcut and returns its product, feature name, and component if available.</para>
    </summary>
    <param name="szShortcutPath">
      <para>A null-terminated string specifying the full path to a shortcut.</para>
    </param>
    <param name="szProductCode">
      <para>A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <param name="szFeatureId">
      <para>The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.</para>
    </param>
    <param name="szComponentCode">
      <para>A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the
<see cref="IShellLink" /> interface.</para>
      <para>Otherwise, the state of the target may be determined by using the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetShortcutTargetW">
    <summary>
      <para>The
<b>MsiGetShortcutTarget</b> function examines a shortcut and returns its product, feature name, and component if available.</para>
    </summary>
    <param name="szShortcutPath">
      <para>A null-terminated string specifying the full path to a shortcut.</para>
    </param>
    <param name="szProductCode">
      <para>A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <param name="szFeatureId">
      <para>The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.</para>
    </param>
    <param name="szComponentCode">
      <para>A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the
<see cref="IShellLink" /> interface.</para>
      <para>Otherwise, the state of the target may be determined by using the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetShortcutTarget">
    <summary>
      <para>The
<b>MsiGetShortcutTarget</b> function examines a shortcut and returns its product, feature name, and component if available.</para>
    </summary>
    <param name="szShortcutPath">
      <para>A null-terminated string specifying the full path to a shortcut.</para>
    </param>
    <param name="szProductCode">
      <para>A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <param name="szFeatureId">
      <para>The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.</para>
    </param>
    <param name="szComponentCode">
      <para>A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the
<see cref="IShellLink" /> interface.</para>
      <para>Otherwise, the state of the target may be determined by using the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetShortcutTargetA">
    <summary>
      <para>The
<b>MsiGetShortcutTarget</b> function examines a shortcut and returns its product, feature name, and component if available.</para>
    </summary>
    <param name="szShortcutPath">
      <para>A null-terminated string specifying the full path to a shortcut.</para>
    </param>
    <param name="szProductCode">
      <para>A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <param name="szFeatureId">
      <para>The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.</para>
    </param>
    <param name="szComponentCode">
      <para>A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the
<see cref="IShellLink" /> interface.</para>
      <para>Otherwise, the state of the target may be determined by using the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetShortcutTargetW">
    <summary>
      <para>The
<b>MsiGetShortcutTarget</b> function examines a shortcut and returns its product, feature name, and component if available.</para>
    </summary>
    <param name="szShortcutPath">
      <para>A null-terminated string specifying the full path to a shortcut.</para>
    </param>
    <param name="szProductCode">
      <para>A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <param name="szFeatureId">
      <para>The feature name of the shortcut. The string buffer must be MAX_FEATURE_CHARS+1 characters long. This parameter can be null.</para>
    </param>
    <param name="szComponentCode">
      <para>A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the
<a href="https://docs.microsoft.com//windows/desktop/Msi/guid">GUID</a>, and the last character is for the terminating null character. This parameter can be null.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the function fails, and the shortcut exists, the regular contents of the shortcut may be accessed through the
<see cref="IShellLink" /> interface.</para>
      <para>Otherwise, the state of the target may be determined by using the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetShortcutTarget as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiGetUserInfo">
    <summary>
      <para>The
<b>MsiGetUserInfo</b> function returns the registered user information for an installed product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be queried.</para>
    </param>
    <param name="lpUserNameBuf">
      <para>Pointer to a variable that receives the name of the user.</para>
    </param>
    <param name="pcchUserNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.</para>
    </param>
    <param name="lpOrgNameBuf">
      <para>Pointer to a buffer that receives the organization name.</para>
    </param>
    <param name="pcchOrgNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpSerialBuf">
      <para>Pointer to a buffer that receives the product ID.</para>
    </param>
    <param name="pcchSerialBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Some or all of the user information is absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_PRESENT</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the
<b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and
<b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.</para>
      <para>The user information is considered to be present even in the absence of a company name.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetUserInfoA">
    <summary>
      <para>The
<b>MsiGetUserInfo</b> function returns the registered user information for an installed product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be queried.</para>
    </param>
    <param name="lpUserNameBuf">
      <para>Pointer to a variable that receives the name of the user.</para>
    </param>
    <param name="pcchUserNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.</para>
    </param>
    <param name="lpOrgNameBuf">
      <para>Pointer to a buffer that receives the organization name.</para>
    </param>
    <param name="pcchOrgNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpSerialBuf">
      <para>Pointer to a buffer that receives the product ID.</para>
    </param>
    <param name="pcchSerialBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Some or all of the user information is absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_PRESENT</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the
<b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and
<b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.</para>
      <para>The user information is considered to be present even in the absence of a company name.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetUserInfoW">
    <summary>
      <para>The
<b>MsiGetUserInfo</b> function returns the registered user information for an installed product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be queried.</para>
    </param>
    <param name="lpUserNameBuf">
      <para>Pointer to a variable that receives the name of the user.</para>
    </param>
    <param name="pcchUserNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.</para>
    </param>
    <param name="lpOrgNameBuf">
      <para>Pointer to a buffer that receives the organization name.</para>
    </param>
    <param name="pcchOrgNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpSerialBuf">
      <para>Pointer to a buffer that receives the product ID.</para>
    </param>
    <param name="pcchSerialBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Some or all of the user information is absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_PRESENT</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the
<b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and
<b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.</para>
      <para>The user information is considered to be present even in the absence of a company name.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetUserInfo">
    <summary>
      <para>The
<b>MsiGetUserInfo</b> function returns the registered user information for an installed product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be queried.</para>
    </param>
    <param name="lpUserNameBuf">
      <para>Pointer to a variable that receives the name of the user.</para>
    </param>
    <param name="pcchUserNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.</para>
    </param>
    <param name="lpOrgNameBuf">
      <para>Pointer to a buffer that receives the organization name.</para>
    </param>
    <param name="pcchOrgNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpSerialBuf">
      <para>Pointer to a buffer that receives the product ID.</para>
    </param>
    <param name="pcchSerialBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Some or all of the user information is absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_PRESENT</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the
<b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and
<b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.</para>
      <para>The user information is considered to be present even in the absence of a company name.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetUserInfoA">
    <summary>
      <para>The
<b>MsiGetUserInfo</b> function returns the registered user information for an installed product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be queried.</para>
    </param>
    <param name="lpUserNameBuf">
      <para>Pointer to a variable that receives the name of the user.</para>
    </param>
    <param name="pcchUserNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.</para>
    </param>
    <param name="lpOrgNameBuf">
      <para>Pointer to a buffer that receives the organization name.</para>
    </param>
    <param name="pcchOrgNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpSerialBuf">
      <para>Pointer to a buffer that receives the product ID.</para>
    </param>
    <param name="pcchSerialBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Some or all of the user information is absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_PRESENT</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the
<b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and
<b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.</para>
      <para>The user information is considered to be present even in the absence of a company name.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiGetUserInfoW">
    <summary>
      <para>The
<b>MsiGetUserInfo</b> function returns the registered user information for an installed product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product to be queried.</para>
    </param>
    <param name="lpUserNameBuf">
      <para>Pointer to a variable that receives the name of the user.</para>
    </param>
    <param name="pcchUserNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpUserNameBuf</i> parameter. This size should include the terminating null character.</para>
    </param>
    <param name="lpOrgNameBuf">
      <para>Pointer to a buffer that receives the organization name.</para>
    </param>
    <param name="pcchOrgNameBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpOrgNameBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <param name="lpSerialBuf">
      <para>Pointer to a buffer that receives the product ID.</para>
    </param>
    <param name="pcchSerialBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpSerialBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Some or all of the user information is absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>A buffer is too small to hold the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_PRESENT</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>USERINFOSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the
<b>MsiGetUserInfo</b> function returns, the <i>pcchNameBuf</i> parameter contains the length of the class string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not big enough, the
<b>MsiGetUserInfo</b> function returns USERINFOSTATE_MOREDATA, and
<b>MsiGetUserInfo</b> contains the size of the string, in characters, without counting the null character.</para>
      <para>The user information is considered to be present even in the absence of a company name.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiGetUserInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiInstallMissingComponent">
    <summary>
      <para>The
<b>MsiInstallMissingComponent</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the component to be installed.</para>
    </param>
    <param name="szComponent">
      <para>Identifies the component to be installed.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the way the component should be installed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component should be locally installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component should be installed to run from the source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component should be installed according to the installer defaults.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a></para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingComponentA">
    <summary>
      <para>The
<b>MsiInstallMissingComponent</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the component to be installed.</para>
    </param>
    <param name="szComponent">
      <para>Identifies the component to be installed.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the way the component should be installed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component should be locally installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component should be installed to run from the source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component should be installed according to the installer defaults.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a></para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingComponentW">
    <summary>
      <para>The
<b>MsiInstallMissingComponent</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the component to be installed.</para>
    </param>
    <param name="szComponent">
      <para>Identifies the component to be installed.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the way the component should be installed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component should be locally installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component should be installed to run from the source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component should be installed according to the installer defaults.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a></para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingComponent">
    <summary>
      <para>The
<b>MsiInstallMissingComponent</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the component to be installed.</para>
    </param>
    <param name="szComponent">
      <para>Identifies the component to be installed.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the way the component should be installed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component should be locally installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component should be installed to run from the source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component should be installed according to the installer defaults.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a></para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingComponentA">
    <summary>
      <para>The
<b>MsiInstallMissingComponent</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the component to be installed.</para>
    </param>
    <param name="szComponent">
      <para>Identifies the component to be installed.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the way the component should be installed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component should be locally installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component should be installed to run from the source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component should be installed according to the installer defaults.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a></para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingComponentW">
    <summary>
      <para>The
<b>MsiInstallMissingComponent</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the component to be installed.</para>
    </param>
    <param name="szComponent">
      <para>Identifies the component to be installed.</para>
    </param>
    <param name="eInstallState">
      <para>Specifies the way the component should be installed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component should be locally installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component should be installed to run from the source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component should be installed according to the installer defaults.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One of the parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a></para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingComponent</b> function resolves the feature(s) that the component belongs to. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingFile">
    <summary>
      <para>The
<b>MsiInstallMissingFile</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the file to be installed.</para>
    </param>
    <param name="szFile">
      <para>Specifies the file to be installed.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingFileA">
    <summary>
      <para>The
<b>MsiInstallMissingFile</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the file to be installed.</para>
    </param>
    <param name="szFile">
      <para>Specifies the file to be installed.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingFileW">
    <summary>
      <para>The
<b>MsiInstallMissingFile</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the file to be installed.</para>
    </param>
    <param name="szFile">
      <para>Specifies the file to be installed.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingFile">
    <summary>
      <para>The
<b>MsiInstallMissingFile</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the file to be installed.</para>
    </param>
    <param name="szFile">
      <para>Specifies the file to be installed.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingFileA">
    <summary>
      <para>The
<b>MsiInstallMissingFile</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the file to be installed.</para>
    </param>
    <param name="szFile">
      <para>Specifies the file to be installed.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallMissingFileW">
    <summary>
      <para>The
<b>MsiInstallMissingFile</b> function installs files that are unexpectedly missing.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the file to be installed.</para>
    </param>
    <param name="szFile">
      <para>Specifies the file to be installed.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SUSPEND</b>
            </para>
          </description>
          <description>
            <para>The installation was suspended.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_USEREXIT</b>
            </para>
          </description>
          <description>
            <para>The user exited the installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code is unrecognized.</para>
          </description>
        </item>
      </list>
      <para>For more information about error messages, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallMissingFile</b> function obtains the component that the file belongs to from the file table. Then, the product feature that requires the least additional disk space is installed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallMissingFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallProduct">
    <summary>
      <para>The
<b>MsiInstallProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szPackagePath">
      <para>A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <code>http://packageLocation/package/package.msi</code>), a network path  (e.g. \packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).</para>
    </param>
    <param name="szCommandLine">
      <para>A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
      <para>To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the
<a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization occurred.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.</para>
      <list type="bullet">
        <item>
          <description>You can change user interface settings by using the
<see cref="MsiSetInternalUI" />,
<see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" /> functions.</description>
        </item>
        <item>
          <description>You can set the log mode by using the
<see cref="MsiEnableLog" /> function.</description>
        </item>
        <item>
          <description>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/remove">REMOVE</a> Property.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallProductA">
    <summary>
      <para>The
<b>MsiInstallProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szPackagePath">
      <para>A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <code>http://packageLocation/package/package.msi</code>), a network path  (e.g. \packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).</para>
    </param>
    <param name="szCommandLine">
      <para>A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
      <para>To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the
<a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization occurred.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.</para>
      <list type="bullet">
        <item>
          <description>You can change user interface settings by using the
<see cref="MsiSetInternalUI" />,
<see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" /> functions.</description>
        </item>
        <item>
          <description>You can set the log mode by using the
<see cref="MsiEnableLog" /> function.</description>
        </item>
        <item>
          <description>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/remove">REMOVE</a> Property.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallProductW">
    <summary>
      <para>The
<b>MsiInstallProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szPackagePath">
      <para>A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <code>http://packageLocation/package/package.msi</code>), a network path  (e.g. \packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).</para>
    </param>
    <param name="szCommandLine">
      <para>A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
      <para>To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the
<a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization occurred.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.</para>
      <list type="bullet">
        <item>
          <description>You can change user interface settings by using the
<see cref="MsiSetInternalUI" />,
<see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" /> functions.</description>
        </item>
        <item>
          <description>You can set the log mode by using the
<see cref="MsiEnableLog" /> function.</description>
        </item>
        <item>
          <description>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/remove">REMOVE</a> Property.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallProduct">
    <summary>
      <para>The
<b>MsiInstallProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szPackagePath">
      <para>A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <code>http://packageLocation/package/package.msi</code>), a network path  (e.g. \packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).</para>
    </param>
    <param name="szCommandLine">
      <para>A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
      <para>To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the
<a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization occurred.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.</para>
      <list type="bullet">
        <item>
          <description>You can change user interface settings by using the
<see cref="MsiSetInternalUI" />,
<see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" /> functions.</description>
        </item>
        <item>
          <description>You can set the log mode by using the
<see cref="MsiEnableLog" /> function.</description>
        </item>
        <item>
          <description>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/remove">REMOVE</a> Property.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallProductA">
    <summary>
      <para>The
<b>MsiInstallProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szPackagePath">
      <para>A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <code>http://packageLocation/package/package.msi</code>), a network path  (e.g. \packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).</para>
    </param>
    <param name="szCommandLine">
      <para>A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
      <para>To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the
<a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization occurred.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.</para>
      <list type="bullet">
        <item>
          <description>You can change user interface settings by using the
<see cref="MsiSetInternalUI" />,
<see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" /> functions.</description>
        </item>
        <item>
          <description>You can set the log mode by using the
<see cref="MsiEnableLog" /> function.</description>
        </item>
        <item>
          <description>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/remove">REMOVE</a> Property.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiInstallProductW">
    <summary>
      <para>The
<b>MsiInstallProduct</b> function installs or uninstalls a product.</para>
    </summary>
    <param name="szPackagePath">
      <para>A null-terminated string that specifies the path to the location of the Windows Installer package. The string value can contain a URL (e.g. <code>http://packageLocation/package/package.msi</code>), a network path  (e.g. \packageLocation\package.msi), a file path (e.g. file://packageLocation/package.msi), or a local path (e.g. D:\packageLocation\package.msi).</para>
    </param>
    <param name="szCommandLine">
      <para>A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a>.</para>
      <para>To perform an administrative installation, include ACTION=ADMIN in <i>szCommandLine</i>. For more information, see the
<a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error that relates to initialization occurred.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiInstallProduct</b> function displays the user interface with the current settings and log mode.</para>
      <list type="bullet">
        <item>
          <description>You can change user interface settings by using the
<see cref="MsiSetInternalUI" />,
<see cref="MsiSetExternalUI" />, or <see cref="MsiSetExternalUIRecord" /> functions.</description>
        </item>
        <item>
          <description>You can set the log mode by using the
<see cref="MsiEnableLog" /> function.</description>
        </item>
        <item>
          <description>You can completely remove a product by setting REMOVE=ALL in <i>szCommandLine</i>.</description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/remove">REMOVE</a> Property.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiInstallProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Installation and Configuration Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiIsProductElevated">
    <summary>
      <para>The <b>MsiIsProductElevated</b> function returns whether or not the product is managed. Only applications that require elevated privileges for installation and being installed through advertisement are considered managed, which means that an application installed per-machine is always considered managed.</para>
      <para>An application that is installed  per-user is only considered managed if it is advertised by a local system process that is impersonating the user. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/advertising-a-per-user-application-to-be-installed-with-elevated-privileges">Advertising a Per-User Application to be Installed with Elevated Privileges</a>.</para>
      <para>
        <b>MsiIsProductElevated</b> verifies that the local system owns the product registry data. The function does not refer to account policies such as <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The full product code GUID of the product.</para>
      <para>This parameter is required and cannot be <b>NULL</b> or empty.</para>
    </param>
    <param name="pfElevated">
      <para>A pointer to a BOOL for the result.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.</para>
      <para>If the function fails, the return value is one of the error codes identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not currently known.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information for the product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>The function is not available for a specific platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installing-a-package-with-elevated-privileges-for-a-non-admin">Installing a Package with Elevated Privileges for a Non-Admin</seealso>
  </member>
  <member name="Windows.MsiIsProductElevatedA">
    <summary>
      <para>The <b>MsiIsProductElevated</b> function returns whether or not the product is managed. Only applications that require elevated privileges for installation and being installed through advertisement are considered managed, which means that an application installed per-machine is always considered managed.</para>
      <para>An application that is installed  per-user is only considered managed if it is advertised by a local system process that is impersonating the user. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/advertising-a-per-user-application-to-be-installed-with-elevated-privileges">Advertising a Per-User Application to be Installed with Elevated Privileges</a>.</para>
      <para>
        <b>MsiIsProductElevated</b> verifies that the local system owns the product registry data. The function does not refer to account policies such as <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The full product code GUID of the product.</para>
      <para>This parameter is required and cannot be <b>NULL</b> or empty.</para>
    </param>
    <param name="pfElevated">
      <para>A pointer to a BOOL for the result.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.</para>
      <para>If the function fails, the return value is one of the error codes identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not currently known.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information for the product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>The function is not available for a specific platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installing-a-package-with-elevated-privileges-for-a-non-admin">Installing a Package with Elevated Privileges for a Non-Admin</seealso>
  </member>
  <member name="Windows.MsiIsProductElevatedW">
    <summary>
      <para>The <b>MsiIsProductElevated</b> function returns whether or not the product is managed. Only applications that require elevated privileges for installation and being installed through advertisement are considered managed, which means that an application installed per-machine is always considered managed.</para>
      <para>An application that is installed  per-user is only considered managed if it is advertised by a local system process that is impersonating the user. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/advertising-a-per-user-application-to-be-installed-with-elevated-privileges">Advertising a Per-User Application to be Installed with Elevated Privileges</a>.</para>
      <para>
        <b>MsiIsProductElevated</b> verifies that the local system owns the product registry data. The function does not refer to account policies such as <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The full product code GUID of the product.</para>
      <para>This parameter is required and cannot be <b>NULL</b> or empty.</para>
    </param>
    <param name="pfElevated">
      <para>A pointer to a BOOL for the result.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.</para>
      <para>If the function fails, the return value is one of the error codes identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not currently known.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information for the product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>The function is not available for a specific platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installing-a-package-with-elevated-privileges-for-a-non-admin">Installing a Package with Elevated Privileges for a Non-Admin</seealso>
  </member>
  <member name="Windows.MsiIsProductElevated">
    <summary>
      <para>The <b>MsiIsProductElevated</b> function returns whether or not the product is managed. Only applications that require elevated privileges for installation and being installed through advertisement are considered managed, which means that an application installed per-machine is always considered managed.</para>
      <para>An application that is installed  per-user is only considered managed if it is advertised by a local system process that is impersonating the user. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/advertising-a-per-user-application-to-be-installed-with-elevated-privileges">Advertising a Per-User Application to be Installed with Elevated Privileges</a>.</para>
      <para>
        <b>MsiIsProductElevated</b> verifies that the local system owns the product registry data. The function does not refer to account policies such as <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The full product code GUID of the product.</para>
      <para>This parameter is required and cannot be <b>NULL</b> or empty.</para>
    </param>
    <param name="pfElevated">
      <para>A pointer to a BOOL for the result.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.</para>
      <para>If the function fails, the return value is one of the error codes identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not currently known.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information for the product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>The function is not available for a specific platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installing-a-package-with-elevated-privileges-for-a-non-admin">Installing a Package with Elevated Privileges for a Non-Admin</seealso>
  </member>
  <member name="Windows.MsiIsProductElevatedA">
    <summary>
      <para>The <b>MsiIsProductElevated</b> function returns whether or not the product is managed. Only applications that require elevated privileges for installation and being installed through advertisement are considered managed, which means that an application installed per-machine is always considered managed.</para>
      <para>An application that is installed  per-user is only considered managed if it is advertised by a local system process that is impersonating the user. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/advertising-a-per-user-application-to-be-installed-with-elevated-privileges">Advertising a Per-User Application to be Installed with Elevated Privileges</a>.</para>
      <para>
        <b>MsiIsProductElevated</b> verifies that the local system owns the product registry data. The function does not refer to account policies such as <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The full product code GUID of the product.</para>
      <para>This parameter is required and cannot be <b>NULL</b> or empty.</para>
    </param>
    <param name="pfElevated">
      <para>A pointer to a BOOL for the result.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.</para>
      <para>If the function fails, the return value is one of the error codes identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not currently known.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information for the product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>The function is not available for a specific platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installing-a-package-with-elevated-privileges-for-a-non-admin">Installing a Package with Elevated Privileges for a Non-Admin</seealso>
  </member>
  <member name="Windows.MsiIsProductElevatedW">
    <summary>
      <para>The <b>MsiIsProductElevated</b> function returns whether or not the product is managed. Only applications that require elevated privileges for installation and being installed through advertisement are considered managed, which means that an application installed per-machine is always considered managed.</para>
      <para>An application that is installed  per-user is only considered managed if it is advertised by a local system process that is impersonating the user. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/advertising-a-per-user-application-to-be-installed-with-elevated-privileges">Advertising a Per-User Application to be Installed with Elevated Privileges</a>.</para>
      <para>
        <b>MsiIsProductElevated</b> verifies that the local system owns the product registry data. The function does not refer to account policies such as <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The full product code GUID of the product.</para>
      <para>This parameter is required and cannot be <b>NULL</b> or empty.</para>
    </param>
    <param name="pfElevated">
      <para>A pointer to a BOOL for the result.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS, and <i>pfElevated</i> is set to <b>TRUE</b> if the product is a managed application.</para>
      <para>If the function fails, the return value is one of the error codes identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not currently known.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid argument is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information for the product is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>The function is not available for a specific platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiIsProductElevated as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/determining-installation-context">Determining Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installing-a-package-with-elevated-privileges-for-a-non-admin">Installing a Package with Elevated Privileges for a Non-Admin</seealso>
  </member>
  <member name="Windows.MsiJoinTransaction">
    <summary>
      <para>The <b>MsiJoinTransaction</b> function requests that the Windows Installer make the current process the owner of the <a href="https://docs.microsoft.com//windows/desktop/Msi/t-gly">transaction</a> installing the multiple-package installation.</para>
      <para>
        <b>
          <a href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-4-0">Windows Installer 4.0 and earlier</a>:  </b>Not supported. This function is available beginning with Windows Installer 4.5.</para>
    </summary>
    <param name="hTransactionHandle">
      <para>The transaction ID, which identifies the transaction and is the identifier returned by the <see cref="MsiBeginTransaction" /> function.</para>
    </param>
    <param name="dwTransactionAttributes">
      <para>Attributes of the multiple-package installation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>When 0 or no value is set, Windows Installer closes the UI from the previous installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_CHAIN_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer not shutdown the embedded UI until the transaction is complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MSITRANSACTION_JOIN_EXISTING_EMBEDDEDUI</para>
          </description>
          <description>
            <para>Set this attribute to request that the Windows Installer transfer the embedded UI from the original installation. If the original installation has no embedded UI, setting this attribute does nothing.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phChangeOfOwnerEvent">
      <para>This parameter returns a handle to an event that  is set when the <b>MsiJoinTransaction</b> function changes the owner of the transaction to a new owner. The current owner can use this to determine when ownership of the transaction has changed. Leaving a transaction without an owner will roll back the transaction.</para>
    </param>
    <returns>
      <para>The <b>MsiJoinTransaction</b> function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user that owns the transaction and the user that joins the transaction are not the same.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter that is not valid is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_ALREADY_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The owner cannot be changed while an active installation is in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE_STATE</b>
            </para>
          </description>
          <description>
            <para>The transaction ID provided is not valid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Because a transaction can be owned by no more than one process at a time, the functions authored into the <a href="https://docs.microsoft.com//windows/desktop/Msi/msiembeddedchainer-table">MsiEmbeddedChainer table</a> can use <b>MsiJoinTransaction</b> to request ownership of the transaction before using the Windows Installer API to configure or install an application. The installer verifies that there is no installation in progress. The installer verifies that the process requesting ownership and the process that currently owns the transaction share a parent process in the same process tree.  If the function succeeds, the process that calls <b>MsiJoinTransaction</b> becomes the current owner of the transaction.</para>
      <para>
        <b>MsiJoinTransaction</b> sets the internal UI of the new installation to the UI level of the original installation. After the new installation owns the transaction, it can call <see cref="MsiSetInternalUI" /> to change the UI level.  This enables the new installation to run at a higher UI level than the original installation.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple Package Installations</seealso>
  </member>
  <member name="Windows.MsiLocateComponent">
    <summary>
      <para>The
<b>MsiLocateComponent</b> function returns the full path to an installed component without a product code. This function attempts to determine the product using
<see cref="MsiGetProductCode" />, but is not guaranteed to find the correct product for the caller.
<see cref="MsiGetComponentPath" /> should always be called when possible.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. The variable includes the terminating null character.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the
<b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed. See Remarks.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer provided was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown. See Remarks.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiLocateComponentA">
    <summary>
      <para>The
<b>MsiLocateComponent</b> function returns the full path to an installed component without a product code. This function attempts to determine the product using
<see cref="MsiGetProductCode" />, but is not guaranteed to find the correct product for the caller.
<see cref="MsiGetComponentPath" /> should always be called when possible.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. The variable includes the terminating null character.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the
<b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed. See Remarks.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer provided was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown. See Remarks.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiLocateComponentW">
    <summary>
      <para>The
<b>MsiLocateComponent</b> function returns the full path to an installed component without a product code. This function attempts to determine the product using
<see cref="MsiGetProductCode" />, but is not guaranteed to find the correct product for the caller.
<see cref="MsiGetComponentPath" /> should always be called when possible.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. The variable includes the terminating null character.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the
<b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed. See Remarks.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer provided was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown. See Remarks.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiLocateComponent">
    <summary>
      <para>The
<b>MsiLocateComponent</b> function returns the full path to an installed component without a product code. This function attempts to determine the product using
<see cref="MsiGetProductCode" />, but is not guaranteed to find the correct product for the caller.
<see cref="MsiGetComponentPath" /> should always be called when possible.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. The variable includes the terminating null character.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the
<b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed. See Remarks.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer provided was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown. See Remarks.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiLocateComponentA">
    <summary>
      <para>The
<b>MsiLocateComponent</b> function returns the full path to an installed component without a product code. This function attempts to determine the product using
<see cref="MsiGetProductCode" />, but is not guaranteed to find the correct product for the caller.
<see cref="MsiGetComponentPath" /> should always be called when possible.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. The variable includes the terminating null character.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the
<b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed. See Remarks.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer provided was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown. See Remarks.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiLocateComponentW">
    <summary>
      <para>The
<b>MsiLocateComponent</b> function returns the full path to an installed component without a product code. This function attempts to determine the product using
<see cref="MsiGetProductCode" />, but is not guaranteed to find the correct product for the caller.
<see cref="MsiGetComponentPath" /> should always be called when possible.</para>
    </summary>
    <param name="szComponent">
      <para>Specifies the component ID of the component to be located.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. The variable includes the terminating null character.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the
<b>MsiLocateComponent</b> function, the variable pointed to by <i>pcchBuf</i> contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns INSTALLSTATE_MOREDATA.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component is not installed. See Remarks.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the function parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer provided was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The component is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCEABSENT</b>
            </para>
          </description>
          <description>
            <para>The component source is inaccessible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or component ID is unknown. See Remarks.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiLocateComponent</b> function might return INSTALLSTATE_ABSENT or INSTALL_STATE_UNKNOWN, for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>INSTALLSTATE_ABSENT
<para>The application did not properly ensure that the feature was installed by calling
<see cref="MsiUseFeature" /> and, if necessary,
<see cref="MsiConfigureFeature" />.</para></description>
        </item>
        <item>
          <description>INSTALLSTATE_UNKNOWN
<para>The feature is not published. The application should have determined this earlier by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application makes these calls while it initializes. An application should only use features that are known to be published. Since INSTALLSTATE_UNKNOWN should have been returned by
<see cref="MsiUseFeature" /> as well, either
<b>MsiUseFeature</b> was not called, or its return value was not properly checked.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiLocateComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
  </member>
  <member name="Windows.MsiNotifySidChange">
    <summary>
      <para>The <b>MsiNotifySidChange</b> function notifies and updates the Windows Installer internal information  with changes to  user SIDs.</para>
    </summary>
    <param name="pOldSid">
      <para>Null-terminated string that specifies the string value of the previous security identifier(SID).</para>
    </param>
    <param name="pNewSid">
      <para>Null-terminated string that specifies the string value of the new security identifier(SID).</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory was available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Internal failure during execution.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-0">Not Supported in Windows Installer 3.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiNotifySidChangeA">
    <summary>
      <para>The <b>MsiNotifySidChange</b> function notifies and updates the Windows Installer internal information  with changes to  user SIDs.</para>
    </summary>
    <param name="pOldSid">
      <para>Null-terminated string that specifies the string value of the previous security identifier(SID).</para>
    </param>
    <param name="pNewSid">
      <para>Null-terminated string that specifies the string value of the new security identifier(SID).</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory was available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Internal failure during execution.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-0">Not Supported in Windows Installer 3.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiNotifySidChangeW">
    <summary>
      <para>The <b>MsiNotifySidChange</b> function notifies and updates the Windows Installer internal information  with changes to  user SIDs.</para>
    </summary>
    <param name="pOldSid">
      <para>Null-terminated string that specifies the string value of the previous security identifier(SID).</para>
    </param>
    <param name="pNewSid">
      <para>Null-terminated string that specifies the string value of the new security identifier(SID).</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory was available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Internal failure during execution.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-0">Not Supported in Windows Installer 3.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiNotifySidChange">
    <summary>
      <para>The <b>MsiNotifySidChange</b> function notifies and updates the Windows Installer internal information  with changes to  user SIDs.</para>
    </summary>
    <param name="pOldSid">
      <para>Null-terminated string that specifies the string value of the previous security identifier(SID).</para>
    </param>
    <param name="pNewSid">
      <para>Null-terminated string that specifies the string value of the new security identifier(SID).</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory was available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Internal failure during execution.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-0">Not Supported in Windows Installer 3.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiNotifySidChangeA">
    <summary>
      <para>The <b>MsiNotifySidChange</b> function notifies and updates the Windows Installer internal information  with changes to  user SIDs.</para>
    </summary>
    <param name="pOldSid">
      <para>Null-terminated string that specifies the string value of the previous security identifier(SID).</para>
    </param>
    <param name="pNewSid">
      <para>Null-terminated string that specifies the string value of the new security identifier(SID).</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory was available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Internal failure during execution.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-0">Not Supported in Windows Installer 3.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiNotifySidChangeW">
    <summary>
      <para>The <b>MsiNotifySidChange</b> function notifies and updates the Windows Installer internal information  with changes to  user SIDs.</para>
    </summary>
    <param name="pOldSid">
      <para>Null-terminated string that specifies the string value of the previous security identifier(SID).</para>
    </param>
    <param name="pNewSid">
      <para>Null-terminated string that specifies the string value of the new security identifier(SID).</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function. This error returned if any of the parameters is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory was available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Internal failure during execution.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. This function is available beginning with Windows Installer 3.1.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiNotifySidChange as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-0">Not Supported in Windows Installer 3.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiOpenPackage">
    <summary>
      <para>The
<b>MsiOpenPackage</b> function opens a package to use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is not needed. <b>Note</b>  Initialize COM on the same thread before calling the  <b>MsiOpenPackage</b>, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenPackageA">
    <summary>
      <para>The
<b>MsiOpenPackage</b> function opens a package to use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is not needed. <b>Note</b>  Initialize COM on the same thread before calling the  <b>MsiOpenPackage</b>, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenPackageW">
    <summary>
      <para>The
<b>MsiOpenPackage</b> function opens a package to use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is not needed. <b>Note</b>  Initialize COM on the same thread before calling the  <b>MsiOpenPackage</b>, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenPackageEx">
    <summary>
      <para>The
<b>MsiOpenPackageEx</b> function opens a package to use with functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <b>MsiOpenPackageEx</b>, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="dwOptions">
      <para>The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use
<see cref="MsiOpenPackage" /> behavior.</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore the computer state when creating the product handle.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.</para>
      <para>Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1,
<b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0,
<b>MsiOpenPackageEx</b> is the same as
<see cref="MsiOpenPackage" /> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.</para>
      <para>The restricted handle created by using
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run
<a href="https://docs.microsoft.com//windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/executable-files">Executable Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/scripts">Scripts</a>.</para>
      <para>You can call
<see cref="MsiDoAction" /> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/admin-action">ADMIN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/advertise-action">ADVERTISE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/install-action">INSTALL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/sequence-action">SEQUENCE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/resolvesource-action">ResolveSource</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
          </description>
        </item>
      </list>
      <para>The
<see cref="MsiCloseHandle" /> function must be called when the handle is not needed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiOpenPackageExA">
    <summary>
      <para>The
<b>MsiOpenPackageEx</b> function opens a package to use with functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <b>MsiOpenPackageEx</b>, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="dwOptions">
      <para>The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use
<see cref="MsiOpenPackage" /> behavior.</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore the computer state when creating the product handle.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.</para>
      <para>Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1,
<b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0,
<b>MsiOpenPackageEx</b> is the same as
<see cref="MsiOpenPackage" /> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.</para>
      <para>The restricted handle created by using
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run
<a href="https://docs.microsoft.com//windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/executable-files">Executable Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/scripts">Scripts</a>.</para>
      <para>You can call
<see cref="MsiDoAction" /> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/admin-action">ADMIN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/advertise-action">ADVERTISE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/install-action">INSTALL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/sequence-action">SEQUENCE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/resolvesource-action">ResolveSource</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
          </description>
        </item>
      </list>
      <para>The
<see cref="MsiCloseHandle" /> function must be called when the handle is not needed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiOpenPackageExW">
    <summary>
      <para>The
<b>MsiOpenPackageEx</b> function opens a package to use with functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <b>MsiOpenPackageEx</b>, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="dwOptions">
      <para>The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use
<see cref="MsiOpenPackage" /> behavior.</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore the computer state when creating the product handle.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.</para>
      <para>Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1,
<b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0,
<b>MsiOpenPackageEx</b> is the same as
<see cref="MsiOpenPackage" /> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.</para>
      <para>The restricted handle created by using
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run
<a href="https://docs.microsoft.com//windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/executable-files">Executable Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/scripts">Scripts</a>.</para>
      <para>You can call
<see cref="MsiDoAction" /> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/admin-action">ADMIN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/advertise-action">ADVERTISE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/install-action">INSTALL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/sequence-action">SEQUENCE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/resolvesource-action">ResolveSource</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
          </description>
        </item>
      </list>
      <para>The
<see cref="MsiCloseHandle" /> function must be called when the handle is not needed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiOpenPackageEx">
    <summary>
      <para>The
<b>MsiOpenPackageEx</b> function opens a package to use with functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <b>MsiOpenPackageEx</b>, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="dwOptions">
      <para>The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use
<see cref="MsiOpenPackage" /> behavior.</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore the computer state when creating the product handle.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.</para>
      <para>Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1,
<b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0,
<b>MsiOpenPackageEx</b> is the same as
<see cref="MsiOpenPackage" /> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.</para>
      <para>The restricted handle created by using
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run
<a href="https://docs.microsoft.com//windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/executable-files">Executable Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/scripts">Scripts</a>.</para>
      <para>You can call
<see cref="MsiDoAction" /> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/admin-action">ADMIN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/advertise-action">ADVERTISE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/install-action">INSTALL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/sequence-action">SEQUENCE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/resolvesource-action">ResolveSource</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
          </description>
        </item>
      </list>
      <para>The
<see cref="MsiCloseHandle" /> function must be called when the handle is not needed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiOpenPackageExA">
    <summary>
      <para>The
<b>MsiOpenPackageEx</b> function opens a package to use with functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <b>MsiOpenPackageEx</b>, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="dwOptions">
      <para>The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use
<see cref="MsiOpenPackage" /> behavior.</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore the computer state when creating the product handle.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.</para>
      <para>Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1,
<b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0,
<b>MsiOpenPackageEx</b> is the same as
<see cref="MsiOpenPackage" /> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.</para>
      <para>The restricted handle created by using
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run
<a href="https://docs.microsoft.com//windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/executable-files">Executable Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/scripts">Scripts</a>.</para>
      <para>You can call
<see cref="MsiDoAction" /> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/admin-action">ADMIN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/advertise-action">ADVERTISE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/install-action">INSTALL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/sequence-action">SEQUENCE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/resolvesource-action">ResolveSource</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
          </description>
        </item>
      </list>
      <para>The
<see cref="MsiCloseHandle" /> function must be called when the handle is not needed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiOpenPackageExW">
    <summary>
      <para>The
<b>MsiOpenPackageEx</b> function opens a package to use with functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <b>MsiOpenPackageEx</b>, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="dwOptions">
      <para>The bit flags to indicate whether or not to ignore the computer state. Pass in 0 (zero) to use
<see cref="MsiOpenPackage" /> behavior.</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore the computer state when creating the product handle.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>To create a restricted product handle that is independent of the current machine state and incapable of changing the current machine state, use
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE set in <i>dwOptions</i>.</para>
      <para>Note that if <i>dwOptions</i> is MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE or 1,
<b>MsiOpenPackageEx</b> ignores the current machine state when creating the product handle. If the value of <i>dwOptions</i> is 0,
<b>MsiOpenPackageEx</b> is the same as
<see cref="MsiOpenPackage" /> and creates a product handle that is dependent upon whether the package specified by <i>szPackagePath</i> is already installed on the computer.</para>
      <para>The restricted handle created by using
<b>MsiOpenPackageEx</b> with MSIOPENPACKAGEFLAGS_IGNOREMACHINESTATE only permits execution of dialogs, a subset of the standard actions, and custom actions that set properties (
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-35">Custom Action Type 35</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-51">Custom Action Type 51</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/custom-action-type-19">Custom Action Type 19</a>). The restricted handle prevents the use of custom actions that run
<a href="https://docs.microsoft.com//windows/desktop/Msi/dynamic-link-libraries">Dynamic-Link Libraries</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/executable-files">Executable Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/scripts">Scripts</a>.</para>
      <para>You can call
<see cref="MsiDoAction" /> on the following standard actions using the restricted handle. All other actions return ERROR_FUNCTION_NOT_CALLED if called with the restricted handle.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/admin-action">ADMIN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/advertise-action">ADVERTISE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/install-action">INSTALL</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/sequence-action">SEQUENCE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/ccpsearch-action">CCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/findrelatedproducts-action">FindRelatedProducts</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/isolatecomponents-action">IsolateComponents action</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/launchconditions-action">LaunchConditions</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/migratefeaturestates-action">MigrateFeatureStates</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/resolvesource-action">ResolveSource</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/rmccpsearch-action">RMCCPSearch</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/validateproductid-action">ValidateProductID</a>
          </description>
        </item>
      </list>
      <para>The
<see cref="MsiCloseHandle" /> function must be called when the handle is not needed.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiOpenPackage">
    <summary>
      <para>The
<b>MsiOpenPackage</b> function opens a package to use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is not needed. <b>Note</b>  Initialize COM on the same thread before calling the  <b>MsiOpenPackage</b>, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenPackageA">
    <summary>
      <para>The
<b>MsiOpenPackage</b> function opens a package to use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is not needed. <b>Note</b>  Initialize COM on the same thread before calling the  <b>MsiOpenPackage</b>, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenPackageW">
    <summary>
      <para>The
<b>MsiOpenPackage</b> function opens a package to use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is not needed. <b>Note</b>  Initialize COM on the same thread before calling the  <b>MsiOpenPackage</b>, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" /> function.</para>
    </summary>
    <param name="szPackagePath">
      <para>The path to the package.</para>
    </param>
    <param name="hProduct">
      <para>A pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_REMOTE_PROHIBITED</b>
            </para>
          </description>
          <description>
            <para>Windows Installer does not permit installation from a remote desktop connection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
      </list>
      <para>If this function fails, it may return a system error code. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a>.</para>
    </returns>
    <remarks>
      <para>MsiOpenPackage can accept an opened database handle in the form "#nnnn", where nnnn is the database handle in string form, i.e. #123, instead of a path to the package. This is intended for development tasks such as running validation actions, or for use with database management tools.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenProduct">
    <summary>
      <para>The
<b>MsiOpenProduct</b> function opens a product for use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.
<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <b>MsiOpenProduct</b> function.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product to be opened.</para>
    </param>
    <param name="hProduct">
      <para>Pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code was unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenProductA">
    <summary>
      <para>The
<b>MsiOpenProduct</b> function opens a product for use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.
<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <b>MsiOpenProduct</b> function.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product to be opened.</para>
    </param>
    <param name="hProduct">
      <para>Pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code was unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenProductW">
    <summary>
      <para>The
<b>MsiOpenProduct</b> function opens a product for use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.
<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <b>MsiOpenProduct</b> function.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product to be opened.</para>
    </param>
    <param name="hProduct">
      <para>Pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code was unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenProduct">
    <summary>
      <para>The
<b>MsiOpenProduct</b> function opens a product for use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.
<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <b>MsiOpenProduct</b> function.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product to be opened.</para>
    </param>
    <param name="hProduct">
      <para>Pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code was unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenProductA">
    <summary>
      <para>The
<b>MsiOpenProduct</b> function opens a product for use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.
<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <b>MsiOpenProduct</b> function.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product to be opened.</para>
    </param>
    <param name="hProduct">
      <para>Pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code was unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiOpenProductW">
    <summary>
      <para>The
<b>MsiOpenProduct</b> function opens a product for use with the functions that access the product database. The
<see cref="MsiCloseHandle" /> function must be called with the handle when the handle is no longer needed.
<b>Note</b>  Initialize COM on the same thread before calling the <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <b>MsiOpenProduct</b> function.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code of the product to be opened.</para>
    </param>
    <param name="hProduct">
      <para>Pointer to a variable that receives the product handle.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration information is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The product could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The source was unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code was unrecognized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiOpenProduct as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Product Query Functions</seealso>
  </member>
  <member name="Windows.MsiProcessAdvertiseScript">
    <summary>
      <para>The
<b>MsiProcessAdvertiseScript</b> function processes an advertise script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="szIconFolder">
      <para>An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.</para>
    </param>
    <param name="hRegData">
      <para>A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
    </param>
    <param name="fShortcuts">
      <para>
        <b>TRUE</b> if shortcuts should be created. If a special folder is returned by
<see cref="SHGetSpecialFolderLocation" /> it will hold the shortcuts.</para>
    </param>
    <param name="fRemoveItems">
      <para>
        <b>TRUE</b> if specified items are to be removed instead of created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is not available for this platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiProcessAdvertiseScriptA">
    <summary>
      <para>The
<b>MsiProcessAdvertiseScript</b> function processes an advertise script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="szIconFolder">
      <para>An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.</para>
    </param>
    <param name="hRegData">
      <para>A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
    </param>
    <param name="fShortcuts">
      <para>
        <b>TRUE</b> if shortcuts should be created. If a special folder is returned by
<see cref="SHGetSpecialFolderLocation" /> it will hold the shortcuts.</para>
    </param>
    <param name="fRemoveItems">
      <para>
        <b>TRUE</b> if specified items are to be removed instead of created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is not available for this platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiProcessAdvertiseScriptW">
    <summary>
      <para>The
<b>MsiProcessAdvertiseScript</b> function processes an advertise script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="szIconFolder">
      <para>An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.</para>
    </param>
    <param name="hRegData">
      <para>A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
    </param>
    <param name="fShortcuts">
      <para>
        <b>TRUE</b> if shortcuts should be created. If a special folder is returned by
<see cref="SHGetSpecialFolderLocation" /> it will hold the shortcuts.</para>
    </param>
    <param name="fRemoveItems">
      <para>
        <b>TRUE</b> if specified items are to be removed instead of created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is not available for this platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiProcessAdvertiseScript">
    <summary>
      <para>The
<b>MsiProcessAdvertiseScript</b> function processes an advertise script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="szIconFolder">
      <para>An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.</para>
    </param>
    <param name="hRegData">
      <para>A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
    </param>
    <param name="fShortcuts">
      <para>
        <b>TRUE</b> if shortcuts should be created. If a special folder is returned by
<see cref="SHGetSpecialFolderLocation" /> it will hold the shortcuts.</para>
    </param>
    <param name="fRemoveItems">
      <para>
        <b>TRUE</b> if specified items are to be removed instead of created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is not available for this platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiProcessAdvertiseScriptA">
    <summary>
      <para>The
<b>MsiProcessAdvertiseScript</b> function processes an advertise script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="szIconFolder">
      <para>An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.</para>
    </param>
    <param name="hRegData">
      <para>A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
    </param>
    <param name="fShortcuts">
      <para>
        <b>TRUE</b> if shortcuts should be created. If a special folder is returned by
<see cref="SHGetSpecialFolderLocation" /> it will hold the shortcuts.</para>
    </param>
    <param name="fRemoveItems">
      <para>
        <b>TRUE</b> if specified items are to be removed instead of created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is not available for this platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiProcessAdvertiseScriptW">
    <summary>
      <para>The
<b>MsiProcessAdvertiseScript</b> function processes an advertise script file into the specified locations.</para>
    </summary>
    <param name="szScriptFile">
      <para>The full path to a script file generated by
<see cref="MsiAdvertiseProduct" /> or
<see cref="MsiAdvertiseProductEx" />.</para>
    </param>
    <param name="szIconFolder">
      <para>An optional path to a folder in which advertised icon files and transform files are located. If this parameter is <b>NULL</b>, no icon or transform files are written.</para>
    </param>
    <param name="hRegData">
      <para>A registry key under which registry data is to be written. If this parameter is <b>NULL</b>, the installer writes the registry data under the appropriate key, based on whether the advertisement is per-user or per-machine. If this parameter is non-<b>NULL</b>, the script will write the registry data under the specified registry key rather than the normal location. In this case, the application will not get advertised to the user.</para>
    </param>
    <param name="fShortcuts">
      <para>
        <b>TRUE</b> if shortcuts should be created. If a special folder is returned by
<see cref="SHGetSpecialFolderLocation" /> it will hold the shortcuts.</para>
    </param>
    <param name="fRemoveItems">
      <para>
        <b>TRUE</b> if specified items are to be removed instead of created.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process was not running under the LocalSystem account.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This function is not available for this platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The process calling this function must be running under the LocalSystem account. To advertise an application for per-user installation to a targeted user, the thread that calls this function must impersonate the targeted user. If the thread calling this function is not impersonating a targeted user, the application is advertised to all users for installation with elevated privileges.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProcessAdvertiseScript as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiProvideAssembly">
    <summary>
      <para>The
<b>MsiProvideAssembly</b> function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation.
<b>MsiProvideAssembly</b> increments the usage count for the feature.</para>
    </summary>
    <param name="szAssemblyName">
      <para>The assembly name as a string.</para>
    </param>
    <param name="szAppContext">
      <para>Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION_ANY</b>
          </description>
          <description>
            <para>Provide the component if a feature exists from any installed product. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file of the component exists.
This flag is similar to the INSTALLMODE_NODETECTION flag except that with this flag we check for any product that has installed the assembly as opposed to the last product as is the case with the INSTALLMODE_NODETECTION flag.
This flag can only be used with <b>MsiProvideAssembly</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwAssemblyInfo">
      <para>Assembly information and assembly type. Set to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_NETASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>.NET Assembly</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_WIN32ASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Win32 Assembly</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not specify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>When the
<b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideAssemblyA">
    <summary>
      <para>The
<b>MsiProvideAssembly</b> function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation.
<b>MsiProvideAssembly</b> increments the usage count for the feature.</para>
    </summary>
    <param name="szAssemblyName">
      <para>The assembly name as a string.</para>
    </param>
    <param name="szAppContext">
      <para>Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION_ANY</b>
          </description>
          <description>
            <para>Provide the component if a feature exists from any installed product. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file of the component exists.
This flag is similar to the INSTALLMODE_NODETECTION flag except that with this flag we check for any product that has installed the assembly as opposed to the last product as is the case with the INSTALLMODE_NODETECTION flag.
This flag can only be used with <b>MsiProvideAssembly</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwAssemblyInfo">
      <para>Assembly information and assembly type. Set to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_NETASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>.NET Assembly</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_WIN32ASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Win32 Assembly</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not specify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>When the
<b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideAssemblyW">
    <summary>
      <para>The
<b>MsiProvideAssembly</b> function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation.
<b>MsiProvideAssembly</b> increments the usage count for the feature.</para>
    </summary>
    <param name="szAssemblyName">
      <para>The assembly name as a string.</para>
    </param>
    <param name="szAppContext">
      <para>Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION_ANY</b>
          </description>
          <description>
            <para>Provide the component if a feature exists from any installed product. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file of the component exists.
This flag is similar to the INSTALLMODE_NODETECTION flag except that with this flag we check for any product that has installed the assembly as opposed to the last product as is the case with the INSTALLMODE_NODETECTION flag.
This flag can only be used with <b>MsiProvideAssembly</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwAssemblyInfo">
      <para>Assembly information and assembly type. Set to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_NETASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>.NET Assembly</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_WIN32ASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Win32 Assembly</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not specify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>When the
<b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideAssembly">
    <summary>
      <para>The
<b>MsiProvideAssembly</b> function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation.
<b>MsiProvideAssembly</b> increments the usage count for the feature.</para>
    </summary>
    <param name="szAssemblyName">
      <para>The assembly name as a string.</para>
    </param>
    <param name="szAppContext">
      <para>Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION_ANY</b>
          </description>
          <description>
            <para>Provide the component if a feature exists from any installed product. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file of the component exists.
This flag is similar to the INSTALLMODE_NODETECTION flag except that with this flag we check for any product that has installed the assembly as opposed to the last product as is the case with the INSTALLMODE_NODETECTION flag.
This flag can only be used with <b>MsiProvideAssembly</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwAssemblyInfo">
      <para>Assembly information and assembly type. Set to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_NETASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>.NET Assembly</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_WIN32ASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Win32 Assembly</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not specify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>When the
<b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideAssemblyA">
    <summary>
      <para>The
<b>MsiProvideAssembly</b> function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation.
<b>MsiProvideAssembly</b> increments the usage count for the feature.</para>
    </summary>
    <param name="szAssemblyName">
      <para>The assembly name as a string.</para>
    </param>
    <param name="szAppContext">
      <para>Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION_ANY</b>
          </description>
          <description>
            <para>Provide the component if a feature exists from any installed product. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file of the component exists.
This flag is similar to the INSTALLMODE_NODETECTION flag except that with this flag we check for any product that has installed the assembly as opposed to the last product as is the case with the INSTALLMODE_NODETECTION flag.
This flag can only be used with <b>MsiProvideAssembly</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwAssemblyInfo">
      <para>Assembly information and assembly type. Set to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_NETASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>.NET Assembly</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_WIN32ASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Win32 Assembly</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not specify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>When the
<b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideAssemblyW">
    <summary>
      <para>The
<b>MsiProvideAssembly</b> function returns the full path to a Windows Installer component that contains an assembly. The function prompts for a source and performs any necessary installation.
<b>MsiProvideAssembly</b> increments the usage count for the feature.</para>
    </summary>
    <param name="szAssemblyName">
      <para>The assembly name as a string.</para>
    </param>
    <param name="szAppContext">
      <para>Set to null for global assemblies. For private assemblies, set <i>szAppContext</i> to the full path of the application configuration file  or to the full path of the executable file of the application to which the assembly has been made private.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION_ANY</b>
          </description>
          <description>
            <para>Provide the component if a feature exists from any installed product. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file of the component exists.
This flag is similar to the INSTALLMODE_NODETECTION flag except that with this flag we check for any product that has installed the assembly as opposed to the last product as is the case with the INSTALLMODE_NODETECTION flag.
This flag can only be used with <b>MsiProvideAssembly</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwAssemblyInfo">
      <para>Assembly information and assembly type. Set to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_NETASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>.NET Assembly</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIASSEMBLYINFO_WIN32ASSEMBLY</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Win32 Assembly</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchPathBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not specify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>The system does not have enough memory to complete the operation. Available with Windows Server 2003.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>When the
<b>MsiProvideAssembly</b> function succeeds, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components that contain a corrupted file or the wrong version of a file must be explicitly reinstalled by the user, or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideAssembly as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideComponent">
    <summary>
      <para>The
<b>MsiProvideComponent</b> function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature with the necessary component.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID of the feature with the necessary component.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component code of the necessary component.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiProvideComponent</b> function combines the functionality of
<see cref="MsiUseFeature" />,
<see cref="MsiConfigureFeature" />, and
<see cref="MsiGetComponentPath" />. You can use the
<b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The
<b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.</para>
      <para>If the application is recovering from an unexpected situation, the application has probably already called
<see cref="MsiUseFeature" /> and incremented the usage count. In this case, the application should call
<see cref="MsiConfigureFeature" /> instead of
<b>MsiProvideComponent</b> to avoid incrementing the count again.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideComponentA">
    <summary>
      <para>The
<b>MsiProvideComponent</b> function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature with the necessary component.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID of the feature with the necessary component.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component code of the necessary component.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiProvideComponent</b> function combines the functionality of
<see cref="MsiUseFeature" />,
<see cref="MsiConfigureFeature" />, and
<see cref="MsiGetComponentPath" />. You can use the
<b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The
<b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.</para>
      <para>If the application is recovering from an unexpected situation, the application has probably already called
<see cref="MsiUseFeature" /> and incremented the usage count. In this case, the application should call
<see cref="MsiConfigureFeature" /> instead of
<b>MsiProvideComponent</b> to avoid incrementing the count again.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideComponentW">
    <summary>
      <para>The
<b>MsiProvideComponent</b> function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature with the necessary component.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID of the feature with the necessary component.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component code of the necessary component.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiProvideComponent</b> function combines the functionality of
<see cref="MsiUseFeature" />,
<see cref="MsiConfigureFeature" />, and
<see cref="MsiGetComponentPath" />. You can use the
<b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The
<b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.</para>
      <para>If the application is recovering from an unexpected situation, the application has probably already called
<see cref="MsiUseFeature" /> and incremented the usage count. In this case, the application should call
<see cref="MsiConfigureFeature" /> instead of
<b>MsiProvideComponent</b> to avoid incrementing the count again.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideComponent">
    <summary>
      <para>The
<b>MsiProvideComponent</b> function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature with the necessary component.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID of the feature with the necessary component.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component code of the necessary component.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiProvideComponent</b> function combines the functionality of
<see cref="MsiUseFeature" />,
<see cref="MsiConfigureFeature" />, and
<see cref="MsiGetComponentPath" />. You can use the
<b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The
<b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.</para>
      <para>If the application is recovering from an unexpected situation, the application has probably already called
<see cref="MsiUseFeature" /> and incremented the usage count. In this case, the application should call
<see cref="MsiConfigureFeature" /> instead of
<b>MsiProvideComponent</b> to avoid incrementing the count again.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideComponentA">
    <summary>
      <para>The
<b>MsiProvideComponent</b> function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature with the necessary component.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID of the feature with the necessary component.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component code of the necessary component.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiProvideComponent</b> function combines the functionality of
<see cref="MsiUseFeature" />,
<see cref="MsiConfigureFeature" />, and
<see cref="MsiGetComponentPath" />. You can use the
<b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The
<b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.</para>
      <para>If the application is recovering from an unexpected situation, the application has probably already called
<see cref="MsiUseFeature" /> and incremented the usage count. In this case, the application should call
<see cref="MsiConfigureFeature" /> instead of
<b>MsiProvideComponent</b> to avoid incrementing the count again.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideComponentW">
    <summary>
      <para>The
<b>MsiProvideComponent</b> function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature with the necessary component.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature ID of the feature with the necessary component.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the component code of the necessary component.</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_NOTUSED</b>
            </para>
          </description>
          <description>
            <para>The component being requested is disabled on the computer.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>An unrecognized product or a feature name was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer overflow is returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SOURCE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Unable to detect a source.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>The
<b>MsiProvideComponent</b> function combines the functionality of
<see cref="MsiUseFeature" />,
<see cref="MsiConfigureFeature" />, and
<see cref="MsiGetComponentPath" />. You can use the
<b>MsiProvideComponent</b> function to simplify the calling sequence. However, because this function increments the usage count, use it with caution to prevent inaccurate usage counts. The
<b>MsiProvideComponent</b> function also provides less flexibility than the series of individual calls.</para>
      <para>If the application is recovering from an unexpected situation, the application has probably already called
<see cref="MsiUseFeature" /> and incremented the usage count. In this case, the application should call
<see cref="MsiConfigureFeature" /> instead of
<b>MsiProvideComponent</b> to avoid incrementing the count again.</para>
      <para>The INSTALLMODE_EXISTING option cannot be used in combination with the REINSTALLMODE flag.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponent">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponent</b> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA, and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall the feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise, it returns ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component qualifier is invalid or absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentA">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponent</b> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA, and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall the feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise, it returns ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component qualifier is invalid or absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentW">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponent</b> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA, and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall the feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise, it returns ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component qualifier is invalid or absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentEx">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponentEx</b> function returns the full component path for a qualified component that is published by a product and performs any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists, else return ERROR_FILE_NOT_FOUND.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProduct">
      <para>Specifies the product to match that has published the qualified component. If this is null, then this API works the same as
<see cref="MsiProvideQualifiedComponent" />.</para>
    </param>
    <param name="dwUnused1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="dwUnused2">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Component qualifier invalid or not present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentExA">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponentEx</b> function returns the full component path for a qualified component that is published by a product and performs any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists, else return ERROR_FILE_NOT_FOUND.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProduct">
      <para>Specifies the product to match that has published the qualified component. If this is null, then this API works the same as
<see cref="MsiProvideQualifiedComponent" />.</para>
    </param>
    <param name="dwUnused1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="dwUnused2">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Component qualifier invalid or not present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentExW">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponentEx</b> function returns the full component path for a qualified component that is published by a product and performs any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists, else return ERROR_FILE_NOT_FOUND.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProduct">
      <para>Specifies the product to match that has published the qualified component. If this is null, then this API works the same as
<see cref="MsiProvideQualifiedComponent" />.</para>
    </param>
    <param name="dwUnused1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="dwUnused2">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Component qualifier invalid or not present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentEx">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponentEx</b> function returns the full component path for a qualified component that is published by a product and performs any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists, else return ERROR_FILE_NOT_FOUND.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProduct">
      <para>Specifies the product to match that has published the qualified component. If this is null, then this API works the same as
<see cref="MsiProvideQualifiedComponent" />.</para>
    </param>
    <param name="dwUnused1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="dwUnused2">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Component qualifier invalid or not present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentExA">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponentEx</b> function returns the full component path for a qualified component that is published by a product and performs any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists, else return ERROR_FILE_NOT_FOUND.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProduct">
      <para>Specifies the product to match that has published the qualified component. If this is null, then this API works the same as
<see cref="MsiProvideQualifiedComponent" />.</para>
    </param>
    <param name="dwUnused1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="dwUnused2">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Component qualifier invalid or not present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentExW">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponentEx</b> function returns the full component path for a qualified component that is published by a product and performs any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID that for the requested component. This may not be the GUID for the component itself but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists, else return ERROR_FILE_NOT_FOUND.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise return ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szProduct">
      <para>Specifies the product to match that has published the qualified component. If this is null, then this API works the same as
<see cref="MsiProvideQualifiedComponent" />.</para>
    </param>
    <param name="dwUnused1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="dwUnused2">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>Component qualifier invalid or not present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. this error is returned for <i>dwInstallMode</i> = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponentEx</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponentEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponent">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponent</b> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA, and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall the feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise, it returns ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component qualifier is invalid or absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentA">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponent</b> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA, and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall the feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise, it returns ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component qualifier is invalid or absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiProvideQualifiedComponentW">
    <summary>
      <para>The
<b>MsiProvideQualifiedComponent</b> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</para>
    </summary>
    <param name="szCategory">
      <para>Specifies the component ID  for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent table</a>.</para>
    </param>
    <param name="szQualifier">
      <para>Specifies a qualifier into a list of advertising components (from
<a href="https://docs.microsoft.com//windows/desktop/Msi/publishcomponent-table">PublishComponent Table</a>).</para>
    </param>
    <param name="dwInstallMode">
      <para>Defines the installation mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_DEFAULT</b>
          </description>
          <description>
            <para>Provide the component and perform any installation necessary to provide the component. If the key file of a component in the requested feature, or a feature parent, is missing, reinstall the feature using
<see cref="MsiReinstallFeature" /> with the following flag bits set: REINSTALLMODE_FILEMISSING, REINSTALLMODE_FILEOLDERVERSION, REINSTALLMODE_FILEVERIFY, REINSTALLMODE_MACHINEDATA, REINSTALLMODE_USERDATA, and REINSTALLMODE_SHORTCUT.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_EXISTING</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode verifies that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature exists. Otherwise return ERROR_FILE_NOT_FOUND.</para>
            <para>This mode only checks that the component is registered and does not verify that the key file of the component exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>combination of the
REINSTALLMODE flags</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Call
<see cref="MsiReinstallFeature" /> to reinstall the feature using this parameter for the <i>dwReinstallMode</i> parameter, and then provide the component.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMODE_NOSOURCERESOLUTION</b>
          </description>
          <description>
            <para>Provide the component only if the feature's installation state is INSTALLSTATE_LOCAL. If the feature's installation state is INSTALLSTATE_SOURCE, return ERROR_INSTALL_SOURCE_ABSENT. Otherwise, it returns ERROR_FILE_NOT_FOUND. This mode only checks that the component is registered and does not verify that the key file exists.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpPathBuf">
      <para>Pointer to a variable that receives the path to the component. This parameter can be null.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <i>lpPathBuf</i> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</para>
      <para>If <i>lpPathBuf</i> is null, <i>pcchBuf</i> can be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INDEX_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The component qualifier is invalid or absent.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FILE_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The feature is absent or broken. This error is returned for dwInstallMode = INSTALLMODE_EXISTING.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The specified component is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>An error relating to an action</b>
            </para>
          </description>
          <description>
            <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <a href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</a>
              </b>
            </para>
          </description>
          <description>
            <para>An error relating to initialization occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Upon success of the
<b>MsiProvideQualifiedComponent</b> function, the <i>pcchPathBuf</i> parameter contains the length of the string in <i>lpPathBuf</i>.</para>
      <para>Features with components containing a corrupted file or the wrong version of a file must be explicitly reinstalled by the user or by having the application call
<see cref="MsiReinstallFeature" />.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiProvideQualifiedComponent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Component-Specific Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/error-codes">Error Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/initialization-errors">Initialization Error</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
  </member>
  <member name="Windows.MsiQueryComponentState">
    <summary>
      <para>The <b>MsiQueryComponentState</b> function returns the installed state for a component. This function can query for a component of an instance of a product that is installed under user accounts other than the  current user provided the product is not advertised under the per-user-unmanaged context for a user account other than the current user.  The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–non-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szComponentCode">
      <para>Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</a> table.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the component for the specified product instance. This parameter can return one of the following or null values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component is installed to run from the source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryComponentState</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not identify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Failures that cannot be ascribed to any Windows error code.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer too small to get the user SID.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiQueryComponentStateA">
    <summary>
      <para>The <b>MsiQueryComponentState</b> function returns the installed state for a component. This function can query for a component of an instance of a product that is installed under user accounts other than the  current user provided the product is not advertised under the per-user-unmanaged context for a user account other than the current user.  The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–non-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szComponentCode">
      <para>Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</a> table.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the component for the specified product instance. This parameter can return one of the following or null values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component is installed to run from the source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryComponentState</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not identify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Failures that cannot be ascribed to any Windows error code.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer too small to get the user SID.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiQueryComponentStateW">
    <summary>
      <para>The <b>MsiQueryComponentState</b> function returns the installed state for a component. This function can query for a component of an instance of a product that is installed under user accounts other than the  current user provided the product is not advertised under the per-user-unmanaged context for a user account other than the current user.  The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–non-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szComponentCode">
      <para>Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</a> table.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the component for the specified product instance. This parameter can return one of the following or null values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component is installed to run from the source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryComponentState</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not identify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Failures that cannot be ascribed to any Windows error code.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer too small to get the user SID.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiQueryComponentState">
    <summary>
      <para>The <b>MsiQueryComponentState</b> function returns the installed state for a component. This function can query for a component of an instance of a product that is installed under user accounts other than the  current user provided the product is not advertised under the per-user-unmanaged context for a user account other than the current user.  The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–non-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szComponentCode">
      <para>Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</a> table.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the component for the specified product instance. This parameter can return one of the following or null values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component is installed to run from the source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryComponentState</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not identify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Failures that cannot be ascribed to any Windows error code.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer too small to get the user SID.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiQueryComponentStateA">
    <summary>
      <para>The <b>MsiQueryComponentState</b> function returns the installed state for a component. This function can query for a component of an instance of a product that is installed under user accounts other than the  current user provided the product is not advertised under the per-user-unmanaged context for a user account other than the current user.  The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–non-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szComponentCode">
      <para>Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</a> table.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the component for the specified product instance. This parameter can return one of the following or null values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component is installed to run from the source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryComponentState</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not identify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Failures that cannot be ascribed to any Windows error code.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer too small to get the user SID.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiQueryComponentStateW">
    <summary>
      <para>The <b>MsiQueryComponentState</b> function returns the installed state for a component. This function can query for a component of an instance of a product that is installed under user accounts other than the  current user provided the product is not advertised under the per-user-unmanaged context for a user account other than the current user.  The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID for the product that contains the component.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account under which the instance of the product being queried exists. If <i>dwContext</i> is not MSIINSTALLCONTEXT_MACHINE, null specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string "S-1-5-18" (system) cannot be used to enumerate products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per–user–non-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the component's state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szComponentCode">
      <para>Specifies the component being queried. Component code GUID of the component as found in the ComponentID column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</a> table.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the component for the specified product instance. This parameter can return one of the following or null values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component is installed to run from the source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryComponentState</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The calling process must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component ID does not identify a known component.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Failures that cannot be ascribed to any Windows error code.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer too small to get the user SID.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureState">
    <summary>
      <para>The
<b>MsiQueryFeatureState</b> function returns the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature of interest.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature of interest.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or feature ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateA">
    <summary>
      <para>The
<b>MsiQueryFeatureState</b> function returns the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature of interest.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature of interest.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or feature ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateW">
    <summary>
      <para>The
<b>MsiQueryFeatureState</b> function returns the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature of interest.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature of interest.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or feature ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateEx">
    <summary>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the installed state for a product feature. This function can be used to query any feature of an instance of a product installed under the machine account or any context under the current user account or the per-user-managed context under any user account other than the current user. A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-unmanaged instance of the product.</para>
            <para>
              <b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szFeature">
      <para>Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the feature for the specified product instance. This parameter can return one of the following or null.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>This feature is advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</seealso>
    <seealso cref="MsiQueryFeatureState" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateExA">
    <summary>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the installed state for a product feature. This function can be used to query any feature of an instance of a product installed under the machine account or any context under the current user account or the per-user-managed context under any user account other than the current user. A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-unmanaged instance of the product.</para>
            <para>
              <b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szFeature">
      <para>Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the feature for the specified product instance. This parameter can return one of the following or null.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>This feature is advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</seealso>
    <seealso cref="MsiQueryFeatureState" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateExW">
    <summary>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the installed state for a product feature. This function can be used to query any feature of an instance of a product installed under the machine account or any context under the current user account or the per-user-managed context under any user account other than the current user. A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-unmanaged instance of the product.</para>
            <para>
              <b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szFeature">
      <para>Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the feature for the specified product instance. This parameter can return one of the following or null.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>This feature is advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</seealso>
    <seealso cref="MsiQueryFeatureState" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateEx">
    <summary>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the installed state for a product feature. This function can be used to query any feature of an instance of a product installed under the machine account or any context under the current user account or the per-user-managed context under any user account other than the current user. A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-unmanaged instance of the product.</para>
            <para>
              <b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szFeature">
      <para>Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the feature for the specified product instance. This parameter can return one of the following or null.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>This feature is advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</seealso>
    <seealso cref="MsiQueryFeatureState" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateExA">
    <summary>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the installed state for a product feature. This function can be used to query any feature of an instance of a product installed under the machine account or any context under the current user account or the per-user-managed context under any user account other than the current user. A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-unmanaged instance of the product.</para>
            <para>
              <b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szFeature">
      <para>Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the feature for the specified product instance. This parameter can return one of the following or null.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>This feature is advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</seealso>
    <seealso cref="MsiQueryFeatureState" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateExW">
    <summary>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the installed state for a product feature. This function can be used to query any feature of an instance of a product installed under the machine account or any context under the current user account or the per-user-managed context under any user account other than the current user. A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
    </summary>
    <param name="szProductCode">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> GUID of the product that contains the feature of interest.</para>
    </param>
    <param name="szUserSid">
      <para>Specifies the security identifier (SID) of the account, under which, the instance of the product being queried exists. If <i>dwContext</i> is not <b>MSIINSTALLCONTEXT_MACHINE</b>,  a null value specifies the current user.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>NULL</b>
          </description>
          <description>
            <para>NULL denotes the currently logged on user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate features of products installed as per-machine. If <i>dwContext</i> is <b>MSIINSTALLCONTEXT_MACHINE</b>, <i>szUserSid</i> must be null.</para>
    </param>
    <param name="dwContext">
      <para>The installation context  of the product instance being queried.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-managed instance of the product.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-user-unmanaged instance of the product.</para>
            <para>
              <b>Note</b>  When the query is made on a product installed under the per-user-unmanaged context for a user account other than the current user, the function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>Retrieves the feature state for the per-machine instance of the product.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szFeature">
      <para>Specifies the feature being queried. Identifier of the feature as found in the <b>Feature</b> column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </param>
    <param name="pdwState">
      <para>Installation state of the feature for the specified product instance. This parameter can return one of the following or null.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>This feature is advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiQueryFeatureStateEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>A user must have administrative privileges to get information for a product installed for a user other than the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_FEATURE</b>
            </para>
          </description>
          <description>
            <para>The feature ID does not identify a known feature.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product code does not identify a known product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</a>.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureStateEx</b> function does not validate that the feature is actually accessible. The <b>MsiQueryFeatureStateEx</b> function does not validate the  feature ID. <b>ERROR_UNKNOWN_FEATURE</b> is returned for any unknown feature ID. When the query is made on a product installed under the per-user-unmanaged context  for a user account other than the current user, the function fails.  In this case the function returns <b>ERROR_UNKNOWN_FEATURE</b>, or if the product is advertised only  (not installed),   <b>ERROR_UNKNOWN_PRODUCT</b> is returned.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureStateEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/displayed-error-messages">Displayed Error Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature Table</seealso>
    <seealso cref="MsiQueryFeatureState" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureState">
    <summary>
      <para>The
<b>MsiQueryFeatureState</b> function returns the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature of interest.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature of interest.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or feature ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateA">
    <summary>
      <para>The
<b>MsiQueryFeatureState</b> function returns the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature of interest.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature of interest.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or feature ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryFeatureStateW">
    <summary>
      <para>The
<b>MsiQueryFeatureState</b> function returns the installed state for a product feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that contains the feature of interest.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature of interest.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is installed locally.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed to run from source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product code or feature ID is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiQueryFeatureState</b> function does not validate that the feature is actually accessible.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryProductState">
    <summary>
      <para>The
<b>MsiQueryProductState</b> function returns the installed state for a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code that identifies the product to be queried.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The product is advertised but not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_DEFAULT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product is neither advertised or installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryProductStateA">
    <summary>
      <para>The
<b>MsiQueryProductState</b> function returns the installed state for a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code that identifies the product to be queried.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The product is advertised but not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_DEFAULT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product is neither advertised or installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryProductStateW">
    <summary>
      <para>The
<b>MsiQueryProductState</b> function returns the installed state for a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code that identifies the product to be queried.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The product is advertised but not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_DEFAULT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product is neither advertised or installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryProductState">
    <summary>
      <para>The
<b>MsiQueryProductState</b> function returns the installed state for a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code that identifies the product to be queried.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The product is advertised but not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_DEFAULT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product is neither advertised or installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryProductStateA">
    <summary>
      <para>The
<b>MsiQueryProductState</b> function returns the installed state for a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code that identifies the product to be queried.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The product is advertised but not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_DEFAULT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product is neither advertised or installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiQueryProductStateW">
    <summary>
      <para>The
<b>MsiQueryProductState</b> function returns the installed state for a product.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code that identifies the product to be queried.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for a different user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The product is advertised but not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_DEFAULT</b>
            </para>
          </description>
          <description>
            <para>The product is installed for the current user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The product is neither advertised or installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiQueryProductState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">System Status Functions</seealso>
  </member>
  <member name="Windows.MsiRemovePatches">
    <summary>
      <para>The <b>MsiRemovePatches</b> function removes  one or more patches from a single product. To remove a patch from multiple products, <b>MsiRemovePatches</b> must be called for each product.</para>
    </summary>
    <param name="szPatchList">
      <para>A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="eUninstallType">
      <para>Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLTYPE_SINGLE_INSTANCE</b>
          </description>
          <description>
            <para>The patch is uninstalled for only the product specified by <i>szProduct</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szPropertyList">
      <para>A null-terminated string that specifies command-line property settings. For more information see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiRemovePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was included.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch was successfully removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <see cref="MsiRemovePatches" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch package is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package cannot be processed by this version of the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package is not removable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch has not been applied to this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_DISALLOWED</b>
            </para>
          </description>
          <description>
            <para>Patch removal was disallowed by policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See  <a href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso cref="MsiApplyPatch" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</seealso>
  </member>
  <member name="Windows.MsiRemovePatchesA">
    <summary>
      <para>The <b>MsiRemovePatches</b> function removes  one or more patches from a single product. To remove a patch from multiple products, <b>MsiRemovePatches</b> must be called for each product.</para>
    </summary>
    <param name="szPatchList">
      <para>A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="eUninstallType">
      <para>Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLTYPE_SINGLE_INSTANCE</b>
          </description>
          <description>
            <para>The patch is uninstalled for only the product specified by <i>szProduct</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szPropertyList">
      <para>A null-terminated string that specifies command-line property settings. For more information see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiRemovePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was included.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch was successfully removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <see cref="MsiRemovePatches" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch package is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package cannot be processed by this version of the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package is not removable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch has not been applied to this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_DISALLOWED</b>
            </para>
          </description>
          <description>
            <para>Patch removal was disallowed by policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See  <a href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso cref="MsiApplyPatch" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</seealso>
  </member>
  <member name="Windows.MsiRemovePatchesW">
    <summary>
      <para>The <b>MsiRemovePatches</b> function removes  one or more patches from a single product. To remove a patch from multiple products, <b>MsiRemovePatches</b> must be called for each product.</para>
    </summary>
    <param name="szPatchList">
      <para>A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="eUninstallType">
      <para>Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLTYPE_SINGLE_INSTANCE</b>
          </description>
          <description>
            <para>The patch is uninstalled for only the product specified by <i>szProduct</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szPropertyList">
      <para>A null-terminated string that specifies command-line property settings. For more information see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiRemovePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was included.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch was successfully removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <see cref="MsiRemovePatches" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch package is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package cannot be processed by this version of the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package is not removable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch has not been applied to this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_DISALLOWED</b>
            </para>
          </description>
          <description>
            <para>Patch removal was disallowed by policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See  <a href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso cref="MsiApplyPatch" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</seealso>
  </member>
  <member name="Windows.MsiRemovePatches">
    <summary>
      <para>The <b>MsiRemovePatches</b> function removes  one or more patches from a single product. To remove a patch from multiple products, <b>MsiRemovePatches</b> must be called for each product.</para>
    </summary>
    <param name="szPatchList">
      <para>A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="eUninstallType">
      <para>Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLTYPE_SINGLE_INSTANCE</b>
          </description>
          <description>
            <para>The patch is uninstalled for only the product specified by <i>szProduct</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szPropertyList">
      <para>A null-terminated string that specifies command-line property settings. For more information see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiRemovePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was included.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch was successfully removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <see cref="MsiRemovePatches" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch package is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package cannot be processed by this version of the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package is not removable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch has not been applied to this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_DISALLOWED</b>
            </para>
          </description>
          <description>
            <para>Patch removal was disallowed by policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See  <a href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso cref="MsiApplyPatch" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</seealso>
  </member>
  <member name="Windows.MsiRemovePatchesA">
    <summary>
      <para>The <b>MsiRemovePatches</b> function removes  one or more patches from a single product. To remove a patch from multiple products, <b>MsiRemovePatches</b> must be called for each product.</para>
    </summary>
    <param name="szPatchList">
      <para>A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="eUninstallType">
      <para>Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLTYPE_SINGLE_INSTANCE</b>
          </description>
          <description>
            <para>The patch is uninstalled for only the product specified by <i>szProduct</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szPropertyList">
      <para>A null-terminated string that specifies command-line property settings. For more information see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiRemovePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was included.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch was successfully removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <see cref="MsiRemovePatches" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch package is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package cannot be processed by this version of the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package is not removable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch has not been applied to this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_DISALLOWED</b>
            </para>
          </description>
          <description>
            <para>Patch removal was disallowed by policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See  <a href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso cref="MsiApplyPatch" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</seealso>
  </member>
  <member name="Windows.MsiRemovePatchesW">
    <summary>
      <para>The <b>MsiRemovePatches</b> function removes  one or more patches from a single product. To remove a patch from multiple products, <b>MsiRemovePatches</b> must be called for each product.</para>
    </summary>
    <param name="szPatchList">
      <para>A null-terminated string that represents the list of patches to remove.  Each patch can be specified by the GUID of the patch or the full path to the patch package. The patches in the list are delimited by semicolons.</para>
    </param>
    <param name="szProductCode">
      <para>A null-terminated string that is the <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> (GUID) of the product from which the patches are removed.  This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="eUninstallType">
      <para>Value that indicates the type of patch removal to perform. This parameter must be <b>INSTALLTYPE_SINGLE_INSTANCE</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLTYPE_SINGLE_INSTANCE</b>
          </description>
          <description>
            <para>The patch is uninstalled for only the product specified by <i>szProduct</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szPropertyList">
      <para>A null-terminated string that specifies command-line property settings. For more information see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</a>. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The <b>MsiRemovePatches</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was included.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The patch was successfully removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified by <i>szProductList</i> is not installed either per-machine or per-user for the caller of <see cref="MsiRemovePatches" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The patch package could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The patch package is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_PACKAGE_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package cannot be processed by this version of the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_UNSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The patch package is not removable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch has not been applied to this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PATCH_REMOVAL_DISALLOWED</b>
            </para>
          </description>
          <description>
            <para>Patch removal was disallowed by policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See  <a href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</a> for an example that demonstrates how an application can remove a patch from all products that are available to the user.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiRemovePatches as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/about-properties">About Properties</seealso>
    <seealso cref="MsiApplyPatch" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/multiple-package-installations">Multiple-Package Installations</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/removing-patches">Removing Patches</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/setting-public-property-values-on-the-command-line">Setting Public Property Values on the Command Line</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/uninstalling-patches">Uninstalling Patches</seealso>
  </member>
  <member name="Windows.MsiSetExternalUI">
    <summary>
      <para>The
<b>MsiSetExternalUI</b> function enables an external user-interface handler. This external UI handler is called before the normal internal user-interface handler. The external UI handler has the option to suppress the internal UI by returning a non-zero value to indicate that it has handled the messages. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-the-user-interface">About the User Interface</a>.</para>
    </summary>
    <param name="puiHandler">
      <para>Specifies a callback function that conforms to the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.</para>
    </param>
    <param name="dwMessageFilter">
      <para>Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see
the <see cref="MsiEnableLog" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination of installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>The error messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>The warning messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>The user requests are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>The status messages that are not displayed are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RMFILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>There was insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>The start of new installation actions are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>The data record with the installation action is logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>The parameters for user-interface initialization are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROGRESS</b>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see
the <see cref="MsiProcessMessage" /> function. This message is only sent to an external user interface and is not logged.
</description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INITIALIZE</b>
          </description>
          <description>
            <para>If this is not a quiet installation, then the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_TERMINATE</b>
          </description>
          <description>
            <para>If a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_SHOWDIALOG</b>
          </description>
          <description>
            <para>Sent prior to display of the <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLSTART</b>
            </b>
          </description>
          <description>
            <para>Installation of product begins.</para>
            <para>The message contains the product's ProductName and ProductCode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLEND</b>
            </b>
          </description>
          <description>
            <para>Installation of product ends.</para>
            <para>The message contains the product's ProductName, ProductCode, and return value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvContext">
      <para>Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.</para>
    </param>
    <returns>
      <para>The return value is the previously set external handler, or zero (0) if there was no previously set handler.</para>
    </returns>
    <remarks>
      <para>To restore the previous UI handler, second call is made to
<b>MsiSetExternalUI</b> using the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to
<b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.</para>
      <para>The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless
<see cref="MsiSetInternalUI" /> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If
<b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.</para>
      <para>
        <b>MsiSetExternalUI</b> should only be called from a
<a href="https://docs.microsoft.com//windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call
<b>MsiSetExternalUI</b> from a custom action.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
  </member>
  <member name="Windows.MsiSetExternalUIA">
    <summary>
      <para>The
<b>MsiSetExternalUI</b> function enables an external user-interface handler. This external UI handler is called before the normal internal user-interface handler. The external UI handler has the option to suppress the internal UI by returning a non-zero value to indicate that it has handled the messages. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-the-user-interface">About the User Interface</a>.</para>
    </summary>
    <param name="puiHandler">
      <para>Specifies a callback function that conforms to the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.</para>
    </param>
    <param name="dwMessageFilter">
      <para>Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see
the <see cref="MsiEnableLog" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination of installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>The error messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>The warning messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>The user requests are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>The status messages that are not displayed are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RMFILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>There was insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>The start of new installation actions are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>The data record with the installation action is logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>The parameters for user-interface initialization are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROGRESS</b>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see
the <see cref="MsiProcessMessage" /> function. This message is only sent to an external user interface and is not logged.
</description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INITIALIZE</b>
          </description>
          <description>
            <para>If this is not a quiet installation, then the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_TERMINATE</b>
          </description>
          <description>
            <para>If a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_SHOWDIALOG</b>
          </description>
          <description>
            <para>Sent prior to display of the <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLSTART</b>
            </b>
          </description>
          <description>
            <para>Installation of product begins.</para>
            <para>The message contains the product's ProductName and ProductCode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLEND</b>
            </b>
          </description>
          <description>
            <para>Installation of product ends.</para>
            <para>The message contains the product's ProductName, ProductCode, and return value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvContext">
      <para>Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.</para>
    </param>
    <returns>
      <para>The return value is the previously set external handler, or zero (0) if there was no previously set handler.</para>
    </returns>
    <remarks>
      <para>To restore the previous UI handler, second call is made to
<b>MsiSetExternalUI</b> using the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to
<b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.</para>
      <para>The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless
<see cref="MsiSetInternalUI" /> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If
<b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.</para>
      <para>
        <b>MsiSetExternalUI</b> should only be called from a
<a href="https://docs.microsoft.com//windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call
<b>MsiSetExternalUI</b> from a custom action.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
  </member>
  <member name="Windows.MsiSetExternalUIW">
    <summary>
      <para>The
<b>MsiSetExternalUI</b> function enables an external user-interface handler. This external UI handler is called before the normal internal user-interface handler. The external UI handler has the option to suppress the internal UI by returning a non-zero value to indicate that it has handled the messages. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-the-user-interface">About the User Interface</a>.</para>
    </summary>
    <param name="puiHandler">
      <para>Specifies a callback function that conforms to the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.</para>
    </param>
    <param name="dwMessageFilter">
      <para>Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see
the <see cref="MsiEnableLog" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination of installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>The error messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>The warning messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>The user requests are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>The status messages that are not displayed are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RMFILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>There was insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>The start of new installation actions are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>The data record with the installation action is logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>The parameters for user-interface initialization are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROGRESS</b>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see
the <see cref="MsiProcessMessage" /> function. This message is only sent to an external user interface and is not logged.
</description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INITIALIZE</b>
          </description>
          <description>
            <para>If this is not a quiet installation, then the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_TERMINATE</b>
          </description>
          <description>
            <para>If a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_SHOWDIALOG</b>
          </description>
          <description>
            <para>Sent prior to display of the <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLSTART</b>
            </b>
          </description>
          <description>
            <para>Installation of product begins.</para>
            <para>The message contains the product's ProductName and ProductCode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLEND</b>
            </b>
          </description>
          <description>
            <para>Installation of product ends.</para>
            <para>The message contains the product's ProductName, ProductCode, and return value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvContext">
      <para>Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.</para>
    </param>
    <returns>
      <para>The return value is the previously set external handler, or zero (0) if there was no previously set handler.</para>
    </returns>
    <remarks>
      <para>To restore the previous UI handler, second call is made to
<b>MsiSetExternalUI</b> using the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to
<b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.</para>
      <para>The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless
<see cref="MsiSetInternalUI" /> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If
<b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.</para>
      <para>
        <b>MsiSetExternalUI</b> should only be called from a
<a href="https://docs.microsoft.com//windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call
<b>MsiSetExternalUI</b> from a custom action.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
  </member>
  <member name="Windows.MsiSetExternalUIRecord">
    <summary>
      <para>The <b>MsiSetExternalUIRecord</b> function enables an external user-interface (UI) handler.</para>
    </summary>
    <param name="puiHandler">
      <para>Specifies a callback function that conforms to the <a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> specification.</para>
      <para>To disable the current external UI handler, call the function with this parameter set to a <b>NULL</b> value.</para>
    </param>
    <param name="dwMessageFilter">
      <para>Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message is not sent to the UI, instead the message is logged if logging is enabled. For more information, see
<see cref="MsiEnableLog" />.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.</para>
            <para>When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination of installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>The error messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>The warning messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>The user requests are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>The status messages that are not displayed are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RMFILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>The is insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>The start of new installation actions are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>The data record with the installation action is logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>The parameters for user-interface initialization are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROGRESS</b>
          </description>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/p-gly">Progress bar</a> information.</para>
            <para>This message includes information about units so far and total number of units. This message is only sent to an external user interface and is not logged. For more information, see
<see cref="MsiProcessMessage" />.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INITIALIZE</b>
          </description>
          <description>
            <para>If this is not a quiet installation, then the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> is initialized.</para>
            <para>If this is a full UI installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">Full UI</a> is not yet initialized.</para>
            <para>This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_TERMINATE</b>
          </description>
          <description>
            <para>If a full UI is being used, the full UI has ended.</para>
            <para>If this is not a quiet installation, the basic UI has not ended.</para>
            <para>This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_SHOWDIALOG</b>
          </description>
          <description>
            <para>Sent prior to display of the Full UI dialog.</para>
            <para>This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLSTART</b>
            </b>
          </description>
          <description>
            <para>Installation of product begins.</para>
            <para>The message contains the product's ProductName and ProductCode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLEND</b>
            </b>
          </description>
          <description>
            <para>Installation of product ends.</para>
            <para>The message contains the product's ProductName, ProductCode, and return value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvContext">
      <para>A pointer to an application context that is passed to the callback function.</para>
      <para>This parameter can be used for error checking.</para>
    </param>
    <param name="ppuiPrevHandler">
      <para>Returns the pointer to the previously set callback function that conforms to the <a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> specification, or <b>NULL</b> if no callback is previously set.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function completes successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_CALL_NOT_IMPLEMENTED</b>
            </para>
          </description>
          <description>
            <para>This value indicates that an attempt is made to call this function from a custom action.</para>
            <para>This function cannot be called from a custom action.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function cannot be called from <a href="https://docs.microsoft.com//windows/desktop/Msi/custom-actions">Custom Actions</a>.</para>
      <para>The external UI handler enabled by calling <b>MsiSetExternalUIRecord</b> receives messages in the format of a <a href="https://docs.microsoft.com//windows/desktop/Msi/record-object">Record Object</a>. The external UI handler enabled by calling <see cref="MsiSetExternalUI" /> receives messages in the format of a string. An external UI is always called before the Windows Installer internal UI. An enabled record-based external UI is called before any string-based external UI. If the record-based external UI handler returns 0 (zero), the message is sent to any enabled string-based external UI handler. If the external UI handler returns a non-zero value, the internal Windows Installer UI handler is suppressed and the messages are considered handled.</para>
      <para>This function stores the external user interfaces it has set.  To replace the current external UI handler with a previous handler, call the function and specify the <a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handler_record">INSTALLUI_HANDLER_RECORD</a> as the <i>puiHandler</i> parameter and 0 (zero) as the <i>dwMessageFilter</i> parameter.</para>
      <para>The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless
<see cref="MsiSetInternalUI" /> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If
<b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.
<see cref="MsiSetExternalUI" /> should only be called from an
<a href="https://docs.microsoft.com//windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call
<b>MsiSetExternalUI</b> from a custom action.</para>
      <para>To disable this external UI handler, call <b>MsiSetExternalUIRecord</b> with a <b>NULL</b> value for the <i>puiHandler</i> parameter.</para>
      <para>
        <b>Windows Installer 2.0 and Windows Installer 3.0:  </b>Not supported. The <b>MsiSetExternalUIRecord</b> function is available beginning with Windows Installer 3.1.</para>
      <para>For more information about using a record-based external handler, see <a href="https://docs.microsoft.com//windows/desktop/Msi/monitoring-an-installation-using-msisetexternaluirecord">Monitoring an Installation Using MsiSetExternalUIRecord</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-3-0">Not Supported in Windows Installer 3.0 and earlier</seealso>
  </member>
  <member name="Windows.MsiSetExternalUI">
    <summary>
      <para>The
<b>MsiSetExternalUI</b> function enables an external user-interface handler. This external UI handler is called before the normal internal user-interface handler. The external UI handler has the option to suppress the internal UI by returning a non-zero value to indicate that it has handled the messages. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-the-user-interface">About the User Interface</a>.</para>
    </summary>
    <param name="puiHandler">
      <para>Specifies a callback function that conforms to the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.</para>
    </param>
    <param name="dwMessageFilter">
      <para>Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see
the <see cref="MsiEnableLog" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination of installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>The error messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>The warning messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>The user requests are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>The status messages that are not displayed are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RMFILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>There was insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>The start of new installation actions are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>The data record with the installation action is logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>The parameters for user-interface initialization are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROGRESS</b>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see
the <see cref="MsiProcessMessage" /> function. This message is only sent to an external user interface and is not logged.
</description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INITIALIZE</b>
          </description>
          <description>
            <para>If this is not a quiet installation, then the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_TERMINATE</b>
          </description>
          <description>
            <para>If a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_SHOWDIALOG</b>
          </description>
          <description>
            <para>Sent prior to display of the <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLSTART</b>
            </b>
          </description>
          <description>
            <para>Installation of product begins.</para>
            <para>The message contains the product's ProductName and ProductCode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLEND</b>
            </b>
          </description>
          <description>
            <para>Installation of product ends.</para>
            <para>The message contains the product's ProductName, ProductCode, and return value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvContext">
      <para>Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.</para>
    </param>
    <returns>
      <para>The return value is the previously set external handler, or zero (0) if there was no previously set handler.</para>
    </returns>
    <remarks>
      <para>To restore the previous UI handler, second call is made to
<b>MsiSetExternalUI</b> using the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to
<b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.</para>
      <para>The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless
<see cref="MsiSetInternalUI" /> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If
<b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.</para>
      <para>
        <b>MsiSetExternalUI</b> should only be called from a
<a href="https://docs.microsoft.com//windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call
<b>MsiSetExternalUI</b> from a custom action.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
  </member>
  <member name="Windows.MsiSetExternalUIA">
    <summary>
      <para>The
<b>MsiSetExternalUI</b> function enables an external user-interface handler. This external UI handler is called before the normal internal user-interface handler. The external UI handler has the option to suppress the internal UI by returning a non-zero value to indicate that it has handled the messages. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-the-user-interface">About the User Interface</a>.</para>
    </summary>
    <param name="puiHandler">
      <para>Specifies a callback function that conforms to the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.</para>
    </param>
    <param name="dwMessageFilter">
      <para>Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see
the <see cref="MsiEnableLog" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination of installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>The error messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>The warning messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>The user requests are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>The status messages that are not displayed are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RMFILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>There was insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>The start of new installation actions are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>The data record with the installation action is logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>The parameters for user-interface initialization are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROGRESS</b>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see
the <see cref="MsiProcessMessage" /> function. This message is only sent to an external user interface and is not logged.
</description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INITIALIZE</b>
          </description>
          <description>
            <para>If this is not a quiet installation, then the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_TERMINATE</b>
          </description>
          <description>
            <para>If a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_SHOWDIALOG</b>
          </description>
          <description>
            <para>Sent prior to display of the <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLSTART</b>
            </b>
          </description>
          <description>
            <para>Installation of product begins.</para>
            <para>The message contains the product's ProductName and ProductCode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLEND</b>
            </b>
          </description>
          <description>
            <para>Installation of product ends.</para>
            <para>The message contains the product's ProductName, ProductCode, and return value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvContext">
      <para>Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.</para>
    </param>
    <returns>
      <para>The return value is the previously set external handler, or zero (0) if there was no previously set handler.</para>
    </returns>
    <remarks>
      <para>To restore the previous UI handler, second call is made to
<b>MsiSetExternalUI</b> using the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to
<b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.</para>
      <para>The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless
<see cref="MsiSetInternalUI" /> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If
<b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.</para>
      <para>
        <b>MsiSetExternalUI</b> should only be called from a
<a href="https://docs.microsoft.com//windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call
<b>MsiSetExternalUI</b> from a custom action.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
  </member>
  <member name="Windows.MsiSetExternalUIW">
    <summary>
      <para>The
<b>MsiSetExternalUI</b> function enables an external user-interface handler. This external UI handler is called before the normal internal user-interface handler. The external UI handler has the option to suppress the internal UI by returning a non-zero value to indicate that it has handled the messages. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/about-the-user-interface">About the User Interface</a>.</para>
    </summary>
    <param name="puiHandler">
      <para>Specifies a callback function that conforms to the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> specification.</para>
    </param>
    <param name="dwMessageFilter">
      <para>Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. For more information, see
the <see cref="MsiEnableLog" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLLOGMODE_FILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/filesinuse-dialog">FilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination of installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ERROR</b>
          </description>
          <description>
            <para>The error messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_WARNING</b>
          </description>
          <description>
            <para>The warning messages are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_USER</b>
          </description>
          <description>
            <para>The user requests are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INFO</b>
          </description>
          <description>
            <para>The status messages that are not displayed are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_RMFILESINUSE</b>
          </description>
          <description>
            <para>Files in use information.  When this message is received, a <a href="https://docs.microsoft.com//windows/desktop/Msi/msirmfilesinuse-dialog">MsiRMFilesInUse Dialog</a> should be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>There was insufficient disk space.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONSTART</b>
          </description>
          <description>
            <para>The start of new installation actions are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_ACTIONDATA</b>
          </description>
          <description>
            <para>The data record with the installation action is logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_COMMONDATA</b>
          </description>
          <description>
            <para>The parameters for user-interface initialization are logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_PROGRESS</b>
          </description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/p-gly">Progress bar</a> information. This message includes information on units so far and total number of units. For an explanation of the message format, see
the <see cref="MsiProcessMessage" /> function. This message is only sent to an external user interface and is not logged.
</description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_INITIALIZE</b>
          </description>
          <description>
            <para>If this is not a quiet installation, then the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has been initialized. If this is a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> installation, the <i>full UI</i> is not yet initialized. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_TERMINATE</b>
          </description>
          <description>
            <para>If a <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> is being used, the <i>full UI</i> has ended. If this is not a quiet installation, the <a href="https://docs.microsoft.com//windows/desktop/Msi/b-gly">basic UI</a> has not yet ended. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLLOGMODE_SHOWDIALOG</b>
          </description>
          <description>
            <para>Sent prior to display of the <a href="https://docs.microsoft.com//windows/desktop/Msi/f-gly">full UI</a> dialog. This message is only sent to an external user interface and is not logged.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLSTART</b>
            </b>
          </description>
          <description>
            <para>Installation of product begins.</para>
            <para>The message contains the product's ProductName and ProductCode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>INSTALLLOGMODE_INSTALLEND</b>
            </b>
          </description>
          <description>
            <para>Installation of product ends.</para>
            <para>The message contains the product's ProductName, ProductCode, and return value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvContext">
      <para>Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.</para>
    </param>
    <returns>
      <para>The return value is the previously set external handler, or zero (0) if there was no previously set handler.</para>
    </returns>
    <remarks>
      <para>To restore the previous UI handler, second call is made to
<b>MsiSetExternalUI</b> using the
<a href="https://docs.microsoft.com//windows/desktop/api/msi/nc-msi-installui_handlera">INSTALLUI_HANDLER</a> returned by the first call to
<b>MsiSetExternalUI</b> and specifying zero (0) for dwMessageFilter.</para>
      <para>The external user interface handler pointed to by the <i>puiHandler</i> parameter does not have full control over the external user interface unless
<see cref="MsiSetInternalUI" /> is called with the <i>dwUILevel</i> parameter set to INSTALLUILEVEL_NONE. If
<b>MsiSetInternalUI</b> is not called, the internal user interface level defaults to INSTALLUILEVEL_BASIC. As a result, any message not handled by the external user interface handler is handled by Windows Installer. The initial "Preparing to install. . ." dialog always appears even if the external user interface handler handles all messages.</para>
      <para>
        <b>MsiSetExternalUI</b> should only be called from a
<a href="https://docs.microsoft.com//windows/desktop/Msi/bootstrapping">Bootstrapping</a> application. You cannot call
<b>MsiSetExternalUI</b> from a custom action.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSetExternalUI as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Interface and Logging Functions</seealso>
  </member>
  <member name="Windows.MsiSourceListAddMediaDisk">
    <summary>
      <para>The <b>MsiSourceListAddMediaDisk</b> function adds or updates a disk of the media source of a registered product or patch. If the disk specified already exists, it is updated with the new values. If the disk specified does not exist, a new disk entry is created with the new values.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being added or updated.</para>
    </param>
    <param name="szVolumeLabel">
      <para>The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.</para>
    </param>
    <param name="szDiskPrompt">
      <para>On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.
To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListAddMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully reordered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListAddMediaDiskA">
    <summary>
      <para>The <b>MsiSourceListAddMediaDisk</b> function adds or updates a disk of the media source of a registered product or patch. If the disk specified already exists, it is updated with the new values. If the disk specified does not exist, a new disk entry is created with the new values.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being added or updated.</para>
    </param>
    <param name="szVolumeLabel">
      <para>The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.</para>
    </param>
    <param name="szDiskPrompt">
      <para>On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.
To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListAddMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully reordered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListAddMediaDiskW">
    <summary>
      <para>The <b>MsiSourceListAddMediaDisk</b> function adds or updates a disk of the media source of a registered product or patch. If the disk specified already exists, it is updated with the new values. If the disk specified does not exist, a new disk entry is created with the new values.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being added or updated.</para>
    </param>
    <param name="szVolumeLabel">
      <para>The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.</para>
    </param>
    <param name="szDiskPrompt">
      <para>On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.
To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListAddMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully reordered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListAddMediaDisk">
    <summary>
      <para>The <b>MsiSourceListAddMediaDisk</b> function adds or updates a disk of the media source of a registered product or patch. If the disk specified already exists, it is updated with the new values. If the disk specified does not exist, a new disk entry is created with the new values.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being added or updated.</para>
    </param>
    <param name="szVolumeLabel">
      <para>The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.</para>
    </param>
    <param name="szDiskPrompt">
      <para>On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.
To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListAddMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully reordered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListAddMediaDiskA">
    <summary>
      <para>The <b>MsiSourceListAddMediaDisk</b> function adds or updates a disk of the media source of a registered product or patch. If the disk specified already exists, it is updated with the new values. If the disk specified does not exist, a new disk entry is created with the new values.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being added or updated.</para>
    </param>
    <param name="szVolumeLabel">
      <para>The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.</para>
    </param>
    <param name="szDiskPrompt">
      <para>On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.
To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListAddMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully reordered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListAddMediaDiskW">
    <summary>
      <para>The <b>MsiSourceListAddMediaDisk</b> function adds or updates a disk of the media source of a registered product or patch. If the disk specified already exists, it is updated with the new values. If the disk specified does not exist, a new disk entry is created with the new values.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM .</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being added or updated.</para>
    </param>
    <param name="szVolumeLabel">
      <para>The <i>szVolumeLabel</i> provides the label of the disk being added or updated. An update  overwrites the existing volume label in the registry. To change the disk prompt only, get the existing volume label from the registry and provide it in this call along with the new disk prompt.  Passing a <b>NULL</b> or empty string for <i>szVolumeLabel</i> registers an empty string (0 bytes in length) as the volume label.</para>
    </param>
    <param name="szDiskPrompt">
      <para>On entry to <b>MsiSourceListAddMediaDisk</b>, <i>szDiskPrompt</i> provides the disk prompt of the disk being added or updated. An update overwrites the registered disk prompt.
To change the volume label  only, get the existing disk prompt that is registered and provide it when calling <b>MsiSourceListAddMediaDisk</b> along with the new volume label. Passing <b>NULL</b> or an empty string registers an empty string (0 bytes in length) as the disk prompt.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListAddMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully reordered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownmedia">AllowLockDownMedia</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListAddSource">
    <summary>
      <para>The
<b>MsiSourceListAddSource</b> function adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.</para>
      <para>The number of sources in the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</a> property is unlimited.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <param name="szSource">
      <para>Pointer to the string specifying the source.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add a source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The source was added.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.</para>
      <para>It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListAddSourceA">
    <summary>
      <para>The
<b>MsiSourceListAddSource</b> function adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.</para>
      <para>The number of sources in the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</a> property is unlimited.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <param name="szSource">
      <para>Pointer to the string specifying the source.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add a source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The source was added.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.</para>
      <para>It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListAddSourceW">
    <summary>
      <para>The
<b>MsiSourceListAddSource</b> function adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.</para>
      <para>The number of sources in the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</a> property is unlimited.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <param name="szSource">
      <para>Pointer to the string specifying the source.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add a source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The source was added.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.</para>
      <para>It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListAddSource">
    <summary>
      <para>The
<b>MsiSourceListAddSource</b> function adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.</para>
      <para>The number of sources in the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</a> property is unlimited.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <param name="szSource">
      <para>Pointer to the string specifying the source.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add a source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The source was added.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.</para>
      <para>It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListAddSourceA">
    <summary>
      <para>The
<b>MsiSourceListAddSource</b> function adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.</para>
      <para>The number of sources in the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</a> property is unlimited.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <param name="szSource">
      <para>Pointer to the string specifying the source.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add a source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The source was added.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.</para>
      <para>It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListAddSourceW">
    <summary>
      <para>The
<b>MsiSourceListAddSource</b> function adds to the list of valid network sources that contain the specified type of sources for a product or patch in a specified user context.</para>
      <para>The number of sources in the <a href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</a> property is unlimited.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. On Windows 2000 or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <param name="szSource">
      <para>Pointer to the string specifying the source.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add a source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The source was added.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>Note that this function merely adds the new source  to the list of valid sources. If another source was used to install the product, the new source is not used until the current source is unavailable.</para>
      <para>It is the responsibility of the caller to ensure that the provided source is a valid source image for the product.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed only in the per-user state, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListAddSource as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sourcelist">SOURCELIST</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAll">
    <summary>
      <para>The
<b>MsiSourceListClearAll</b> function removes all network sources from the source list of a patch or product in a specified context. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearAll</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to clear the source list for this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <see cref="MsiSourceListForceResolution" /> is also called.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiSourceListForceResolution" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllA">
    <summary>
      <para>The
<b>MsiSourceListClearAll</b> function removes all network sources from the source list of a patch or product in a specified context. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearAll</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to clear the source list for this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <see cref="MsiSourceListForceResolution" /> is also called.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiSourceListForceResolution" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllW">
    <summary>
      <para>The
<b>MsiSourceListClearAll</b> function removes all network sources from the source list of a patch or product in a specified context. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearAll</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to clear the source list for this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <see cref="MsiSourceListForceResolution" /> is also called.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiSourceListForceResolution" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllEx">
    <summary>
      <para>The
<b>MsiSourceListClearAllEx</b> function removes all the existing sources of a given source type for the specified product or patch instance. The patch registration is also removed if the sole source of the patch gets removed and if the patch is not installed as a new patch by any client in the same context. Specifying that <b>MsiSourceListClearAllEx</b> remove the current source for this product or patch forces the installer to search the source list for a source the next time a source is required.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b> MSISOURCETYPE_MEDIA</b>
          </description>
          <description>
            <para>The source is media.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Cannot access the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>All sources of the specified type were removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllExA">
    <summary>
      <para>The
<b>MsiSourceListClearAllEx</b> function removes all the existing sources of a given source type for the specified product or patch instance. The patch registration is also removed if the sole source of the patch gets removed and if the patch is not installed as a new patch by any client in the same context. Specifying that <b>MsiSourceListClearAllEx</b> remove the current source for this product or patch forces the installer to search the source list for a source the next time a source is required.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b> MSISOURCETYPE_MEDIA</b>
          </description>
          <description>
            <para>The source is media.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Cannot access the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>All sources of the specified type were removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllExW">
    <summary>
      <para>The
<b>MsiSourceListClearAllEx</b> function removes all the existing sources of a given source type for the specified product or patch instance. The patch registration is also removed if the sole source of the patch gets removed and if the patch is not installed as a new patch by any client in the same context. Specifying that <b>MsiSourceListClearAllEx</b> remove the current source for this product or patch forces the installer to search the source list for a source the next time a source is required.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b> MSISOURCETYPE_MEDIA</b>
          </description>
          <description>
            <para>The source is media.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Cannot access the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>All sources of the specified type were removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllEx">
    <summary>
      <para>The
<b>MsiSourceListClearAllEx</b> function removes all the existing sources of a given source type for the specified product or patch instance. The patch registration is also removed if the sole source of the patch gets removed and if the patch is not installed as a new patch by any client in the same context. Specifying that <b>MsiSourceListClearAllEx</b> remove the current source for this product or patch forces the installer to search the source list for a source the next time a source is required.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b> MSISOURCETYPE_MEDIA</b>
          </description>
          <description>
            <para>The source is media.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Cannot access the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>All sources of the specified type were removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllExA">
    <summary>
      <para>The
<b>MsiSourceListClearAllEx</b> function removes all the existing sources of a given source type for the specified product or patch instance. The patch registration is also removed if the sole source of the patch gets removed and if the patch is not installed as a new patch by any client in the same context. Specifying that <b>MsiSourceListClearAllEx</b> remove the current source for this product or patch forces the installer to search the source list for a source the next time a source is required.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b> MSISOURCETYPE_MEDIA</b>
          </description>
          <description>
            <para>The source is media.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Cannot access the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>All sources of the specified type were removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllExW">
    <summary>
      <para>The
<b>MsiSourceListClearAllEx</b> function removes all the existing sources of a given source type for the specified product or patch instance. The patch registration is also removed if the sole source of the patch gets removed and if the patch is not installed as a new patch by any client in the same context. Specifying that <b>MsiSourceListClearAllEx</b> remove the current source for this product or patch forces the installer to search the source list for a source the next time a source is required.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b> MSISOURCETYPE_MEDIA</b>
          </description>
          <description>
            <para>The source is media.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to add or move a source. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Cannot access the Windows Installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>All sources of the specified type were removed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The specified patch is unknown.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAllEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAll">
    <summary>
      <para>The
<b>MsiSourceListClearAll</b> function removes all network sources from the source list of a patch or product in a specified context. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearAll</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to clear the source list for this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <see cref="MsiSourceListForceResolution" /> is also called.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiSourceListForceResolution" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllA">
    <summary>
      <para>The
<b>MsiSourceListClearAll</b> function removes all network sources from the source list of a patch or product in a specified context. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearAll</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to clear the source list for this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <see cref="MsiSourceListForceResolution" /> is also called.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiSourceListForceResolution" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListClearAllW">
    <summary>
      <para>The
<b>MsiSourceListClearAll</b> function removes all network sources from the source list of a patch or product in a specified context. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</a>.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearAll</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to clear the source list for this product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>Could not resolve the user name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function did not succeed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access installer service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed)per-user installations.  Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <para>If a network source is the current source for the product, this function forces the installer to search the source list for a valid source the next time a source is needed. If the current source is media or a URL source, it is still valid after this call and the source list is not searched unless <see cref="MsiSourceListForceResolution" /> is also called.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function cannot modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearAll as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiSourceListForceResolution" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListClearMediaDisk">
    <summary>
      <para>The <b>MsiSourceListClearMediaDisk</b> function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being removed.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully removed or not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearMediaDiskA">
    <summary>
      <para>The <b>MsiSourceListClearMediaDisk</b> function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being removed.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully removed or not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearMediaDiskW">
    <summary>
      <para>The <b>MsiSourceListClearMediaDisk</b> function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being removed.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully removed or not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearMediaDisk">
    <summary>
      <para>The <b>MsiSourceListClearMediaDisk</b> function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being removed.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully removed or not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearMediaDiskA">
    <summary>
      <para>The <b>MsiSourceListClearMediaDisk</b> function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being removed.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully removed or not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListClearMediaDiskW">
    <summary>
      <para>The <b>MsiSourceListClearMediaDisk</b> function provides the ability to remove an existing registered disk under the media source for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user.  When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a particular user in the system.  An example of user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER. When <i>dwContext</i> is set to MSIINSTALLCONTEXT_MACHINE only, <i>szUserSid</i> must be <b>NULL</b>.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwDiskId">
      <para>This parameter provides the ID of the disk being removed.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListClearMediaDisk</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The Windows Installer service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value was successfully removed or not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListClearMediaDisk as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumMediaDisks">
    <summary>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function enumerates the list of disks registered for the media source for a patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.</para>
    </param>
    <param name="pdwDiskId">
      <para>On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.</para>
    </param>
    <param name="szVolumeLabel">
      <para>An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchVolumeLabel">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="szDiskPrompt">
      <para>An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.</para>
      <para>If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchDiskPrompt">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more disks registered for this product or patch.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer that is provided is too small to contain the requested information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumMediaDisksA">
    <summary>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function enumerates the list of disks registered for the media source for a patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.</para>
    </param>
    <param name="pdwDiskId">
      <para>On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.</para>
    </param>
    <param name="szVolumeLabel">
      <para>An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchVolumeLabel">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="szDiskPrompt">
      <para>An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.</para>
      <para>If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchDiskPrompt">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more disks registered for this product or patch.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer that is provided is too small to contain the requested information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumMediaDisksW">
    <summary>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function enumerates the list of disks registered for the media source for a patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.</para>
    </param>
    <param name="pdwDiskId">
      <para>On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.</para>
    </param>
    <param name="szVolumeLabel">
      <para>An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchVolumeLabel">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="szDiskPrompt">
      <para>An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.</para>
      <para>If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchDiskPrompt">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more disks registered for this product or patch.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer that is provided is too small to contain the requested information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumMediaDisks">
    <summary>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function enumerates the list of disks registered for the media source for a patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.</para>
    </param>
    <param name="pdwDiskId">
      <para>On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.</para>
    </param>
    <param name="szVolumeLabel">
      <para>An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchVolumeLabel">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="szDiskPrompt">
      <para>An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.</para>
      <para>If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchDiskPrompt">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more disks registered for this product or patch.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer that is provided is too small to contain the requested information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumMediaDisksA">
    <summary>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function enumerates the list of disks registered for the media source for a patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.</para>
    </param>
    <param name="pdwDiskId">
      <para>On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.</para>
    </param>
    <param name="szVolumeLabel">
      <para>An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchVolumeLabel">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="szDiskPrompt">
      <para>An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.</para>
      <para>If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchDiskPrompt">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more disks registered for this product or patch.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer that is provided is too small to contain the requested information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumMediaDisksW">
    <summary>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function enumerates the list of disks registered for the media source for a patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value that  specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumMediaDisks</b>  function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.</para>
    </param>
    <param name="pdwDiskId">
      <para>On entry to <b>MsiSourceListEnumMediaDisks</b> this parameter provides a pointer to a <b>DWORD</b> to receive the ID of the disk that is being enumerated.   This parameter is optional.</para>
    </param>
    <param name="szVolumeLabel">
      <para>An output buffer that receives  the volume label of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchVolumeLabel</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szVolumeLabel</i> and <i>pcchVolumeLabel</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchVolumeLabel">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szVolumeLabel</i> buffer. When the function returns, this parameter is the number of <b>TCHAR</b> in the received  value,  not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szVolumeLabel</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="szDiskPrompt">
      <para>An output buffer that receives  the disk prompt of the disk that is being enumerated. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szDiskPrompt</i> is set to <b>NULL</b> and <i>pcchDiskPrompt</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchDiskPrompt</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szDiskPrompt</i> buffer large enough to contain *<i>pcchDiskPrompt</i> + 1 characters.</para>
      <para>If <i>szDiskPrompt</i> and <i>pcchDiskPrompt</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchDiskPrompt">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szDiskPrompt</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szDiskPrompt</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumMediaDisks</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified media source or the specified product or patch. This does not indicate whether a media source, product, or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more disks registered for this product or patch.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The value is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The buffer that is provided is too small to contain the requested information.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumMediaDisks</b> to enumerate all the sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumMediaDisks as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumSources">
    <summary>
      <para>The <b>MsiSourceListEnumSources</b> function enumerates the sources in the source list of a specified patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>The context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szSource">
      <para>A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters.</para>
      <para>If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSource">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumSources</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more sources in the specified list to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A source is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumSourcesA">
    <summary>
      <para>The <b>MsiSourceListEnumSources</b> function enumerates the sources in the source list of a specified patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>The context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szSource">
      <para>A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters.</para>
      <para>If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSource">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumSources</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more sources in the specified list to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A source is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumSourcesW">
    <summary>
      <para>The <b>MsiSourceListEnumSources</b> function enumerates the sources in the source list of a specified patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>The context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szSource">
      <para>A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters.</para>
      <para>If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSource">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumSources</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more sources in the specified list to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A source is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumSources">
    <summary>
      <para>The <b>MsiSourceListEnumSources</b> function enumerates the sources in the source list of a specified patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>The context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szSource">
      <para>A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters.</para>
      <para>If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSource">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumSources</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more sources in the specified list to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A source is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumSourcesA">
    <summary>
      <para>The <b>MsiSourceListEnumSources</b> function enumerates the sources in the source list of a specified patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>The context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szSource">
      <para>A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters.</para>
      <para>If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSource">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumSources</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more sources in the specified list to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A source is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListEnumSourcesW">
    <summary>
      <para>The <b>MsiSourceListEnumSources</b> function enumerates the sources in the source list of a specified patch or product.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>A string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <para>A <b>NULL</b> indicates the current user who is logged on. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
          </description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>An enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
        <item>
          <description>
            <b>s-1-1-0</b>
          </description>
          <description>
            <para>The special SID string s-1-1-0 (everyone) specifies enumeration across all users in the system.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwContext">
      <para>The context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value and the type of sources to clear. This parameter must be a combination of one of the following MSISOURCETYPE_* constants and one of the following MSICODE_* constants.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSISOURCETYPE_NETWORK</b>
          </description>
          <description>
            <para>The  source  is  a network type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSISOURCETYPE_URL</b>
          </description>
          <description>
            <para>The source is a URL type.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <param name="dwIndex">
      <para>The index of the source to retrieve. This parameter must be 0 (zero) for the first call to the <b>MsiSourceListEnumSources</b> function, and then incremented for subsequent calls until the function returns ERROR_NO_MORE_ITEMS.  The index should be incremented only if the previous call returned ERROR_SUCCESS.</para>
    </param>
    <param name="szSource">
      <para>A pointer to a  buffer that receives the path to the source that is  being enumerated. This buffer should be large enough to contain the received value. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If <i>szSource</i> is set to <b>NULL</b> and <i>pcchSource</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchSource</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szSource</i> buffer large enough to contain *<i>pcchSource</i> + 1 characters.</para>
      <para>If <i>szSource</i> and <i>pcchSource</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchSource">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szSource</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szSource</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListEnumSources</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more sources in the specified list to enumerate.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A source is enumerated successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product specified is not installed on the computer in the specified contexts.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When making multiple calls to <b>MsiSourceListEnumSources</b> to enumerate all sources for a single product instance, each call must be made from the same thread.</para>
      <para>An administrator can enumerate per-user unmanaged and managed installations for themselves,
per-machine installations, and per-user managed installations for any user. An administrator cannot
enumerate per-user unmanaged installations for other users. Non-administrators can only enumerate
their own per-user unmanaged and managed installations and per-machine installations.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListEnumSources as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolution">
    <summary>
      <para>The
<b>MsiSourceListForceResolution</b> function forces the installer to search the source list for a valid product source the next time a source is required. For example, when the installer performs an installation or reinstallation, or when it requires the path for a component that is set to run from source.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolution</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have sufficient access to force resolution for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USER_NAME</b>
            </para>
          </description>
          <description>
            <para>The specified user is not a valid user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function could not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiGetComponentPath" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionA">
    <summary>
      <para>The
<b>MsiSourceListForceResolution</b> function forces the installer to search the source list for a valid product source the next time a source is required. For example, when the installer performs an installation or reinstallation, or when it requires the path for a component that is set to run from source.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolution</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have sufficient access to force resolution for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USER_NAME</b>
            </para>
          </description>
          <description>
            <para>The specified user is not a valid user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function could not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiGetComponentPath" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionW">
    <summary>
      <para>The
<b>MsiSourceListForceResolution</b> function forces the installer to search the source list for a valid product source the next time a source is required. For example, when the installer performs an installation or reinstallation, or when it requires the path for a component that is set to run from source.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolution</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have sufficient access to force resolution for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USER_NAME</b>
            </para>
          </description>
          <description>
            <para>The specified user is not a valid user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function could not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiGetComponentPath" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionEx">
    <summary>
      <para>The <b>MsiSourceListForceResolutionEx</b> function removes the registration of the property called "LastUsedSource".
This function does not affect the registered source list. Whenever the installer requires the source to reinstall  a product or patch, it first tries the source registered as "LastUsedSource". If that fails, or if that registration is missing, the installer searches the other registered sources until it finds a valid source or until the list of sources is exhausted.
Clearing the "LastUsedSource" registration forces the installer to do a source resolution against the registered sources the next time it requires the source.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value .</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolutionEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access the Windows Installer service</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The "LastUsedSource" registration was cleared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product or patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionExA">
    <summary>
      <para>The <b>MsiSourceListForceResolutionEx</b> function removes the registration of the property called "LastUsedSource".
This function does not affect the registered source list. Whenever the installer requires the source to reinstall  a product or patch, it first tries the source registered as "LastUsedSource". If that fails, or if that registration is missing, the installer searches the other registered sources until it finds a valid source or until the list of sources is exhausted.
Clearing the "LastUsedSource" registration forces the installer to do a source resolution against the registered sources the next time it requires the source.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value .</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolutionEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access the Windows Installer service</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The "LastUsedSource" registration was cleared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product or patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionExW">
    <summary>
      <para>The <b>MsiSourceListForceResolutionEx</b> function removes the registration of the property called "LastUsedSource".
This function does not affect the registered source list. Whenever the installer requires the source to reinstall  a product or patch, it first tries the source registered as "LastUsedSource". If that fails, or if that registration is missing, the installer searches the other registered sources until it finds a valid source or until the list of sources is exhausted.
Clearing the "LastUsedSource" registration forces the installer to do a source resolution against the registered sources the next time it requires the source.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value .</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolutionEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access the Windows Installer service</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The "LastUsedSource" registration was cleared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product or patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionEx">
    <summary>
      <para>The <b>MsiSourceListForceResolutionEx</b> function removes the registration of the property called "LastUsedSource".
This function does not affect the registered source list. Whenever the installer requires the source to reinstall  a product or patch, it first tries the source registered as "LastUsedSource". If that fails, or if that registration is missing, the installer searches the other registered sources until it finds a valid source or until the list of sources is exhausted.
Clearing the "LastUsedSource" registration forces the installer to do a source resolution against the registered sources the next time it requires the source.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value .</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolutionEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access the Windows Installer service</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The "LastUsedSource" registration was cleared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product or patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionExA">
    <summary>
      <para>The <b>MsiSourceListForceResolutionEx</b> function removes the registration of the property called "LastUsedSource".
This function does not affect the registered source list. Whenever the installer requires the source to reinstall  a product or patch, it first tries the source registered as "LastUsedSource". If that fails, or if that registration is missing, the installer searches the other registered sources until it finds a valid source or until the list of sources is exhausted.
Clearing the "LastUsedSource" registration forces the installer to do a source resolution against the registered sources the next time it requires the source.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value .</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolutionEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access the Windows Installer service</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The "LastUsedSource" registration was cleared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product or patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionExW">
    <summary>
      <para>The <b>MsiSourceListForceResolutionEx</b> function removes the registration of the property called "LastUsedSource".
This function does not affect the registered source list. Whenever the installer requires the source to reinstall  a product or patch, it first tries the source registered as "LastUsedSource". If that fails, or if that registration is missing, the installer searches the other registered sources until it finds a valid source or until the list of sources is exhausted.
Clearing the "LastUsedSource" registration forces the installer to do a source resolution against the registered sources the next time it requires the source.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string SID that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE. Using the machine SID ("S-1-5-18") returns ERROR_INVALID PARAMETER. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value determines the interpretation of the <i>szProductCodeOrPatchCode</i> value .</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code.
</description>
        </item>
      </list>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolutionEx</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to modify the specified source list. Does not indicate whether the product or patch was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Could not access the Windows Installer service</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The "LastUsedSource" registration was cleared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product or patch was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy, for more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolutionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolution">
    <summary>
      <para>The
<b>MsiSourceListForceResolution</b> function forces the installer to search the source list for a valid product source the next time a source is required. For example, when the installer performs an installation or reinstallation, or when it requires the path for a component that is set to run from source.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolution</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have sufficient access to force resolution for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USER_NAME</b>
            </para>
          </description>
          <description>
            <para>The specified user is not a valid user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function could not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiGetComponentPath" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionA">
    <summary>
      <para>The
<b>MsiSourceListForceResolution</b> function forces the installer to search the source list for a valid product source the next time a source is required. For example, when the installer performs an installation or reinstallation, or when it requires the path for a component that is set to run from source.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolution</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have sufficient access to force resolution for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USER_NAME</b>
            </para>
          </description>
          <description>
            <para>The specified user is not a valid user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function could not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiGetComponentPath" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListForceResolutionW">
    <summary>
      <para>The
<b>MsiSourceListForceResolution</b> function forces the installer to search the source list for a valid product source the next time a source is required. For example, when the installer performs an installation or reinstallation, or when it requires the path for a component that is set to run from source.</para>
    </summary>
    <param name="szProduct">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> of the product to modify.</para>
    </param>
    <param name="szUserName">
      <para>The user name for a per-user installation. The user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</para>
      <para>An empty string or <b>NULL</b> for a per-machine installation.</para>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListForceResolution</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have sufficient access to force resolution for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USER_NAME</b>
            </para>
          </description>
          <description>
            <para>The specified user is not a valid user.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function could not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_SERVICE_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The installation service could not be accessed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The specified product is unknown.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An administrator can modify per-machine installations, their own per-user non-managed installations, and the per-user managed installations for any user. A non-administrator can only modify per-machine installations and their own (managed or non-managed) per-user installations.</para>
      <para>If the user name is an empty string or <b>NULL</b>, the function operates on the per-machine installation of the product. In this case, if the product is installed as per-user only, the function returns ERROR_UNKNOWN_PRODUCT.</para>
      <para>If the user name is not an empty string or <b>NULL</b>, it specifies the name of the user whose product installation is modified. If the user name is the current user name, the function first attempts to modify a non-managed installation of the product. If no non-managed installation of the product can be found, the function then tries to modify a managed per-user installation of the product. If no managed or unmanaged per-user installations of the product can be found, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <para>This function can  not modify a non-managed installation for any user besides the current user. If the user name is not an empty string or <b>NULL</b>, but is not the current user, the function only checks for a managed per-user installation of the product for the specified user. If the product is not installed as managed per-user for the specified user, the function returns ERROR_UNKNOWN_PRODUCT, even if the product is installed per-machine.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListForceResolution as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installation-context">Installation Context</seealso>
    <seealso cref="LookupAccountName" />
    <seealso cref="MsiGetComponentPath" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/source-resiliency">Source Resiliency</seealso>
  </member>
  <member name="Windows.MsiSourceListGetInfo">
    <summary>
      <para>The <b>MsiSourceListGetInfo</b> function retrieves information about the source list for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MEDIAPACKAGEPATH</b>
                </description>
              </item>
              <item>
                <description>"MediaPackagePath"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The path relative to the root of the installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISKPROMPT</b>
                </description>
              </item>
              <item>
                <description>"DiskPrompt"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The prompt template that is used when prompting the user for installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDSOURCE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedSource"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The most recently used source location for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDTYPE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedType"</description>
              </item>
            </list>
          </description>
          <description>
            <para>An "n" if the last-used source is a network location. A "u" if the last used source is a URL location. An "m" if the last used source is media. An empty string ("") if there is no last used source.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PACKAGENAME</b>
                </description>
              </item>
              <item>
                <description>"PackageName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The name of the Windows Installer package or patch package on the source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListGetInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The property is retrieved successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The source property is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiSourceListSetInfo" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListGetInfoA">
    <summary>
      <para>The <b>MsiSourceListGetInfo</b> function retrieves information about the source list for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MEDIAPACKAGEPATH</b>
                </description>
              </item>
              <item>
                <description>"MediaPackagePath"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The path relative to the root of the installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISKPROMPT</b>
                </description>
              </item>
              <item>
                <description>"DiskPrompt"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The prompt template that is used when prompting the user for installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDSOURCE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedSource"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The most recently used source location for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDTYPE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedType"</description>
              </item>
            </list>
          </description>
          <description>
            <para>An "n" if the last-used source is a network location. A "u" if the last used source is a URL location. An "m" if the last used source is media. An empty string ("") if there is no last used source.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PACKAGENAME</b>
                </description>
              </item>
              <item>
                <description>"PackageName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The name of the Windows Installer package or patch package on the source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListGetInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The property is retrieved successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The source property is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiSourceListSetInfo" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListGetInfoW">
    <summary>
      <para>The <b>MsiSourceListGetInfo</b> function retrieves information about the source list for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MEDIAPACKAGEPATH</b>
                </description>
              </item>
              <item>
                <description>"MediaPackagePath"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The path relative to the root of the installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISKPROMPT</b>
                </description>
              </item>
              <item>
                <description>"DiskPrompt"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The prompt template that is used when prompting the user for installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDSOURCE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedSource"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The most recently used source location for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDTYPE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedType"</description>
              </item>
            </list>
          </description>
          <description>
            <para>An "n" if the last-used source is a network location. A "u" if the last used source is a URL location. An "m" if the last used source is media. An empty string ("") if there is no last used source.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PACKAGENAME</b>
                </description>
              </item>
              <item>
                <description>"PackageName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The name of the Windows Installer package or patch package on the source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListGetInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The property is retrieved successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The source property is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiSourceListSetInfo" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListGetInfo">
    <summary>
      <para>The <b>MsiSourceListGetInfo</b> function retrieves information about the source list for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MEDIAPACKAGEPATH</b>
                </description>
              </item>
              <item>
                <description>"MediaPackagePath"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The path relative to the root of the installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISKPROMPT</b>
                </description>
              </item>
              <item>
                <description>"DiskPrompt"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The prompt template that is used when prompting the user for installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDSOURCE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedSource"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The most recently used source location for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDTYPE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedType"</description>
              </item>
            </list>
          </description>
          <description>
            <para>An "n" if the last-used source is a network location. A "u" if the last used source is a URL location. An "m" if the last used source is media. An empty string ("") if there is no last used source.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PACKAGENAME</b>
                </description>
              </item>
              <item>
                <description>"PackageName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The name of the Windows Installer package or patch package on the source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListGetInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The property is retrieved successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The source property is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiSourceListSetInfo" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListGetInfoA">
    <summary>
      <para>The <b>MsiSourceListGetInfo</b> function retrieves information about the source list for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MEDIAPACKAGEPATH</b>
                </description>
              </item>
              <item>
                <description>"MediaPackagePath"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The path relative to the root of the installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISKPROMPT</b>
                </description>
              </item>
              <item>
                <description>"DiskPrompt"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The prompt template that is used when prompting the user for installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDSOURCE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedSource"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The most recently used source location for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDTYPE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedType"</description>
              </item>
            </list>
          </description>
          <description>
            <para>An "n" if the last-used source is a network location. A "u" if the last used source is a URL location. An "m" if the last used source is media. An empty string ("") if there is no last used source.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PACKAGENAME</b>
                </description>
              </item>
              <item>
                <description>"PackageName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The name of the Windows Installer package or patch package on the source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListGetInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The property is retrieved successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The source property is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiSourceListSetInfo" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiSourceListGetInfoW">
    <summary>
      <para>The <b>MsiSourceListGetInfo</b> function retrieves information about the source list for a product or patch in a specific context.</para>
    </summary>
    <param name="szProductCodeOrPatchCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> or patch GUID of the product or patch. Use a null-terminated string. If the string is longer than 39 characters, the function fails and returns ERROR_INVALID_PARAMETER. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="szUserSid">
      <para>This parameter can be a string security identifier (SID) that specifies the user account that contains the product or patch.  The SID is not validated or resolved. An incorrect SID can return ERROR_UNKNOWN_PRODUCT or ERROR_UNKNOWN_PATCH. When referencing a machine context, <i>szUserSID</i> must be <b>NULL</b> and <i>dwContext</i> must be MSIINSTALLCONTEXT_MACHINE.</para>
      <list type="table">
        <listheader>
          <description>Type of SID</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>NULL</b>
            </b>
          </description>
          <description>
            <b>NULL</b> denotes the currently logged on user. When referencing the current user account, <i>szUserSID</i> can be <b>NULL</b> and <i>dwContext</i> can be  MSIINSTALLCONTEXT_USERMANAGED or MSIINSTALLCONTEXT_USERUNMANAGED.
</description>
        </item>
        <item>
          <description>
            <b>User SID</b>
          </description>
          <description>
            <para>Specifies enumeration for a specific user in the system.  An example of a user SID is "S-1-3-64-2415071341-1358098788-3127455600-2561".</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  The special SID string s-1-5-18 (system) cannot be used to enumerate products or patches installed as per-machine.  Setting the SID value to s-1-5-18 returns ERROR_INVALID_PARAMETER.</para>
      <para>
        <b>Note</b>  The special SID string s-1-1-0 (everyone) should not be used. Setting the SID value to s-1-1-0 fails and returns ERROR_INVALID_PARAM.</para>
    </param>
    <param name="dwContext">
      <para>This parameter specifies the context of the product or patch instance. This parameter can contain one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type of context</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-user-managed context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_USERUNMANAGED</b>
          </description>
          <description>
            <para>The product or patch instance exists in the  per-user-unmanaged context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIINSTALLCONTEXT_MACHINE</b>
          </description>
          <description>
            <para>The product or patch instance exists in the per-machine context.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwOptions">
      <para>The <i>dwOptions</i> value specifies the meaning of <i>szProductCodeOrPatchCode</i>.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICODE_PRODUCT</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a product code GUID.
</description>
        </item>
        <item>
          <description>
            <b>MSICODE_PATCH</b>
          </description>
          <description>
            <i>szProductCodeOrPatchCode</i> is a patch code GUID.
</description>
        </item>
      </list>
    </param>
    <param name="szProperty">
      <para>A null-terminated string that specifies the property value to retrieve. The <i>szProperty</i> parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Name</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_MEDIAPACKAGEPATH</b>
                </description>
              </item>
              <item>
                <description>"MediaPackagePath"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The path relative to the root of the installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_DISKPROMPT</b>
                </description>
              </item>
              <item>
                <description>"DiskPrompt"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The prompt template that is used when prompting the user for installation media.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDSOURCE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedSource"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The most recently used source location for the product.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_LASTUSEDTYPE</b>
                </description>
              </item>
              <item>
                <description>"LastUsedType"</description>
              </item>
            </list>
          </description>
          <description>
            <para>An "n" if the last-used source is a network location. A "u" if the last used source is a URL location. An "m" if the last used source is media. An empty string ("") if there is no last used source.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLPROPERTY_PACKAGENAME</b>
                </description>
              </item>
              <item>
                <description>"PackageName"</description>
              </item>
            </list>
          </description>
          <description>
            <para>The name of the Windows Installer package or patch package on the source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="szValue">
      <para>An output buffer that receives  the information. This buffer should be large enough to contain the information. If the buffer is too small, the function returns ERROR_MORE_DATA and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.</para>
      <para>If the <i>szValue</i> is set to <b>NULL</b> and <i>pcchValue</i> is set to a valid pointer,  the function returns ERROR_SUCCESS and sets *<i>pcchValue</i> to the number of <b>TCHAR</b> in the value, not including the terminating NULL character.  The function can then be called again to retrieve the value, with <i>szValue</i> buffer large enough to contain *<i>pcchValue</i> + 1 characters.</para>
      <para>If <i>szValue</i> and <i>pcchValue</i> are both set to <b>NULL</b>, the function returns ERROR_SUCCESS if the value exists, without  retrieving the value.</para>
    </param>
    <param name="pcchValue">
      <para>A pointer to a variable that specifies the number of <b>TCHAR</b> in the <i>szValue</i> buffer. When the function returns, this parameter is set to the size of the requested value whether or not the function copies the value into the specified buffer. The size is returned as the number of <b>TCHAR</b> in the requested value, not including the terminating null character.</para>
      <para>This parameter can be set to <b>NULL</b> only if <i>szValue</i> is also <b>NULL</b>, otherwise the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The <b>MsiSourceListGetInfo</b> function returns the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The user does not have the ability to read the specified source list. This does not indicate whether a product or patch is found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_CONFIGURATION</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The provided buffer is not sufficient to contain the requested data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The property is retrieved successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PATCH</b>
            </para>
          </description>
          <description>
            <para>The patch is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PRODUCT</b>
            </para>
          </description>
          <description>
            <para>The product is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The source property is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>An unexpected internal failure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Administrators can modify the installation  of   a product or patch   instance that exists  under the machine context or under their own per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under any user's per-user-managed context.  Administrators cannot modify another user's installation of a product or patch instance  that exists  under that other user's per-user-unmanaged context.</para>
      <para>Non-administrators cannot  modify the installation of  a product or patch instance that exists under another user's per-user context (managed or unmanaged.) They can modify the installation of  a product or patch instance that exists under their own per-user-unmanaged context.  They can modify the installation of a product or patch instance under the machine context or their own per-user-managed context only if they are enabled to browse for a product or patch source. Users can be enabled to browse for sources by setting policy. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/disablebrowse">DisableBrowse</a>, <a href="https://docs.microsoft.com//windows/desktop/Msi/allowlockdownbrowse">AllowLockdownBrowse</a>, and <a href="https://docs.microsoft.com//windows/desktop/Msi/alwaysinstallelevated">AlwaysInstallElevated</a> policies.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiSourceListGetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="MsiSourceListSetInfo" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/not-supported-in-windows-installer-version-2-0">Not Supported in Windows Installer 2.0 and earlier</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</seealso>
  </member>
  <member name="Windows.MsiUseFeature">
    <summary>
      <para>The
<b>MsiUseFeature</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid function argument.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<b>MsiUseFeature</b> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureA">
    <summary>
      <para>The
<b>MsiUseFeature</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid function argument.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<b>MsiUseFeature</b> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureW">
    <summary>
      <para>The
<b>MsiUseFeature</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid function argument.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<b>MsiUseFeature</b> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureEx">
    <summary>
      <para>The
<b>MsiUseFeatureEx</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <param name="dwInstallMode">
      <para>This parameter can have the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Return value indicates the installation state.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<see cref="MsiUseFeature" /> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureExA">
    <summary>
      <para>The
<b>MsiUseFeatureEx</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <param name="dwInstallMode">
      <para>This parameter can have the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Return value indicates the installation state.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<see cref="MsiUseFeature" /> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureExW">
    <summary>
      <para>The
<b>MsiUseFeatureEx</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <param name="dwInstallMode">
      <para>This parameter can have the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Return value indicates the installation state.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<see cref="MsiUseFeature" /> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureEx">
    <summary>
      <para>The
<b>MsiUseFeatureEx</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <param name="dwInstallMode">
      <para>This parameter can have the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Return value indicates the installation state.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<see cref="MsiUseFeature" /> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureExA">
    <summary>
      <para>The
<b>MsiUseFeatureEx</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <param name="dwInstallMode">
      <para>This parameter can have the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Return value indicates the installation state.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<see cref="MsiUseFeature" /> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureExW">
    <summary>
      <para>The
<b>MsiUseFeatureEx</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <param name="dwInstallMode">
      <para>This parameter can have the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMODE_NODETECTION</b>
          </description>
          <description>
            <para>Return value indicates the installation state.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwReserved">
      <para>Reserved for future use. This value must be set to 0.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeatureEx</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<see cref="MsiUseFeature" /> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeatureEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeature">
    <summary>
      <para>The
<b>MsiUseFeature</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid function argument.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<b>MsiUseFeature</b> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureA">
    <summary>
      <para>The
<b>MsiUseFeature</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid function argument.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<b>MsiUseFeature</b> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiUseFeatureW">
    <summary>
      <para>The
<b>MsiUseFeature</b> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</para>
    </summary>
    <param name="szProduct">
      <para>Specifies the product code for the product that owns the feature to be used.</para>
    </param>
    <param name="szFeature">
      <para>Identifies the feature to be used.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ABSENT</b>
            </para>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_ADVERTISED</b>
            </para>
          </description>
          <description>
            <para>The feature is advertised</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_BADCONFIG</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid function argument.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_LOCAL</b>
            </para>
          </description>
          <description>
            <para>The feature is locally installed and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The feature is installed from the source and available for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>INSTALLSTATE_UNKNOWN</b>
            </para>
          </description>
          <description>
            <para>The feature is not published.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<b>MsiUseFeature</b> function should only be used on features known to be published. INSTALLSTATE_UNKNOWN indicates that the program is trying to use a feature that is not published. The application should determine whether the feature is published before calling
<b>MsiUseFeature</b> by calling
<see cref="MsiQueryFeatureState" /> or
<see cref="MsiEnumFeatures" />. The application should make these calls while it initializes. An application should only use features that are known to be published.</para>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiUseFeature as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/installer-function-reference">Application-Only Functions</seealso>
  </member>
  <member name="Windows.MsiVerifyPackage">
    <summary>
      <para>The
<b>MsiVerifyPackage</b> function verifies that the given file is an installation package.</para>
    </summary>
    <param name="szPackagePath">
      <para>Specifies the path and file name of the package.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The file is not a valid package.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>The parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The file is a package.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiVerifyPackageA">
    <summary>
      <para>The
<b>MsiVerifyPackage</b> function verifies that the given file is an installation package.</para>
    </summary>
    <param name="szPackagePath">
      <para>Specifies the path and file name of the package.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The file is not a valid package.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>The parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The file is a package.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiVerifyPackageW">
    <summary>
      <para>The
<b>MsiVerifyPackage</b> function verifies that the given file is an installation package.</para>
    </summary>
    <param name="szPackagePath">
      <para>Specifies the path and file name of the package.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The file is not a valid package.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>The parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The file is a package.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiVerifyPackage">
    <summary>
      <para>The
<b>MsiVerifyPackage</b> function verifies that the given file is an installation package.</para>
    </summary>
    <param name="szPackagePath">
      <para>Specifies the path and file name of the package.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The file is not a valid package.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>The parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The file is a package.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiVerifyPackageA">
    <summary>
      <para>The
<b>MsiVerifyPackage</b> function verifies that the given file is an installation package.</para>
    </summary>
    <param name="szPackagePath">
      <para>Specifies the path and file name of the package.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The file is not a valid package.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>The parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The file is a package.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiVerifyPackageW">
    <summary>
      <para>The
<b>MsiVerifyPackage</b> function verifies that the given file is an installation package.</para>
    </summary>
    <param name="szPackagePath">
      <para>Specifies the path and file name of the package.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_INVALID</b>
            </para>
          </description>
          <description>
            <para>The file is not a valid package.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSTALL_PACKAGE_OPEN_FAILED</b>
            </para>
          </description>
          <description>
            <para>The file could not be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>The parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The file is a package.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msi.h header defines MsiVerifyPackage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
</doc>