<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="WS_WRITE_OPTION">
    <summary>
      <para>Specifies whether a storage specified contains the value, or a pointer to the value,
and whether the value can be represented as nil in the XML content.</para>
    </summary>
  </member>
  <member name="WS_WRITE_OPTION.WS_WRITE_REQUIRED_VALUE">
    <summary>
      <para>The storage specified contains the value.  The size of the storage
specified should be the size of the value.</para>
      <para>This option specifies that the value will always be written to the XML content.</para>
      <code>int value;
Api(..., &amp;amp;amp;amp;amp;amp;amp;value, sizeof(value), ...);
</code>
      <code>// always written
&lt;element&gt;123&lt;/element&gt;
</code>
      <para>This option is not supported for pointer types
(<see cref="WS_WSZ_TYPE" /> and <b>WS_XML_BUFFER_TYPE</b>).
The <see cref="WS_WRITE_REQUIRED_POINTER" /> option should be used for these types.</para>
    </summary>
  </member>
  <member name="WS_WRITE_OPTION.WS_WRITE_REQUIRED_POINTER">
    <summary>
      <para>The storage specified contains a pointer to the value.  The
size of the storage specified is always the size of a pointer, regardless
of the type being serialized.</para>
      <para>This option specifies that the value will always be written to the XML content.</para>
      <code>int* valuePointer; // may not be NULL
Api(..., &amp;amp;amp;amp;amp;amp;amp;valuePointer, sizeof(valuePointer), ...);
</code>
      <code>// always written
&lt;element&gt;123&lt;/element&gt;
</code>
      <para>If the pointer to the value specified in the storage is <b>NULL</b>,
<b>E_INVALIDARG</b> is returned.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </summary>
  </member>
  <member name="WS_WRITE_OPTION.WS_WRITE_NILLABLE_VALUE">
    <summary>
      <para>The storage specified contains a pointer to the value.  The
size of the storage specified is always the size of a pointer, regardless
of the type being serialized.</para>
      <para>If the value is nil, then a nil element is written in the XML content.
If non-nil, then the value is serialized normally.</para>
      <code>WS_STRING value; // may contain a nil value (see WS_STRING_TYPE)
Api(..., &amp;amp;amp;amp;amp;amp;amp;value, sizeof(value), ...);
</code>
      <code>// if value is non-nil
&lt;element&gt;hello&lt;/element&gt;

// if value is nil
&lt;element xsi:nil='true'/&gt;
</code>
      <para>This option is only supported for the following types, listed below,
which have a intrinsic way to represent a nil value.  See the documentation
for each type for information on how nil is represented.</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="WS_STRING_TYPE" />
          </description>
        </item>
        <item>
          <description>
            <see cref="WS_XML_STRING_TYPE" />
          </description>
        </item>
        <item>
          <description>
            <see cref="WS_BYTES_TYPE" />
          </description>
        </item>
      </list>
    </summary>
  </member>
  <member name="WS_WRITE_OPTION.WS_WRITE_NILLABLE_POINTER">
    <summary>
      <para>For all types, the storage specified contains a pointer to the value.  The
size of the storage specified is always the size of a pointer, regardless
of the type being serialized.</para>
      <para>If the pointer to the value specified in the storage is <b>NULL</b>, then
a nil element is written in the XML content.</para>
      <code>int* valuePointer; // may be NULL
Api(..., &amp;amp;amp;amp;amp;amp;amp;valuePointer, sizeof(valuePointer), ...);

</code>
      <code>// if value is non-NULL
&lt;element&gt;123&lt;/element&gt;

// if value is NULL
&lt;element xsi:nil='true'/&gt;
</code>
    </summary>
  </member>
</doc>