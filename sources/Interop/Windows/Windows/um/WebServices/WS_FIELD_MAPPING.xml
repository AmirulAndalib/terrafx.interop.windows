<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="WS_FIELD_MAPPING">
    <summary>
      <para>Specifies how a field of a structure is represented in XML.  This is used within
a <see cref="WS_FIELD_DESCRIPTION" />.</para>
    </summary>
    <remarks>
      <para>The <b>WS_FIELD_MAPPING</b> indicates how different parts of the XML content
maps to the fields of a structure.  For example, <b>WS_ELEMENT_FIELD_MAPPING</b> can
be used to map the value of a child element, and <b>WS_ATTRIBUTE_FIELD_MAPPING</b> can be used to map an attribute.  Any XML content that is read that is not explicitly
mapped will cause <b>WS_E_INVALID_FORMAT</b> to be returned when the XML
is deserialized.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>The order of the <see cref="WS_FIELD_DESCRIPTION" /> within a <see cref="WS_STRUCT_DESCRIPTION" /> is determined by the <b>WS_FIELD_MAPPING</b> value of the <b>WS_FIELD_DESCRIPTION</b>.
See <b>WS_STRUCT_DESCRIPTION</b> for more information on the ordering.</para>
    </remarks>
  </member>
  <member name="WS_FIELD_MAPPING.WS_TYPE_ATTRIBUTE_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to the XML type attribute (xsi:type).  This
can only be used with <see cref="WS_DESCRIPTION_TYPE" />.</para>
      <code>
struct Base
{
    WS_STRUCT_DESCRIPTION* type;

    // ... base fields ...
};

struct Derived : Base
{
    // ... derived fields ...
};

struct Struct
{
    Base* field;
};

Derived derived;
derived.type = &amp;amp;amp;amp;amp;amp;amp;DerivedStructDescription;
Struct s;
s.field = &amp;amp;amp;amp;amp;amp;amp;derived;

&lt;Struct&gt;
    &lt;field xsi:type='Derived'&gt;
        // ... base fields ...
        // ... derived fields ...
    &lt;/field&gt;
&lt;/Struct&gt;

</code>
      <para>This mapping does not support specifying a <see cref="WS_DEFAULT_VALUE" />.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_ATTRIBUTE_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to a single attribute.</para>
      <para>The field's localName/ns are used as the XML attribute name and namespace.</para>
      <para>Unless specified, the attribute must appear in the XML.
If <see cref="WS_FIELD_OPTIONAL" /> is specified, then the attribute
is not required to appear in the XML.  If optional and not
present, then the field is set to the <see cref="WS_DEFAULT_VALUE" />,
or zero if the default value is not specified.</para>
      <code>
struct Struct
{
    int field;
};

Struct s;
s.field = 1;

&lt;Struct field='1'/&gt;

</code>
      <para>To discard the attribute, a <see cref="WS_VOID_TYPE" /> should be used.
In this case, a field is not required in the structure.
See <b>WS_VOID_TYPE</b> for more information.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_ELEMENT_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to a single element.</para>
      <para>The field's localName/ns are used as the XML element name and namespace.</para>
      <para>Unless specified, the element must appear in the XML.
If <see cref="WS_FIELD_OPTIONAL" /> is specified, then the element
is not required to appear in the XML.  If optional and not
present, then the field is set to the <see cref="WS_DEFAULT_VALUE" />,
or zero if the default value is not specified.</para>
      <code>
struct Struct
{
    int field;
};

Struct s;
s.field = 1;

&lt;Struct&gt;
    &lt;field&gt;1&lt;/field&gt;
&lt;/Struct&gt;

</code>
      <para>To discard the element, a <see cref="WS_VOID_TYPE" /> should be used.
In this case, a field is not required in the structure.
See <b>WS_VOID_TYPE</b> for more information.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_REPEATING_ELEMENT_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to a repeating set of elements.</para>
      <para>The field's localName/ns are used as the XML element
name and namespace to use for the wrapper element (the element
which is the parent of the repeating elements).  If no wrapper
element is desired, then both localName/ns should be <b>NULL</b>.</para>
      <para>If a wrapper element has been specified, the wrapper element must appear
in the XML if repeating element count is not 0.  A <see cref="WS_DEFAULT_VALUE" /> may
not be specified for this field mapping.</para>
      <para>The itemLocalName and itemNs are used as the XML element
name and namespace for the repeating element.</para>
      <code>
struct Struct
{
    int* field;
    ULONG fieldCount;
};

int values[] = { 1, 2 };
Struct s;
s.field = values;
s.fieldCount = 2;

// with wrapper element specified
&lt;Struct&gt;
    &lt;field&gt;
        &lt;item&gt;1&lt;/item&gt;
        &lt;item&gt;2&lt;/item&gt;
    &lt;/field&gt;
&lt;/Struct&gt;

// with no wrapper element specified
&lt;Struct&gt;
    &lt;item&gt;1&lt;/item&gt;
    &lt;item&gt;2&lt;/item&gt;
&lt;/Struct&gt;
</code>
      <para>The number of elements in the deserialized array can be constrained
by specifying a non-<b>NULL</b><see cref="WS_ITEM_RANGE" /> structure that is
part of the <see cref="WS_FIELD_DESCRIPTION" />.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_TEXT_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to the entire character content of the element.
When this mapping is used, child elements are not allowed.</para>
      <para>This mapping is commonly used in conjunction with <see cref="WS_ATTRIBUTE_FIELD_MAPPING" /> to define a structure which maps to an element containing some text and attributes (but no
child elements).</para>
      <code>
struct Struct
{
    int field;
};

Struct s;
s.field = 1;

&lt;Struct&gt;1&lt;/Struct&gt;

</code>
      <para>This mapping does not support specifying a <see cref="WS_DEFAULT_VALUE" />.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_NO_FIELD_MAPPING">
    <summary>
      <para>The field is neither serialized or deserialized.</para>
      <para>The field is ignored when serializing, and is initialized to the
default value when deserializing.</para>
      <para>If the field maps to one of the existing types (for example <see cref="WS_INT32_TYPE" />),
then the type can be specified.  If the type of the field is not one of
the existing types, then <b>WS_VOID_TYPE</b> can be used to specify
a field of an arbitrary type and size.</para>
      <para>A <see cref="WS_DEFAULT_VALUE" /> may be specified to provide the value
to initialize the field to when deserializing the field.  If a default
value is not specified, then the field will be initialized to zero.</para>
      <para>The field mapping can be used with <see cref="WS_FIELD_OPTIONS" /> value of 0 only.</para>
      <code>
struct Struct
{
    int field;
};

Struct s;
s.field = 1;

&lt;Struct/&gt;

</code>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_XML_ATTRIBUTE_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to a reserved xml attribute (such as xml:lang).</para>
      <para>The field's localName is used to identify the XML attribute name.</para>
      <para>Unless <see cref="WS_FIELD_OPTIONAL" />  is specified, the attribute must
appear in the XML.  If <b>WS_FIELD_OPTIONAL</b> is specified,
then the attribute is not required to appear in the XML.  If optional and not
present, then the field is set to the <see cref="WS_DEFAULT_VALUE" />,
or zero if the default value is not specified.</para>
      <code>
struct Struct
{
    WS_STRING field;
};

Struct s;
s.field = ...; // 'us-en';

// Example of xml:lang
&lt;Struct xml:lang='us-en'/&gt;

s.field = ...; // 'true'

// Example of xml:space
&lt;Struct xml:space='true'&gt;
</code>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_ELEMENT_CHOICE_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to a choice among a set of possible
elements.  Each element maps to one of the fields of a union.
Each field of the union has a corresponding enum value, which is
used to identify the current choice.</para>
      <code>
// Enumeration of choices of different values
enum Choice
{
    ChoiceA = 10,
    ChoiceB = 20,
    None = 0,
};

// Struct containing union of values, and enum 'selector'
struct Struct
{
    Choice choice;
    union
    {
        int a;          // valid when choice is ChoiceA
        WS_STRING b;    // valid when choice is ChoiceB
    } value;
};

</code>
      <para>This field mapping must be used with <see cref="WS_UNION_TYPE" />.
The names and namespaces of the element choices are specified in the
<see cref="WS_UNION_DESCRIPTION" />.  The field's localName
and ns should be <b>NULL</b>.</para>
      <para>Unless <see cref="WS_FIELD_OPTIONAL" />  is specified, one of the
elements must appear in the XML.  If <b>WS_FIELD_OPTIONAL</b> is specified,
then none of the elements are required to appear in the XML.  If optional and none
of the elements are present, then the field's selector value is set to the
none value of the enumeration (as specified in the noneEnumValue field of
the <see cref="WS_UNION_DESCRIPTION" />).  Due to the fact that the nonEnumValue
is used as the default value, this mapping value does not support
specifying a <see cref="WS_DEFAULT_VALUE" />.</para>
      <code>
Struct s;
s.choice = ChoiceA;
s.value.a = 123;

&lt;Struct&gt;
    &lt;choiceA&gt;123&lt;/choiceA&gt;
&lt;/Struct&gt;

Struct S;
s.choice = ChoiceB;
s.value.b = ...; // 'hello'

&lt;Struct&gt;
    &lt;choiceB&gt;hello&lt;/choiceB&gt;
&lt;/Struct&gt;

Struct S;
s.choice = None;

&lt;Struct&gt;
&lt;/Struct&gt;
</code>
      <para>The field corresponds to a choice among a set of possible
elements.  Each element maps to one of the fields of a union.
Each field of the union has a corresponding enum value, which is
used to identify the current choice.</para>
      <code>
// Enumeration of choices of different values
enum Choice
{
    ChoiceA = 10,
    ChoiceB = 20,
    None = 0,
};

// Struct containing union of values, and enum &amp;amp;amp;amp;amp;amp;amp;quot;selector&amp;amp;amp;amp;amp;amp;amp;quot;
struct Struct
{
    Choice choice;
    union
    {
        int a;          // valid when choice is ChoiceA
        WS_STRING b;    // valid when choice is ChoiceB
    } value;
};
</code>
      <para>This field mapping must be used with <see cref="WS_UNION_TYPE" />.
The names and namespaces of the element choices are specified in the
<see cref="WS_UNION_DESCRIPTION" />.  The field's localName
and ns should be <b>NULL</b>.</para>
      <para>Unless <see cref="WS_FIELD_OPTIONAL" />  is specified, one of the
elements must appear in the XML.  If <b>WS_FIELD_OPTIONAL</b> is specified,
then none of the elements are required to appear in the XML.  If optional and none
of the elements are present, then the field's selector value is set to the
none value of the enumeration (as specified in the noneEnumValue field of
the <see cref="WS_UNION_DESCRIPTION" />).  Due to the fact that the nonEnumValue
is used as the default value, this mapping value does not support
specifying a <see cref="WS_DEFAULT_VALUE" />.</para>
      <code>
Struct s;
s.choice = ChoiceA;
s.value.a = 123;

&lt;Struct&gt;
    &lt;choiceA&gt;123&lt;/choiceA&gt;
&lt;/Struct&gt;

Struct S;
s.choice = ChoiceB;
s.value.b = ...; // &amp;amp;amp;amp;amp;amp;amp;quot;hello&amp;amp;amp;amp;amp;amp;amp;quot;

&lt;Struct&gt;
    &lt;choiceB&gt;hello&lt;/choiceB&gt;
&lt;/Struct&gt;

Struct S;
s.choice = None;

&lt;Struct&gt;
&lt;/Struct&gt;
</code>
      <para>The selector value indicates which of the fields of the
union are set.  Other fields are left uninitialized when
the value is deserialized.  An application should always
consult the selector value to verify that a field of the
union is accessible.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_REPEATING_ELEMENT_CHOICE_FIELD_MAPPING">
    <summary>
      <para>The field corresponds to a repeating set of element choices.</para>
      <para>Each item is represented by a union with selector value.
This mapping must be used with <see cref="WS_UNION_TYPE" />.</para>
      <para>The field's localName/ns are used as the XML element
name and namespace to use for the wrapper element (the element
which is the parent of the repeating elements).  If no wrapper
element is desired, then both localName/ns should be <b>NULL</b>.</para>
      <para>If a wrapper element has been specified, the wrapper element must appear
in the XML if repeating element count is not 0.  A <see cref="WS_DEFAULT_VALUE" /> may
not be specified for this field mapping.</para>
      <para>The itemLocalName and itemNs fields must be <b>NULL</b>.  The XML element
name and namespace are defined in the <see cref="WS_UNION_DESCRIPTION" />.</para>
      <code>
struct Struct2
{
    Struct* field;      // see WS_UNION_DESCRIPTION for definition of Struct
    ULONG fieldCount;
};

StructType values[2];
values[0].choice = ChoiceA;
values[0].values.a = 123;
values[1].choice = ChoiceB;
values[1].values.b = ...; // hello

Struct2 s2;
s2.field = values;
s2.fieldCount = 2;

// with wrapper element specified
&lt;Struct2&gt;
    &lt;field&gt;
        &lt;item&gt;123&lt;/item&gt;
        &lt;item&gt;hello&lt;/item&gt;
    &lt;/field&gt;
&lt;/Struct2&gt;

// with no wrapper element specified
&lt;Struct2&gt;
    &lt;item&gt;123&lt;/item&gt;
    &lt;item&gt;hello&lt;/item&gt;
&lt;/Struct2&gt;

</code>
      <para>The number of elements in the deserialized array can be constrained
by specifying a non-<b>NULL</b><see cref="WS_ITEM_RANGE" /> structure that is
part of the <see cref="WS_FIELD_DESCRIPTION" />.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_ANY_ELEMENT_FIELD_MAPPING">
    <summary></summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_REPEATING_ANY_ELEMENT_FIELD_MAPPING">
    <summary>
      <para>The field is used to discard or store a sequence of elements
with any name and namespace.</para>
      <para>To store the elements, a <see cref="WS_XML_BUFFER_TYPE" /> should
be used.  This corresponds to an array of <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>s,
as follows:</para>
      <code>
struct Struct
{
    // ... known fields ...
    WS_XML_BUFFER** fields;
    ULONG fieldCount;
    // ... known fields ...
};

Struct s;
s.fields = ...; // { '&lt;unknown1/&gt;', '&lt;unknown2/&gt;'; }
s.fieldCount = 2;

&lt;Struct&gt;
    ... known fields ...
    &lt;unknown1/&gt;
    &lt;unknown2/&gt;
    ... known fields ...
&lt;/Struct&gt;

</code>
      <para>To discard the elements, a <see cref="WS_VOID_TYPE" /> should be used.
In this case, a field is not required in the structure.  See <b>WS_VOID_TYPE</b> for
more information.</para>
      <para>The number of elements allowed during deserialization can be constrained
by specifying a non-<b>NULL</b><see cref="WS_ITEM_RANGE" /> structure that is
part of the <see cref="WS_FIELD_DESCRIPTION" />.</para>
      <para>This mapping does not support specifying a <see cref="WS_DEFAULT_VALUE" />.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_ANY_CONTENT_FIELD_MAPPING">
    <summary>
      <para>The field is used to discard or store any remaining content
(any mixture of text or elements) that occurs before the end
of an element.</para>
      <para>To store the elements, a <see cref="WS_XML_BUFFER_TYPE" /> should
be used, as follows:</para>
      <code>
struct Struct
{
    // ... known fields ...
    WS_XML_BUFFER* field;
};

Struct s;
s.field = ...; // 'text1&lt;unknown1/&gt;text2&lt;unknown2/&gt;'

&lt;Struct&gt;
    ... known fields ...
    text1
    &lt;unknown1/&gt;
    text2
    &lt;unknown2/&gt;
&lt;/Struct&gt;

</code>
      <para>To discard the elements, a <see cref="WS_VOID_TYPE" /> should be used.
In this case, a field is not required in the structure.
See <b>WS_VOID_TYPE</b> for more information.</para>
      <para>This mapping does not support specifying a <see cref="WS_DEFAULT_VALUE" />.</para>
    </summary>
  </member>
  <member name="WS_FIELD_MAPPING.WS_ANY_ATTRIBUTES_FIELD_MAPPING">
    <summary>
      <para>The field is used to discard or store any attributes which were not
mapped using other <see cref="WS_FIELD_MAPPING" /> values.</para>
      <para>If this field mapping is not specified, then unmapped attributes
will cause an error when deserializing.</para>
      <para>The name field of the <see cref="WS_FIELD_DESCRIPTION" /> must be <b>NULL</b>.</para>
      <para>The ns field of the <see cref="WS_FIELD_DESCRIPTION" /> restricts the
namespace of the attributes allowed as follows:</para>
      <list type="bullet">
        <item>
          <description>If the ns field is <b>NULL</b>, then there is no restriction.  The
<see cref="WS_FIELD_OTHER_NAMESPACE" /> field option must be not set in this
case.
</description>
        </item>
        <item>
          <description>If the ns field is non-<b>NULL</b>, and the field option
<see cref="WS_FIELD_OTHER_NAMESPACE" /> is not set for the field, then
the attribute must have the same namespace as was specified in the ns field.
</description>
        </item>
        <item>
          <description>If the ns field is non-<b>NULL</b>, and the field option
<see cref="WS_FIELD_OTHER_NAMESPACE" /> is set for the field, then the
attribute must have a different namespace than was specified
in the ns field.
</description>
        </item>
      </list>
      <para>To store the attributes, <see cref="WS_ANY_ATTRIBUTES_TYPE" /> should be
used.  This correspond to <see cref="WS_ANY_ATTRIBUTES" /> as follows:</para>
      <code>
struct Struct
{
    // ... known attributes ...
    WS_ANY_ATTRIBUTES field;
    // ... other content ...
};

Struct s;
s.field = ...; // 'unknown'/'http://example.com'/'value'

&lt;Struct
    ... known attributes ...
    xmlns:a='http://example.com' a:unknown='value'&gt;

    ... other content ...
&lt;/Struct&gt;

</code>
      <para>To discard the unmapped attributes, a <see cref="WS_VOID_TYPE" /> should be used.
In this case, a field is not required in the structure.
See <b>WS_VOID_TYPE</b> for more information.</para>
      <para>This mapping does not support specifying a <see cref="WS_DEFAULT_VALUE" />.</para>
    </summary>
  </member>
</doc>