<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="WS_XML_WRITER_PROPERTY_ID">
    <summary>Each xml writer property is identified by an ID and has an associated value. This enumeration is used within the <see cref="WS_XML_WRITER_PROPERTY" /> structure, which is used as a parameter to <see cref="WsCreateWriter" />, <see cref="WsSetOutput" />, <see cref="WsSetOutputToBuffer" />, and <see cref="WsWriteXmlBufferToBytes" />. It is also used directly as a parameter to <see cref="WsGetWriterProperty" />.</summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_MAX_DEPTH">
    <summary>
      <para>A <b>ULONG</b> that specifies the maximum depth of the document that the writer will permit.</para>
      <para>Depth is measured at any point by the number of nested start elements.</para>
      <para>A depth of 0 prevents any start elements from being written.</para>
      <para>This property defaults to 32.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT">
    <summary>
      <para>A <see cref="WS_XML_WRITER_MTOM_ENCODING" /> structure that specifies whether the writer will permit multiple elements and non-white space at the top level of the document. This property may not be set to <b>TRUE</b> with <b>WS_XML_WRITER_MTOM_ENCODING</b>.</para>
      <para>This property defaults to <b>FALSE</b>.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_MAX_ATTRIBUTES">
    <summary>
      <para>A <b>ULONG</b> that specifies the maximum number of attributes the writer will permit on an element.</para>
      <para>This property defaults to 128.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_WRITE_DECLARATION">
    <summary>
      <para>A <b>BOOL</b> that specifies if the writer should emit an appropriate xml declaration at the start of the document.</para>
      <para>This property defaults to <b>FALSE</b>.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_INDENT">
    <summary>
      <para>A <b>ULONG</b> that specifies the how many spaces of indenting should be used to format the xml. If indent is zero, no formatting occurs.</para>
      <para>This property defaults to 0.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_BUFFER_TRIM_SIZE">
    <summary>
      <para>A <b>ULONG</b> that specifies one of the following.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_BUFFER_OUTPUT" />, then this property is the maximum number of bytes the writer will retain across calls to <see cref="WsSetOutput" /> for purposes of buffering output.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_STREAM_OUTPUT" />, then this property is the maximum number of bytes the writer will retain across calls to <see cref="WsSetOutput" /> and <see cref="WsFlushWriter" /> for purposes of buffering output.</para>
      <para>This property has no effect when specified with <see cref="WsSetOutputToBuffer" />.</para>
      <para>This property defaults to 4096.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_CHARSET">
    <summary>A <see cref="WS_CHARSET" /> value that returns the character set the writer is using to encode the document. This value is only available for text documents.</summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_BUFFERS">
    <summary>
      <para>A <see cref="WS_BUFFERS" /> structure that returns a set of buffers containing the generated xml bytes.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_BUFFER_OUTPUT" />, then the all the generated bytes are returned, and the buffers are valid until <see cref="WsSetOutput" /> or <see cref="WsFreeWriter" /> is called.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_MTOM_ENCODING" />, then there must be no open elements. The supporting MIME parts will be generated and included in the returned buffers. Once this occurs, any API that attempts to write further to the xml document will return <b>WS_E_INVALID_OPERATION</b>. (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>This property is not available when using <see cref="WS_XML_WRITER_STREAM_OUTPUT" />.</para>
      <para>This property is not available on a writer that is set to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
      <para>This may be less convenient but more efficient than using <see cref="WS_XML_WRITER_PROPERTY_BYTES" /> because the writer does not have to concatenate the buffers that comprise the document into a single buffer.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_BUFFER_MAX_SIZE">
    <summary>
      <para>A <b>ULONG</b> that specifies the maximum number of bytes the writer will buffer.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_BUFFER_OUTPUT" />, then this is the maximum number of bytes that will buffered for the entire document. Calls to <see cref="WsFlushWriter" /> have no effect.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_STREAM_OUTPUT" />, then this is the maxmimum amount of data that will be buffered between <see cref="WsFlushWriter" /> calls.</para>
      <para>This property has no effect when specified with <see cref="WsSetOutputToBuffer" />.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_BYTES">
    <summary>
      <para>A <see cref="WS_BUFFERS" /> structure that returns a single buffer containing the generated xml bytes.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_BUFFER_OUTPUT" />, then all the generated bytes are returned, and the buffer is valid until <see cref="WsSetOutput" /> or <see cref="WsFreeWriter" /> is called.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_MTOM_ENCODING" />, then there must be no open elements. The supporting MIME parts will be generated and included in the returned buffers. Once this occurs, any API that attempts to write further to the xml document will return <b>WS_E_INVALID_OPERATION</b>.</para>
      <para>This property is not available when using <see cref="WS_XML_WRITER_STREAM_OUTPUT" />.</para>
      <para>This property is not available on a writer that is set to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
      <para>This may be more convenient but less efficient than using <see cref="WS_XML_WRITER_PROPERTY_BUFFERS" /> because the writer may need to concatenate the buffers that comprise the document into a single buffer.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_IN_ATTRIBUTE">
    <summary>A <b>BOOL</b> that indicates that <see cref="WsWriteStartAttribute" /> has been called and the writer is positioned on attribute content.</summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_MAX_MIME_PARTS_BUFFER_SIZE">
    <summary>
      <para>A <b>ULONG</b> used with <see cref="WS_XML_WRITER_MTOM_ENCODING" />. This specifies the maximum amount of data that will be buffered for purposes of writing the MIME parts. <see cref="WsWriteBytes" /> and<see cref="WsPullBytes" /> need to buffer data in order to emit the data as a separate MIME part that follows the document, and this can be used to limit how much is buffered.</para>
      <para>This property defaults to 65536.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_INITIAL_BUFFER">
    <summary>
      <para>A <see cref="WS_BYTES" /> structure that contains a buffer that the writer may use for encoding the xml document. This is useful when an upper bound on the size of the generated xml data is known, or the caller wants to own the buffer in which the bytes are placed.</para>
      <para>If the size specified is greater than or equal to <see cref="WS_XML_WRITER_PROPERTY_BUFFER_MAX_SIZE" />, then the writer will not allocate from its internal buffers.</para>
      <para>This buffer may appear as one of the buffers returned by the property <see cref="WS_XML_WRITER_PROPERTY_BUFFERS" /> or <b>WS_XML_WRITER_PROPERTY_BYTES</b>.</para>
      <para>The caller must ensure that the buffer specified is valid for the lifetime of the writer.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES">
    <summary>
      <para>A <b>BOOL</b> used with <see cref="WS_XML_WRITER_TEXT_ENCODING" />. Setting this to <b>TRUE</b> permits character references of characters considered invalid by XML 1.0 to be accepted.</para>
      <para>Setting this property to <b>TRUE</b> may affect interoperability.</para>
      <para>This property defaults to <b>FALSE</b>.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_MAX_NAMESPACES">
    <summary>
      <para>A <b>ULONG</b> that specifies the maximum number of xmlns unique declarations that may appear in scope at any point while writing the document.</para>
      <para>This property defaults to 32.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_BYTES_WRITTEN">
    <summary>
      <para>A <b>ULONG</b> that specifies one of the following.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_BUFFER_OUTPUT" />, then this property returns the number of bytes that have been written to the writer.</para>
      <para>If the writer is using <see cref="WS_XML_WRITER_STREAM_OUTPUT" />, then this property returns the number of bytes that have been written to the writer since the last call to<see cref="WsFlushWriter" />.</para>
      <para>If the writer is currently writing an element start tag, then the size of the start tag is not included in the value returned.</para>
      <para>This property is not available on a writer that was set using <see cref="WsSetOutputToBuffer" />.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_BYTES_TO_CLOSE">
    <summary>
      <para>A <b>ULONG</b> that returns the maximum number of bytes necessary to close any open elements.</para>
      <para>An application can use <see cref="WS_XML_WRITER_PROPERTY_BYTES_WRITTEN" /> and<b>WS_XML_WRITER_PROPERTY_BYTES_TO_CLOSE</b> to approximate how much additional data may be written to the document. When doing so, the application should take into account the encoding of the document being written.</para>
      <para>This property is not available on a writer that was set using <see cref="WsSetOutputToBuffer" />.</para>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_COMPRESS_EMPTY_ELEMENTS">
    <summary>
      <para>A <b>BOOL</b> that controls how <see cref="WsCopyNode" /> copies elements with no content.</para>
      <para>When this property is set to <b>FALSE</b>, <see cref="WsCopyNode" /> preserves whether each element is represented as a start/end tag pair, or as an empty element. When this property is set to <b>TRUE</b>, <b>WsCopyNode</b> will convert elements with no content to empty elements.</para>
      <para>The binary encoding does not support empty elements. When using <see cref="WsCopyNode" /> with a writer using the binary encoding this property has no effect either way. All empty elements are converted into elements with no content.</para>
      <para>By default, this property is <b>FALSE</b>.</para>
      <para>For an input XML string like:</para>
      <code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;container&gt; &lt;emptyElement /&gt; &lt;emptyElementWithEndTag&gt;&lt;/emptyElementWithEndTag&gt; &lt;/container&gt;</code>
      <para>If this property is <b>FALSE</b>, <see cref="WsCopyNode" /> will generate the following xml:</para>
      <code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;container&gt; &lt;emptyElement /&gt; &lt;emptyElementWithEndTag&gt;&lt;/emptyElementWithEndTag&gt; &lt;/container&gt;</code>
      <para>If this property is <b>TRUE</b>, <see cref="WsCopyNode" /> will generate the following xml:</para>
      <code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;container&gt; &lt;emptyElement /&gt; &lt;emptyElementWithEndTag /&gt; &lt;/container&gt;</code>
    </summary>
  </member>
  <member name="WS_XML_WRITER_PROPERTY_ID.WS_XML_WRITER_PROPERTY_EMIT_UNCOMPRESSED_EMPTY_ELEMENTS">
    <summary>
      <para>Windows 8 or later: A <b>BOOL</b> that controls how empty elements are emitted.</para>
      <para>If set to <b>FALSE</b>, an element that is created by only calls to <see cref="WsWriteStartElement" /> and <see cref="WsWriteEndElement" /> will be emitted as follows:</para>
      <code>&lt;emptyElement /&gt;</code>
      <para>If set to <b>TRUE</b>, that element will be emitted as follows:</para>
      <code>&lt;emptyElement&gt;&lt;/emptyElement&gt;</code>
      <para>The default is <b>FALSE</b></para>
    </summary>
  </member>
</doc>