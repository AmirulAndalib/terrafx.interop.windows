<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.WsAbandonCall">
    <summary>
      <para>Abandons a specified call  on the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/service-proxy">service proxy</a>.</para>
    </summary>
    <param name="serviceProxy">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-proxy">WS_SERVICE_PROXY</a> structure representing the service proxy on which to abandon the call.</para>
    </param>
    <param name="callId">
      <para>ID of the call to abandon.
(See the Remarks section.)</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The current state of the service proxy is not valid for this operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>A <b>NULL</b> service proxy was passed to the function.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Calls are identified by a call ID. This call ID is associated with the call by the WS_CALL_PROPERTY_CALL_ID  value of the <see cref="WS_CALL_PROPERTY_ID" /> enumeration.</para>
      <para>If the call ID is 0,  all pending calls on the service proxy are abandoned.
For more information,
see the following topics:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/wsw/client-side-service-operations">Client Side Service Operations</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/wsw/callabandonexample">CallAbandonExample</a>
          </description>
        </item>
      </list>
      <para>Be aware that the actual I/O associated with the call is not canceled. The service proxy keeps the resources to complete the call even though the call was abandoned.</para>
      <para>This results in a consumption of resources that is aggravated if an application continues to abandon calls, as can happen when the server is slow to respond  to the
client, and the client application abandons one call only to make the same call again.</para>
    </remarks>
  </member>
  <member name="Windows.WsAbandonMessage">
    <summary>
      <para>Skips the remainder of a specified <a href="https://docs.microsoft.com//windows/desktop/wsw/message">message</a> on a specified channel.</para>
    </summary>
    <param name="channel">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> structure representing the channel on which the message is being read or written.</para>
    </param>
    <param name="message">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure representing the message to abandon.  This should be
the same message that was passed to the <see cref="WsWriteMessageStart" /></para>
      <para>or <see cref="WsReadMessageStart" /> function.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The channel is not in the WS_CHANNEL_STATE_OPEN or  WS_CHANNEL_STATE_FAULTED state.
(For channel states, see the <see cref="WS_CHANNEL_STATE" /> enumeration.)</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The specified message is not currently being read or written on the specified channel.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsAbandonMessage</b> is used to skip reading or writing the remaining contents of a message,
allowing the next message for the channel to be read or written.  In this respect, it is an alternative to
the <see cref="WsReadMessageEnd" /> or <see cref="WsWriteMessageEnd" /> functions, as shown in the following
state diagram:</para>
      <para>.:image type="content" source="./images/AbandonMessage.png" border="false" alt-text="Diagram showing how the state transitions caused by the WsAbandonMessage function differ from the WSReadMessageEnd and WsWriteMessageEnd functions.".:</para>
      <para>For read operations, an application typically calls <b>WsAbandonMessage</b> when it is unnecessary for the application to continue reading the
message data, for example, if the
message does not meet the application's requirements.  This function can also be used
if the message contains malformed XML or if the <a href="https://docs.microsoft.com//windows/desktop/wsw/xml-reader">XML reader</a> has
generated an error while reading the message.</para>
      <para>If the channel is streamed
(see the WS_STREAMED_INPUT_TRANSFER_MODE value of the <see cref="WS_TRANSFER_MODE" /> enumeration),  the remainder of the
streamed message data is read and automatically discarded with the next call to
<see cref="WsReadMessageStart" /> or <see cref="WsCloseChannel" /> for the
channel.  If the channel is not streamed, the unread buffered message data
is simply discarded.</para>
      <para>For write operations, an application typically calls <b>WsAbandonMessage</b> when the application cannot continue writing the message because it has encountered some error, such as one returned by the <a href="https://docs.microsoft.com//windows/desktop/wsw/xml-writer">XML writer</a>, or must stop generating the message for some other reason.</para>
      <para>If the
channel is streamed (see the WS_STREAMED_INPUT_TRANSFER_MODE value of the <see cref="WS_TRANSFER_MODE" /> enumeration), the message data will be truncated and may result in errors when read by the
remote party.  If the channel is not streamed,  the buffered data for the
message is simply  discarded (since it was never transmitted).</para>
      <para>This function allows the user of the channel to keep the channel open and
send or receive additional messages (such as sending a fault), even though
an error occurred.  In contrast, <see cref="WsAbortChannel" /> will causes
the channel to fault.  A typical usage is first to try to abandon the message and
send a fault.  If that fails,  the channel can be aborted.</para>
      <para>This function does not perform any blocking I/O.</para>
      <para>This function is only valid when the channel is in the WS_CHANNEL_STATE_OPEN
or WS_CHANNEL_STATE_FAULTED states.
(For channel states, see the <see cref="WS_CHANNEL_STATE" /> enumeration.)</para>
      <para>The message specified must be the current message being read or the current message being written
for the specified channel.</para>
      <para>If called correctly, this function will not fail (for example, due to lack of system resources).</para>
    </remarks>
  </member>
  <member name="Windows.WsAbortListener">
    <summary>
      <para>Cancels any pending I/O for the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">listener</a>.</para>
    </summary>
    <param name="listener">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> structure representing the listener for which to cancel I/O.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
    </returns>
    <remarks>
      <para>
        <b>WsAbortListener</b> can be called when the listener is in any state. (See the <see cref="WS_LISTENER_STATE" /> enumeration for possible states.) If the listener is in the WS_LISTENER_STATE_OPEN state,  this function will force the listener to fault (reset to the WS_LISTENER_STATE_FAULTED state). When a listener is faulted, all attempts to accept a message from it fail immediately with the WS_E_OBJECT_FAULTED error code.</para>
      <para>This function does not wait for pending I/O to complete.</para>
      <para>If called with valid parameters, this function will not fail for reasons such as a lack of system resources.</para>
    </remarks>
  </member>
  <member name="Windows.WsAbortServiceHost">
    <summary>
      <para>Aborts all current operations on the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/service-host">service host</a>.</para>
    </summary>
    <param name="serviceHost">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-host">WS_SERVICE_HOST</a>  structure representing the service host on which to abort operations.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsAbortServiceHost</b> aborts all  listeners on the service host, and as a result, no new channels are accepted from the client. All channels currently being used by the service host to service messages are aborted as well.</para>
      <para>If a call is pending and it has a cancel callback registered through the <see cref="WsRegisterOperationForCancel" /> function, the callback is called. However, the runtime still waits for the call to complete.</para>
      <para>For more information on registering for cancellation notification,
see  <see cref="WsRegisterOperationForCancel" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsAcceptChannel">
    <summary>
      <para>Accepts the next incoming message from the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/listener">listener</a>.</para>
    </summary>
    <param name="listener">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> structure representing the listener.
This is the listener passed to <see cref="WsCreateChannelForListener" /> when the channel was created.</para>
    </param>
    <param name="channel">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> structure representing the channel to accept.</para>
    </param>
    <param name="asyncContext">
      <para>Pointer to a <see cref="WS_ASYNC_CONTEXT" /> data structure with information for invoking the function asynchronously.  Pass a <b>NULL</b></para>
      <para>value for a synchronous operation.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The listener or channel was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OBJECT_FAULTED</b>
            </para>
          </description>
          <description>
            <para>The listener has faulted. See the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The listener or the channel or both were in an inappropriate state.</para>
            <para>See the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are  not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Once you accept a channel, you must close it  when you no longer need it and free the resources by calling the
<see cref="WsCloseChannel" /> function, and then calling either the <see cref="WsFreeChannel" /> or the <see cref="WsResetChannel" />.
function.</para>
      <para>For <b>WsAcceptChannel</b> to succeed, the listener must be in WS_LISTENER_STATE_OPEN state, and the channel must be in WS_CHANNEL_STATE_CREATED state. For more information, see the <see cref="WS_LISTENER_STATE" /> and <see cref="WS_CHANNEL_STATE" /> enumerations.</para>
      <para>If a listener is in the <b>WS_LISTENER_STATE_FAULTED</b> state,
<b>WsAcceptChannel</b> immediately returns the <b>WS_E_OBJECT_FAULTED</b> error code. If an
application is calling <b>WsAcceptChannel</b> in a loop, the application must check for this
error, so it can end the loop.</para>
    </remarks>
  </member>
  <member name="Windows.WsAddCustomHeader">
    <summary>
      <para>Adds the specified application-defined header to the <a href="https://docs.microsoft.com//windows/desktop/wsw/message">message</a>.</para>
    </summary>
    <param name="message">
      <para>The message to which to add the header.</para>
      <para>The message can be in any state except <b>WS_MESSAGE_STATE_EMPTY</b> (see the <see cref="WS_MESSAGE_STATE" /> enumeration..</para>
    </param>
    <param name="headerDescription">
      <para>The <see cref="WS_ELEMENT_DESCRIPTION" /> structure that describes the header.</para>
    </param>
    <param name="writeOption">
      <para>Whether the header element is required, and how the value is allocated.
For more information, see the <see cref="WS_WRITE_OPTION" /> enumeration.</para>
    </param>
    <param name="value">
      <para>The header value to serialize.  For more information, see  the <see cref="WS_WRITE_OPTION" /> enumeration.</para>
    </param>
    <param name="valueSize">
      <para>The size of the value being serialized, in bytes.</para>
    </param>
    <param name="headerAttributes">
      <para>The values of the SOAP attributes for the header.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>There are multiple instances of the same type of header present in the message.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>WsAddCustomHeader</b> function is designed handle types of headers that are targeted at
the final receiver.  Headers targeted at another receiver are ignored.</para>
      <para>If you are replacing a header, call the <see cref="WsRemoveCustomHeader" /> function to remove
the existing instances of the header before calling <b>WsAddCustomHeader</b>.</para>
    </remarks>
  </member>
  <member name="Windows.WsAddErrorString">
    <summary>
      <para>Adds a specified error string to the error object.</para>
    </summary>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure representing the error object to which to add the string.</para>
    </param>
    <param name="string">
      <para>The string to add.  The error object will
make a copy of the string.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function requires that the string be in the language specified by the LANGID of the
error object.  You can retrieve this LANGID value by calling the  <see cref="WsGetErrorProperty" /> function with the WS_ERROR_PROPERTY_LANGID value of the <see cref="WS_ERROR_PROPERTY_ID" /> enumeration.</para>
    </remarks>
  </member>
  <member name="Windows.WsAddMappedHeader">
    <summary>
      <para>Adds a specified mapped header to the <a href="https://docs.microsoft.com//windows/desktop/wsw/message">message</a>.</para>
    </summary>
    <param name="message">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure representing the  <a href="https://docs.microsoft.com//windows/desktop/wsw/message">message</a> to to which to add the mapped header.</para>
      <para>The message can be in any state except <b>WS_MESSAGE_STATE_EMPTY</b> (see the <see cref="WS_MESSAGE_STATE" /> enumeration.</para>
    </param>
    <param name="headerName">
      <para>Pointer to a <see cref="WS_XML_STRING" /> containing the name of the header.</para>
    </param>
    <param name="valueType">
      <para>The type of header value to deserialize.  For possible types and the corresponding headers, see the <see cref="WS_HEADER_TYPE" /></para>
    </param>
    <param name="writeOption">
      <para>Whether the header is required, and how the value is allocated.
For more information, see the <see cref="WS_WRITE_OPTION" /> enumeration.</para>
    </param>
    <param name="value">
      <para>The header value to serialize.  For more information, see  the <see cref="WS_WRITE_OPTION" /> enumeration.</para>
    </param>
    <param name="valueSize">
      <para>The size of the value being serialized, in bytes.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A message may contain additional transport-specific information that is
not part of the message envelope.  This transport-specific information
can be exposed programmatically as headers of the message.
The <b>WsAddMappedHeader</b> function is used to add such a header that will be mapped into some
transport-specific location.</para>
      <para>When you use the HTTP channel, you must specify the required mappings  before before you call this function to add the headers.  For more information, see <see cref="WS_HTTP_MESSAGE_MAPPING" />.</para>
      <para>If you are replacing a header, call the <see cref="WsRemoveMappedHeader" /> function to remove
the existing instances of the header before you call <b>WsAddMappedHeader</b>.</para>
    </remarks>
  </member>
  <member name="Windows.WsAddressMessage">
    <summary>
      <para>Addresses a <a href="https://docs.microsoft.com//windows/desktop/wsw/message">message</a> to a specified <a href="https://docs.microsoft.com//windows/desktop/wsw/endpoint-address">endpoint address</a>.</para>
    </summary>
    <param name="message">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure representing the  message to be addressed.</para>
    </param>
    <param name="address">
      <para>Pointer to a <see cref="WS_ENDPOINT_ADDRESS" /> structure containing the endpoint  to which to address the message.</para>
      <para>
        <b>Note</b>  Passing <b>NULL</b> to this parameter indicates that no headers are added to the message.  This provides
a way to set the <see cref="WS_MESSAGE_PROPERTY_ID" /> to <b>WS_MESSAGE_PROPERTY_IS_ADDRESSED</b></para>
      <para>without modifying the set of headers in the message.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The message has already been addressed.
(The <b>WS_MESSAGE_PROPERTY_IS_ADDRESSED</b> property
indicates whether a message has already been addressed.)</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function can return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If you do not address a message by calling  this function, the <a href="https://docs.microsoft.com//windows/desktop/wsw/channel">channel</a> automatically addresses the message with the
<a href="https://docs.microsoft.com//windows/desktop/wsw/endpoint-address">Endpoint Address</a> passed to <see cref="WsOpenChannel" />.</para>
      <para>This function marks the message as addressed by setting
the  <b>WS_MESSAGE_PROPERTY_IS_ADDRESSED</b> property  to <b>TRUE</b>.</para>
      <para>This function fails
if the message has already been addressed and returns <b>WS_E_INVALID_OPERATION</b>.</para>
      <para>If a non-<b>NULL</b><see cref="WS_ENDPOINT_ADDRESS" /> is passed
to the function,  the function performs the following
additional steps:</para>
      <list type="bullet">
        <item>
          <description>The header type is set to WS_TO_HEADER (see the <see cref="WS_HEADER_TYPE" /> enumeration) and the address is set to the value of the <b>url</b> field of <see cref="WS_ENDPOINT_ADDRESS" />.  If the URL length
is zero the <see cref="WS_ADDRESSING_VERSION" />-specific
representation for an anonymous URL is set for the message.
</description>
        </item>
        <item>
          <description>Each header in the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> specified in the
headers field of the <see cref="WS_ENDPOINT_ADDRESS" /> is added to
the message.  No headers are added if the buffer is <b>NULL</b>.
</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.WsAlloc">
    <summary>
      <para>Allocates a segment of memory from the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a>.</para>
    </summary>
    <param name="heap">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> structure representing the heap from which to allocate the memory.</para>
    </param>
    <param name="size">
      <para>The number of bytes to allocate.  This value can be zero.</para>
    </param>
    <param name="ptr">
      <para>On success, a pointer that receives the address of the allocated memory. This pointer is valid until <see cref="WsFreeHeap" /> or <see cref="WsResetHeap" /> is called on the <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a>.</para>
      <para>The returned pointer is aligned on an 8-byte boundary.</para>
      <para>Zero byte allocations will return a non-NULL pointer.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The requested bytes, in addition to already allocated bytes, exceed the size of the <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a>, as specified by the <see cref="WS_HEAP_PROPERTY_MAX_SIZE" /> property.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The memory returned by this function is not zero initialized and contains undefined values.</para>
    </remarks>
  </member>
  <member name="Windows.WsAsyncExecute">
    <summary>
      <para>Helper function for implementing an <a href="https://docs.microsoft.com//windows/desktop/wsw/asynchronous-model">asynchronous</a> operation.</para>
    </summary>
    <param name="asyncState">
      <para>A pointer to the <see cref="WS_ASYNC_STATE" /> structure used during the asynchronous operation.  This is a state maintenance parameter not intended
for direct use.  The application must allocate  the <b>WS_ASYNC_STATE</b> structure and ensure that it
is kept alive during the entire asynchronous operation.  The <b>WS_ASYNC_STATE</b> structure can be reused after an
asynchronous operation has completed.</para>
    </param>
    <param name="operation">
      <para>Represents the initial asynchronous operation to be performed.</para>
    </param>
    <param name="callbackModel">
      <para>Indicates whether the callback is being invoked long or short.
For more information, see <see cref="WS_CALLBACK_MODEL" /></para>
    </param>
    <param name="callbackState">
      <para>A void pointer to a user-defined value that is passed to each <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_async_function">WS_ASYNC_FUNCTION</a>.</para>
    </param>
    <param name="asyncContext">
      <para>Pointer to information for invoking the function asynchronously. Pass <b>NULL</b> to invoke the function synchronously.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
    </returns>
    <remarks>
      <para>For an understanding of how WWSAPI handles asynchronous operations, see the <a href="https://docs.microsoft.com//windows/desktop/wsw/asynchronous-model">Asynchronous Model</a> topic.</para>
      <para>In many cases, an asynchronous operation is composed of other asynchronous operations. Each asynchronous operation may return WS_S_ASYNC indicating the callback will be invoked, or any other success or failure code, in which case the callback will not be invoked. The operation must be prepared to accept a <b>NULL</b> WS_ASYNC_CONTEXT indicating that the caller is requesting the operation to be performed synchronously. It must also ensure that the callback is invoked appropriately. In complex asynchronous operations,  <b>WsAsyncExecute</b> simplifies these details.</para>
      <para>
        <b>WsAsyncExecute</b> operates by invoking a user-defined callback which can initiate an asynchrnous operation and indicate a function to be invoked when the asynchronous operation is complete. This sequence continues until the callback does not set another function to invoke. At this point, the callback specified by the WS_ASYNC_CONTEXT will be invoked if any of the operations completed asynchronously.</para>
      <para>The <see cref="WS_ASYNC_STATE" /> parameter is used by <b>WsAsyncExecute</b> to maintain its state, and is not intended to be initialized, inspected, or used by the caller. The caller however, must allocate the <b>WS_ASYNC_STATE</b> and ensure that it is kept alive during the entire asynchronous operation. The <b>WS_ASYNC_STATE</b> may be reused once the asynchronous operation is complete.</para>
      <para>The examples <a href="https://docs.microsoft.com//windows/desktop/wsw/asyncadd3explicitexample">AsyncAdd3ExplicitExample</a> and <a href="https://docs.microsoft.com//windows/desktop/wsw/asyncadd3implicitexample">AsyncAdd3ImplicitExample</a> demonstrate implementing
the same asynchronous function manually using <b>WsAsyncExecute</b>.</para>
    </remarks>
  </member>
  <member name="Windows.WsCall">
    <summary>
      <para>Used internally by the <a href="https://docs.microsoft.com//windows/desktop/wsw/service-proxy">service proxy</a>  to format the specified arguments according to the specified metadata and send them in a message. The application should
never call this function directly.</para>
    </summary>
    <param name="serviceProxy">
      <para>Pointer to a WS_SERVICE_PROXY structure representing the service proxy.</para>
    </param>
    <param name="operation">
      <para>Pointer to a <see cref="WS_OPERATION_DESCRIPTION" /> structure containing the metadata for the call.</para>
    </param>
    <param name="arguments">
      <para>An array of pointers to the individual arguments for the service operation being represented by the <i>operation</i> parameter.</para>
      <para>The number of elements must correspond to the number of parameters specified as part of WS_OPERATION_DESCRIPTION in
the operation parameter.</para>
    </param>
    <param name="heap">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> structure representing the <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a> from which memory is allocated for the call.</para>
    </param>
    <param name="callProperties">
      <para>An array of <see cref="WS_CALL_PROPERTY" /> structures containing the call properties.</para>
    </param>
    <param name="callPropertyCount">
      <para>The number of properties in the call properties array.</para>
    </param>
    <param name="asyncContext">
      <para>Pointer to information for invoking the function asynchronously. Pass <b>NULL</b> to invoke the function synchronously.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABANDONED</b>
            </para>
          </description>
          <description>
            <para>The operation was abandoned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsCheckMustUnderstandHeaders">
    <summary>
      <para>Verifies that the specified headers were understood by the receiver.
<b>Note</b>  This function should be called after all headers have been read for a received
message.</para>
    </summary>
    <param name="message">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure containing the headers to be understood.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  where additional error information is stored if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The message is not in the correct state.
For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The  validation failed, or the message was not correctly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Because the set of headers is extensible, it is necessary to determine whether a message has  been sufficiently understood to be processed. Therefore, the sender can use this function to indicate which headers must be understood, which headers can be treated as optional or informational.</para>
      <para>Standard addressing headers, such as the ones defined in <see cref="WS_HEADER_TYPE" />, are automatically assumed to be understood, even if they are never read by calling <see cref="WsGetHeader" />.</para>
      <para>Custom, application-defined headers that are read by <see cref="WsGetCustomHeader" /> are also assumed to be understood. Calling <b>WsGetCustomHeader</b> will automatically mark the particular header as understood.</para>
      <para>For any  other header processed by the application, the application must explicitly mark the header as understood by calling <see cref="WsMarkHeaderAsUnderstood" />. Otherwise, the header is considered to not be understood.</para>
      <para>This function should be called after all headers have been read for a received message. An exception to having to call this function is the case of an intermediary that forwards the message to another node without changing its identity (message ID), since the final node will do the check.</para>
      <para>The function will fail if any of the specified headers were not understood. If an error object is supplied to the function, it will be populated with information that can be used to send a fault (see <see cref="WsCreateFaultFromError" />).</para>
      <para>The message must be in the WS_MESSAGE_STATE_READING state.</para>
    </remarks>
  </member>
  <member name="Windows.WsCloseChannel">
    <summary>
      <para>Closes a specified <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">channel</a>.</para>
    </summary>
    <param name="channel">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> structure representing the channel to close.</para>
    </param>
    <param name="asyncContext">
      <para>Pointer to a <see cref="WS_ASYNC_CONTEXT" /> data structure containing information for invoking the function asynchronously.  Pass a <b>NULL</b></para>
      <para>value to call the function synchronously.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  where additional error information is stored if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The channel closure was aborted by a call to <see cref="WsAbortChannel" /> while the channel was closing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The channel was in an inappropriate state (see the Remarks section).</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If you open a channel or successfully accept a channel, you must close it when it is no longer needed. After a channel has been closed, the associated resources can safely be  freed.</para>
      <para>The channel-closing process will wait for any already initiated, pending I/O to complete.</para>
      <para>If there are no messages currently being read or written for the channel, the channel attempts a graceful shutdown. Otherwise, all I/O still pending on the channel itself is aborted and the channel does a rude shutdown.</para>
      <para>If the channel attempts a graceful shutdown but encounters an error, <b>WsCloseChannel</b> will return an error, but the channel will still be closed.</para>
      <para>This operation is allowed only if the channel is in WS_CHANNEL_STATE_OPEN or WS_CHANNEL_STATE_FAULTED states.</para>
      <para>Closing a channel automatically disassociates any messages that are in the
process of being read or written. Therefore, it is not necessary to call
<see cref="WsAbandonMessage" /> before calling <b>WsCloseChannel</b>).</para>
    </remarks>
  </member>
  <member name="Windows.WsCloseListener">
    <summary>
      <para>Causes the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">listener</a>  to stop listening.</para>
    </summary>
    <param name="listener">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> structure representing the listener  to close.</para>
    </param>
    <param name="asyncContext">
      <para>Pointer to a <see cref="WS_ASYNC_CONTEXT" /> structure containing information for invoking the function asynchronously. Pass <b>NULL</b> to invoke the function synchronously.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The close was aborted by a call to <see cref="WsAbortListener" /> as the listener was closing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The listener was in an inappropriate state.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>After the listener is closed, the listener can safely be released.</para>
      <para>This operation is allowed for listener in the   <b>WS_LISTENER_STATE_OPEN</b> or
<b>WS_LISTENER_STATE_FAULTED</b> state.
(For listener states, see the <see cref="WS_LISTENER_STATE" /> enumeration.)</para>
      <para>When a listener is closed, any pending attempts to accept a channel with the <see cref="WsAcceptChannel" /> method are aborted. However, <b>WsCloseListener</b> waits for any pending I/O to complete before proceeding with the closing process.</para>
    </remarks>
  </member>
  <member name="Windows.WsCloseServiceHost">
    <summary>
      <para>Closes down communication with the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/service-host">service host</a>.</para>
    </summary>
    <param name="serviceHost">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-host">WS_SERVICE_HOST</a> structure that represents the service host to be closed.</para>
    </param>
    <param name="asyncContext">
      <para>Pointer to a <see cref="WS_ASYNC_CONTEXT" /> structure containing information for invoking the function asynchronously. Pass <b>NULL</b> to invoke the function synchronously.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The current state of the service host is not valid for this operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsCloseServiceHost</b> closes all  listeners on the service host. As a result, no new
channels are accepted from the client. However, pending I/O on  channels already accepted
is allowed to complete.</para>
      <para>This has implications for endpoints configured to run with session-based channel bindings. If a client has an open session with a service on such an endpoint, the
closure will not complete until the client closes the session with the service.</para>
    </remarks>
  </member>
  <member name="Windows.WsCloseServiceProxy">
    <summary>
      <para>Closes down communication with the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/service-proxy">service proxy</a>.</para>
    </summary>
    <param name="serviceProxy">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-proxy">WS_SERVICE_PROXY</a> structure representing he service proxy to be closed.</para>
    </param>
    <param name="asyncContext">
      <para>Pointer to a <see cref="WS_ASYNC_CONTEXT" /> structure containing information for invoking the function asynchronously. Pass <b>NULL</b> to invoke the function synchronously.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The current state of the service proxy is not valid for this operation. This is only
error for which close will fail.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The underlying <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> was disconnected during the close operation. This error occurs only in cases where the underlying channel is session based.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a service operation call is pending on the service proxy, <b>WsCloseServiceProxy</b> waits for each call to complete. After calling <b>WsCloseServiceProxy</b> application should not perform any more calls on the service proxy.</para>
      <para>Note that WS_E_INVALID_OPERATION is the only
error code that indicates that  closure has failed. Other error codes indicate that the operation succeeded, and the error code is for informational purposes only.</para>
    </remarks>
  </member>
  <member name="Windows.WsCombineUrl">
    <summary>
      <para>Produces an absolute URL from a specified URL reference (absolute or relative URL) and a specified absolute base URL.</para>
    </summary>
    <param name="baseUrl">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_STRING</a> structure containing an absolute URL in encoded format.</para>
    </param>
    <param name="referenceUrl">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_STRING</a> structure  containing an absolute or relative URL in encoded format.</para>
    </param>
    <param name="flags">
      <para>Controls the  format of the resulting URL.  For more information, see <see cref="WS_URL_FLAGS" />.</para>
    </param>
    <param name="heap">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> object from which the memory for the resulting URL is allocated.</para>
    </param>
    <param name="resultUrl">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_STRING</a> structure that receives the resulting URL.
This is an absolute URL in encoded format.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The base URL or reference URL was not in the correct format, or
had a scheme that was not recognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the reference URL is absolute, it is returned unchanged, if the specified flags permit.
If the reference URL is relative, it is combined with the base URL before being returned.</para>
      <para>Only the schemes listed in <see cref="WS_URL_SCHEME_TYPE" /> are supported.</para>
    </remarks>
  </member>
  <member name="Windows.WsCopyError">
    <summary>
      <para>Copies an error object from a specified source  to a specified destination.</para>
    </summary>
    <param name="source">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure representing the error object to copy.</para>
    </param>
    <param name="destination">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure that receives the copied error object.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One of the error objects is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsCopyNode">
    <summary>
      <para>Copies the current node from the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/xml-reader">XML reader</a> to the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/xml-writer">XML writer</a>.</para>
    </summary>
    <param name="writer">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> to which to copy the XML node.</para>
    </param>
    <param name="reader">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a>   from which to copy the XML node.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the current node type is WS_XML_NODE_TYPE_ELEMENT,the current node,
all its children, and the corresponding end element, are copied to the XML writer.</para>
      <para>If the current node type is WS_XML_NODE_TYPE_BOF, nodes are copied
until a node of type WS_XML_NODE_TYPE_EOF is reached.
For information on node types, see the <see cref="WS_XML_NODE_TYPE" /> enumeration.</para>
      <para>The reader will be positioned on the node following the node copied.</para>
    </remarks>
  </member>
  <member name="Windows.WsCountOf">
    <summary>
      <para>Returns the number of elements a specified array.</para>
    </summary>
    <param name="arrayValue">
      <para>The array of objects  for which for which to get the count.
The array type can be either a valid C data type or user defined data type. The array must be static.</para>
    </param>
  </member>
  <member name="Windows.WsCreateChannel">
    <summary>
      <para>Creates a <a href="https://docs.microsoft.com//windows/desktop/wsw/channel">channel</a> for message exchange with an endpoint.</para>
    </summary>
    <param name="channelType">
      <para>The type of the channel. For channel types, see the <see cref="WS_CHANNEL_TYPE" /> enumeration. This represents the message exchange pattern for the channel being created.</para>
    </param>
    <param name="channelBinding">
      <para>The channel <a href="https://docs.microsoft.com//windows/desktop/wsw/binding">binding</a>, indicating the protocol stack to use for the new channel.
For available channel bindings, see the <see cref="WS_CHANNEL_BINDING" /> enumeration.</para>
    </param>
    <param name="properties">
      <para>An array of  <see cref="WS_CHANNEL_PROPERTY" />  structures  containing optional values for channel initialization.  The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
      <para>For information on which channel properties can be specified when you create a channel, see the <see cref="WS_CHANNEL_PROPERTY_ID" /> enumeration.</para>
      <para>For information on creating a custom channel, see the Remarks section.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="securityDescription">
      <para>Pointer to a <see cref="WS_SECURITY_DESCRIPTION" />  structure specifying the security for the channel.</para>
      <para>If you are creating a custom channel (using the WS_CUSTOM_CHANNEL_BINDING value of the <see cref="WS_CHANNEL_BINDING" /> enumeration), the security description must be <b>NULL</b>. See the Remarks section.</para>
    </param>
    <param name="channel">
      <para>Pointer that receives the address of the created channel.
When the channel  is no longer needed, you must free  it by calling <see cref="WsFreeChannel" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <see cref="WsOpenChannel" /> function to initiate  communication on the channel and to specify the endpoint.</para>
      <para>When you create a custom channel (using the WS_CUSTOM_CHANNEL_BINDING value of the <see cref="WS_CHANNEL_BINDING" /> enumeration), you can specify only the following channel properties:</para>
      <list type="bullet">
        <item>
          <description>WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_CALLBACKS </description>
        </item>
        <item>
          <description>WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS</description>
        </item>
      </list>(See the <see cref="WS_CHANNEL_PROPERTY_ID" /> enumeration) If initial properties are required to create the custom channel, specify them by using the WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS property.
<para>To pass security information to a custom channel implementation, use the WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS value of the  <see cref="WS_CHANNEL_PROPERTY_ID" /> enumeration.</para></remarks>
  </member>
  <member name="Windows.WsCreateChannelForListener">
    <summary>
      <para>Creates a <a href="https://docs.microsoft.com//windows/desktop/wsw/channel">channel</a> associated with a specified <a href="https://docs.microsoft.com//windows/desktop/wsw/listener">listener</a>.</para>
    </summary>
    <param name="listener">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> structure representing the listener for which to create a channel.  The listener
can be in any state. (For listener states, see the <see cref="WS_LISTENER_STATE" />  enumeration.)</para>
    </param>
    <param name="properties">
      <para>An array of  <see cref="WS_CHANNEL_PROPERTY" /> structures containing optional values for channel initialization.  This can be a <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
      <para>For information on creating a custom channel, see the Remarks section.</para>
    </param>
    <param name="propertyCount">
      <para>The number of  properties in the <i>properties</i> array.</para>
    </param>
    <param name="channel">
      <para>On success, a pointer that receives the address of the created channel.
When the channel  is no longer needed, you must free  it by calling <see cref="WsFreeChannel" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To accept an incoming message exchange, call the <see cref="WsAcceptChannel" /> function.</para>
      <para>The security characteristics of the channel are the same as those
specified for the listener.</para>
      <para>When you create a custom channel (using the WS_CUSTOM_CHANNEL_BINDING value of the <see cref="WS_CHANNEL_BINDING" /> enumeration), you can specify only the following channel properties:</para>
      <list type="bullet">
        <item>
          <description>WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_CALLBACKS </description>
        </item>
        <item>
          <description>WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS</description>
        </item>
      </list>If initial properties are required to create the custom channel, specify them by using the WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS property.
</remarks>
  </member>
  <member name="Windows.WsCreateError">
    <summary>
      <para>Creates an error object that can passed to functions to record rich error information.</para>
    </summary>
    <param name="properties">
      <para>An array of  <see cref="WS_ERROR_PROPERTY" /> structures containing optional error properties.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="error">
      <para>On success, a pointer that receives the address of the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure representing the created error object.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you no long need the error object, free it by calling  the <see cref="WsFreeError" /> function.</para>
      <para>By default, the
language of any language-dependent information in the error object is  the current
user default UI language. However, you can change the language by setting
the WS_ERROR_PROPERTY_LANGID property. See the the <see cref="WS_ERROR_PROPERTY_ID" /> enumeration.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateFaultFromError">
    <summary>
      <para>Constructs a <see cref="WS_FAULT" />  from a specified error object.</para>
    </summary>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure representing the error object from which to construct the fault.</para>
    </param>
    <param name="faultErrorCode">
      <para>The HRESULT error code returned from the function that failed.
The HRESULT value cannot be a success code.</para>
      <para>This error code is never included in the fault directly, but is used as a fallback mechanism for creating a fault string if the error object does not contain any error strings.</para>
    </param>
    <param name="faultDisclosure">
      <para>
        <see cref="WS_FAULT_DISCLOSURE" /> enumeration that controls
what information is copied from
the error object to the fault object.</para>
    </param>
    <param name="heap">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> structure representing the <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a> from which to allocate memory for the returned fault object.</para>
    </param>
    <param name="fault">
      <para>Pointer to a <see cref="WS_FAULT" /> structure representing the returned fault object.  The fields of the fault object are good until
<see cref="WsFreeHeap" /> or <see cref="WsResetHeap" /> is called to release the specified heap resources.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the error object contains a fault (that is, the WS_FAULT_ERROR_PROPERTY_FAULT value of <see cref="WS_FAULT_ERROR_PROPERTY_ID" />   is non-<b>NULL</b>), then that fault is selected to construct the returned fault.</para>
      <para>If the error object does not contain a fault (WS_FAULT_ERROR_PROPERTY_FAULT is <b>NULL</b>),  a generic fault with a generic fault code (and no reason text) is selected to construct the returned fault.</para>
      <para>If the selected fault does not include any reason text,  the fault reason
text is constructed according to the value of <i>disclosure</i> parameter:</para>
      <list type="bullet">
        <item>
          <description>WS_FULL_FAULT_DISCLOSURE
All the error strings present in the error object are appended together
to form the reason text.  If there are no strings, the string associated
with the <i>errorCode</i> parameter is used.
</description>
        </item>
        <item>
          <description>WS_MINIMAL_FAULT_DISCLOSURE
A generic error string is used.
</description>
        </item>
      </list>
      <para>By default, the
language of any language-dependent information in the error object is  the current
user default UI language. However, you can change the language by setting
the WS_ERROR_PROPERTY_LANGID property. See the the <see cref="WS_ERROR_PROPERTY_ID" /> enumeration.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateHeap">
    <summary>
      <para>Creates a <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a> object.</para>
    </summary>
    <param name="maxSize">
      <para>The total number of bytes that can be allocated from the heap.  The total
number of bytes is defined as sum of the sizes passed in all the calls to
the <see cref="WsAlloc" /> function since the heap was created or reset.</para>
    </param>
    <param name="trimSize">
      <para>The maximum number of bytes of memory that the heap
retains after the heap has been reset by a call to the  <see cref="WsResetHeap" /> function.  This is an approximation value due to heap overhead.  <b>Note</b>  If the
value of <i>trimSize</i> is larger than the value of  <i>maxSize</i>,  the size of the
heap will not be adjusted to the desired size.</para>
    </param>
    <param name="properties">
      <para>Reserved for future use; set to <b>NULL</b>.</para>
    </param>
    <param name="propertyCount">
      <para>Reserved for future use; set to 0 (zero).</para>
    </param>
    <param name="heap">
      <para>On   success, pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> structure representing the new heap object.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
    </returns>
    <remarks>
      <para>A heap in Windows Web Services API  is a memory allocation used for <a href="https://docs.microsoft.com//windows/desktop/wsw/message">messages</a>.  Heaps can also be used to store message data separately from the lifetime of a message. Some API functions allow for  explicit heap control over the lifetime of any data read.</para>
      <para>Creating new heap does not allocate any memory (except the memory necessary for  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> structure itself).
The parameters <i>maxSize</i> and <i>trimSize</i> are used  as quotas onlyduring <see cref="WsAlloc" /> and <see cref="WsResetHeap" /> operations.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateListener">
    <summary>
      <para>Creates a <a href="https://docs.microsoft.com//windows/desktop/wsw/listener">listener</a> with the specified properties.</para>
    </summary>
    <param name="channelType">
      <para>The type of channel the listener listens for. For channel types, see the <see cref="WS_CHANNEL_TYPE" /> enumeration.</para>
    </param>
    <param name="channelBinding">
      <para>The channel protocol for the listener.
For possible bindings, see the <see cref="WS_CHANNEL_BINDING" /> enumeration.</para>
    </param>
    <param name="properties">
      <para>Pointer to a <see cref="WS_LISTENER_PROPERTY" /> structure containing optional properties for the  listener.</para>
      <para>For information on which properties you can specify when creating a listener, see the  <see cref="WS_LISTENER_PROPERTY_ID" /> enumeration.</para>
      <para>For information on creating a custom listener, see the Remarks section.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="securityDescription">
      <para>Pointer to a <see cref="WS_SECURITY_DESCRIPTION" />  structure specifying the security for the listener.</para>
      <para>If you are creating a custom channel (using the WS_CUSTOM_CHANNEL_BINDING value of the <see cref="WS_CHANNEL_BINDING" /> enumeration), the security description must be <b>NULL</b>. See the Remarks section.</para>
    </param>
    <param name="listener">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> structure representing the new listener.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you create a custom listener (using the WS_CUSTOM_CHANNEL_BINDING value of the <see cref="WS_CHANNEL_BINDING" /> enumeration), you can specify only the following channel properties:</para>
      <list type="bullet">
        <item>
          <description>WS_LISTENER_PROPERTY_CUSTOM_LISTENER_CALLBACKS</description>
        </item>
        <item>
          <description>WS_LISTENER_PROPERTY_CUSTOM_LISTENER_PARAMETERS</description>
        </item>
      </list>(See the <see cref="WS_LISTENER_PROPERTY_ID" /> enumeration.) If other initial properties are required to create the custom listener, specify them by using the WS_LISTENER_PROPERTY_CUSTOM_LISTENER_PARAMETERS property.
<para>To pass security information to a custom listener implementation, use the WS_LISTENER_PROPERTY_CUSTOM_LISTENER_PARAMETERS value of the  <see cref="WS_LISTENER_PROPERTY_ID" /> enumeration.</para></remarks>
  </member>
  <member name="Windows.WsCreateMessage">
    <summary>
      <para>Creates a <a href="https://docs.microsoft.com//windows/desktop/wsw/message">message</a> object with the specified properties.</para>
    </summary>
    <param name="envelopeVersion">
      <para>A <see cref="WS_ENVELOPE_VERSION" /> enumeration value that specifies the version of the envelope for the message.</para>
    </param>
    <param name="addressingVersion">
      <para>A <see cref="WS_ADDRESSING_VERSION" /> that specifies the version of the addressing for the message.</para>
    </param>
    <param name="properties">
      <para>An array of optional properties for the message. See <see cref="WS_MESSAGE_PROPERTY" />.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="message">
      <para>On   success, a pointer that receives the address of a  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure representing the new message.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeMessage" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A message object is the delivery vehicle for Windows Web Services. A single message object can be used to send or  receive sequential messages. Reusing a message object in this way can reduce memory allocations.
When you no longer need the message, you must free the memory by calling <see cref="WsFreeMessage" />. (For more information on reusing message objects, see <see cref="WsResetMessage" /> .)</para>
      <para>If you are creating a message for use with a particular channel,  use the <see cref="WsCreateMessageForChannel" /> function, which will ensure the correct message version for the channel.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateMessageForChannel">
    <summary>
      <para>Creates a <a href="https://docs.microsoft.com//windows/desktop/wsw/message">message</a> for use with a specified <a href="https://docs.microsoft.com//windows/desktop/wsw/channel">channel</a>.</para>
    </summary>
    <param name="channel">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> structure representing the channel for the message.</para>
    </param>
    <param name="properties">
      <para>An array of optional properties for the message. See <see cref="WS_MESSAGE_PROPERTY" />.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="message">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure representing the new message.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeMessage" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>In contrast to the more general  <see cref="WsCreateMessage" /> function,  <b>WsCreateMessageForChannel</b> ensures that
the message version used is appropriate for the channel.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateMetadata">
    <summary>
      <para>Creates a metadata object that is used to collect and process metadata documents.</para>
    </summary>
    <param name="properties">
      <para>An array of <see cref="WS_METADATA_PROPERTY" /> structures containing optional properties for the metadata.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="metadata">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-metadata">WS_METADATA</a> structure representing the new message.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeMetadata" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsCreateReader">
    <summary>
      <para>Creates an <a href="https://docs.microsoft.com//windows/desktop/wsw/xml-reader">XML reader</a> with the specified properties.</para>
    </summary>
    <param name="properties">
      <para>An array of <see cref="WS_XML_READER_PROPERTY" /> structures containing optional properties for the XML reader.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
      <para>For the properties that tiy can use to configure the XML reader, see the <see cref="WS_XML_READER_PROPERTY_ID" /> enumeration.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="reader">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> structure representing the new XML reader.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeReader" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
    </returns>
    <remarks>
      <para>Use <see cref="WsSetInput" /> or <see cref="WsSetInputToBuffer" /> functions to choose the encoding for the XML reader and to indicate the source of the input.</para>
      <para>If <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_read_callback">WS_READ_CALLBACK</a> is specified in the <see cref="WS_XML_READER_INPUT" /> structure passed to the <see cref="WsSetInput" /> function, the XML reader reads
additional data only when <see cref="WsFillReader" /> is called.  This allows the caller to determine
at what granularity to read data and whether to read that data asynchronously.</para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> structure can be reused by calling <see cref="WsSetInput" /> or <see cref="WsSetInputToBuffer" /> again.</para>
      <para>If any API operation that operates on an <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> fails the XML reader is left in a faulted state
and further function calls return <b>WS_E_OBJECT_FAULTED</b>.  (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.) The only possible function calls for the XML reader
if this occurs are <see cref="WsSetInput" /> and <see cref="WsSetInputToBuffer" /> for returning the XML reader to a usable state,
or <see cref="WsFreeReader" /> for releasing the XML reader object.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateServiceEndpointFromTemplate">
    <summary>
      <para>Helper routine for creating a service endpoint (<see cref="WS_SERVICE_ENDPOINT" />) from policy templates.</para>
    </summary>
    <param name="channelType">
      <para>A <see cref="WS_CHANNEL_TYPE" /> enumeration value representing the type of channel hosted by the endpoint.</para>
    </param>
    <param name="properties">
      <para>An array of <see cref="WS_SERVICE_ENDPOINT_PROPERTY" />  structures containing  properties for the service endpoint. (Application should fill in channel properties in the template structure.)</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="addressUrl">
      <para>The URL address on which the endpoint is  to listen.</para>
    </param>
    <param name="contract">
      <para>A <see cref="WS_SERVICE_CONTRACT" /> structure representing the contract of the endpoint.</para>
    </param>
    <param name="authorizationCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_service_security_callback">WS_SERVICE_SECURITY_CALLBACK</a> authorization callback for the service endpoint.</para>
    </param>
    <param name="heap">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a> from which memory for the  service endpoint is allocated on successful return.</para>
    </param>
    <param name="templateType">
      <para>A <see cref="WS_BINDING_TEMPLATE_TYPE" /> enumeration value representing the type of templates being used to create the service endpoint.</para>
    </param>
    <param name="templateValue">
      <para>Optional template structure to be created and filled in by application.
The template must be consistent with the input template type (passed in the <i>templateType</i>  parameter). When the <i>templateValue</i> parameter is <b>NULL</b>,
it is equivalent to the corresponding template structure initialized to zero.</para>
    </param>
    <param name="templateSize">
      <para>The size, in bytes, of the input templateValue structure.</para>
    </param>
    <param name="templateDescription">
      <para>The description of template structure (passed in the <i>templateValue</i> parameter). Needs to match templateType.</para>
    </param>
    <param name="templateDescriptionSize">
      <para>The size of the template description.</para>
    </param>
    <param name="serviceEndpoint">
      <para>On   success, a pointer that receives the address of the  <see cref="WS_SERVICE_ENDPOINT" /> structure representing the new service endpoint.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
    </returns>
    <remarks>
      <para>
        <b>WsCreateServiceEndpointFromTemplate</b> creates the <see cref="WS_SERVICE_ENDPOINT" /> structure from the specified input policy templates and additional user input.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateServiceHost">
    <summary>
      <para>Creates a <a href="https://docs.microsoft.com//windows/desktop/wsw/service-host">service host</a> for the specified endpoints.</para>
    </summary>
    <param name="endpoints">
      <para>An array of  <see cref="WS_SERVICE_ENDPOINT" /> structures representing the service endpoints for which to create the service host.</para>
    </param>
    <param name="endpointCount">
      <para>The number of endpoints in the <i>endpoints</i> array.</para>
    </param>
    <param name="serviceProperties">
      <para>An array of <see cref="WS_SERVICE_PROPERTY" /> structures containing optional properties for the service host.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>servicePropertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="servicePropertyCount">
      <para>The number of properties in the <i>serviceProperties</i> array.</para>
    </param>
    <param name="serviceHost">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-host">WS_SERVICE_HOST</a> structure representing the new service host.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeServiceHost" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An invalid argument is specified for creating the service host.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsCreateServiceProxy">
    <summary>
      <para>Creates a  <a href="https://docs.microsoft.com//windows/desktop/wsw/service-proxy">service proxy</a> with the specified properties.</para>
    </summary>
    <param name="channelType">
      <para>A <see cref="WS_CHANNEL_TYPE" /> enumeration value representing the channel type for the service proxy.</para>
    </param>
    <param name="channelBinding">
      <para>A <see cref="WS_CHANNEL_BINDING" /> enumeration value representing the channel binding.</para>
    </param>
    <param name="securityDescription">
      <para>A <see cref="WS_SECURITY_DESCRIPTION" /> structure representing the security description.</para>
    </param>
    <param name="properties">
      <para>An array of <see cref="WS_PROXY_PROPERTY" /> structures containing optional properties for the service proxy.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="channelProperties">
      <para>An array of  <see cref="WS_CHANNEL_PROPERTY" />  structures containing optional channel properties.  The value of this parameter may be <b>NULL</b>, in which case, the <i>channelPropertyCount</i> parameter must be 0 (zero).</para>
      <para>
        <b>Note</b>  Be very careful about modifying the default values for these properties.</para>
    </param>
    <param name="channelPropertyCount">
      <para>The number of properties in the <i>channelProperties</i> array.</para>
    </param>
    <param name="serviceProxy">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-proxy">WS_SERVICE_PROXY</a> structure representing the new service proxy.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeServiceProxy" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsCreateServiceProxyFromTemplate">
    <summary>
      <para>Helper routine for creating a <a href="https://docs.microsoft.com//windows/desktop/wsw/service-proxy">service proxy</a> from policy templates.</para>
    </summary>
    <param name="channelType">
      <para>A <see cref="WS_CHANNEL_TYPE" /> enumeration value representing the channel type for the service proxy.</para>
    </param>
    <param name="properties">
      <para>An array of <see cref="WS_PROXY_PROPERTY" /> structures containing optional properties for the service proxy.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="templateType">
      <para>A <see cref="WS_BINDING_TEMPLATE_TYPE" /> enumeration value representing the type of templates  used to create the service proxy.</para>
      <para>Please see the <b>Remarks</b> for more information.</para>
    </param>
    <param name="templateValue">
      <para>The optional template structure to be created and filled in by an application. This template structure must be consistent with the input template type (in the <i>templateType</i>). When <i>templateValue</i> parameter is <b>NULL</b>, it is equivalent to the corresponding template structure initialized to zero.</para>
      <para>Please see the <b>Remarks</b> for more information.</para>
    </param>
    <param name="templateSize">
      <para>The size, in bytes, of the template structure (in the  <i>templateValue</i> parameter).</para>
    </param>
    <param name="templateDescription">
      <para>The description of <i>templateValue</i>. This must match <i>templateType</i>.</para>
      <para>Please see the <b>Remarks</b> for more information.</para>
    </param>
    <param name="templateDescriptionSize">
      <para>The size of the template description.</para>
    </param>
    <param name="serviceProxy">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-proxy">WS_SERVICE_PROXY</a> structure representing the new service proxy.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeServiceProxy" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
    </returns>
    <remarks>
      <para>
        <b>WsCreateServiceProxyFromTemplate</b> creates the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-proxy">WS_SERVICE_PROXY</a> structure from input policy templates and additional user input.</para>
      <para>The following table shows the mapping between <i>templateType</i> values and the corresponding data types to be used in <i>templateValue</i> and <i>templateDescription</i>.</para>
      <list type="table">
        <listheader>
          <description>templateType</description>
          <description>templateValue</description>
          <description>templateDescription</description>
        </listheader>
        <item>
          <description>WS_HTTP_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_BINDING_TEMPLATE</description>
          <description>WS_HTTP_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_HTTP_SSL_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_SSL_BINDING_TEMPLATE</description>
          <description>WS_HTTP_SSL_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE</description>
          <description>WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE</description>
          <description>WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE</description>
          <description>WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE</description>
          <description>WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_TCP_BINDING_TEMPLATE_TYPE</description>
          <description>WS_TCP_BINDING_TEMPLATE</description>
          <description>WS_TCP_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_TCP_SSPI_BINDING_TEMPLATE_TYPE</description>
          <description>WS_TCP_SSPI_BINDING_TEMPLATE</description>
          <description>WS_TCP_SSPI_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE_TYPE</description>
          <description>WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE</description>
          <description>WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE</description>
          <description>WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE</description>
          <description>WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE</description>
          <description>WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE</description>
          <description>WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE</description>
          <description>WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE</description>
          <description>WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE</description>
          <description>WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION</description>
        </item>
        <item>
          <description>WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE</description>
          <description>WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE</description>
          <description>WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.WsCreateWriter">
    <summary>
      <para>creates an <a href="https://docs.microsoft.com//windows/desktop/wsw/xml-writer">XML Writer</a> with the specified properties.</para>
    </summary>
    <param name="properties">
      <para>An array of <see cref="WS_XML_WRITER_PROPERTY" /> structures containing optional properties for the XML writer.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="writer">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> structure representing the created XML writer.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeWriter" />.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <see cref="WsSetOutput" /> or <see cref="WsSetOutputToBuffer" /> functions to choose the encoding of the XML writer and to indicate where to direct the output.</para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> can be reused by calling <see cref="WsSetOutput" /> or <see cref="WsSetOutputToBuffer" /> again.</para>
      <para>See <see cref="WS_XML_WRITER_PROPERTY_ID" /> for the properties that can be used to configure the writer.</para>
      <para>The XML writer buffers all data until <see cref="WsFlushWriter" /> is called.  This allows the caller to determine at what granularity to write data and to whether to write that data asynchronously.  Data is not written until <b>WsFlushWriter</b> is called.</para>
      <para>If an operation on a  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> fails the writer is left in a faulted state and further calls to the Writer return <b>WS_E_OBJECT_FAULTED</b>.  (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)The only possible function calls for the XML writer if this occurs are <see cref="WsSetOutput" /> and <see cref="WsSetOutputToBuffer" /> to return the XML writer to a usable state, or <see cref="WsFreeWriter" /> to free the XML writer.</para>
    </remarks>
  </member>
  <member name="Windows.WsCreateXmlBuffer">
    <summary>
      <para>Creates an <a href="https://docs.microsoft.com//windows/desktop/wsw/xml-buffer">XML Buffer</a> which can be used to process XML data .</para>
    </summary>
    <param name="heap">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> structure representing the <a href="https://docs.microsoft.com//windows/desktop/wsw/heap">heap</a> from which to allocate memory for the returned XML buffer.</para>
    </param>
    <param name="properties">
      <para>An array of <see cref="WS_XML_BUFFER_PROPERTY" /> structures containing optional properties for the XML buffer.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="buffer">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> structure representing the created XML buffer. The memory for this buffer is released when its heap is reset or released.</para>
      <para>The XML buffer is initially  empty.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsCreateXmlSecurityToken">
    <summary>
      <para>Creates a security token from its specified XML form.</para>
    </summary>
    <param name="tokenXml">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> structure containing  the security token in its XML form.    The referenced buffer must have exactly
one top level XML element.</para>
    </param>
    <param name="tokenKey">
      <para>Pointer to a <b>SECURITY_KEY_HANDLE</b> structure that may or may not contain a cryptographic proof-of-possession key. If present the key can be used to bind
this security token to a message.  If the value of the <i>tokenKey</i> parameter is not <b>NULL</b>, the token is
assumed to have a proof-of-possession key.  If the value  is <b>NULL</b>, the structure is
assumed to be a "bearer token" as defined below.</para>
      <list type="bullet">
        <item>
          <description> A bearer token also called a basic or keyless token is serialized in a message to demonstrate
the message's possession of the token, and to indicate the intention to apply the claims from the token to that message.
</description>
        </item>
        <item>
          <description> A proof-of-possession token also called a PoP or
cryptographic token has an associated
cryptographic key which must be used to "sign" a message in order to
demonstrate possession of the token and to indicate the intention to
apply the claims from the token to that message.  An example is an
X.509 certificate: the message must be signed with the private key of
the certificate in order for a receiving principal to accept the
message as carrying the claims present in the certificate.
</description>
        </item>
      </list>
    </param>
    <param name="properties">
      <para>An array of  <see cref="WS_XML_SECURITY_TOKEN_PROPERTY" /> structures containing optional properties for the XML security token.</para>
      <para>The value of this parameter may be <b>NULL</b>, in which case, the <i>propertyCount</i> parameter must be 0 (zero).</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties in the <i>properties</i> array.</para>
    </param>
    <param name="token">
      <para>On   success, a pointer that receives the address of the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-security-token">WS_SECURITY_TOKEN</a> structure representing the created XML security token.</para>
      <para>When you no longer need this structure, you must free it by calling <see cref="WsFreeSecurityToken" />.</para>
      <para>The returned security token may be used with <see cref="WS_XML_TOKEN_MESSAGE_SECURITY_BINDING" /> if it is to be</para>
      <para>presented to a service.</para>
    </param>
    <param name="error">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> structure  that receives additional error information if the function fails.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns NO_ERROR; otherwise, it returns an HRESULT error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsDateTimeToFileTime">
    <summary>
      <para>Converts a <see cref="WS_DATETIME" /> object into a FILETIME object.
A reference to the FILETIME object is returned by output parameter.</para>
    </summary>
    <param name="dateTime">
      <para>A pointer to the <see cref="WS_DATETIME" /> structure to convert.</para>
    </param>
    <param name="fileTime">
      <para>A pointer to the new FILETIME object that contains the converted time.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A FILETIME cannot represent dates between January 1, 0001 and January 1, 1601.  A <see cref="WS_DATETIME" /> within this range causes the function to return <b>WS_E_INVALID_FORMAT</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </remarks>
  </member>
  <member name="Windows.WsDecodeUrl">
    <summary>
      <para>Evaluates the components of an URL to determine its "scheme". A <see cref="WS_URL_SCHEME_TYPE" /> value is encapsulated in a <see cref="WS_URL" /> structure and a reference to the structure is returned via output parameter.
If the scheme is not recognized, the function returns WS_E_INVALID_FORMAT.
Only scheme types identified in  <b>WS_URL_SCHEME_TYPE</b> are supported.</para>
    </summary>
    <param name="url">
      <para>A pointer to a <see cref="WS_STRING" />  representation of the URL to evaluate.</para>
    </param>
    <param name="flags">
      <para>Determines the URL scheme evaluation method.  See <see cref="WS_URL_FLAGS" />.</para>
    </param>
    <param name="heap">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> in which to allocate the returned URL reference.</para>
    </param>
    <param name="outUrl">
      <para>Reference to the <see cref="WS_URL" /> structure that encapsulates the <see cref="WS_URL_SCHEME_TYPE" /> value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input URL was not in the correct format, or the scheme was not recognized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The grammar parsed for the schemes "http", "https", "net.tcp" and "soap.udp" can be found at http://www.ietf.org/rfc/rfc3986.txt.  For these schemes:</para>
      <list type="bullet">
        <item>
          <description>A non-empty hostname is required.
</description>
        </item>
        <item>
          <description>For the IP-literal production all the characters demarcated by "[" and "]" are returned.  They are not enforced to follow the IPv6Address production.
</description>
        </item>
        <item>
          <description>The userinfo part of authority (for example, userinfo@hostname:port) is not supported.
</description>
        </item>
      </list>
      <para>If no port is specified the default port for that scheme is returned.</para>
      <para>If no port is specified for the soap.udp scheme 0xFFFFFFFF is returned as the default.</para>
    </remarks>
  </member>
  <member name="Windows.WsEncodeUrl">
    <summary>
      <para>Encodes the specified <see cref="WS_URL" /> into a URL string given its component parts. Values are escaped as necessary,
combined, and stored in the specified <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a>, and the result is returned as a <see cref="WS_STRING" />.</para>
    </summary>
    <param name="url">
      <para>A reference to the  <see cref="WS_URL" /> to encode.</para>
    </param>
    <param name="flags">
      <para>The value of this parameter determines the URL scheme evaluation method.  See <see cref="WS_URL_FLAGS" />.</para>
    </param>
    <param name="heap">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> in which to allocate URL.</para>
    </param>
    <param name="outUrl">
      <para>A pointer to the resulting URL string.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The URL data being encoded was not valid according to the URL syntax.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a scheme is not recognized in the <i>url</i> parameter the function returns WS_E_INVALID_FORMAT.
Only scheme types identified in  <see cref="WS_URL_SCHEME_TYPE" /> are supported.</para>
    </remarks>
  </member>
  <member name="Windows.WsEndReaderCanonicalization">
    <summary>
      <para>This function stops XML canonicalization started by a preceding <see cref="WsStartReaderCanonicalization" /> function call.</para>
      <para>Any remaining canonical bytes buffered by the reader will be written to the callback function.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the XML reader on which canonicalization should be stopped.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsEndReaderCanonicalization</b> must be called at the same depth at which <see cref="WsStartReaderCanonicalization" /> was called.</para>
      <para>It is not necessary to call <b>WsEndReaderCanonicalization</b> in order to call <see cref="WsFreeReader" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsEndWriterCanonicalization">
    <summary>
      <para>This function stops XML canonicalization started by the preceding <see cref="WsStartWriterCanonicalization" /> call.
Remaining canonical bytes buffered by the writer are written to the callback function.</para>
    </summary>
    <param name="writer">
      <para>A pointer to a  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object on which canonicalization should be stopped.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsEndWriterCanonicalization</b> must be called at the same depth at
which <see cref="WsStartWriterCanonicalization" /> was called.</para>
      <para>It is not necessary to call <b>WsEndWriterCanonicalization</b> in order to call <see cref="WsFreeWriter" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsFileTimeToDateTime">
    <summary>
      <para>Takes a reference to a FILETIME object and converts it into a <see cref="WS_DATETIME" /> object.
A reference to the WS_DATETIME object is returned by output parameter.</para>
    </summary>
    <param name="fileTime">
      <para>A pointer to the FILETIME structure to convert.</para>
    </param>
    <param name="dateTime">
      <para>A pointer to the new WS_DATETIME object that has the newly converted time.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A <see cref="WS_DATETIME" /> cannot represent dates from the year 10000 and beyond.  A FILETIME representing a date
later than this will cause the function return <b>WS_E_INVALID_FORMAT</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>The format field of the <see cref="WS_DATETIME" /> will be set to <see cref="WS_DATETIME_FORMAT_UTC" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsFillBody">
    <summary>
      <para>Ensures that there are a sufficient number of bytes available in a message for reading.  It is up to the application to specify the number of bytes sufficient to contain the next XML construct to read.</para>
      <para>
        <b>Note</b> This function is called before using <see cref="WsReadBody" /> or the XML Readerof the message to read the message body.</para>
      <para>This function is a shortcut for calling <see cref="WsFillReader" /> for the  XML Reader being used to write the message.  Calling <b>WsFillReader</b> directly is equivalent to calling this function.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure intended for "filling".</para>
    </param>
    <param name="minSize">
      <para>The minimum number of bytes that the message should have buffered. If the current byte count buffered is equal to or greater than the value of <i>minSize</i> the function does nothing.</para>
      <para>
        <b>Note</b>  The value of  <i>minSize</i> represents the size of the encoded form of the XML that is expected.  This can vary by encoding and also how the actual XML is structured. Typical use of this function is to select an expected upper bound byte count for  encoding or XML structure to ensure that the expected data is read.</para>
    </param>
    <param name="asyncContext">
      <para>A pointer to a <see cref="WS_ASYNC_CONTEXT" /> data structure with information about invoking the function asynchronously.  A <b>NULL</b> value indicates a request for synchronous operation.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Start of message was received successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is typically used when writing the message body with streamed mode set to <see cref="WS_STREAMED_OUTPUT_TRANSFER_MODE" />, or when using an XML Reader in streamed mode.</para>
      <para>This function is a "no-op" when writing the message body and <see cref="WS_STREAMED_OUTPUT_TRANSFER_MODE" /> is not set, or with an XML Reader's mode set to <see cref="WS_XML_READER_BUFFER_INPUT" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsFillReader">
    <summary>
      <para>Ensures that the reader has buffered the minimum byte count of XML data for use by subsequent reader functions.  It will invoke the callback specified by <see cref="WS_XML_READER_STREAM_INPUT" /> as many times as necessary to obtain the number of bytes specified by the value of the <i>minSize</i> parameter.  On completion the buffered data is available to other reader functions.  If a subsequent reader function requires more data than what has been obtained the function
will return a <b>WS_E_QUOTA_EXCEEDED</b> exception.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </summary>
    <param name="reader">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> structure used for obtaining the data.</para>
    </param>
    <param name="minSize">
      <para>Specifies the minimum number of bytes that the reader should have obtained.  If the current byte count buffered is equal to or greater than the value of <i>minSize</i> the function will do nothing and will return immediately.</para>
    </param>
    <param name="asyncContext">
      <para>A pointer to a <see cref="WS_ASYNC_CONTEXT" /> data structure with information about invoking the function asynchronously.  A <b>NULL</b></para>
      <para>value indicates a request for synchronous operation.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The number of bytes required to read a particular segment of XML data depends upon the encoding
and its formatting.</para>
      <para>This function is a "no-op" when used with a reader using <see cref="WS_XML_READER_BUFFER_INPUT" />.</para>
      <para>By specifying a <see cref="WS_ASYNC_CONTEXT" /> the data is read asynchronously.</para>
    </remarks>
  </member>
  <member name="Windows.WsFindAttribute">
    <summary>
      <para>Searches the attributes of the current element for an attribute with the
specified name and namespace and returns its index which may be passed
to <see cref="WsReadStartAttribute" />.</para>
    </summary>
    <param name="reader">
      <para>The reader on which to find the attribute.</para>
    </param>
    <param name="localName">
      <para>The local name of the attribute to search for.</para>
    </param>
    <param name="ns">
      <para>The namespace of the attribute to search for.</para>
    </param>
    <param name="required">
      <para>If required is <b>TRUE</b> and the attribute is not found,  the function will return <b>WS_E_INVALID_FORMAT</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.) if required is <b>FALSE</b> and the attribute is not found, the function will return S_FALSE.</para>
    </param>
    <param name="attributeIndex">
      <para>If the attribute is found, then the index of the attribute, is returned here.
This index can then be passed to <see cref="WsReadStartAttribute" />.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the reader is not positioned on a start element then it will return <b>WS_E_INVALID_OPERATION</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>The index returned does not necessarily correspond to the position of the attribute as it appeared
in the document.  It identifies the index of the matching attribute in the array of attributes of
the <see cref="WS_XML_ELEMENT_NODE" />.  The order of the attributes in this array may differ from the order
in which the attributes appeared in the document.</para>
    </remarks>
  </member>
  <member name="Windows.WsFlushBody">
    <summary>
      <para>Flushes all accumulated message body data that has been written.</para>
      <para>When message uses <see cref="WsWriteBody" /> or XML Writer, the data is accumulated in a buffer.   WsFlushBody subsequently performs the actual
I/O.</para>
      <para>WsFlushBody is typically used when  channel I/O is set to
<see cref="WS_STREAMED_OUTPUT_TRANSFER_MODE" />, or when using an
XML Writer  set to use <see cref="WS_XML_WRITER_STREAM_OUTPUT" />.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure containing the accumulated message body data.</para>
    </param>
    <param name="minSize">
      <para>Specifies the minimum number of bytes that must be present in the
message for the function to perform the data flush.</para>
      <para>
        <b>Note</b>  If the message contains less
than <i>minSize</i> WSFlushBody terminates without doing the I/O flush. A larger value will ensure that no I/O will be done until
the larger value has been accumulated.  This is useful for ensuring
that larger chunks are used when doing I/O.
And presuming that
there is at least one byte of accumulated data a value of 0 in  <i>minSize</i> guarantees that it will be flushed.</para>
    </param>
    <param name="asyncContext">
      <para>A pointer to a <see cref="WS_ASYNC_CONTEXT" /> data structure with information about invoking the function asynchronously.  A <b>NULL</b></para>
      <para>value indicates a request for synchronous operation.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is a "no-op" when <see cref="WS_STREAMED_OUTPUT_TRANSFER_MODE" /> is not set, or when using an
XML Writer with <see cref="WS_XML_WRITER_BUFFER_OUTPUT" /> set.</para>
      <para>This function is shortcut for calling <see cref="WsFlushWriter" /> for
the XML Writer being used to write the message.  Calling
<b>WsFlushWriter</b> directly is equivalent to calling this function.</para>
    </remarks>
  </member>
  <member name="Windows.WsFlushWriter">
    <summary>
      <para>Instructs the writer to invoke the <see cref="callback" /> specified in <see cref="WS_XML_WRITER_STREAM_OUTPUT" /> if sufficient data has been buffered.</para>
    </summary>
    <param name="writer">
      <para>The writer to flush.</para>
    </param>
    <param name="minSize">
      <para>Specifies the minimum number of bytes that must be buffered in order for the
<a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_write_callback">callback</a> to be invoked. If fewer than this number of bytes
are buffered, then the <b>callback</b> will not be invoked.  This can be
used to minimize the number of i/o's that occur when writing small amounts of data.</para>
      <para>Zero should be specified to guarantee that the <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_write_callback">callback</a> is invoked.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The writer buffers all data until <b>WsFlushWriter</b> is called.</para>
      <para>If necessary, the <b>WsFlushWriter</b> should be called before <see cref="WsFreeWriter" /> to guarantee all data is emitted.</para>
      <para>By specifying a <see cref="WS_ASYNC_CONTEXT" /> the buffered data will be written asynchronously.</para>
      <para>This function is a no-op if the writer is using <see cref="WS_XML_WRITER_BUFFER_OUTPUT" />.</para>
      <para>If <see cref="WsWriteStartElement" /> has been called, but the element has not been committed (see <b>WsWriteStartElement</b>)
then this element will not be flushed.</para>
      <para>If this function is called when using <see cref="WS_XML_WRITER_MTOM_ENCODING" /> and there are
no open elements on the writer, then the supporting MIME parts will be generated and emitted.  Once this
occurs, any API that attempts to write further to the XML document will return <b>WS_E_INVALID_OPERATION</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </remarks>
  </member>
  <member name="Windows.WsFreeChannel">
    <summary>
      <para>Releases the memory resource associated with a Channel object.</para>
      <para>The <b>Channel</b> must be in the either the <see cref="WS_CHANNEL_STATE_CREATED" /> or <b>WS_CHANNEL_STATE_CLOSED</b> state to be released. If a Channel has been successfully opened it must be closed before it can be released.</para>
    </summary>
    <param name="channel">
      <para>A pointer to the <b>Channel</b> object to release. The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> object returned by <see cref="WsCreateChannel" /> or <see cref="WsCreateChannelForListener" />. The referenced value may not be <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>A channel that is in the process of being accepted/opened cannot be released until the accept/open completes.  Use <see cref="WsAbortChannel" /> to cancel the accept/open process.</para>
    </remarks>
  </member>
  <member name="Windows.WsFreeError">
    <summary>
      <para>Releases the memory resource associated with an   <b>Error</b> object created using  <see cref="WsCreateError" />.
This releases the object and its constituent information.</para>
    </summary>
    <param name="error">
      <para>A pointer to the <b>Error</b> object to release.  The pointer must reference a valid <b>WS_ERROR</b> object
returned by <see cref="WsCreateError" />.  The referenced value may
not be NULL.</para>
    </param>
  </member>
  <member name="Windows.WsFreeHeap">
    <summary>
      <para>This frees the heap object, and the memory associated with any allocations
made on it using <see cref="WsAlloc" />.</para>
    </summary>
    <param name="heap">
      <para>The heap to free.  This must be a valid heap object that was returned
from <see cref="WsCreateHeap" />.  This parameter may not be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.WsFreeListener">
    <summary>
      <para>Releases the memory resource associated with a Listener object.
The Listener state represented in <see cref="WS_LISTENER_STATE" /> must be set to either <b>WS_LISTENER_STATE_CREATED</b></para>
      <para>or <b>WS_LISTENER_STATE_CLOSED</b> to be released.
If a Listener has been successfully opened, then it must be closed
using <see cref="WsCloseListener" /> before it is released.</para>
    </summary>
    <param name="listener">
      <para>A pointer to the <b>Listener</b> object to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> returned
by <see cref="WsCreateListener" />.  The referenced value may not be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.WsFreeMessage">
    <summary>
      <para>Releases the memory resource associated with a Message object.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object returned
by <see cref="WsCreateMessage" /> or <see cref="WsCreateMessageForChannel" /> and the referenced value may not be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.WsFreeMetadata">
    <summary>
      <para>Releases the memory resource associated with a metadata object.</para>
    </summary>
    <param name="metadata">
      <para>A pointer to the metadata object to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-metadata">WS_METADATA</a> object returned
by <see cref="WsCreateMetadata" /> and the referenced value may not be <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>Any <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-policy">WS_POLICY</a> objects that
were retrieved using the metadata object will also be freed.</para>
    </remarks>
  </member>
  <member name="Windows.WsFreeReader">
    <summary>
      <para>Releases the memory resource associated with  an XML_Reader object.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> object to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object returned by <see cref="WsCreateReader" />    and the referenced <b>XML Reader</b> value may not be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.WsFreeSecurityToken">
    <summary>
      <para>Releases the memory resource associated with  a <b>Security Token</b> object.</para>
    </summary>
    <param name="token">
      <para>A pointer to the <b>Security Token</b> object to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-security-token">WS_SECURITY_TOKEN</a> object returned by <see cref="WsCreateXmlSecurityToken" />.</para>
    </param>
  </member>
  <member name="Windows.WsFreeServiceHost">
    <summary>
      <para>Releases the memory associated with  a <a href="https://docs.microsoft.com//windows/desktop/wsw/service-host">Service Host</a> object.</para>
    </summary>
    <param name="serviceHost">
      <para>A pointer to the <b>Service Host</b> object to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-host">WS_SERVICE_HOST</a> object
returned by <see cref="WsCreateServiceHost" /> and the referenced <b>Service Host</b> value may not be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.WsFreeServiceProxy">
    <summary>
      <para>Releases the memory associated with  a Service Proxy resource.</para>
    </summary>
    <param name="serviceProxy">
      <para>A pointer to the <b>Service Proxy</b> to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-proxy">WS_SERVICE_PROXY</a> object
returned by <see cref="WsCreateServiceProxy" />. The referenced value may not be <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>For details of when it is allowed to call this function, see <a href="https://docs.microsoft.com//windows/desktop/wsw/service-proxy">Service Proxy</a> .</para>
    </remarks>
  </member>
  <member name="Windows.WsFreeWriter">
    <summary>
      <para>Releases the memory resource associated with  an  XML Writer object.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <b>XML Writer</b> object to release.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object
returned by <see cref="WsCreateWriter" /> and   the referenced value may not be <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>If necessary, <see cref="WsFlushWriter" /> should be called before calling <b>WsFreeWriter</b> to guarantee
all data is emitted.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetChannelProperty">
    <summary>
      <para>Retrieves a property of the Channel referenced by the <i>channel</i> parameter.</para>
    </summary>
    <param name="channel">
      <para>A pointer to the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> object with the property to retrieve.</para>
    </param>
    <param name="id">
      <para>Represents an identifier of the property to retrieve.</para>
    </param>
    <param name="value">
      <para>A void pointer referencing the location to store the retrieved property.
<b>Note</b>  The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The number of bytes allocated by the caller to
store the retrieved property.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property Id was not supported for this object or the specified buffer was not large enough.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetCustomHeader">
    <summary>
      <para>Finds an application-defined header of the message and deserializes it.</para>
    </summary>
    <param name="message">
      <para>The message containing the header.</para>
      <para>The message can be in any state but <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="customHeaderDescription">
      <para>A <see cref="WS_ELEMENT_DESCRIPTION" /> which describes the header element.</para>
    </param>
    <param name="repeatingOption">
      <para>Whether the header may appear more than once in
the message.</para>
      <para>If <see cref="WS_REPEATING_HEADER" /> is used, then
the header index indicates which of the headers
with the specified headerName to return.</para>
      <para>If <see cref="WS_SINGLETON_HEADER" /> is used, then
the headerIndex must be zero.</para>
    </param>
    <param name="headerIndex">
      <para>The zero-based index of the header within
the set of headers with the specified headerName.</para>
    </param>
    <param name="readOption">
      <para>Whether the value is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized header data in.
If this is <b>NULL</b>, then the message heap will be used
as required by the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="headerAttributes">
      <para>Returns the <see cref="WS_HEADER_ATTRIBUTES" /> for this header.
The pointer may be <b>NULL</b>, in which case no attributes are returned.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The header does not exist, and is required.</para>
            <para>
              <see cref="WS_SINGLETON_HEADER" /> was specified, and there are
multiple instances of the type of header present in the message.</para>
            <para>The input data was not in the expected format.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The size quota of the heap was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough memory available to deserialize the header.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API operates on headers targeted at the ultimate receiver.
Headers targeted with a role/actor other than ultimate receiver are
ignored by this API.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetDictionary">
    <summary>
      <para>Retrieves an <see cref="XML Dictionary" /> object. The retrieved Dictionary is returned by the <i>dictionary</i> reference parameter.</para>
    </summary>
    <param name="encoding">
      <para>Indicates an enumeration of the Dictionary encoding.</para>
    </param>
    <param name="dictionary">
      <para>A reference to a <see cref="WS_XML_DICTIONARY" /> structure for the retrieved <b>Dictionary</b>.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.WsGetErrorProperty">
    <summary>
      <para>Retrieves a property of an <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object referenced by the <i>error</i> parameter.</para>
    </summary>
    <param name="error">
      <para>A pointer to the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object with the property to retrieve.</para>
    </param>
    <param name="id">
      <para>An identifier of the property to retrieve.</para>
    </param>
    <param name="buffer">
      <para>A pointer referencing the location to store the retrieved property.</para>
    </param>
    <param name="bufferSize">
      <para>The number of bytes allocated by the caller to
store the retrieved property.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetErrorString">
    <summary>
      <para>Retrieves an error string from an error object.</para>
    </summary>
    <param name="error">
      <para>The error object containing the string.</para>
    </param>
    <param name="index">
      <para>The zero-based index identifying the string to retrieve.  The first
error string (index 0) will be the string most recently added to the
error object (using <see cref="WsAddErrorString" />). When
<see cref="WS_ERROR_PROPERTY_ORIGINAL_ERROR_CODE" /> is presented in the
error object, the corresponding error text will be available in the last index.</para>
      <para>The number of errors can be retrieved using <see cref="WS_ERROR_PROPERTY_STRING_COUNT" />.</para>
    </param>
    <param name="string">
      <para>The returned string.  The string is valid until <see cref="WsResetError" /> or <see cref="WsFreeError" /> is called.</para>
      <para>The string is not zero terminated.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The string is in the language specified by the LANGID property of
the error object.  This can be retrieved using <see cref="WsGetErrorProperty" /> with <see cref="WS_ERROR_PROPERTY_LANGID" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetFaultErrorDetail">
    <summary>
      <para>Read the fault detail stored in a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object.</para>
    </summary>
    <param name="error">
      <para>The error object that contains the fault information.</para>
    </param>
    <param name="faultDetailDescription">
      <para>A pointer to a description of the fault detail element.</para>
      <para>The action value of the fault detail description is used as a filter
value to match against the action of the fault.  If both action
strings are specified (the action value of the fault detail description
is not <b>NULL</b> and the action value <see cref="WS_FAULT_ERROR_PROPERTY_ACTION" /> in the
<a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> has a length greater than zero), then the action
strings are compared to determine a match.  If there is a match, then the
function will then try to deserialize the detail element.</para>
      <para>The element description of the fault detail description is used to
describe the format of the element in the fault detail.</para>
    </param>
    <param name="readOption">
      <para>Whether the element is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized values in.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The size quota of the heap was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API deserializes the value from the detail field of
the <see cref="WS_FAULT" /> stored in the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object.</para>
      <para>This functions supports the following scenarios, based on the contents
of the <see cref="WS_ELEMENT_DESCRIPTION" /> in the <see cref="WS_FAULT_DETAIL_DESCRIPTION" /> supplied:</para>
      <list type="bullet">
        <item>
          <description>Reading a single element.
In this case, the elementLocalName and elementNs
fields of the <see cref="WS_ELEMENT_DESCRIPTION" /> should be set to the local name
and namespace of the element to read, and the type and type description represents
the type of the value being deserialized.
<para>Since different faults with different detail formats may be expected
from a service, this function can be called in succession to try to
read each type of detail.  In this case, the <see cref="WS_READ_OPTIONAL_POINTER" /> value can be specified, which will return a <b>NULL</b> pointer if the element name
in the fault detail does not match the expected value.</para></description>
        </item>
        <item>
          <description>Reading multiple elements as a single value.
In this case, the elementLocalName and elementNs
fields of the <see cref="WS_ELEMENT_DESCRIPTION" /> should be set to <b>NULL</b>, and a <see cref="WS_STRUCT_TYPE" /> and <see cref="WS_STRUCT_DESCRIPTION" /> should be specified.  Each field of the
structure value being deserialized should correspond to element(s) to read within the body.
The readOption parameter must be <see cref="WS_READ_REQUIRED_VALUE" /> or <b>WS_READ_REQUIRED_POINTER</b>.
</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.WsGetFaultErrorProperty">
    <summary>
      <para>Retrieves a <see cref="Fault" /> error property of an <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object referenced by the <i>error</i> parameter.</para>
    </summary>
    <param name="error">
      <para>A pointer to the  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object with the property to retrieve.</para>
    </param>
    <param name="id">
      <para>Represents an identifier of the fault error property to retrieve.</para>
    </param>
    <param name="buffer">
      <para>A pointer referencing the location to store the retrieved fault error property.</para>
      <para>
        <b>Note</b>  The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="bufferSize">
      <para>The number of bytes allocated by the caller to
store the retrieved property.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetHeader">
    <summary>
      <para>Finds a particular standard header in the message and deserializes it.</para>
    </summary>
    <param name="message">
      <para>The message containing the header.</para>
      <para>The message can be in any state but <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="headerType">
      <para>The type of header to deserialize.</para>
    </param>
    <param name="valueType">
      <para>The type of value to deserialize.  See <see cref="WS_HEADER_TYPE" /> for
the set of types which correspond to each type of header.</para>
    </param>
    <param name="readOption">
      <para>Whether the value is required, and how to allocate the value.
<see cref="WS_READ_NILLABLE_VALUE" /> and <b>WS_READ_NILLABLE_POINTER</b></para>
      <para>read options cannot be specified since the header types in <see cref="WS_HEADER_TYPE" /></para>
      <para>are not allowed to be nillable in the respective standards specifications.
See <b>WS_READ_OPTION</b> for more information.</para>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized header data in.
If this is <b>NULL</b>, then the message heap will be used.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The header does not exist, and is required.</para>
            <para>There are multiple instances of the type of header present in the message.</para>
            <para>The input data was not in the expected format.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The size quota of the heap was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough memory available to deserialize the header.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API provides access to a set of standard header types (see <see cref="WS_HEADER_TYPE" />).
For application defined header types, use <see cref="WsGetCustomHeader" />.</para>
      <para>This API is designed handle types of headers that appear once in the
message and are targeted at the ultimate receiver.  Headers targeted
with a role/actor other than ultimate receiver are ignored by this API.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetHeaderAttributes">
    <summary>
      <para>This function populates a ULONG parameter with  the <see cref="WS_HEADER_ATTRIBUTES" /> from the header element on which the reader is positioned.  The
envelope version of the message is used to determine which attributes to return.</para>
    </summary>
    <param name="message">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> structure containing the message to query.  This envelope version of the message is used to determine which attributes match.
The message can be in any state except <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="reader">
      <para>A pointer to the reader to query.  This must be valid WS_XML_READER object returned from <see cref="WsCreateReader" />   and cannot be <b>NULL</b>.</para>
    </param>
    <param name="headerAttributes">
      <para>On success the value referenced by this pointer is set to the header attributes.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The reader is assumed to point to a header element.  Use the XML reader API's to position the reader appropriately.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetHeapProperty">
    <summary>
      <para>Retrieves a particular property of a specified Heap.</para>
    </summary>
    <param name="heap">
      <para>A pointer to the <b>Heap</b> object to that contains the desired property data.</para>
    </param>
    <param name="id">
      <para>This is a <see cref="WS_HEAP_PROPERTY_ID" /> enumerator that identifies the desired property.</para>
    </param>
    <param name="value">
      <para>A reference to the retrieved property value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The buffer size allocated by the caller for the retrieved property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.WsGetListenerProperty">
    <summary>
      <para>Retrieves a specified Listener object  property.  The property to retrieve is identified by a  <see cref="WS_LISTENER_PROPERTY_ID" /> input parameter.</para>
    </summary>
    <param name="listener">
      <para>A pointer to the Listener object containing the desired property.  This must be a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> that was returned
from <see cref="WsCreateListener" />.</para>
    </param>
    <param name="id">
      <para>This is a <b>WS_LISTENER_PROPERTY_ID</b> enumerator value that identifies the desired property.</para>
    </param>
    <param name="value">
      <para>A reference to a location for storing the retrieved property value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>Represents the byte-length buffer size allocated by the caller to store the retrieved property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetMappedHeader">
    <summary>
      <para>Finds a mapped header in the message and deserializes it.</para>
    </summary>
    <param name="message">
      <para>The message containing the header.</para>
      <para>The message can be in any state but <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="headerName">
      <para>The name of the mapped header.</para>
    </param>
    <param name="repeatingOption">
      <para>Whether the header may appear more than once in
the message.</para>
      <para>If <see cref="WS_REPEATING_HEADER" /> is used, then
the header index indicates which of the headers
with the specified headerName to return.</para>
      <para>If <see cref="WS_SINGLETON_HEADER" /> is used, then
the headerIndex must be zero.</para>
    </param>
    <param name="headerIndex">
      <para>The zero-based index of the header within
the set of headers with the specified headerName.</para>
    </param>
    <param name="valueType">
      <para>The type of value to deserialize.</para>
    </param>
    <param name="readOption">
      <para>Whether the value is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
      <para>If the header is optional (may appear zero or one times), then
<see cref="WS_READ_OPTIONAL_POINTER" /> can be used.</para>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized header data in.
If this is <b>NULL</b>, then the message heap will be used.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The header does not exist, and is required.</para>
            <para>The input data was not in the expected format.</para>
            <para>
              <see cref="WS_SINGLETON_HEADER" /> was specified, and there are
multiple instances of the header with the specified name in the message.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The size quota of the heap was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough memory available to deserialize the header.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A message may contain additional transport-specific information that is
not part of the message envelope.  This transport-specific information
can be exposed programmatically as headers of the Message object.
This function is used to read a header that has been mapped by a
transport into the message.</para>
      <para>When using the HTTP channel, the required mappings must be specified before headers
can be extracted with this function.  For more information, see <see cref="WS_HTTP_MESSAGE_MAPPING" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetMessageProperty">
    <summary>
      <para>Retrieves a specified Message object  property.  The property to retrieve is identified by a  <see cref="WS_MESSAGE_PROPERTY_ID" /> input parameter.</para>
    </summary>
    <param name="message">
      <para>A pointer to a <b>Message</b> object containing the desired property.  This parameter must be a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> object.</para>
    </param>
    <param name="id">
      <para>This is a <b>WS_MESSAGE_PROPERTY_ID</b> enumerator value that identifies the desired property.</para>
    </param>
    <param name="value">
      <para>A reference to a location for storing the retrieved property value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The byte-length buffer size allocated by the caller to store the retrieved property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The application has run out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetMetadataEndpoints">
    <summary>
      <para>Returns the "Endpoints" defined within the metadata object documents.
Calling this function with <see cref="WS_METADATA_STATE" />set to <b>WS_METADATA_STATE_CREATED</b> will cause the metadata object to resolve
all references in the metadata documents. Any
additional document validation will also be done.  If this process is
successful  the metadata object will be set to <b>WS_METADATA_STATE_RESOLVED</b> and  subsequent document additions to the metadata object are not permitted.   If there is an error the metadata object
will be set to <b>WS_METADATA_STATE_FAULTED</b>.</para>
      <para>
        <b>Note</b>  The data returned by this function is valid until the metadata
object is released or reset.  The data returned from this function
should not be modified.</para>
    </summary>
    <param name="metadata">
      <para>A pointer to a <b>Metadata</b> object containing the desired Endpoints.  This parameter must be a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-metadata">WS_METADATA</a> object.</para>
    </param>
    <param name="endpoints">
      <para>On success this pointer parameter
is populated with information about the endpoints that were
defined in the metadata object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory resources.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This property may be used in <b>WS_METADATA_STATE_CREATED</b> or <b>WS_METADATA_STATE_RESOLVED</b> state.</para>
      <para>This function will fail if there are missing metadata documents.
Use <see cref="WsGetMissingMetadataDocumentAddress" /> to determine
the address of any missing documents.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetMetadataProperty">
    <summary>
      <para>Retrieves a specified <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-metadata">WS_METADATA</a> object  property.  The property to retrieve is identified by a  <see cref="WS_METADATA_PROPERTY_ID" /> input parameter.</para>
      <para>
        <b>Note</b>  The data returned by this function is valid until the metadata
object is released or reset.  The data should not be modified.</para>
    </summary>
    <param name="metadata">
      <para>A pointer to a <b>Metadata</b> object containing the desired property.  This parameter must be a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-metadata">WS_METADATA</a> object.</para>
    </param>
    <param name="id">
      <para>Identifier value of the property to retrieve.</para>
    </param>
    <param name="value">
      <para>A reference to a location for storing the retrieved property value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The byte-length buffer size allocated by the caller to store the retrieved property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property Id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetMissingMetadataDocumentAddress">
    <summary>
      <para>This function returns the address of a missing document that is referenced by the metadata object.</para>
      <para>Each document that is added to the metadata object may contain references to other documents. After a document has been added back to the Metadata the function can be used to find the next missing document.</para>
      <para>
        <b>Note</b>  This function will fail if the host name of the URL of the missing address being returned cannot be verified as being one of the host names expected. The expected host names are a union of the following:</para>
      <list type="bullet">
        <item>
          <description>The host name of any URL previously passed to <see cref="WsReadMetadata" />.
</description>
        </item>
        <item>
          <description>The list of host names specified using the <see cref="WS_METADATA_PROPERTY_HOST_NAMES" /> property.
</description>
        </item>
      </list>
    </summary>
    <param name="metadata">
      <para>This parameter is a pointer to a <b>Metadata</b> object that should have the document.</para>
    </param>
    <param name="address">
      <para>On success this parameter is populated with either a pointer to the address of a missing metadata document, or <b>NULL</b> if there are no missing metadata documents.</para>
      <para>The returned address URL is fully qualified.</para>
      <para>
        <b>Note</b>  The data returned by this function is valid until the metadata object is freed or reset.  The data should not be modified.</para>
    </param>
    <param name="error">
      <para>This parameter is a  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> pointer to where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Whether or not this function will verify host names of URLs returned can be
controlled using the <b>WS_METADATA_PROPERTY_VERIFY_HOST_NAMES</b> enumerator value.</para>
      <para>The purpose of the host name verification is to ensure that an application
does not use the address without knowing that it is from a host that it
is willing to accept metadata from.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetNamespaceFromPrefix">
    <summary>
      <para>This function returns a namespace from the prefix to which it is bound.</para>
      <para>If the value of the <i>required</i> parameter is set to <b>TRUE</b> and the Prefix is not bound to any namespace a <b>WS_E_INVALID_FORMAT</b> exception will be returned.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.) If the <i>required</i> parameter is  <b>FALSE</b>, and the Prefix is not bound to any namespace the <i>ns</i> parameter will be <b>NULL</b> and the function will return S_FALSE.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the reader for which the prefix should be searched.</para>
    </param>
    <param name="prefix">
      <para>A pointer to the Prefix to search for.</para>
    </param>
    <param name="required">
      <para>The value of this Boolean parameter determines
whether or not an error should be returned if a matching namespace is not found.</para>
    </param>
    <param name="ns">
      <para>A reference to a namespace to which the prefix is bound if successful.  The value returned is valid only until the writer advances.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For the prefix "xml" it will return the namespace "http://www.w3.org/XML/1998/namespace".</para>
      <para>For the prefix "xmlns" it will return the namespace "http://www.w3.org/2000/xmlns/".</para>
    </remarks>
  </member>
  <member name="Windows.WsGetOperationContextProperty">
    <summary>
      <para>Returns a property of the specified operation context. It should be noted that the
validity of these property is limited to the lifetime of the operation context itself.</para>
    </summary>
    <param name="context">
      <para>The context that the property value is being obtained for.</para>
    </param>
    <param name="id">
      <para>The id of the property.</para>
    </param>
    <param name="value">
      <para>The address to place the retrieved value. The contents are not modified in case of a failure.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The size of the buffer that the caller has allocated for the retrieved value.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.WsGetPolicyAlternativeCount">
    <summary>
      <para>Retrieves the number of alternatives available in the policy object.
The alternative count can be used to loop through each alternative using
<see cref="WsMatchPolicyAlternative" />.</para>
      <para>
        <b>Note</b>  The policy object may delay some processing until this function is called.  If the
processing fails, then the policy object will be set to
<b>WS_POLICY_STATE_FAULTED</b> state.</para>
    </summary>
    <param name="policy">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-policy">WS_POLICY</a> object from which to count alternatives.</para>
    </param>
    <param name="count">
      <para>A pointer to the number value of alternatives.  This may be 0.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Note that each alternative is not guaranteed to be unique within the policy
(there may be duplicates).</para>
    </remarks>
  </member>
  <member name="Windows.WsGetPolicyProperty">
    <summary>
      <para>Retrieves a property of a policy object.</para>
    </summary>
    <param name="policy">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-policy">WS_POLICY</a> object from which to obtain the property.</para>
    </param>
    <param name="id">
      <para>An identifier of the policy property to retrieve.</para>
    </param>
    <param name="value">
      <para>A pointer to the address to store the retrieved property value. The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The number of bytes allocated by the caller to
store the retrieved property.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The data returned by this function is good until the
metadata object is freed or reset.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetPrefixFromNamespace">
    <summary>
      <para>This function returns the prefix to which a namespace is bound.
There may be more than one prefix in scope and this function is free to return any one of them.</para>
      <para>
        <b>Note</b>  Under no
conditions should a caller depend upon or expect a particular prefix to be returned when there is
more than one prefix that may be returned.</para>
      <para>If the value of the <i>required</i> parameter is set to <b>TRUE</b> and the Namespace is not bound to any Prefix a <b>WS_E_INVALID_FORMAT</b> exception will be returned.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.) If the <i>required</i> parameter is  <b>FALSE</b>, and the Namespace is not bound to any Prefix the <i>prefix</i> parameter is <b>NULL</b> and the function returns S_FALSE.</para>
      <para>If <see cref="WsWriteStartElement" /> is called but the element is not committed the Namespaces and Prefixes referenced by the element and any attributes on the element is not available to
this function.</para>
    </summary>
    <param name="writer">
      <para>A pointer to a Writer with the namespace to search.  This must be a valid <b>WS_XML_WRITER</b> object
returned by <see cref="WsCreateWriter" /> and   may not be <b>NULL</b>.</para>
    </param>
    <param name="ns">
      <para>The namespace to search for.</para>
    </param>
    <param name="required">
      <para>Indicates whether or not an error should be returned if a matching prefix is not found.</para>
    </param>
    <param name="prefix">
      <para>A reference to a prefix bound to the namespace or <b>NULL</b> if the value of the <i>required</i> parameter is <b>FALSE</b> and a matching
namespace is not found.
<b>Note</b>  The value returned is valid only until the writer advances.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For the namespace "http://www.w3.org/XML/1998/namespace" it will return the prefix "xml".</para>
      <para>For the namespace "http://www.w3.org/2000/xmlns/" it will return the prefix "xmlns".</para>
      <para>The prefix returned should not be modified, and is only valid until the writer advances.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetReaderNode">
    <summary>
      <para>The function returns the XML <see cref="node" /> at the current position of the XML <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">reader</a>.</para>
    </summary>
    <param name="xmlReader">
      <para>A pointer to the reader for which the current node will be obtained.  This must be valid WS_XML_READER object.</para>
    </param>
    <param name="node">
      <para>A reference to a <see cref="WS_XML_NODE" /> structure where the current node is returned.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <see cref="nodeType" /> field of the node <see cref="node" /> should be inspected
to determine the kind of node returned.  The <b>node</b> may then be cast to the appropriate
data structure to get the data.</para>
      <code>WS_XML_NODE* node;
if (SUCCEEDED(WsGetReaderNode(reader, &amp;amp;amp;amp;amp;amp;amp;node, error)))
{
    if (node-&gt;nodeType == WS_XML_NODE_TYPE_ELEMENT)
    {
        WS_XML_ELEMENT_NODE* elementNode = (WS_XML_ELEMENT_NODE*) node;
        // Refer to elementNode-&gt;localName, elementNode-&gt;ns
    }
}
</code>
      <para>The <see cref="nodeTypes" /> with extended structures include:</para>
      <list type="bullet">
        <item>
          <description>
            <b>WS_XML_NODE_TYPE_ELEMENT</b> =&gt; <see cref="WS_XML_ELEMENT_NODE" /></description>
        </item>
        <item>
          <description>
            <b>WS_XML_NODE_TYPE_TEXT</b>    =&gt; <see cref="WS_XML_TEXT_NODE" /></description>
        </item>
        <item>
          <description>
            <b>WS_XML_NODE_TYPE_COMMENT</b> =&gt; <see cref="WS_XML_COMMENT_NODE" /></description>
        </item>
      </list>
      <para>The node returned should not be modified and is only valid until the reader advances.
For the attributes in a <see cref="WS_XML_ELEMENT_NODE" /> callers should not expect the
attributes to appear in any particular order.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetReaderPosition">
    <summary>
      <para>Returns the current position of the reader.  This can only be used on a reader
that is set to an XmlBuffer.</para>
    </summary>
    <param name="reader">
      <para>The reader for which the current position will be obtained.</para>
    </param>
    <param name="nodePosition">
      <para>The current position of the reader.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See <see cref="WS_XML_NODE_POSITION" /> for more information on using positions.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetReaderProperty">
    <summary>
      <para>This function returns a property of the specified XML Reader.
<b>Note</b>  Obtaining the Property <b>WS_XML_READER_PROPERTY_CHARSET</b> will require inspecting up to the first
four bytes of the XML data.  Consequently if the Reader is using <see cref="WS_XML_READER_STREAM_INPUT" /> the
<see cref="WsFillReader" /> function must be called first to ensure that this data has been read.</para>
    </summary>
    <param name="reader">
      <para>A pointer to a WS_XML_READER object containing the desired property value.</para>
    </param>
    <param name="id">
      <para>An enumerator value identifier of the Reader property.</para>
    </param>
    <param name="value">
      <para>A pointer to the address for returning the retrieved value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>A byte count of the buffer that the caller has allocated for the retrieved value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetSecurityContextProperty">
    <summary>
      <para>Gets a property of the specified security context.</para>
    </summary>
    <param name="securityContext">
      <para>The security context that is queried for its property.</para>
    </param>
    <param name="id">
      <para>The id of the property (one of <see cref="WS_SECURITY_CONTEXT_PROPERTY_ID" />).</para>
    </param>
    <param name="value">
      <para>The address to place the retrieved value. The pointer must have an alignment compatible with the type of the property.</para>
    </param>
    <param name="valueSize">
      <para>The size of the buffer that the caller has allocated for the retrieved value.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetSecurityTokenProperty">
    <summary>
      <para>Extracts a field or a property from a security token. If the queried property does not use the <i>heap</i> parameter, the returned data is owned by the security token and remains valid as long as the security token itself remains valid. Specifically, for security tokens extracted from a received message, the security token and fields extracted from it are valid only as long as the message is not reset or freed.</para>
      <para>If the <i>heap</i> parameter is required by the property, then the returned data is stored on the heap, with its lifetime detached from the underlying token.</para>
    </summary>
    <param name="securityToken">
      <para>The security token from which the property should be extracted.</para>
    </param>
    <param name="id">
      <para>The id of the property to retrieve.</para>
    </param>
    <param name="value">
      <para>The location to store the retrieved property.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The number of bytes allocated by the caller to
store the retrieved property.</para>
    </param>
    <param name="heap">
      <para>Heap to store additional property data. This parameter must be non-<b>NULL</b> when the queried property is
<see cref="WS_SECURITY_TOKEN_PROPERTY_SYMMETRIC_KEY" /> and must be <b>NULL</b> otherwise.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetServiceHostProperty">
    <summary>
      <para>Retrieves a specified Service Host property.  The property to retrieve is identified by a  <see cref="WS_SERVICE_PROPERTY_ID" /> input parameter.</para>
    </summary>
    <param name="serviceHost">
      <para>A pointer to the WS_SERVICE_HOST object containing the property to retrieve.</para>
    </param>
    <param name="id">
      <para>This is a <b>WS_SERVICE_PROPERTY_ID</b> enumerator value that identifies the property to retrieve.</para>
    </param>
    <param name="value">
      <para>A void pointer to a location for storing the retrieved property value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The byte-length buffer size allocated by the caller to store the retrieved property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetServiceProxyProperty">
    <summary>
      <para>This function retrieves a specified Service Proxy property.  The property to retrieve is identified by a  <see cref="WS_PROXY_PROPERTY_ID" /> input parameter.</para>
    </summary>
    <param name="serviceProxy">
      <para>This parameter is a pointer to the WS_SERVICE_PROXY object containing the property to retrieve.</para>
    </param>
    <param name="id">
      <para>The value of this parameter is a <b>WS_PROXY_PROPERTY_ID</b> enumerator value that identifies the property to retrieve.</para>
    </param>
    <param name="value">
      <para>This parameter is a reference to a location for storing the retrieved property value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The value of this ULONG parameter represents the byte-length buffer size allocated by the caller to store the retrieved property value.</para>
    </param>
    <param name="error">
      <para>This parameter is a  <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> pointer to where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetWriterPosition">
    <summary>
      <para>Returns the current position of the writer.  This can only be used on a
writer that is set to an XmlBuffer. When writing to a buffer, the position
represents the xml node before which new data will be placed.</para>
    </summary>
    <param name="writer">
      <para>The writer for which the current position will be obtained.</para>
    </param>
    <param name="nodePosition">
      <para>The current position of the writer is returned here.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See <see cref="WS_XML_NODE_POSITION" /> for more information on using positions.</para>
      <para>It may be useful to call <see cref="WsWriteEndStartElement" /> to force an element to be committed before
obtaining the position.</para>
    </remarks>
  </member>
  <member name="Windows.WsGetWriterProperty">
    <summary>
      <para>Retrieves a specified XML Writer property.  The property to retrieve is identified by a  <see cref="WS_XML WRITER_PROPERTY_ID" /> input parameter.</para>
    </summary>
    <param name="writer">
      <para>A pointer  to a WS_XML_WRITER structure that contains the property value to retrieve.</para>
    </param>
    <param name="id">
      <para>This is a <b>WS_XML_WRITER_PROPERTY_ID</b> enumerator that identifies the property to retrieve.</para>
    </param>
    <param name="value">
      <para>A void pointer to a location for storing the retrieved property value.</para>
    </param>
    <param name="valueSize">
      <para>The byte-length buffer size allocated by the caller to store the retrieved property value.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object or the specified buffer was not large enough for the value.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsGetXmlAttribute">
    <summary>
      <para>Finds the nearest xml attribute in scope with the specified localName and returns its value.
The returned value is placed on the specified heap.</para>
    </summary>
    <param name="reader">
      <para>The reader for which the xml attribute will be searched.</para>
    </param>
    <param name="localName">
      <para>The localName of the xml attribute for which to search.</para>
    </param>
    <param name="heap">
      <para>The heap on which the resulting value should be allocated.</para>
    </param>
    <param name="valueChars">
      <para>The value of the attribute is stored here.</para>
    </param>
    <param name="valueCharCount">
      <para>The length of the valueChars.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The xml attribute was not found.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function may only be used to obtain the values of attributes in scope that use the prefix "xml".</para>
      <para>If no matching xml attribute is found, a zero length string will be returned for the value, and the
function returns S_FALSE.</para>
      <para>The reader does not do anything with xml attributes other than to surface them for inspection.</para>
    </remarks>
  </member>
  <member name="Windows.WsInitializeMessage">
    <summary>
      <para>This function initializes the headers for the message in preparation for
processing.
After a message has been initialized an application can
add additional headers.
On success the message is in <see cref="WS_MESSAGE_STATE_INITIALIZED" /> state.
If the function fails, then no state transitions occurs.</para>
    </summary>
    <param name="message">
      <para>A pointer to the Message object to initialize.  The Message must be a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object instance returned
by <see cref="WsCreateMessage" /> or <see cref="WsCreateMessageForChannel" /> and may not be NULL.</para>
    </param>
    <param name="initialization">
      <para>Defines the Message initialization.</para>
      <para>
        <b>Note</b>  If the  <i>initialization</i> value is set to <b>WS_REPLY_MESSAGE</b> or
<b>WS_FAULT_MESSAGE</b> the message is automatically addressed.</para>
    </param>
    <param name="sourceMessage">
      <para>A pointer to a message object that is used to initialize the <i>message</i> parameter.
This value should be NULL unless the initialization parameter
has the value of <b>WS_DUPLICATE_MESSAGE</b>,
<b>WS_REPLY_MESSAGE</b>, or <b>WS_FAULT_MESSAGE</b>.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The initial sender of a message should add an action header
to the message using <see cref="WsSetHeader" />.</para>
      <para>This API must be called before <see cref="WsWriteEnvelopeStart" /> or
<see cref="WsWriteMessageStart" /> is called for the message.</para>
    </remarks>
  </member>
  <member name="Windows.WsMarkHeaderAsUnderstood">
    <summary>
      <para>This function marks a header as "understood" by the application.</para>
      <para>The set of headers is extensible and Message assimilation by the receiver is not accessible by the sender.  This function is the receiving applications method for making it known to the sender that the received header has been read and understood.
<b>Note</b>  This function should be used only if the application receives a message indicating that the  header must be understood and it did not acquire the header using <see cref="WsGetHeader" /> or <see cref="WsGetCustomHeader" />.</para>
      <para>The <see cref="WS_MESSAGE_STATE" /> must be in the set to  <b>WS_MESSAGE_STATE_READING</b>. See .<see cref="WsCheckMustUnderstandHeaders" /> for more information.</para>
    </summary>
    <param name="message">
      <para>A pointer to the Message object with the header to mark.</para>
    </param>
    <param name="headerPosition">
      <para>A pointer to the position of the header element within the XML header segment.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The message is not in the correct state.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the application reads the header using an XML Reader,
it should obtain a <see cref="WS_XML_NODE_POSITION" /> of the header element
and pass it to this function.  See <see cref="WsGetReaderPosition" /> for
how to obtain a <b>WS_XML_NODE_POSITION</b>.</para>
    </remarks>
  </member>
  <member name="Windows.WsMoveReader">
    <summary>
      <para>Moves the current position of the reader as specified by the <i>moveTo</i> parameter.</para>
      <para>This function can only be used on a reader that is set to an XmlBuffer.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> object with the position to move.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object and the referenced <b>Reader</b> value may not be <b>NULL</b>.</para>
    </param>
    <param name="moveTo">
      <para>This enumerator specifies direction or next position of the Reader relative to the current position.</para>
    </param>
    <param name="found">
      <para>Indicates success or failure of the specified move.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the found parameter is not <b>NULL</b>, then it will indicate there whether or not it could
move to the requested node and return NOERROR.</para>
      <para>If the found parameter is <b>NULL</b>, and the requested node is not found, it will return <b>WS_E_INVALID_FORMAT</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>This function cannot be used while canonicalizing.  If <see cref="WsStartReaderCanonicalization" /> has
been called, then it will return <b>WS_E_INVALID_OPERATION</b>.</para>
    </remarks>
  </member>
  <member name="Windows.WsMoveWriter">
    <summary>
      <para>Moves the current position of the writer as specified by the moveTo parameter.</para>
    </summary>
    <param name="writer">
      <para>The writer to move.</para>
    </param>
    <param name="moveTo">
      <para>The relative position to move the writer.</para>
    </param>
    <param name="found">
      <para>If this is non-<b>NULL</b>, then whether or not the new position could be moved to is returned here.</para>
      <para>If this is <b>NULL</b>, and the position could not be moved to, then the function will return <b>WS_E_INVALID_FORMAT</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This can only be used on a writer that is set to an <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
      <para>If the found parameter is not <b>NULL</b>, then it will indicate there whether or not it could
move to the requested node and return NOERROR.</para>
      <para>If the found parameter is <b>NULL</b>, and the requested node is not found, it will return <b>WS_E_INVALID_FORMAT</b>.</para>
      <para>Once positioned, the writer will then insert new data before the position specified.</para>
    </remarks>
  </member>
  <member name="Windows.WsOffsetOf">
    <summary>
      <para>Returns the offset in bytes of a field within a structure given the names
of the structure and field.</para>
    </summary>
    <param name="type">
      <para>The object containing the field.</para>
    </param>
    <param name="field">
      <para>The field</para>
    </param>
  </member>
  <member name="Windows.WsOpenChannel">
    <summary>
      <para>Open a channel to an endpoint.</para>
    </summary>
    <param name="channel">
      <para>The channel to open.</para>
    </param>
    <param name="endpointAddress">
      <para>The address of the endpoint.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the open is successful, then the channel must be closed using <see cref="WsCloseChannel" /> before it can be freed.</para>
      <para>Use <see cref="WsCreateChannel" /> to create the channel.</para>
      <para>Once a channel has been opened to an endpoint, then all communication
occurs with that endpoint.</para>
      <para>The endpoint address and its contents are not required after the
function returns, even if the function is invoked asynchronously
(for example, it can safely be declared on the stack).</para>
      <para>Whether any IO actually happens during this call will depend on the
type of channel and its settings.</para>
    </remarks>
  </member>
  <member name="Windows.WsOpenListener">
    <summary>
      <para>Initiates "listening" on a specified address.
Once a listener is opened channels can be accepted
from it.
If the open is successful the Listener must be closed using
the <see cref="WsCloseListener" /> function before Listener resources can be released.</para>
    </summary>
    <param name="listener">
      <para>A pointer to the <b>Listener</b> object to open.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> object and the referenced value may not be <b>NULL</b>.</para>
    </param>
    <param name="url">
      <para>A pointer to a object containing the URL address string for the Listener.</para>
      <para>
        <b>Note</b>  The URL is always in escaped form..
The URL may not contain a query string or fragment.
This URL can include the '+' or '*' wildcards
in the host name portion, or a host name, or a literal IP address.
See Remarks for more information on the URL.</para>
    </param>
    <param name="asyncContext">
      <para>A pointer  to A WS_ASYNC_CONTEXT object that has information about how to invoke the function asynchronously.  The value is set to <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The listener was aborted during the open, or before the open.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The listener is in the incorrect state.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ADDRESS_IN_USE</b>
            </para>
          </description>
          <description>
            <para>The address is already being used.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ADDRESS_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The address is not valid for this context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When using IPv6 addresses, they must be enclosed in brackets in
the host name portion.</para>
      <para>For more information, see <see cref="WS_HTTP_CHANNEL_BINDING" />.</para>
      <para>For <see cref="WS_UDP_CHANNEL_BINDING" />, the path portion of the URL is
ignored.  If a literal IP address is specified, then it is used to listen, otherwise
a wildcard IP address is used.</para>
      <para>For <see cref="WS_TCP_CHANNEL_BINDING" />, the path portion of the URL is
is matched as a prefix against the received URL.
If a literal IP address is specified, then it is used to listen,
otherwise a wildcard IP address is used.</para>
    </remarks>
  </member>
  <member name="Windows.WsOpenServiceHost">
    <summary>
      <para>Opens a <a href="https://docs.microsoft.com//windows/desktop/wsw/service-host">Service Host</a> for communication and starts the Listeners on all the endpoints.
Client applications cannot connect to Service endpoints until <b>WsOpenSerivceHost</b> is called.</para>
    </summary>
    <param name="serviceHost">
      <para>A pointer to the <b>Service Host</b> object to open.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-host">WS_SERVICE_HOST</a> object
returned by <see cref="WsCreateServiceHost" /> and the referenced <b>Service Host</b> value may not be <b>NULL</b>.</para>
    </param>
    <param name="asyncContext">
      <para>A pointer  to A WS_ASYNC_CONTEXT object that has information about how to invoke the function asynchronously.  The value is set to <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The service host was aborted before the open, or during the open.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The current state of the service proxy is not valid for this operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ADDRESS_IN_USE</b>
            </para>
          </description>
          <description>
            <para>The address is already being used.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ADDRESS_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The address is not valid for this context.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Note that all the endpoints listeners have to successfully open before any channel is accepted by service host for communicating
with the client.</para>
    </remarks>
  </member>
  <member name="Windows.WsOpenServiceProxy">
    <summary>
      <para>Opens a Service Proxy to a Service endpoint.</para>
      <para>On success client applications can make calls using the Service Proxy.
The behavior of WsOpenServiceProxy is governed by the  <see cref="channel binding" /> used.</para>
    </summary>
    <param name="serviceProxy">
      <para>A pointer to the <b>Service Proxy</b> to open.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-service-proxy">WS_SERVICE_PROXY</a> object
and the referenced value may not be <b>NULL</b>.</para>
    </param>
    <param name="address">
      <para>A pointer to the address of the endpoint.</para>
    </param>
    <param name="asyncContext">
      <para>A pointer  to A WS_ASYNC_CONTEXT object that has information about how to invoke the function asynchronously.  The value is set to <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsPullBytes">
    <summary>
      <para>Sets up a callback to be invoked to obtain the bytes to be written within an element.
In some encodings this can be more efficient by eliminating a copy of the data.</para>
    </summary>
    <param name="writer">
      <para>The writer to which the bytes will be written.</para>
    </param>
    <param name="callback">
      <para>The callback to invoke when its time to write the binary data.</para>
    </param>
    <param name="callbackState">
      <para>User-defined state to be passed to the callback.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <see cref="WsWriteBytes" /> and <see cref="WsPushBytes" /> require the buffer of data to be provided to the writer.
In some usage patterns, this may require an extra copy of the data.  For those scenarios, <b>WsPullBytes</b> offers a way to request the writer to provide the buffer that must be filled with data.</para>
      <para>If the encoding cannot take advantage of this behavior, then <b>WsPullBytes</b> will invoke the
callback immediately and operate as if <see cref="WsWriteBytes" /> was called on the resulting data.</para>
    </remarks>
  </member>
  <member name="Windows.WsPushBytes">
    <summary>
      <para>Establishes a callback to be invoked to write bytes within an element.  In some encodings this can
be more efficient by eliminating a copy of the data.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the XML Writer object to which the bytes are written.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> and   the referenced value may not be <b>NULL</b>.</para>
    </param>
    <param name="callback">
      <para>This parameter is the callback to invoke to write the data.</para>
    </param>
    <param name="callbackState">
      <para>A pointer to a user-defined state that is  passed to the callback function.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When writing with the <see cref="WS_XML_WRITER_MTOM_ENCODING" />, <b>WsPushBytes</b> provides a way
to write bytes directly into its own MIME part and avoid a copy.  However, the writer at its discretion,
may choose to invoke the callback immediately, so the caller should be prepared for this.</para>
      <para>If the encoding cannot take advantage of this behavior, then <b>WsPushBytes</b> will invoke the
callback immediately and operate as if <see cref="WsWriteBytes" /> was called.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadArray">
    <summary>
      <para>Reads a series of elements from the reader and interprets their
content according to the specified value type.</para>
    </summary>
    <param name="reader">
      <para>The reader from which the array should be read.</para>
    </param>
    <param name="localName">
      <para>The localName of the repeating element.</para>
    </param>
    <param name="ns">
      <para>The namespace of the repeating element.</para>
    </param>
    <param name="valueType">
      <para>The value type to use to parse the content of each element.</para>
    </param>
    <param name="array">
      <para>The array to populate with parsed values.  The size of the array items is determined by the value type.
See <see cref="WS_VALUE_TYPE" /> for more information.</para>
    </param>
    <param name="arraySize">
      <para>The size in bytes (not items) of the array.</para>
    </param>
    <param name="itemOffset">
      <para>The item (not byte) offset within the array at which to read.</para>
    </param>
    <param name="itemCount">
      <para>The number of items (not bytes) to read into the array.</para>
    </param>
    <param name="actualItemCount">
      <para>The actual number of items that were read.  This may be less than itemCount even when there
are more items remaining.  There are no more elements when this returns zero.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is semantically equivalent to using <see cref="WsReadStartElement" />,
<see cref="WsReadValue" /> and <see cref="WsReadEndElement" /> in a loop, but is more efficient.</para>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadAttribute">
    <summary>
      <para>Read an attribute producing a value of the specified <see cref="WS_TYPE" />.</para>
    </summary>
    <param name="reader">
      <para>The reader that is positioned on the element containing the attribute.</para>
    </param>
    <param name="attributeDescription">
      <para>A pointer to a description of how to deserialize the attribute.</para>
    </param>
    <param name="readOption">
      <para>Whether the attribute is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized values in.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The size quota of the heap was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API will search for the attribute given the name and namespace, and then
and deserialize the content as a typed value.</para>
      <para>If the API fails, the state of input reader becomes undefined. The only APIs that may be used on the reader
if this occurs are <see cref="WsSetInput" /> and <see cref="WsSetInputToBuffer" /> to return the reader to a usable state,
or <see cref="WsFreeReader" /> to free the reader.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadBody">
    <summary>
      <para>This is a helper function that deserializes a value from the XML Readerof the message.
The <see cref="WS_MESSAGE_STATE" /> must be set to <b>WS_MESSAGE_STATE_READING</b>.  This function does
not cause any state transitions.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object to read the body from.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object.</para>
    </param>
    <param name="bodyDescription">
      <para>A pointer to the object encapsulating the metadata that describes the mapping of the value to an element.</para>
    </param>
    <param name="readOption">
      <para>Determines whether the value is required and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
    </param>
    <param name="heap">
      <para>A pointer to the <b>Heap</b> object to read the element into.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-heap">WS_HEAP</a> object.</para>
    </param>
    <param name="value">
      <para>The interpretation of the data referenced by this parameter depends on the <b>WS_READ_OPTION</b>.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of the value of this parameter depends on the <b>WS_READ_OPTION</b>.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This functions supports the following scenarios, based on the contents
of the <b>WS_ELEMENT_DESCRIPTION</b> supplied:</para>
      <list type="bullet">
        <item>
          <description>Reading a single element.  In this case, the elementLocalName and elementNs
fields of the <b>WS_ELEMENT_DESCRIPTION</b> should be set to the local name
and namespace of the element to read, and the type and type description represents
the type of the value being deserialized.  If using <b>WS_FAULT_TYPE</b> or
<b>WS_ENDPOINT_ADDRESS_TYPE</b> it is not necessary to specify the local name,
namespace, or type description (they will default appropriately based on the
envelope/addressing version of the message).
</description>
        </item>
        <item>
          <description>Reading multiple elements as a single value.  In this case, the elementLocalName and elementNs
fields of the <b>WS_ELEMENT_DESCRIPTION</b> should be set to <b>NULL</b>, and a <b>WS_STRUCT_TYPE</b> and <see cref="WS_STRUCT_DESCRIPTION" /> should be specified.  In this case, each field of the
structure value being deserialized should correspond to element(s) to read within the body.
</description>
        </item>
        <item>
          <description>Reading multiple elements as multiple values.  Reading multiple distinct values can be
accomplished by simply calling the function multiple times.
</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.WsReadBytes">
    <summary>
      <para>Reads text from the Reader and decodes the characters as bytes according to the base64 specification.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> from which the bytes should be read.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object.</para>
    </param>
    <param name="bytes">
      <para>A pointer to a location to place the decoded bytes.</para>
    </param>
    <param name="maxByteCount">
      <para>The maximum number of bytes that should be read.</para>
    </param>
    <param name="actualByteCount">
      <para>A pointer to a ULONG value of
the actual number of bytes that were read.  This may be less than maxByteCount even when there
are more bytes remaining.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Text is read up to either a start element or end element.  Comments are skipped, and CDATA content is treated
identically to element content.</para>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadChars">
    <summary>
      <para>Reads a specified number of text characters from the Reader.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> from which the character data should be read.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object.</para>
    </param>
    <param name="chars">
      <para>A pointer to a location for  the characters that have been read.</para>
    </param>
    <param name="maxCharCount">
      <para>The maximum number of characters that should be read.</para>
    </param>
    <param name="actualCharCount">
      <para>A pointer to a ULONG value of
the actual number of characters that were read.  This may be less than maxCharCount even when there
are more characters remaining.  There are no more characters when this returns zero.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Text is read up to either a start element or end element.  Comments are skipped, and CDATA content is treated
identically to element content.  Character entities are converted to their unescaped form.</para>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadCharsUtf8">
    <summary>
      <para>Reads a specified number of text characters from the reader and returns them encoded in UTF-8.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> from which the character data should be read.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object.</para>
    </param>
    <param name="bytes">
      <para>A pointer to the buffer to place the encoded bytes that have been read.</para>
    </param>
    <param name="maxByteCount">
      <para>The maximum number of bytes that should be read.</para>
    </param>
    <param name="actualByteCount">
      <para>A pointer to a ULONG value of
the actual number of bytes that were read.  This may be less than maxByteCount even when there
are more bytes remaining.  There are no more bytes when this returns zero.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>XML text is read up to either a start element or end element.  Comments are skipped, and CDATA content is treated
identically to element content.    Character entities are converted to their unescaped form.</para>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadElement">
    <summary>
      <para>Read an element producing a value of the specified <see cref="WS_TYPE" />.</para>
    </summary>
    <param name="reader">
      <para>The reader that is positioned on the XML to deserialize.</para>
    </param>
    <param name="elementDescription">
      <para>A pointer to a description of how to deserialize the element.</para>
    </param>
    <param name="readOption">
      <para>Whether the element is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized values in.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The size quota of the heap was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API will move to the next element, verify its name and namespace, and then
and deserialize the content as a typed value.</para>
      <para>If the API fails, the state of input reader becomes undefined. The only APIs that may be used on the reader
if this occurs are <see cref="WsSetInput" /> and <see cref="WsSetInputToBuffer" /> to return the reader to a usable state,
or <see cref="WsFreeReader" /> to free the reader.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadEndAttribute">
    <summary>
      <para>Moves the reader back to the element node containing the attribute that was read.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> that reads the <b>End attribute</b>.
The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <see cref="WsReadStartAttribute" /> must have been called in order to use this API.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadEndElement">
    <summary>
      <para>This function ensures that the current Reader <see cref="node" /> is an <b>End element</b> and advances the reader to the next <b>node</b>.</para>
      <para>If the Reader is not positioned on an <b>End element</b> when the function is called it will skip whitespace attempting to find one. If after skipping whitespace it is not positioned on an <b>End element</b> it returns a <b>WS_E_INVALID_FORMAT</b> exception.</para>
      <para>(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> that is reads the <b>End element</b>. The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadEndpointAddressExtension">
    <summary>
      <para>Reads an extension of the <see cref="WS_ENDPOINT_ADDRESS" />.</para>
    </summary>
    <param name="reader">
      <para>The XML reader to use to read the extension.</para>
      <para>The function will automatically set the input of
the reader as necessary to read the extensions.</para>
    </param>
    <param name="endpointAddress">
      <para>The endpoint address containing the extensions.</para>
    </param>
    <param name="extensionType">
      <para>The type of extension to read.</para>
    </param>
    <param name="readOption">
      <para>Whether the value is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
      <para>This parameter must have one of the following values:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="WS_READ_REQUIRED_VALUE" />.
</description>
        </item>
        <item>
          <description>
            <see cref="WS_READ_REQUIRED_POINTER" />.
</description>
        </item>
        <item>
          <description>
            <see cref="WS_READ_OPTIONAL_POINTER" />.
</description>
        </item>
      </list>
    </param>
    <param name="heap">
      <para>The heap to use to store the value that is read.</para>
    </param>
    <param name="value">
      <para>The address of a buffer to place the value read.</para>
      <para>If using <see cref="WS_READ_REQUIRED_VALUE" /> for the readOption
parameter, the buffer must be the size of the type of extension
being read (which varies by <see cref="WS_ENDPOINT_ADDRESS_EXTENSION_TYPE" />).</para>
      <para>If using <see cref="WS_READ_REQUIRED_POINTER" /> or <b>WS_READ_OPTIONAL_POINTER</b>,
the buffer should be the size of a pointer.</para>
    </param>
    <param name="valueSize">
      <para>The size of the buffer that the caller has allocated for the value read.</para>
      <para>This size should correspond to the size of the buffer passed
using the value parameter.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The extension type was not valid.</para>
            <para>The size of the supplied buffer was not correct.</para>
            <para>A required parameter was <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The returned value is valid until the heap is freed or reset.</para>
      <para>If the requested extension type appears more than once in the
extensions buffer, then the first instance is returned.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadEnvelopeEnd">
    <summary>
      <para>Reads the closing elements of a message.</para>
      <para>The operation allows for reading of messages from sources other than Channels.  If the source is a Channel use <see cref="WsReadMessageEnd" />.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object read.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a>.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The message state must be <b>WS_MESSAGE_STATE_READING</b>.  If called in the correct
state the message state is set to  <b>WS_MESSAGE_STATE_DONE</b> regardless
of function success or failure.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadEnvelopeStart">
    <summary>
      <para>Reads the headers of the message and prepare to read the body elements.
The operation reads the start of the next message from the Reader including the headers of
the message.
The process allows for reading of messages from other sources than channels.  To read
a message using a channel, use <see cref="WsReadMessageStart" />.
<b>Note</b>  On success the headers is stored in the message and can be retrieved randomly
using functions such as <see cref="WsGetHeader" /> or <see cref="WsGetCustomHeader" />.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object to read.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object.</para>
    </param>
    <param name="reader">
      <para>A pointer to the Reader with the message to read.  The Message object uses the Reader in the current and subsequent
calls.  <b>Note</b>  The function caller must keep the Reader valid until
<see cref="WsResetMessage" /> or <see cref="WsFreeMessage" /> is called.
The <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_message_done_callback">WS_MESSAGE_DONE_CALLBACK</a> parameter can be used a way to know
that the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> is no longer in use.</para>
    </param>
    <param name="doneCallback">
      <para>Identifies the callback function to initiate on success of the current operation once the message has
been released. <b>Note</b>  Messages are released using <see cref="WsFreeMessage" /> or <see cref="WsResetMessage" /></para>
      <para>The callback
can be used to discover whether the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> instance  is in use by this message.  If the current operation  fails the callback is not called.</para>
    </param>
    <param name="doneCallbackState">
      <para>A pointer to user-defined state that can be passed
to the <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_message_done_callback">WS_MESSAGE_DONE_CALLBACK</a>.
This parameter may be <b>NULL</b> if the callback is not used.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The message must be in <b>WS_MESSAGE_STATE_EMPTY</b> state.  On success
the message state is set to <b>WS_MESSAGE_STATE_READING</b>.</para>
      <para>To read an Element of the message body, use <see cref="WsReadBody" />.  To read
directly from the XML Reader get the Reader with
the <b>message property Id</b> set to  <b>WS_MESSAGE_PROPERTY_BODY_READER</b>.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadMessageEnd">
    <summary>
      <para>Read the closing elements of a message from a channel.</para>
    </summary>
    <param name="channel">
      <para>The channel to receive for.</para>
    </param>
    <param name="message">
      <para>The message to read the end of.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_CN_NO_MATCH</b>
            </para>
          </description>
          <description>
            <para>The certificates CN name does not match the passed value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_UNTRUSTEDROOT</b>
            </para>
          </description>
          <description>
            <para>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_WRONG_USAGE</b>
            </para>
          </description>
          <description>
            <para>The certificate is not valid for the requested usage.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CRYPT_E_REVOCATION_OFFLINE</b>
            </para>
          </description>
          <description>
            <para>The revocation function was unable to check revocation because the revocation server was offline.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The message must be in <see cref="WS_MESSAGE_STATE_READING" /> state.  Upon success, it will
transition to <b>WS_MESSAGE_STATE_DONE</b> state.</para>
      <para>When streaming input is used (<see cref="WS_STREAMED_INPUT_TRANSFER_MODE" />),
the channel will automatically make sure that there are bytes available before reading the
end of the message (the closing body and envelope tags).</para>
    </remarks>
  </member>
  <member name="Windows.WsReadMessageStart">
    <summary>
      <para>Read the headers of the next message from the channel, and prepare to read the body elements.</para>
    </summary>
    <param name="channel">
      <para>The channel to receive from.</para>
    </param>
    <param name="message">
      <para>The message to receive into.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Start of message was received successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_S_END</b>
            </para>
          </description>
          <description>
            <para>There are no more messages available on the channel.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_CN_NO_MATCH</b>
            </para>
          </description>
          <description>
            <para>The certificates CN name does not match the passed value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_UNTRUSTEDROOT</b>
            </para>
          </description>
          <description>
            <para>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_WRONG_USAGE</b>
            </para>
          </description>
          <description>
            <para>The certificate is not valid for the requested usage.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CRYPT_E_REVOCATION_OFFLINE</b>
            </para>
          </description>
          <description>
            <para>The revocation function was unable to check revocation because the revocation server was offline.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This reads the start of the next message from the channel, including the headers of
the message.</para>
      <para>This function is like <see cref="WsReadEnvelopeStart" /> but is used with channels.</para>
      <para>Upon success, the headers will be stored in the message and can be accessed in a random-access
fashion (for example, using <see cref="WsGetHeader" />).</para>
      <para>The message must be in <see cref="WS_MESSAGE_STATE_EMPTY" /> state.  Upon success,
the message will have transitioned to <b>WS_MESSAGE_STATE_READING</b> state.</para>
      <para>To deserialize an element of the message body, use <see cref="WsReadBody" />.  To read
directly from the XML Reader of the message, first get the reader using
the <see cref="WS_MESSAGE_PROPERTY_BODY_READER" /> property.</para>
      <para>If the channel input is streamed (<see cref="WS_STREAMED_INPUT_TRANSFER_MODE" />), then
<see cref="WsFillBody" /> must be called to receive the next part of the body before
it is actually read.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadMetadata">
    <summary>
      <para>Reads a Metadata element and adds it to the Metadata documents of the Metadata object.</para>
      <para>The Metadata object state must be set to <b>WS_METADATA_STATE_CREATED</b>.</para>
      <para>On error the Metadata object state is reset to <b>WS_METADATA_STATE_FAULTED</b>.</para>
      <para>
        <b>Note</b>  The function will consume an element if the element contains metadata.  If the element is not recognized as containing metadata, or the particular type of metadata is not needed, the element it is not read.</para>
    </summary>
    <param name="metadata">
      <para>A pointer to the <b>Metadata</b> object for storing the metadata read.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-metadata">WS_METADATA</a> object.</para>
    </param>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> object used to read the metadata.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object and the reader must be positioned on the element containing the desired metadata.</para>
    </param>
    <param name="url">
      <para>A pointer to a <see cref="WS_STRING" /> object referencing the retrieved metadata URL.  The URL is used to track the metadata documents for resolving URL-based links between documents.</para>
      <para>
        <b>Note</b>  The URL MUST be fully qualified.  The URL can have a fragment identifier.</para>
      <para>The following URL schemes are supported:</para>
      <list type="bullet">
        <item>
          <description>
            <b>WS_URL_HTTP_SCHEME_TYPE</b>
          </description>
        </item>
        <item>
          <description>
            <b>WS_URL_HTTPS_SCHEME_TYPE</b>
          </description>
        </item>
        <item>
          <description>
            <b>WS_URL_NETTCP_SCHEME_TYPE</b>
          </description>
        </item>
      </list>
      <para>Each URL specified using this function must have a  unique base URL. The base URL is computed by removing any fragment identifier from the URL specified.</para>
      <para>For example if the following URLs were specified:</para>
      <code>
http://example.com/document1#fragment
http://example.com/document2

</code>
      <para>The two base URLs would be:</para>
      <code>
http://example.com/document1
http://example.com/document2

</code>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The element was not consumed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function recognizes the following types of metadata:</para>
      <list type="bullet">
        <item>
          <description>WSDL 1.1 documents
</description>
        </item>
        <item>
          <description>WS-Policy 1.2 documents </description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.WsReadQualifiedName">
    <summary>
      <para>Reads a qualified name and separates it into its prefix, localName
and namespace based on the current namespace scope of the XML_READER.
If the ns parameter is specified, then the namespace that the prefix
is bound to will be returned, or <b>WS_E_INVALID_FORMAT</b> will be returned. (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.) The strings are placed in the specified heap.</para>
    </summary>
    <param name="reader">
      <para>The reader which should read the qualified name.</para>
    </param>
    <param name="heap">
      <para>The heap on which the resulting strings should be allocated.</para>
    </param>
    <param name="prefix">
      <para>The prefix of the qualified name is returned here.</para>
    </param>
    <param name="localName">
      <para>The localName of the qualified name is returned here.</para>
    </param>
    <param name="ns">
      <para>The namespace to which the qualified name is bound is returned here.</para>
    </param>
    <param name="error">
      <para>If the localName is missing the function will return <b>WS_E_INVALID_FORMAT</b>.
If the ns parameter is specified, but the prefix is not bound to a namespace,
<b>WS_E_INVALID_FORMAT</b> will be returned.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsReadStartAttribute">
    <summary>
      <para>Moves the Reader to the specified attribute so that the content may be read using <see cref="WsReadValue" />, <see cref="WsReadChars" />, or <see cref="WsReadBytes" />.</para>
      <para>If the reader is not positioned on a start element then it returns a <b>WS_E_INVALID_FORMAT</b> exception.</para>
      <para>(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)<b>Note</b>  Attributes read do not appear in any particular order.  <see cref="WsFindAttribute" /> can be used to locate the index of a particular attribute.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> object used to read the Start attribute.</para>
    </param>
    <param name="attributeIndex">
      <para>The index of the attribute to read.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <see cref="WsReadNode" /> function returns EOF when advanced within an attribute.  The <see cref="WsReadEndAttribute" /> function can be used
to return the reader to the containing element.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadStartElement">
    <summary>
      <para>Calling this function advances the reader past a start element skipping any whitespace.</para>
      <para>After parsing if the Reader is not positioned on a start element it will return a <b>WS_E_INVALID_FORMAT</b> exception.</para>
      <para>(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> object used to read the Start element.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadToStartElement">
    <summary>
      <para>Advances the reader to the next start element skipping whitespace and comments if necessary.  Optionally,
it may also verify the localName and namespace of the element.</para>
    </summary>
    <param name="reader">
      <para>The reader which is to read to the start element.</para>
    </param>
    <param name="localName">
      <para>The localName name that the element should be.  If <b>NULL</b>, any localName is permitted.</para>
    </param>
    <param name="ns">
      <para>The namespace that the element should be.  If <b>NULL</b>, any namespace is permitted.</para>
    </param>
    <param name="found">
      <para>If specified then this will indicate whether an element is found and the localName and namespace, if also specified, match.
If not specified, and an element is not found or the localName and namespace don't match, then it will return
<b>WS_E_INVALID_FORMAT</b>. (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Consider the following XML:</para>
      <code>&lt;!-- A purchase order --&gt;
        &lt;PurchaseOrder xmlns='http://tempuri.org'&gt;
            &lt;Item&gt;
                Pencil
            &lt;/Item&gt;
        &lt;/PurchaseOrder&gt;

</code>
      <para>The following examples illustrates the behaviors of <b>WsReadToStartElement</b> when the reader is
positioned in various places in the document.</para>
      <code>WS_XML_STRING purchaseOrder = WS_XML_STRING_VALUE("PurchaseOrder");
WS_XML_STRING item = WS_XML_STRING_VALUE("Item");
WS_XML_STRING ns = WS_XML_STRING("http://tempuri.org");
WS_ERROR* error = NULL;

// Example 1: Reader on comment, element has specified name and namespace, found argument is not provided
HRESULT hr = WsReadToStartElement(reader, &amp;amp;amp;amp;amp;amp;amp;purchaseOrder, &amp;amp;amp;amp;amp;amp;amp;ns, NULL, error);
// hr = NOERROR, the reader is positioned on &lt;PurchaseOrder&gt;

// Example 2: Reader on comment, element has specified name and namespace, found argument is provided
BOOL found;
HRESULT hr = WsReadToStartElement(reader, &amp;amp;amp;amp;amp;amp;amp;purchaseOrder, &amp;amp;amp;amp;amp;amp;amp;ns, found, error);
// hr = NOERROR, found = TRUE, the reader is positioned on &lt;PurchaseOrder&gt;

// Example 3: Reader on comment, element does not have specified name and namespace, found argument is not provided
HRESULT hr = WsReadToStartElement(reader, &amp;amp;amp;amp;amp;amp;amp;item, &amp;amp;amp;amp;amp;amp;amp;ns, NULL, error);
// hr = WS_E_INVALID_FORMAT, the reader is faulted

// Example 4: Reader on comment, element does not have specified name and namespace, found argument is provided
BOOL found;
HRESULT hr = WsReadToStartElement(reader, &amp;amp;amp;amp;amp;amp;amp;item, &amp;amp;amp;amp;amp;amp;amp;ns, &amp;amp;amp;amp;amp;amp;amp;found, error);
// hr = NOERROR, found = FALSE, the reader is positioned on &lt;PurchaseOrder&gt;

// Example 5: Reader on comment, name and namespace not specified, found argument is provided
BOOL found;
HRESULT hr = WsReadToStartElement(reader, NULL, NULL, &amp;amp;amp;amp;amp;amp;amp;found, error);
// hr = NOERROR, found = TRUE, the reader is positioned on &lt;PurchaseOrder&gt;

// Example 6: Reader on &lt;/Item&gt;, name and namespace not specified, found argument is not provided
HRESULT hr = WsReadToStartElement(reader, NULL, NULL, NULL, error);
// hr = WS_E_INVALID_FORMAT, the reader is faulted

// Example 7: Reader on &lt;/Item&gt;, name and namespace not specified, found argument is provided
BOOL found;
HRESULT hr = WsReadToStartElement(reader, NULL, NULL, &amp;amp;amp;amp;amp;amp;amp;found, error);
// hr = NOERROR, found = FALSE, the reader is positioned on &lt;/Item&gt;

</code>
      <para>If <b>WsReadToStartElement</b> indicates an element has been found, then <see cref="WsReadStartElement" /></para>
      <para>or <see cref="WsReadNode" /> may be used to move the reader past the start element into the content of the element.</para>
      <para>
        <see cref="WsSkipNode" /> may be used to skip the element and all its children leaving the reader positioned on
the <see cref="WS_XML_NODE" /> following the corresponding end element.</para>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadType">
    <summary>
      <para>Read a value of a given <see cref="WS_TYPE" /> from XML according to the <see cref="WS_TYPE_MAPPING" />.</para>
    </summary>
    <param name="reader">
      <para>The reader that is positioned on the XML to deserialize.</para>
    </param>
    <param name="typeMapping">
      <para>Describes how the type maps to the XML that is being read.</para>
    </param>
    <param name="type">
      <para>The type of the value to deserialize.</para>
    </param>
    <param name="typeDescription">
      <para>Additional information about the type.  Each type has a different description
structure.  This may be <b>NULL</b>, depending on the <see cref="WS_TYPE" />.</para>
    </param>
    <param name="readOption">
      <para>Whether the value is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
      <para>This parameter must have one of the following values:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="WS_READ_REQUIRED_VALUE" />.
</description>
        </item>
        <item>
          <description>
            <see cref="WS_READ_REQUIRED_POINTER" />.
</description>
        </item>
      </list>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized values in.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The size quota of the heap was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See <see cref="WS_TYPE_MAPPING" /> for how to use this function to read values from elements and attributes.</para>
      <para>If the API fails, the state of input reader becomes undefined. The only APIs that may be used on the reader
if this occurs are <see cref="WsSetInput" /> and <see cref="WsSetInputToBuffer" /> to return the reader to a usable state,
or <see cref="WsFreeReader" /> to free the reader.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadValue">
    <summary>
      <para>Reads text from a Reader and parses it according to the specified value type.</para>
      <para>The Reader reads from its current position up to the next Start or End element and parses them according to the specified value type.  If the Reader is already positioned on a Start or End element the buffer remains empty.</para>
      <para>Comments are skipped and CDATA content is treated the same as other  element content.</para>
      <para>Leading and trailing whitespaces are ignored. If the value cannot be parsed according to the specified value type, the function returns a <b>WS_E_INVALID_FORMAT</b> error code. (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)<b>Note</b>  This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <b>XML Reader</b> from which the value is read.</para>
    </param>
    <param name="valueType">
      <para>The text interpretation type.</para>
    </param>
    <param name="value">
      <para>A pointer to the parsed data if parsing was successful according to the specified value type.  The size required is determined by value type.  See <see cref="WS_VALUE_TYPE" /> for more information.</para>
    </param>
    <param name="valueSize">
      <para>The byte size of the retrieved value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An example that reads an element containing an integer value.</para>
      <code>// Advance the reader to the element
HRESULT hr = WsReadToStartElement(reader, localName, ns, NULL, error);
if (FAILED(hr))
{
    return hr;
}
// Advance past the element to the content
hr = WsReadStartElement(reader, error);
if (FAILED(hr))
{
    return hr;
}
// Read the content as an integer
__int32 i;
hr = WsReadValue(reader, WS_INT32_VALUE_TYPE, &amp;amp;amp;amp;amp;amp;amp;i, sizeof(i), error);
if (FAILED(hr))
{
    return hr;
}
// Read the end element
hr = WsReadEndElement(reader, error);
if (FAILED(hr))
{
    return hr;
}
</code>
      <para>The grammar for the values types.</para>
      <code>
WS_BOOL_VALUE_TYPE     = "true"
                       | "false"
                       | "1"
                       | "0"
WS_INTxxx_VALUE_TYPE   = sign? digits
WS_UINTxxx_VALUE_TYPE  = digits
WS_FLOAT_VALUE_TYPE    = WS_DOUBLE_VALUE_TYPE
WS_DOUBLE_VALUE_TYPE   = sign? digits ("." digits)? exponent?
                       | "NaN"
                       | "INF"
                       | "-INF"
WS_DECIMAL_VALUE_TYPE  = sign? digits ("." digits)?
WS_GUID_VALUE_TYPE     = xxxxxxxx "-" xxxx "-" xxxx "-" xxxx "-" xxxxxxxxxxxx
WS_TIMESPAN_VALUE_TYPE = sign? (digits ".")? hh ":" mm ":" ss ("." d7)?
WS_DATETIME_VALUE_TYPE = yyyy "-" MM "-" dd "T" hh ":" mm ":" ss  ("." d7)? tz?
WS_DURATION_VALUE_TYPE = sign? "P" (digits "Y")  (digits "M")? (digits "D")?
                       | sign? "P" (digits "Y")? (digits "M")? (digits "D")?
                       | sign? "P" (digits "Y")? (digits "M")? (digits "D")
                       | sign? "P" (digits "Y")? (digits "M")? (digits "D")? "T" (digits "H")  (digits "M")? (digits ("." digits)? "S")?
                       | sign? "P" (digits "Y")? (digits "M")? (digits "D")? "T" (digits "H")? (digits "M")  (digits ("." digits)? "S")?
                       | sign? "P" (digits "Y")? (digits "M")? (digits "D")? "T" (digits "H")? (digits "M")? (digits ("." digits)? "S")
sign                   = "-"
                       | "+"
exponent               = E sign? digits
                       | e sign? digits
digits                 = [0-9]+
x                      = [0-9]
                       | [A-F]
                       | [a-f]
yyyy                   = 1-9999
hh                     = 0-23
mm                     = 0-59
ss                     = 0-59
MM                     = 1-31
tz                     = "Z"
                       | sign hh ":" mm
d7                     = digit digit? digit? digit? digit? digit? digit?

</code>
    </remarks>
  </member>
  <member name="Windows.WsReadXmlBuffer">
    <summary>
      <para>Reads the current node from a reader into a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
    </summary>
    <param name="reader">
      <para>The reader from which to read into the XML buffer.</para>
    </param>
    <param name="heap">
      <para>The heap from which to allocate the XML buffer.</para>
    </param>
    <param name="xmlBuffer">
      <para>The XML buffer is returned here.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the reader must be positioned at either <see cref="WS_XML_NODE_TYPE_BOF" />, or <b>WS_XML_NODE_TYPE_ELEMENT</b>.</para>
      <para>If the reader is positioned at <see cref="WS_XML_NODE_TYPE_BOF" />, then the entire document will be copied from the
reader into the XML buffer.</para>
      <para>If the reader is positioned at <see cref="WS_XML_NODE_TYPE_ELEMENT" />, then the element and all its children will be
read into the XML buffer.</para>
    </remarks>
  </member>
  <member name="Windows.WsReadXmlBufferFromBytes">
    <summary>
      <para>Uses a reader to convert a set of encoded bytes to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
    </summary>
    <param name="reader">
      <para>The reader to use to parse the encoded bytes.</para>
    </param>
    <param name="encoding">
      <para>The encoding to use when parsing the bytes.  If <b>NULL</b>, a <see cref="WS_XML_READER_TEXT_ENCODING" /></para>
      <para>with a charset of <see cref="WS_CHARSET_AUTO" /> will be used.</para>
    </param>
    <param name="properties">
      <para>An array of optional properties of the reader.  See <see cref="WS_XML_READER_PROPERTY" />.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
    </param>
    <param name="bytes">
      <para>The bytes to parse.</para>
    </param>
    <param name="byteCount">
      <para>The number of bytes to parse.</para>
    </param>
    <param name="heap">
      <para>The heap from which to allocate the XML buffer.</para>
    </param>
    <param name="xmlBuffer">
      <para>The XML buffer into which the bytes were read is returned here.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function will parse the entire contents according to the specified encoding and store it into a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
      <para>The reader will be left in an undefined state after calling this function.  However, <b>WsReadXmlBufferFromBytes</b> may be used again with such a reader.  Otherwise, <see cref="WsSetInput" /> or <see cref="WsSetInputToBuffer" /> should be
used to bring the reader back to a known state, or the reader should be freed using <see cref="WsFreeReader" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsReceiveMessage">
    <summary>
      <para>Receive a message and deserialize the body of the message as a value.</para>
    </summary>
    <param name="channel">
      <para>The channel to receive from.</para>
    </param>
    <param name="message">
      <para>The message object used to receive.</para>
      <para>The message should be in <see cref="WS_MESSAGE_STATE_EMPTY" /> state.</para>
    </param>
    <param name="messageDescriptions">
      <para>An array of pointers to message descriptions that specifies the metadata for
the expected types of messages.</para>
    </param>
    <param name="messageDescriptionCount">
      <para>The number of items in the messageDescriptions array.</para>
    </param>
    <param name="receiveOption">
      <para>Whether the message is required.  See <see cref="WS_RECEIVE_OPTION" /> for more information.</para>
    </param>
    <param name="readBodyOption">
      <para>Whether the body element is required, and how to allocate the value.
See <see cref="WS_READ_OPTION" /> for more information.</para>
    </param>
    <param name="heap">
      <para>The heap to store the deserialized values in.  If the heap is
not required for the given type, then this parameter can be <b>NULL</b>.</para>
    </param>
    <param name="value">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
      <para>If <see cref="WS_RECEIVE_OPTIONAL_MESSAGE" /> is specified for the receiveOption
parameter, and no more messages are available on the channel,
this parameter is not touched.  In this case, the function returns <b>WS_S_END</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>If the bodyElementDescription of the <see cref="WS_MESSAGE_DESCRIPTION" /> that
matched is <b>NULL</b>, then this parameter is not touched.  In this case, the
parameter does not need to be specified.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="index">
      <para>If <see cref="WS_RECEIVE_OPTIONAL_MESSAGE" /> is specified for the receiveOption
parameter, and no more messages are available on the channel,
this parameter is untouched.  In this case, the function will
return <b>WS_S_END</b>.</para>
      <para>Otherwise, if the function succeeds this will contain the zero-based
index into the array of message descriptions indicating which one matched.</para>
      <para>This parameter may be <b>NULL</b> if the caller is not interested in the value
(for example, if there is only one message description).</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_S_END</b>
            </para>
          </description>
          <description>
            <para>The receive option <see cref="WS_RECEIVE_OPTIONAL_MESSAGE" /> was specified and
there are no more messages available for the channel.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAULT_RECEIVED</b>
            </para>
          </description>
          <description>
            <para>The received message contained a fault.  The fault can be extracted from the
<a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> using <see cref="WsGetErrorProperty" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_CN_NO_MATCH</b>
            </para>
          </description>
          <description>
            <para>The certificates CN name does not match the passed value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_UNTRUSTEDROOT</b>
            </para>
          </description>
          <description>
            <para>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_WRONG_USAGE</b>
            </para>
          </description>
          <description>
            <para>The certificate is not valid for the requested usage.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CRYPT_E_REVOCATION_OFFLINE</b>
            </para>
          </description>
          <description>
            <para>The revocation function was unable to check revocation because the revocation server was offline.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function uses metadata about the expected message types in order to deserialize the body.
The metadata is an array of of pointers to <see cref="WS_MESSAGE_DESCRIPTION" />s.
Each message description contains an action value, which is used to match against
the action of the message, and an <see cref="WS_ELEMENT_DESCRIPTION" /> which provides the metadata for the body element.</para>
      <para>When the message headers have been received, the function will scan the array
in order to find a match against the action.  The first message description
that matches is used to deserialize the body, and the zero-based index
of this message description in the array is returned in the index out parameter.
If the function succeeds, the index out parameter will always be set to indicate which
message description was used.</para>
      <para>In order for a message description to match, the action value must match that of
the message exactly.  If the action in the <see cref="WS_MESSAGE_DESCRIPTION" /></para>
      <para>is <b>NULL</b>, then the action always matches.  This can be used in the case where there
is no action header in the received message, or if the body is always the same no matter
what the action is.</para>
      <para>If the body is expected to be empty, the bodyElementDescription field of the
<see cref="WS_MESSAGE_DESCRIPTION" /> may be <b>NULL</b>.</para>
      <para>If the bodyElementDescription is non-<b>NULL</b>, then this function deserializes the
body as described in <see cref="WsReadBody" />.</para>
      <para>After a message has been received, its headers can be inspected using <see cref="WsGetHeader" /> or <see cref="WsGetCustomHeader" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsRegisterOperationForCancel">
    <summary>
      <para>A service operation can use this function to register for a cancel notification.
It is only valid to call this API when the service operation is executing. The behavior
for calling it after the completion of Service Operation is not supported.</para>
      <para>While this API is being called and the runtime has determined that the cancellation of the
service operation is necessary, it can call the callback during the call to this API by the application.</para>
      <para>The caller should therefore assume that the runtime may call on the callback
<a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_operation_cancel_callback">WS_OPERATION_CANCEL_CALLBACK</a> as soon as the WsRegisterOperationForCancel is called.</para>
    </summary>
    <param name="context">
      <para>The context that the property value is being obtained for.</para>
    </param>
    <param name="cancelCallback">
      <para>Function pointer for cancel notification function.</para>
    </param>
    <param name="freestateCallback">
      <para>A optional parameter specifying the function pointer to the free state call.</para>
    </param>
    <param name="userState">
      <para>A optional parameter specifying the application specific state which can be used to identify call data.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.WsRemoveCustomHeader">
    <summary>
      <para>Removes a custom header from the message.</para>
      <para>This function is designed to handle types of headers that appear once in the message and are targeted at the ultimate receiver. Headers targeted with a role other than ultimate receiver are ignored.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object with the header  to be removed.</para>
      <para>The message can be in any state except <b>WS_MESSAGE_STATE_EMPTY</b>.</para>
    </param>
    <param name="headerName">
      <para>A pointer to the <see cref="WS_XML_STRING" /> object that references the "local name" of the header element to be  removed.</para>
    </param>
    <param name="headerNs">
      <para>A pointer to the <see cref="WS_XML_STRING" /> object that references the namespace of the header element to be removed.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>There are multiple instances of the type of header present in the message.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough memory available to serialize the header.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a header of the given type exists in the message it is removed.  If the header does not exist, the function takes no action and completes successfully.</para>
    </remarks>
  </member>
  <member name="Windows.WsRemoveHeader">
    <summary>
      <para>Removes the standard <see cref="WS_HEADER_TYPE" /> object from a message.</para>
      <para>The function is designed to handle types of headers that appear once in the message and are targeted at the ultimate receiver. Headers targeted with a role other than ultimate receiver are ignored.</para>
      <para>For application-defined header types use the <see cref="WsRemoveCustomHeader" /> function.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object with the header  to be removed. The message can be in any state except <b>WS_MESSAGE_STATE_EMPTY</b>.</para>
    </param>
    <param name="headerType">
      <para>Indicates the type of header to be removed.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>There are multiple instances of the type of header present in the message.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a header of the given type exists in the message it is removed.  If the header does not exist, no action is taken
and the function completes successfully.</para>
    </remarks>
  </member>
  <member name="Windows.WsRemoveMappedHeader">
    <summary>
      <para>Removes all instances of a mapped header from the message.</para>
    </summary>
    <param name="message">
      <para>The message to set the header in.</para>
      <para>The message can be in any state but <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="headerName">
      <para>The name of the mapped header to remove.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A message may contain additional transport-specific information that is
not part of the message envelope.  This transport-specific information
can be exposed programmatically as headers of the Message object.
This function is used to remove mapped headers from the message object.
This can be used by a custom channel implementation to remove mapped headers
prior to sending the message.</para>
    </remarks>
  </member>
  <member name="Windows.WsRemoveNode">
    <summary>
      <para>Removes the node at the specified position from the xml buffer.  If positioned
on an element it will remove the element including all of its children and its
corresponding end element, otherwise it will remove a single node.</para>
      <para>The use of any API with a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> or <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> that
currently depends on this position or a child of this position will fail. The
WS_XML_READER or WS_XML_WRITER must be repositioned
before using further.</para>
      <para>It will return <b>WS_E_INVALID_OPERATION</b> if the node is positioned on an end
element or the root of the document.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>Calling <see cref="WsSetReaderPosition" /> or <see cref="WsSetWriterPosition" /> after calling <b>WsRemoveNode</b> will fail.</para>
    </summary>
    <param name="nodePosition">
      <para>The position of the node that should be removed.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsRequestReply">
    <summary>
      <para>Used to send a request message and receive a correlated reply message.</para>
    </summary>
    <param name="channel">
      <para>The channel to do the request-reply operation on.</para>
    </param>
    <param name="requestMessage">
      <para>The message object to use to send the request.</para>
      <para>The message object should be in <see cref="WS_MESSAGE_STATE_EMPTY" /> or
<b>WS_MESSAGE_STATE_INITIALIZED</b>.</para>
    </param>
    <param name="requestMessageDescription">
      <para>The action field of the <see cref="WS_MESSAGE_DESCRIPTION" /> is used as the
action header for the request message.  This field may be <b>NULL</b> if no action
is required.</para>
      <para>The bodyElementDescription field of the <see cref="WS_MESSAGE_DESCRIPTION" /> is used to serialize the body of the request message.  This field may be
<b>NULL</b> if no body element is desired.  See <see cref="WsWriteBody" /> for
information about how the body is serialized according to the bodyElementDescription.</para>
    </param>
    <param name="writeOption">
      <para>Whether the body element is required, and how the value is allocated.
See <see cref="WS_WRITE_OPTION" /> for more information.</para>
    </param>
    <param name="requestBodyValue">
      <para>A pointer to the value to serialize in the body of the request object.</para>
    </param>
    <param name="requestBodyValueSize">
      <para>The size of the request value being serialized, in bytes.</para>
    </param>
    <param name="replyMessage">
      <para>The message object to use to receive the reply.</para>
      <para>The message object should be in <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="replyMessageDescription">
      <para>The action field of the <see cref="WS_MESSAGE_DESCRIPTION" /> is used to verify
the action header of the received reply message.  This field may be <b>NULL</b> if no action
is required.  If <b>NULL</b>, the action header of the received message is ignored
if present.</para>
      <para>The bodyElementDescription field of the <see cref="WS_MESSAGE_DESCRIPTION" /> is used to deserialize the body of the reply message.  This field may be
<b>NULL</b> if no body element is desired.  See <see cref="WsReadBody" /> for
information about how the body is deserialized according to the bodyElementDescription.</para>
    </param>
    <param name="readOption">
      <para>Whether the reply body element is required, and how to allocate the value.                    For more information, see <see cref="WS_READ_OPTION" /> and <see cref="WsReadBody" />.</para>
    </param>
    <param name="heap">
      <para>The heap used to allocate deserialized reply body values.
If the heap is not necessary for the given type, then this
parameter can be <b>NULL</b>.</para>
    </param>
    <param name="value">
      <para>Where to store the deserialized values of the body.</para>
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
      <para>If the bodyElementDescription of the reply <see cref="WS_MESSAGE_DESCRIPTION" /></para>
      <para>is <b>NULL</b>, then this parameter is not touched.  In this case, the
parameter does not need to be specified.</para>
    </param>
    <param name="valueSize">
      <para>The interpretation of this parameter depends on the <see cref="WS_READ_OPTION" />.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAULT_RECEIVED</b>
            </para>
          </description>
          <description>
            <para>The reply message contained a fault.  The fault can be extracted from the
<a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> using <see cref="WsGetErrorProperty" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_CN_NO_MATCH</b>
            </para>
          </description>
          <description>
            <para>The certificates CN name does not match the passed value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_UNTRUSTEDROOT</b>
            </para>
          </description>
          <description>
            <para>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_WRONG_USAGE</b>
            </para>
          </description>
          <description>
            <para>The certificate is not valid for the requested usage.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CRYPT_E_REVOCATION_OFFLINE</b>
            </para>
          </description>
          <description>
            <para>The revocation function was unable to check revocation because the revocation server was offline.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The messages are correlated as appropriate to the <see cref="WS_ADDRESSING_VERSION" />.
See <a href="https://docs.microsoft.com//windows/desktop/wsw/channel-layer-overview">Channel Layer Overview</a> for more information about correlating
request reply messages.</para>
    </remarks>
  </member>
  <member name="Windows.WsRequestSecurityToken">
    <summary>
      <para>Get a security token from a security token service (STS) that acts as
the token issuer in a federation scenario.
This function is used on the client side, and performs the WS-Trust
based negotiation steps with the STS until the security token is
obtained or the negotiation process fails.</para>
    </summary>
    <param name="channel">
      <para>The channel on which the negotiation to obtain the security token
should take place.</para>
      <para>The supplied channel should have been <see cref="created" /> with the appropriate <see cref="WS_SECURITY_DESCRIPTION" /> to meet the security requirements of
the issuer, and then <see cref="opened" /> to the <see cref="WS_ENDPOINT_ADDRESS" /> of the issuer.  The caller is also
responsible for <see cref="closing" /> and <see cref="freeing" /> the channel after the completion of
this function.</para>
      <para>Thus, the channel must be in state <see cref="WS_CHANNEL_STATE_OPEN" /> when this function is called.  After a successful completion of this
function, the channel will be in state <b>WS_CHANNEL_STATE_OPEN</b>.  After a failed completion, it will
either be in state <b>WS_CHANNEL_STATE_OPEN</b> or state <b>WS_CHANNEL_STATE_FAULTED</b>.</para>
    </param>
    <param name="properties">
      <para>An optional group of settings to be used in the negotiation process
with the issuer.</para>
    </param>
    <param name="propertyCount">
      <para>The number of items in the properties array.</para>
    </param>
    <param name="token">
      <para>The XML security token obtained.  This is set upon successful
completion of the function call, and is unmodified if any failure
occurs during the execution of the function.</para>
      <para>The returned security token may be used with <see cref="WS_XML_TOKEN_MESSAGE_SECURITY_BINDING" /> if it is to be
presented to a service.  The token must be freed using <see cref="WsFreeSecurityToken" /> when it is no longer needed.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Windows 7 and Windows Server 2008 R2: WWSAPI only supports <a href="http://specs.xmlsoap.org/ws/2005/02/trust/ws-trust.pdf">Ws-Trust</a> and <a href="http://specs.xmlsoap.org/ws/2005/02/sc/ws-secureconversation.pdf">Ws-SecureConversation</a> as defined by <a href="https://docs.microsoft.com//openspecs/windows_protocols/ms-lwssp/376af2f8-f4fe-4577-bfd5-370ac12cac2e">Lightweight Web Services Security Profile (LWSSP)</a>. For details regarding Microsoft's implementation please see the <a href="https://docs.microsoft.com//openspecs/windows_protocols/ms-lwssp/d4f0f509-e14a-47b5-81e8-ade06a51d1ed">MESSAGE Syntax</a> section of LWSSP.</para>
    </remarks>
  </member>
  <member name="Windows.WsResetChannel">
    <summary>
      <para>Reset a channel so it can be reused.</para>
    </summary>
    <param name="channel">
      <para>The channel to reset.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The channel was in an inappropriate state.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Reusing a channel instead of creating one from scratch may improve performance.</para>
      <para>This function is only valid when the channel is in the either the
<see cref="WS_CHANNEL_STATE_CREATED" /> or <b>WS_CHANNEL_STATE_CLOSED</b> state.</para>
      <para>If called correctly, this function will not fail (for example, due to lack of system resources).</para>
    </remarks>
  </member>
  <member name="Windows.WsResetError">
    <summary>
      <para>Releases the content of the <i>error</i> object parameter but does not release the resource allocated to the <i>error</i> object parameter.
<b>Note</b>  The "reset" effect of this function returns the <i>error</i> object to the state set at instantiation. The object is not released consequently is available for reuse.</para>
    </summary>
    <param name="error">
      <para>This parameter is a   pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object to reset.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>String data added to the error object using the <see cref="WsAddErrorString" /> function are released.</para>
      <para>Properties that have been set using the  <see cref="WsSetErrorProperty" /> function are released.</para>
    </remarks>
  </member>
  <member name="Windows.WsResetHeap">
    <summary>
      <para>Releases all Heap allocations.  Allocations made on the Heap
using <see cref="WsAlloc" /> are no longer valid.  Allocation for the Heap object itself is not released.</para>
    </summary>
    <param name="heap">
      <para>A pointer to a Heap instance to reset.
If the heap is not required for the given type this
parameter can be <b>NULL</b>.</para>
      <para>The heap object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The heap object can retain allocated memory even though it has been reset.  The amount of memory retained
can be specified using the <see cref="WS_HEAP_PROPERTY_TRIM_SIZE" /></para>
      <para>property when creating the heap.</para>
    </remarks>
  </member>
  <member name="Windows.WsResetListener">
    <summary>
      <para>Resets a Listener object so it can be reused.</para>
      <para>Use of this function requires that the Listener state be set to <b>WS_LISTENER_STATE_CREATED</b> or <b>WS_LISTENER_STATE_CLOSED</b>.</para>
    </summary>
    <param name="listener">
      <para>A pointer to the <b>Listener</b> object to reset.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a>.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The listener was in an inappropriate state.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before reusing a listener, this function should be called.</para>
    </remarks>
  </member>
  <member name="Windows.WsResetMessage">
    <summary>
      <para>Sets the Message state back to <b>WS_MESSAGE_STATE_EMPTY</b>.  In this state the Message object can be reused.</para>
    </summary>
    <param name="message">
      <para>A pointer to the Message  object to reset.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When a message is reset, its underlying heap is reset.</para>
      <para>Reusing a message object to receive or send multiple messages is is generally
more efficient than creating and freeing the message object for each message.</para>
    </remarks>
  </member>
  <member name="Windows.WsResetMetadata">
    <summary>
      <para>Resets a metadata object state to <b>WS_METADATA_STATE_CREATED</b>.</para>
      <para>In this state the Metadata object can be reused. <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-policy">WS_POLICY</a> objects that were retrieved using the Metadata object will be released.</para>
    </summary>
    <param name="metadata">
      <para>A pointer to the <b>Metadata</b> object to reset.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-metadata">WS_METADATA</a>.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The metadata was in an inappropriate state.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Reusing a metadata instead of creating one from scratch may improve performance.
If called correctly, this function will not fail.</para>
    </remarks>
  </member>
  <member name="Windows.WsResetServiceHost">
    <summary>
      <para>Resets service host so that it can be opened again.</para>
      <para>Rather the creating a new service host from scratch <b>WsResetServiceHost</b></para>
      <para>provides a convenient way to reuse service host. Specifically in a scenario
where a service host has to go through close and open on a regular basis,
this allows for an efficient way for reusing the same service host. It resets
the underlying channel and listeners for reuse.</para>
    </summary>
    <param name="serviceHost">
      <para>The service host to reset.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The serviceHost was in an inappropriate state.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsResetServiceProxy">
    <summary>
      <para>Resets service proxy.</para>
      <para>WsResetServiceProxy provides a convenient way to reuse the service proxy.
Once the proxy is <see cref="closed" />,
the application can call WsResetServiceProxy to reuse it.</para>
      <para>Reusing the service proxy is helpful in scenarios where an application connects
to the same service time and time again. The cost of initialization is only paid
once during the initial creation of the service proxy.</para>
    </summary>
    <param name="serviceProxy">
      <para>The service proxy.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The serviceProxy was in an inappropriate state.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsRevokeSecurityContext">
    <summary>
      <para>Revokes a security context. Can only be called on the server side.
Further requests using this security context will fail and a fault will be sent to the client.</para>
      <para>This function can be used when the server knows that no more messages are
coming and does not want to wait for the client or the context timeouts to
trigger the reclaiming of resources, or when the server wants to engage in
active context management.</para>
    </summary>
    <param name="securityContext">
      <para>The security context to be revoked.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.WsSendFaultMessageForError">
    <summary>
      <para>Sends a fault message given a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object.</para>
    </summary>
    <param name="channel">
      <para>The channel to send the message on.</para>
    </param>
    <param name="replyMessage">
      <para>A message object to use to send the reply message.</para>
      <para>The message object should be in <see cref="WS_MESSAGE_STATE_EMPTY" /> or
<b>WS_MESSAGE_STATE_INITIALIZED</b>.  If an initialized message is provided,
it should have been initialized using <see cref="WS_FAULT_MESSAGE" />.</para>
    </param>
    <param name="faultError">
      <para>The error object to use to construct the fault.</para>
    </param>
    <param name="faultErrorCode">
      <para>The error code associated with the fault.  This cannot
be a success code.</para>
      <para>This error code is never included in the fault message directly, but
instead is used as a fallback mechanism for creating a fault string in the case that
the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object does not contain any error strings.</para>
    </param>
    <param name="faultDisclosure">
      <para>Controls how much of the error information is included in the fault message.</para>
    </param>
    <param name="requestMessage">
      <para>The request message.  This is used to obtain correlation information used
in formulating the reply message.</para>
      <para>The message can be in any state but <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <see cref="WS_FAULT" /> that is sent in the body of the message
is constructed using the same rules as defined by <see cref="WsCreateFaultFromError" />.</para>
      <para>The value of the <see cref="WS_ACTION_HEADER" /> used for
the reply message is computed as follows:</para>
      <list type="bullet">
        <item>
          <description>If the <see cref="WS_CHANNEL_PROPERTY_ADDRESSING_VERSION" /> of the
channel is <see cref="WS_ADDRESSING_VERSION_TRANSPORT" />, then no
action is included in the message because the addressing
version does not permit an action value for faults.
</description>
        </item>
        <item>
          <description>If the error object contains an action string (the
length of the string returned by <see cref="WS_FAULT_ERROR_PROPERTY_ACTION" /> is greater than zero), then the action string is used.
</description>
        </item>
        <item>
          <description>If the error object does not contain an action, then
a default action value is supplied.
</description>
        </item>
      </list>
      <para>If the error object contains a header used to describe the
fault as specified by <see cref="WS_FAULT_ERROR_PROPERTY_HEADER" />,
then the header is added to the headers of the fault message.</para>
      <para>The fault message will include correlation information as appropriate
to the <see cref="WS_ADDRESSING_VERSION" />.  See <a href="https://docs.microsoft.com//windows/desktop/wsw/channel-layer-overview">Channel Layer Overview</a> for more information about correlating request reply messages.</para>
      <para>If sending a fault without a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object, use
<see cref="WsSendReplyMessage" />.</para>
      <para>To add custom headers to the message, initialize the message <see cref="WsInitializeMessage" /> with <see cref="WS_FAULT_MESSAGE" /> and then add the headers using
<see cref="WsAddCustomHeader" /> before calling this function.</para>
    </remarks>
  </member>
  <member name="Windows.WsSendMessage">
    <summary>
      <para>Send a message on a channel using serialization to write the body element.</para>
    </summary>
    <param name="channel">
      <para>The channel to send the message on.</para>
    </param>
    <param name="message">
      <para>The message object to use for sending.</para>
      <para>The message object must be in <see cref="WS_MESSAGE_STATE_EMPTY" /> or
<b>WS_MESSAGE_STATE_INITIALIZED</b>.</para>
    </param>
    <param name="messageDescription">
      <para>The action field of the <see cref="WS_MESSAGE_DESCRIPTION" /> is used as the
action header for the message.  This field may be <b>NULL</b> if no action
is required.</para>
      <para>The bodyElementDescription field of the <see cref="WS_MESSAGE_DESCRIPTION" /> is used to serialize the body of the message.  This field may be
<b>NULL</b> if no body element is desired.  See <see cref="WsWriteBody" /> for
information about how the bodyElementDescription is used to serialize
the value.</para>
    </param>
    <param name="writeOption">
      <para>Whether the body element is required, and how the value is allocated. This is used
only when a body element is desired. For more information, see <see cref="WS_WRITE_OPTION" /> and
<see cref="WsWriteBody" />.</para>
    </param>
    <param name="bodyValue">
      <para>The value to serialize in the body of the message.</para>
    </param>
    <param name="bodyValueSize">
      <para>The size of the value being serialized, in bytes.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_CN_NO_MATCH</b>
            </para>
          </description>
          <description>
            <para>The certificates CN name does not match the passed value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_UNTRUSTEDROOT</b>
            </para>
          </description>
          <description>
            <para>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_WRONG_USAGE</b>
            </para>
          </description>
          <description>
            <para>The certificate is not valid for the requested usage.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CRYPT_E_REVOCATION_OFFLINE</b>
            </para>
          </description>
          <description>
            <para>The revocation function was unable to check revocation because the revocation server was offline.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To include custom headers with the message, initialize the message <see cref="WsInitializeMessage" /> with <see cref="WS_BLANK_MESSAGE" /> and then add the headers using <see cref="WsAddCustomHeader" /></para>
      <para>before calling this function.</para>
    </remarks>
  </member>
  <member name="Windows.WsSendReplyMessage">
    <summary>
      <para>Sends a message which is a reply to a received message.</para>
    </summary>
    <param name="channel">
      <para>A pointer to the <b>Channel</b> object on which to send the reply Message.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-channel">WS_CHANNEL</a> object.</para>
    </param>
    <param name="replyMessage">
      <para>A pointer to the <b>Message</b> object for sending the reply.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object.</para>
      <para>Message object state must be set to <b>WS_MESSAGE_STATE_EMPTY</b>  or <b>WS_MESSAGE_STATE_INITIALIZED</b>.</para>
      <para>
        <b>Note</b>  If an initialized message is provided it must be initialized using <b>WS_REPLY_MESSAGE</b> or <b>WS_FAULT_MESSAGE</b>.</para>
    </param>
    <param name="replyMessageDescription">
      <para>A pointer to a <see cref="WS_MESSAGE_DESCRIPTION" /> object.  The <b>action</b> field of <b>WS_MESSAGE_DESCRIPTION</b> is used as the <b>action</b> header for the reply message.  This field can be <b>NULL</b> if no action is required.</para>
      <para>The <b>bodyElementDescription</b>  field of the <see cref="WS_MESSAGE_DESCRIPTION" /> is used to serialize the body of the reply message.  This field may be <b>NULL</b> if no body element is desired.  See <see cref="WsWriteBody" /> for information about how the <b>bodyElementDescription</b> is used to serialize a value.</para>
    </param>
    <param name="writeOption">
      <para>Determines whether the body element is required, and how the value is allocated.</para>
      <para>See <see cref="WS_WRITE_OPTION" /> for more information.</para>
    </param>
    <param name="replyBodyValue">
      <para>A void pointer to the value to serialize in the reply message.</para>
    </param>
    <param name="replyBodyValueSize">
      <para>The size  in bytes of the reply value being serialized.</para>
    </param>
    <param name="requestMessage">
      <para>A pointer to a WS_MESSAGE object encapsulating the request message text.  This is used to obtain correlation information used in formulating the reply message.</para>
      <para>
        <b>Note</b>  The message can be in any state except <b>WS_MESSAGE_STATE_EMPTY</b>.</para>
    </param>
    <param name="asyncContext">
      <para>A pointer to a <see cref="WS_ASYNC_CONTEXT" /> data structure with information about invoking the function asynchronously.  A <b>NULL</b> value indicates a request for synchronous operation.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The reply message will including correlation information as appropriate
to the <see cref="WS_ADDRESSING_VERSION" />.  See <a href="https://docs.microsoft.com//windows/desktop/wsw/channel-layer-overview">Channel Layer Overview</a></para>
      <para>for more information about correlating request reply messages.</para>
    </remarks>
  </member>
  <member name="Windows.WsSetChannelProperty">
    <summary>
      <para>Sets a property of the channel.</para>
    </summary>
    <param name="channel">
      <para>A pointer to the <b>Channel</b> on which to set the property and may not be <b>NULL</b>.</para>
    </param>
    <param name="id">
      <para>Identifier of the property to set.</para>
    </param>
    <param name="value">
      <para>A void pointer to the property value to set.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The size in bytes of of the property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object.</para>
            <para>The specified size was not appropriate for the property.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough space to set the property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsSetErrorProperty">
    <summary>
      <para>Sets an <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object property.</para>
    </summary>
    <param name="error">
      <para>A pointer to the <b>Error</b> object in which to set the property.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object.</para>
    </param>
    <param name="id">
      <para>Identifier of the property to set.</para>
    </param>
    <param name="value">
      <para>A pointer to the property value to set.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The size in bytes of the property value.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object.</para>
            <para>The specified size was not appropriate for the property.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough space to set the property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsSetFaultErrorDetail">
    <summary>
      <para>Write the fault detail stored in a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object.</para>
    </summary>
    <param name="error">
      <para>The error object that will contain the fault information.</para>
    </param>
    <param name="faultDetailDescription">
      <para>A pointer to a description of the fault detail.</para>
      <para>If the action field of the fault detail description is non-<b>NULL</b>,
then it is set as the <see cref="WS_FAULT_ERROR_PROPERTY_ACTION" /> of the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a>.</para>
      <para>The element description of the fault detail description
describes the format of the element in the fault detail.</para>
    </param>
    <param name="writeOption">
      <para>Information about how the value is allocated.
See <see cref="WS_WRITE_OPTION" /> for more information.</para>
    </param>
    <param name="value">
      <para>A pointer to the value to serialize.</para>
    </param>
    <param name="valueSize">
      <para>The size of the value being serialized, in bytes.</para>
      <para>If the value is <b>NULL</b>, then the size should be 0.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API will serialize the value of the detail field of
the <see cref="WS_FAULT" /> stored in the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object.</para>
      <para>This functions supports the following scenarios, based on the contents
of the <see cref="WS_ELEMENT_DESCRIPTION" /> in the <see cref="WS_FAULT_DETAIL_DESCRIPTION" /> supplied:</para>
      <list type="bullet">
        <item>
          <description>Writing a single element.  In this case, the elementLocalName and elementNs
fields of the <see cref="WS_ELEMENT_DESCRIPTION" /> should be set to the local name
and namespace of the element to write, and the type and type description represents
the type of the value being serialized.
</description>
        </item>
        <item>
          <description>Writing multiple elements as a single value.  In this case, the elementLocalName and elementNs
fields of the <see cref="WS_ELEMENT_DESCRIPTION" /> should be set to <b>NULL</b>, and a <see cref="WS_STRUCT_TYPE" /> and <see cref="WS_STRUCT_DESCRIPTION" /> should be specified.  Each field of the
structure value being serialized should correspond to element(s) to write within the fault detail.
The writeOption parameter must be either <see cref="WS_WRITE_REQUIRED_VALUE" /> or
<b>WS_WRITE_REQUIRED_POINTER</b>.
</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.WsSetFaultErrorProperty">
    <summary>
      <para>Set a Fault property of a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object.</para>
    </summary>
    <param name="error">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object in which to set the property.  The pointer must reference a valid WS_ERROR object.</para>
    </param>
    <param name="id">
      <para>Identifier of the property to set.</para>
    </param>
    <param name="value">
      <para>The property value to set.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The size in bytes of the property value.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object.</para>
            <para>The specified size was not appropriate for the property.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough space to set the property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsSetHeader">
    <summary>
      <para>Adds or replaces the specified standard header in the message.</para>
    </summary>
    <param name="message">
      <para>The message to set the header in.</para>
      <para>The message can be in any state but <see cref="WS_MESSAGE_STATE_EMPTY" />.</para>
    </param>
    <param name="headerType">
      <para>The type of header to serialize.</para>
    </param>
    <param name="valueType">
      <para>The type of the value to serialize.  See <see cref="WS_HEADER_TYPE" /> for
the set of types supported for each type of header.</para>
    </param>
    <param name="writeOption">
      <para>Whether the header element is required, and how the value is allocated.
<see cref="WS_WRITE_NILLABLE_VALUE" /> and <b>WS_WRITE_NILLABLE_POINTER</b></para>
      <para>write options cannot be specified since the header types in <see cref="WS_HEADER_TYPE" /></para>
      <para>are not allowed to be nillable in the respective standards specifications.
See <b>WS_WRITE_OPTION</b> for more information.</para>
    </param>
    <param name="value">
      <para>The header value to serialize.  See <see cref="WS_WRITE_OPTION" /> for
more information.</para>
    </param>
    <param name="valueSize">
      <para>The size of the value being serialized, in bytes.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>There are multiple instances of the type of header present in the message.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough memory available to serialize the header.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are incorrect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API allows setting of standard header types (see <see cref="WS_HEADER_TYPE" />).
For application defined header types, use <see cref="WsAddCustomHeader" />.</para>
      <para>This API is designed handle types of headers that appear once in the
message and are targeted at the ultimate receiver.  Headers targeted
with a role/actor other than ultimate receiver are ignored by this API.</para>
      <para>If a header of the given type (targeted at the ultimate receiver) already
exists in the message, it is replaced.</para>
    </remarks>
  </member>
  <member name="Windows.WsSetInputToBuffer">
    <summary>
      <para>Sets Reader input to a specified XML buffer.
Reader properties
specified to <b>WsSetInputToBuffer</b>  override properties set by <see cref="WsCreateReader" />.</para>
      <para>The reader does not modify <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> input data.
<b>Note</b>  It is permissible for more than one reader to read from the same <b>WS_XML_BUFFER</b>.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object for which the input will be set.</para>
    </param>
    <param name="buffer">
      <para>A pointer to the XML buffer to read.</para>
    </param>
    <param name="properties">
      <para>A pointer that references an array of optional Reader properties.  <b>Note</b>  For more information see <see cref="WS_XML_READER_PROPERTY" />.
.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>When an XML Reader has an XML Buffer as an input source, the Reader can be used in a random access fashion, and
the functions <see cref="WsGetReaderPosition" />, <see cref="WsSetReaderPosition" />, and <see cref="WsMoveReader" /> are available for use.</para>
    </remarks>
  </member>
  <member name="Windows.WsSetListenerProperty">
    <summary>
      <para>Sets a Listenerobject property.</para>
    </summary>
    <param name="listener">
      <para>A pointer to the <b>Listener</b> object with the property to set.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-listener">WS_LISTENER</a> and may not be <b>NULL</b>.</para>
    </param>
    <param name="id">
      <para>Identifier of the property to set.</para>
    </param>
    <param name="value">
      <para>A void pointer to the property value to set.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The size in bytes  of the property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object.</para>
            <para>The specified size was not appropriate for the property.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough space to set the property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsSetMessageProperty">
    <summary>
      <para>This operation sets a Messageproperty.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object with the property to set.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object and the referenced value may not be <b>NULL</b>.</para>
    </param>
    <param name="id">
      <para>The identifier of the property to set.</para>
    </param>
    <param name="value">
      <para>A pointer to the property value to set.
The pointer must have an alignment compatible with the type
of the property.</para>
    </param>
    <param name="valueSize">
      <para>The size in bytes  of the property value.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The property id was not supported for this object.</para>
            <para>The specified size was not appropriate for the property.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough space to set the property value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsSetOutput">
    <summary>
      <para>Sets the encoding and output callbacks for the writer.  The callbacks are used to
provides buffers to the writer and to perform asynchronous i/o.</para>
    </summary>
    <param name="writer">
      <para>The writer for which the output will be set.</para>
    </param>
    <param name="encoding">
      <para>The encoding describes the format of the input bytes.  This should be one of <see cref="WS_XML_WRITER_TEXT_ENCODING" />,
<see cref="WS_XML_WRITER_BINARY_ENCODING" /> or <see cref="WS_XML_WRITER_MTOM_ENCODING" />.</para>
    </param>
    <param name="output">
      <para>Specifies where the writer should place its data.</para>
    </param>
    <param name="properties">
      <para>An array of optional properties of the writer.  See <see cref="WS_XML_WRITER_PROPERTY" />.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When <b>WsSetOutput</b> is used on the writer, the writer will function in a forward only manner and
the functions <see cref="WsGetWriterPosition" />, <see cref="WsSetWriterPosition" /> and <see cref="WsMoveWriter" /> cannot be used.</para>
      <para>If <see cref="encoding" /> is <b>NULL</b>, then <see cref="WS_XML_WRITER_OUTPUT" /> is ignored and the writer is set up so that any attempt to write to it will fail.</para>
      <para>If <see cref="encoding" /> is not <b>NULL</b>, then <see cref="WS_XML_WRITER_OUTPUT" /> must be non-<b>NULL</b> as well.</para>
      <para>If <see cref="WS_XML_WRITER_OUTPUT" /> is <see cref="WS_XML_WRITER_BUFFER_OUTPUT" /> then the writer will buffer the generated
bytes of the document.  Use <see cref="WsGetWriterProperty" /> with <see cref="WS_XML_WRITER_PROPERTY_BUFFERS" /> or
<b>WS_XML_WRITER_PROPERTY_BYTES</b> to obtain these bytes.  In this mode <see cref="WsFlushWriter" /> has no effect.</para>
      <para>If <see cref="WS_XML_WRITER_OUTPUT" /> is <see cref="WS_XML_WRITER_STREAM_OUTPUT" /> then the writer will pass the generated
bytes of the document to the specified <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_write_callback">WS_WRITE_CALLBACK</a> during calls to <see cref="WsFlushWriter" />.</para>
      <para>The writer will be initialized to use the properties specified in <see cref="WsCreateWriter" />.  Any properties
specified to <b>WsSetOutput</b> will override those properties.</para>
      <para>See <see cref="WsCreateWriter" /> for the default values of the properties of the writer.</para>
    </remarks>
  </member>
  <member name="Windows.WsSetOutputToBuffer">
    <summary>
      <para>This operation positions the Writer at the end of the specified buffer.</para>
      <para>When an XML Writer has an XML Buffer set as output the Writer can be used in a "random access" fashion and the functions <see cref="WsGetWriterPosition" />, <see cref="WsSetWriterPosition" /> and <see cref="WsMoveWriter" /> can be used.</para>
      <para>Properties specified for this function override those specified with the <code>WsCreateWriter</code> function. <b>Note</b>  See <see cref="WsCreateWriter" /> for the default values of the properties of the writer.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object for which the output is set.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="buffer">
      <para>A pointer to the buffer where the Writer sends the data.</para>
    </param>
    <param name="properties">
      <para>A WS_XML_WRITER_PROPERTY pointer that  references an "array" of optional Writer properties.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See <see cref="WsCreateWriter" /> for the default values of the properties of the writer.</para>
    </remarks>
  </member>
  <member name="Windows.WsSetReaderPosition">
    <summary>
      <para>Sets the current position of the Reader.  The position must have been obtained by a call to <see cref="WsGetReaderPosition" /> or <see cref="WsGetWriterPosition" />.</para>
      <para>This function can only be used on a reader that is set to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
    </summary>
    <param name="reader">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object for which the current position is set.  The pointer must reference a valid <b>XML Reader</b> object.</para>
    </param>
    <param name="nodePosition">
      <para>A pointer to the position to set the Reader.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See <see cref="WS_XML_NODE_POSITION" /> for more information on using positions.</para>
      <para>This function cannot be used while canonicalizing.  If <see cref="WsStartReaderCanonicalization" /> has
been called, then it will return <b>WS_E_INVALID_OPERATION</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </remarks>
  </member>
  <member name="Windows.WsSetWriterPosition">
    <summary>
      <para>Sets the current position of the writer.  The position must have been obtained by a
call to <see cref="WsGetReaderPosition" /> or <see cref="WsGetWriterPosition" />.</para>
    </summary>
    <param name="writer">
      <para>The writer for which the current position will be set.</para>
    </param>
    <param name="nodePosition">
      <para>The position to set the writer to.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This can only be used on a writer that is set to an <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
      <para>When writing to a buffer, the position represents the xml node before which new data will be placed.</para>
      <para>See <see cref="WS_XML_NODE_POSITION" /> for more information on using positions.</para>
    </remarks>
  </member>
  <member name="Windows.WsShutdownSessionChannel">
    <summary>
      <para>Used to signal the end of messages for a session channel.</para>
    </summary>
    <param name="channel">
      <para>The session channel to shut down.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>This is returned if the channel is not in the <see cref="WS_CHANNEL_STATE_OPEN" /> state.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function will indicate to the remote party that all
messages have been sent for the channel.</para>
      <para>The remote party can detect that no more messages are available on the channel by
looking for the <b>WS_S_END</b> return value when receiving a message. (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.) However,
messages can also become unavailable if the non-application messages were filtered by
the channel as described in <a href="https://docs.microsoft.com//windows/desktop/wsw/channel-layer-overview">Channel Layer Overview</a>. Session shutdown can
be distinguished from message filtering by keeping track of whether prior messages were
received. If prior messages were received then the session was shut down.</para>
      <para>This function only applies to channels created with a
<see cref="WS_CHANNEL_TYPE" /> with a session that support
sending of messages:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="WS_CHANNEL_TYPE_OUTPUT_SESSION" />
          </description>
        </item>
        <item>
          <description>
            <see cref="WS_CHANNEL_TYPE_DUPLEX_SESSION" />
          </description>
        </item>
      </list>
      <para>The channel must be in <see cref="WS_CHANNEL_STATE_OPEN" /> state.</para>
      <para>If this function is successful, the value of the
<see cref="WS_CHANNEL_PROPERTY_IS_SESSION_SHUT_DOWN" /> property
will be <b>TRUE</b>.</para>
      <para>Once a session channel has been shut down, attempting
to send a message on the channel or attempting to shut down
the channel will return <b>WS_E_INVALID_OPERATION</b>.</para>
      <para>Calling this function is optional.  When a session channel is closed using
<see cref="WsCloseChannel" /> when in <see cref="WS_CHANNEL_STATE_OPEN" />,
then the channel is automatically shut down as part of the close process.</para>
    </remarks>
  </member>
  <member name="Windows.WsSkipNode">
    <summary>
      <para>Advances the reader in the input stream.  If the current node is an element,
all of the children of that element are skipped, and the reader is positioned
on the node following its end element.  Otherwise, the reader is positioned
on the next node in the same manner as <see cref="WsReadNode" />.</para>
    </summary>
    <param name="reader">
      <para>The reader which is to skip to the next node.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If there is an error parsing the input, the function will return <b>WS_E_INVALID_FORMAT</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>This function can fail for any of the reasons listed in <see cref="WsReadNode" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsStartReaderCanonicalization">
    <summary>
      <para>This operation begins the process  of putting the specified XML Reader in a standard or "canonized" form.</para>
      <para>The usage pattern for canonicalization is:</para>
      <list type="bullet">
        <item>
          <description> Move the Reader to the element where canonicalization begins.
</description>
        </item>
        <item>
          <description> Call <b>WsStartReaderCanonicalization</b>.
</description>
        </item>
        <item>
          <description> Move the Reader forward to the end position.</description>
        </item>
        <item>
          <description> Call <see cref="WsEndReaderCanonicalization" />.
</description>
        </item>
      </list>During this process the canonical bytes are written to the specified writeCallback.
<para><b>Note</b> Nodes advanced over
are canonicalized including nodes of child elements skipped using <see cref="WsSkipNode" />. This is beneficial because it means that canonicalization and parsing can be done in one pass over the XML content regardless of what functions are used to read the data.</para><para>In order to use the XML Reader solely for canonicalizing an XML element node the application can call <b>WsStartReaderCanonicalization</b>, <see cref="WsSkipNode" /> and <see cref="WsEndReaderCanonicalization" /> when the Reader is positioned on the element.</para><para><b>WsEndReaderCanonicalization</b> must be called in order to ensure that all canonicalized bytes are written to the specified callback.</para><para><b>Note</b>  <code>WsEndReaderCanonicalization</code> must be called at the same depth at which <b>WsStartReaderCanonicalization</b>. Other reader functions return an error if moved to a depth lower than where <b>WsStartReaderCanonicalization</b> was called.
d</para><para>It is not valid to call <see cref="WsMoveReader" /> or <see cref="WsSetReaderPosition" /> on a Reader between calls to <b>WsStartReaderCanonicalization</b> and <see cref="WsEndReaderCanonicalization" />.</para></summary>
    <param name="reader">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-reader">WS_XML_READER</a> object on which canonicalization is started.  The pointer must reference a valid <b>XML Reader</b> object.</para>
    </param>
    <param name="writeCallback">
      <para>A  callback function invoked to write the canonical bytes as they are generated.
<b>Note</b>  This callback is invoked synchronously.</para>
    </param>
    <param name="writeCallbackState">
      <para>A pointer to a caller-defined state that is passed when invoking the <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_write_callback">WS_WRITE_CALLBACK</a>.</para>
    </param>
    <param name="properties">
      <para>An "array" reference of optional properties controlling how canonicalization is performed.  <b>Note</b>  See <see cref="WS_XML_CANONICALIZATION_PROPERTY" /> for details.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Calls to this function cannot be nested.  Consequently a call to <b>WsStartReaderCanonicalization</b> must be followed by a call to <see cref="WsEndReaderCanonicalization" /> before the next <b>WsStartReaderCanonicalization</b> call can be made.</para>
      <para>If a <see cref="WS_XML_CANONICALIZATION_ALGORITHM" /> is not specified <b>WS_EXCLUSIVE_XML_CANONICALIZATION_ALGORITHM</b> is used.</para>
      <para>The <b>WS_INCLUSIVE_XML_CANONICALIZATION_ALGORITHM</b> and
<b>WS_INCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM</b> algorithms can only be used with
entire XML documents.  The Reader must be positioned at <b>WS_XML_NODE_TYPE_BOF</b> when
<b>WsStartReaderCanonicalization</b> is called with these algorithms.</para>
    </remarks>
  </member>
  <member name="Windows.WsStartWriterCanonicalization">
    <summary>
      <para>Starts canonicalization on the specified XML writer.</para>
    </summary>
    <param name="writer">
      <para>The XML writer on which canonicalization should be started.</para>
    </param>
    <param name="writeCallback">
      <para>The callback that to be invoked to write the canonical bytes as they are generated. This callback will always be invoked synchronously.</para>
    </param>
    <param name="writeCallbackState">
      <para>Caller-defined state that should be passed when invoking the <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_write_callback">WS_WRITE_CALLBACK</a>.</para>
    </param>
    <param name="properties">
      <para>An array of optional properties controlling how canonicalization is to be performed.  See <see cref="WS_XML_CANONICALIZATION_PROPERTY" />.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The usage pattern for canonicalization is to:</para>
      <list type="bullet">
        <item>
          <description> call <b>WsStartWriterCanonicalization</b>,
</description>
        </item>
        <item>
          <description> write the xml to be canonicalized,
</description>
        </item>
        <item>
          <description> call <see cref="WsEndWriterCanonicalization" />.
</description>
        </item>
      </list>During this process, the canonical bytes will be written to the specified writeCallback.  Every node written by the writer will be canonicalized. Thus, canonicalization and generation can be done in one pass over regardless of what APIs are used to write the XML.
<para><see cref="WsEndWriterCanonicalization" /> must be called in order to ensure that all canonicalized bytes are written to the specified callback.</para><para><see cref="WsEndWriterCanonicalization" /> must be called at the same depth at which <b>WsStartWriterCanonicalization</b> was called.  Other writer APIs will return an error if it would move to a depth lower than where <b>WsStartWriterCanonicalization</b> was called.</para><para>It is an invalid operation to call <see cref="WsMoveWriter" /> or <see cref="WsSetWriterPosition" /> on a writer between a pair of matching <b>WsStartWriterCanonicalization</b> and <see cref="WsEndWriterCanonicalization" /> calls.</para><para>Calls to this API cannot be nested.  So, a call to <b>WsStartWriterCanonicalization</b> must be followed by a call to <see cref="WsEndWriterCanonicalization" /> before the next <b>WsStartWriterCanonicalization</b> call.</para><para>If a <see cref="WS_XML_CANONICALIZATION_ALGORITHM" /> is not specified, then <b>WS_EXCLUSIVE_XML_CANONICALIZATION_ALGORITHM</b> is used.</para><para>The <see cref="WS_INCLUSIVE_XML_CANONICALIZATION_ALGORITHM" /> and <b>WS_INCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM</b> algorithms can only be used with entire xml documents.  The writer must positioned at <see cref="WS_XML_NODE_TYPE_BOF" /> when <b>WsStartWriterCanonicalization</b> is called with these algorithms.</para></remarks>
  </member>
  <member name="Windows.WsTrimXmlWhitespace">
    <summary>
      <para>Removes leading and trailing whitespace from a sequence of characters.</para>
    </summary>
    <param name="chars">
      <para>The string to be trimmed.</para>
    </param>
    <param name="charCount">
      <para>The length of the string to be trimmed.</para>
    </param>
    <param name="trimmedChars">
      <para>Returns a pointer into the original string starting at the first non-whitespace character.</para>
    </param>
    <param name="trimmedCount">
      <para>Returns the length of the trimmed string.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The function returns a pointer into the original string.  The original string passed in is not modified.</para>
      <para>XML defines whitespace as characters 9 (0x9), 10 (0xA), 13 (0xD), and 32 (0x20).</para>
    </remarks>
  </member>
  <member name="Windows.WsVerifyXmlNCName">
    <summary>
      <para>Verifies whether the input string is a valid XML NCName.</para>
    </summary>
    <param name="ncNameChars">
      <para>The string to be verified.</para>
    </param>
    <param name="ncNameCharCount">
      <para>The length of the <i>ncNameChars</i> string.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The string is not a valid NCName.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsWriteArray">
    <summary>
      <para>This operation sends a series of elements to an XML Writer.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the Writer where the elements are written.</para>
    </param>
    <param name="localName">
      <para>A pointer to the localName of the repeating element.</para>
    </param>
    <param name="ns">
      <para>A pointer to the namespace of the repeating element.</para>
    </param>
    <param name="valueType">
      <para>The value type for the elements</para>
    </param>
    <param name="array">
      <para>A void pointer to the values written to <i>writer</i>.  The size of the items is determined by  value type.
<b>Note</b>  See <see cref="WS_VALUE_TYPE" /> for more information.</para>
    </param>
    <param name="arraySize">
      <para>The total byte length of the array.</para>
    </param>
    <param name="itemOffset">
      <para>The item offset within the array to write.</para>
    </param>
    <param name="itemCount">
      <para>The total number of items to write from the array.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is semantically equivalent to using <see cref="WsWriteStartElement" />,
<see cref="WsWriteValue" /> and <see cref="WsWriteEndElement" /> in a loop, but is more efficient.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteAttribute">
    <summary>
      <para>Write a typed value as an XML attribute.</para>
    </summary>
    <param name="writer">
      <para>The writer to write the attribute to.</para>
    </param>
    <param name="attributeDescription">
      <para>A pointer to a description of how to serialize the attribute.</para>
    </param>
    <param name="writeOption">
      <para>Information about how the value is allocated.
See <see cref="WS_WRITE_OPTION" /> for more information.</para>
    </param>
    <param name="value">
      <para>A pointer to the value to serialize.</para>
    </param>
    <param name="valueSize">
      <para>The size of the value being serialized, in bytes.</para>
      <para>If the value is <b>NULL</b>, then the size should be 0.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API writes the start attribute, attribute value, and end attribute.</para>
      <para>If the API fails, the state of input writer becomes undefined. The only APIs that may be used on the writer
if this occurs are <see cref="WsSetOutput" /> and <see cref="WsSetOutputToBuffer" /> to return the writer to a usable state,
or <see cref="WsFreeWriter" /> to free the writer.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteBody">
    <summary>
      <para>Writes a value in the body of a message.
This is a helper function that serializes a value to the XML Writer
of the message.
The message state must be set to <b>WS_MESSAGE_STATE_WRITING</b>.  This function
does not cause any state transitions.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object for writing to.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object.</para>
    </param>
    <param name="bodyDescription">
      <para>A pointer to information describing how to write the value.</para>
    </param>
    <param name="writeOption">
      <para>Determines whether the value is required and how the value is allocated.
<b>Note</b>  See <see cref="WS_WRITE_OPTION" /> for more information.</para>
    </param>
    <param name="value">
      <para>A void pointer to the value to write.</para>
    </param>
    <param name="valueSize">
      <para>The size in bytes of the value to write.
If the value is <b>NULL</b> the size should be 0.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This functions supports the following scenarios, based on the contents
of the <see cref="WS_ELEMENT_DESCRIPTION" /> supplied:</para>
      <list type="bullet">
        <item>
          <description>Writing a single element.  In this case, the elementLocalName and elementNs
fields of the <b>WS_ELEMENT_DESCRIPTION</b> should be set to the local name
and namespace of the element to write, and the type and type description represents
the type of the value being serialized.  If using <b>WS_FAULT_TYPE</b> or
<b>WS_ENDPOINT_ADDRESS_TYPE</b>, it is not necessary to specify the local name,
namespace, or type description (they will default appropriately based on the
envelope/addressing version of the message).
</description>
        </item>
        <item>
          <description>Writing multiple elements as a single value.  In this case, the elementLocalName and elementNs
fields of the <b>WS_ELEMENT_DESCRIPTION</b> should be set to <b>NULL</b>, and a <b>WS_STRUCT_TYPE</b> and <b>WS_STRUCT_DESCRIPTION</b> should be specified.  In this case, each field of the
structure value being serialized should correspond to element(s) to write within the body.
</description>
        </item>
        <item>
          <description>Writing multiple elements as multiple values.  Writing multiple distinct values can be
accomplished by simply calling the function multiple times.
</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.WsWriteBytes">
    <summary>
      <para>Writes bytes to the writer in a format optimized for the encoding.  When writing
in a text encoding, it will emit the bytes encoded in base64.  When writing to
a binary format, it will emit the bytes directly.</para>
    </summary>
    <param name="writer">
      <para>The writer to which the bytes will be written.</para>
    </param>
    <param name="bytes">
      <para>The bytes to write to the document.</para>
    </param>
    <param name="byteCount">
      <para>The number bytes to write to the document.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsWriteBytes</b> may be called more than once between <see cref="WsWriteStartAttribute" /> and <see cref="WsWriteEndAttribute" />.  It may
not be combined with <see cref="WsWriteChars" />, <see cref="WsWriteCharsUtf8" />, <see cref="WsWriteValue" /> or <see cref="WsWriteText" /> when writing an attribute.</para>
      <para>For the <see cref="WS_XML_WRITER_MTOM_ENCODING" />, if the byteCount exceeds the maxInlineByteCount specified
during <see cref="WsSetOutput" /> then the bytes will be buffered and  placed in their own MIME part.  Otherwise
the bytes are encoded in base64 and placed directly in the document.</para>
      <para>For the <see cref="WS_XML_WRITER_MTOM_ENCODING" />, if the element containing the bytes has an attribute with
the name 'contentType' and the namespace 'http://www.w3.org/2004/11/xmlmime', then the value of the attribute
will be reflected in the content type header for the MIME part as described in
XML-binary Optimized Packaging.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteChars">
    <summary>
      <para>Writes a series of characters to an element or attribute.</para>
      <para>To write characters to an attribute value, call <see cref="WsWriteStartAttribute" /> first. Only whitespace characters may be written at the root of an xml document unless the <b>WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT</b> has been set to <b>TRUE</b>.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the characters are written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="chars">
      <para>A pointer to the characters to write.</para>
    </param>
    <param name="charCount">
      <para>The number of characters to write.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsWriteChars</b> can be called more than once between <see cref="WsWriteStartAttribute" /> and <see cref="WsWriteEndAttribute" />.  It cannot be combined with <see cref="WsWriteCharsUtf8" />, <see cref="WsWriteBytes" />, <see cref="WsWriteValue" /> or <see cref="WsWriteText" /> when writing an attribute.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteCharsUtf8">
    <summary>
      <para>Writes a series of characters encoded as UTF-8 to an element or attribute.
To write characters to an attribute value, call <see cref="WsWriteStartAttribute" /> first.
Only whitespace characters may be written at the root of an xml document unless the
<b>WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT</b> has been set to <b>TRUE</b>.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the characters are written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="bytes">
      <para>A pointer to the encoded UTF-8 characters to write.</para>
    </param>
    <param name="byteCount">
      <para>The number of bytes to write.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsWriteCharsUtf8</b> can be called more than once between <see cref="WsWriteStartAttribute" /> and <see cref="WsWriteEndAttribute" />.  It cannot be combined with <see cref="WsWriteChars" />, <see cref="WsWriteBytes" />, <see cref="WsWriteValue" /> or <see cref="WsWriteText" /> when writing an attribute.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteElement">
    <summary>
      <para>Write a typed value as an XML element.</para>
    </summary>
    <param name="writer">
      <para>The writer to write the element to.</para>
    </param>
    <param name="elementDescription">
      <para>A pointer to a description of how to serialize the element.</para>
    </param>
    <param name="writeOption">
      <para>Information about how the value is allocated.
See <see cref="WS_WRITE_OPTION" /> for more information.</para>
    </param>
    <param name="value">
      <para>A pointer to the value to serialize.</para>
    </param>
    <param name="valueSize">
      <para>The size of the value being serialized, in bytes.</para>
      <para>If the value is <b>NULL</b>, then the size should be 0.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API writes the start element, the attributes, child elements / text, and the end element
that corresponds to the specified value.</para>
      <para>If the API fails, the state of input writer becomes undefined. The only APIs that may be used on the writer
if this occurs are <see cref="WsSetOutput" /> and <see cref="WsSetOutputToBuffer" /> to return the writer to a usable state,
or <see cref="WsFreeWriter" /> to free the writer.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteEndAttribute">
    <summary>
      <para>This operation finishes writing an attribute to the current element.
If <see cref="WsWriteStartAttribute" /> is called the Writer does not permit another element
or attribute to be written until <b>WsWriteEndAttribute</b> is called.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the attribute is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsWriteEndCData">
    <summary>
      <para>Ends a CDATA section in the writer.
If <b>WsWriteEndCData</b> is called without a prior call to <see cref="WsWriteStartCData" />, this function returns <b>WS_E_INVALID_OPERATION</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the end CDATA section is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsWriteEndElement">
    <summary>
      <para>Writes an end element to a Writer.
If the writer has no open elements, the function returns <b>WS_E_INVALID_FORMAT</b>. (See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.) If the encoding supports empty elements, and no content was written between the start element and end element, an
empty element will be written.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the end element is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsWriteEndStartElement">
    <summary>
      <para>Forces the writer to commit the current element and prevent further attributes
from being written to the element.</para>
    </summary>
    <param name="writer">
      <para>The writer for which the current element should be committed.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Occasionally, it is useful to explicitly force the completion of an element.  This can be used to force the writer
to write a full element and pair.  It also may be useful when obtaining positions when writing to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a>.</para>
      <para>Calling this API when there is no element to commit will cause it to return <b>WS_E_INVALID_OPERATION</b>.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteEnvelopeEnd">
    <summary>
      <para>Writes the closing elements of a message.
This function writes the end of the message including the element that closes the body
tag and the envelope tag.
Use this function when writing messages to destinations other  than channels.  With
channels use <see cref="WsWriteMessageEnd" /></para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object to write.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To use this function the message state must be set to <b>WS_MESSAGE_STATE_WRITING</b>.  If called in the correct
state the message will transition to <b>WS_MESSAGE_STATE_DONE</b> regardless
of whether the function fails or not.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteEnvelopeStart">
    <summary>
      <para>Writes the start of the message including the current set of headers of the message and prepares to write the body elements.</para>
      <para>This function is designed  for writing messages to destinations other than channels.  To write a message to a channel use <see cref="WsWriteMessageStart" />.</para>
    </summary>
    <param name="message">
      <para>A pointer to the <b>Message</b> object to write.  The pointer must reference a valid <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-message">WS_MESSAGE</a> object.</para>
    </param>
    <param name="writer">
      <para>A pointer to the <b>XML Writer</b> object to write the Message.  The Message object uses the Writer in subsequent calls to write the message.  The caller must keep the writer valid until <see cref="WsResetMessage" /> or <see cref="WsFreeMessage" /> is called.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/api/webservices/nc-webservices-ws_message_done_callback">WS_MESSAGE_DONE_CALLBACK</a> parameter can be used to determine that the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> is no longer in use.</para>
    </param>
    <param name="doneCallback">
      <para>The callback function invoked when the Message is released or reset. This callback can be used to indicate that the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object is no longer
in use by this message. If this function fails the callback is not called. If the function succeeds the callback is invoked one time only.</para>
    </param>
    <param name="doneCallbackState">
      <para>A void pointer to a user-defined state that will be passed to the specified callback. This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start of the message, including the current set of headers that exist in the message,
are written to the writer.</para>
      <para>The message state must be set to <b>WS_MESSAGE_STATE_INITIALIZED</b>.  On success
the Message state transitions to  <b>WS_MESSAGE_STATE_WRITING</b>.
On failure state transition does not occur.</para>
      <para>To write an element of the message body use <see cref="WsWriteBody" />.  To write
directly to the Writer of the Message obtain the Reader with the  <see cref="WS_MESSAGE_PROPERTY_ID" /> set to <b>WS_MESSAGE_PROPERTY_BODY_WRITER</b> property.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteMessageEnd">
    <summary>
      <para>Write the closing elements of the message to the channel.</para>
    </summary>
    <param name="channel">
      <para>The channel to write to.</para>
    </param>
    <param name="message">
      <para>The message to write.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_CN_NO_MATCH</b>
            </para>
          </description>
          <description>
            <para>The certificates CN name does not match the passed value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_UNTRUSTEDROOT</b>
            </para>
          </description>
          <description>
            <para>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_WRONG_USAGE</b>
            </para>
          </description>
          <description>
            <para>The certificate is not valid for the requested usage.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CRYPT_E_REVOCATION_OFFLINE</b>
            </para>
          </description>
          <description>
            <para>The revocation function was unable to check revocation because the revocation server was offline.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function writes the end of the message, including the element that closes the body
tag and the envelope tag.</para>
      <para>The message must be in <see cref="WS_MESSAGE_STATE_WRITING" /> state.  Upon success, it will
transition to <b>WS_MESSAGE_STATE_DONE</b> state.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteMessageStart">
    <summary>
      <para>Write out all the headers of the message to the channel, and prepare to write the body elements.</para>
    </summary>
    <param name="channel">
      <para>The channel to use to write the message.</para>
    </param>
    <param name="message">
      <para>The message to write.</para>
    </param>
    <param name="asyncContext">
      <para>Information on how to invoke the function asynchronously, or <b>NULL</b> if invoking synchronously.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_S_ASYNC</b>
            </para>
          </description>
          <description>
            <para>The asynchronous operation is still pending.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_ABORTED</b>
            </para>
          </description>
          <description>
            <para>The operation was aborted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint does not exist or could not be located.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the remote endpoint.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_DISCONNECTED</b>
            </para>
          </description>
          <description>
            <para>The connection with the remote endpoint was terminated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_NOT_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is not currently in service at this location.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_TOO_BUSY</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint is unable to process the request due to being overloaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_ENDPOINT_UNREACHABLE</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint was not reachable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_ENDPOINT_URL</b>
            </para>
          </description>
          <description>
            <para>The endpoint address URL is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_OPERATION_TIMED_OUT</b>
            </para>
          </description>
          <description>
            <para>The operation did not complete within the time allotted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>Access was denied by the HTTP proxy server.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_FAILURE</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server could not process the request.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_VERIFICATION_FAILURE</b>
            </para>
          </description>
          <description>
            <para>Security verification was not successful for the received data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_SYSTEM_FAILURE</b>
            </para>
          </description>
          <description>
            <para>A security operation failed in the Windows Web Services framework.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SECURITY_TOKEN_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A security token was rejected by the server because it has expired.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_PROXY_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The HTTP proxy server requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_BASIC_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'basic'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_DIGEST_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'digest'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'negotiate'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_SERVER_REQUIRES_NTLM_AUTH</b>
            </para>
          </description>
          <description>
            <para>The remote endpoint requires HTTP authentication scheme 'NTLM'.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_EXPIRED</b>
            </para>
          </description>
          <description>
            <para>A required certificate is not within its validity period when verifying against the current system clock or the timestamp in the signed file.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_CN_NO_MATCH</b>
            </para>
          </description>
          <description>
            <para>The certificates CN name does not match the passed value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_UNTRUSTEDROOT</b>
            </para>
          </description>
          <description>
            <para>A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CERT_E_WRONG_USAGE</b>
            </para>
          </description>
          <description>
            <para>The certificate is not valid for the requested usage.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CRYPT_E_REVOCATION_OFFLINE</b>
            </para>
          </description>
          <description>
            <para>The revocation function was unable to check revocation because the revocation server was offline.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start of the message, including the current set of headers that exist in the message,
are written to the channel.</para>
      <para>This function is like <see cref="WsWriteEnvelopeStart" /> but is used with channels.</para>
      <para>The message must be in <see cref="WS_MESSAGE_STATE_INITIALIZED" /> state.  Upon success,
the message will have transitioned to <b>WS_MESSAGE_STATE_WRITING</b> state.</para>
      <para>To serialize an element of the message body, use <see cref="WsWriteBody" />.  To write
directly to the XML Writer of the message, first get the reader using
the <see cref="WS_MESSAGE_PROPERTY_BODY_WRITER" /> property.</para>
      <para>If the channel output is streamed (<see cref="WS_STREAMED_OUTPUT_TRANSFER_MODE" />), then
<see cref="WsFlushBody" /> must be called to actually transmit each part of the body.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteNode">
    <summary>
      <para>Writes the specified node to the XML Writer.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the node is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="node">
      <para>A pointer to the Node object to write to the document.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsWriteStartAttribute">
    <summary>
      <para>This operation starts writing an attribute to the current element.
<see cref="WsWriteStartElement" /> must be called before an attribute can be written.
After the attribute has been started, the attribute value can be written
using <see cref="WsWriteChars" />, <see cref="WsWriteBytes" />, or <see cref="WsWriteValue" />. The attribute must
be completed using using <see cref="WsWriteEndAttribute" />.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the attribute is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="prefix">
      <para>A WS_XML_STRING pointer to the prefix to use for the attribute.  If the value referenced by this parameter is <b>NULL</b> the Writer will choose a attribute.</para>
    </param>
    <param name="localName">
      <para>A WS_XML_STRING pointer to the local name used by the attribute.  It must be at least one character long.</para>
    </param>
    <param name="ns">
      <para>A WS_XML_STRING pointer to the namespace to be used for the attribute.</para>
      <para>If no prefix is specified the Writer may use a prefix in scope that is bound to the specified namespace or it may generate a prefix and include an XMLNS attribute.</para>
      <para>If a prefix is specified the Writer will use that prefix and may include an XMLNS attribute if needed to override an existing prefix in scope.</para>
    </param>
    <param name="singleQuote">
      <para>Determines whether to use a single or a double quote for the attribute value.</para>
      <para>
        <b>Note</b>  With <see cref="WS_XML_WRITER_BINARY_ENCODING" /> the quote character is not preserved and this parameter has no effect.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a <b>NULL</b> prefix is specified the writer will choose a prefix for the namespace.</para>
      <para>To write an "xml:lang"  or "xml:space" attribute, specify "xml" for the prefix, "lang" or "space" for the localName,
and "http://www.w3.org/XML/1998/namespace" for the namespace.</para>
      <para>If writing the attribute causes <see cref="WS_XML_WRITER_PROPERTY_MAX_ATTRIBUTES" /> to be exceeded
then <b>WS_E_QUOTA_EXCEEDED</b> is returned.</para>
      <para>If a non-empty prefix is specified with an empty namespace <b>WS_E_INVALID_FORMAT</b> is returned.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteStartCData">
    <summary>
      <para>This operation starts a CDATA section in the writer.
CDATA sections cannot be nested and cannot appear at the root of the document.  <b>Note</b>  Some encodings do not support CDATA
and will generate text instead.</para>
      <para>The CDATA section is completed by calling <see cref="WsWriteEndCData" />.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the CDATA section is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.WsWriteStartElement">
    <summary>
      <para>Writes a start element to the writer.</para>
      <para>After calling this function <see cref="WsWriteStartAttribute" /> or <see cref="WsWriteXmlnsAttribute" /> can be called to write additional attributes to the element. The element is not committed to the writer until <see cref="WsWriteEndElement" /> or some other function  that  writes content is called.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the start element is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="prefix">
      <para>A WS_XML_STRING pointer to the prefix to use for the start element.  If the value referenced by this parameter is <b>NULL</b> the Writer will choose a attribute.</para>
    </param>
    <param name="localName">
      <para>A WS_XML_STRING pointer to the local name used by the start element.  It must be at least one character long.</para>
    </param>
    <param name="ns">
      <para>A WS_XML_STRING pointer to the namespace to be used for the start element.</para>
      <para>If no prefix is specified the Writer may use a prefix in scope that is bound to the specified namespace or it may generate a prefix and include an XMLNS attribute. If a prefix is specified the Writer will use that prefix and may include an XMLNS attribute if needed to override an existing prefix in scope.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the underlying encoding supports empty elements and the element has no content an empty element is written.</para>
      <para>If a non-empty prefix is specified with an empty namespace <b>WS_E_INVALID_FORMAT</b> is returned.</para>
      <para>If writing the start element causes <b>WS_XML_WRITER_PROPERTY_MAX_DEPTH</b> to be exceeded
<b>WS_E_QUOTA_EXCEEDED</b> is returned.
(See <a href="https://docs.microsoft.com//windows/desktop/wsw/windows-web-services-return-values">Windows Web Services Return Values</a>.)</para>
      <para>When using <see cref="WS_XML_WRITER_MTOM_ENCODING" /> it is an error to attempt to write an element with the
localName "Include" from the namespace"http://www.w3.org/2004/08/xop/include".</para>
      <para>
        <see cref="WsWriteStartAttribute" /> can also be used to add an attribute to an element when the writer is
positioned on an element using <see cref="WsMoveWriter" /> or <see cref="WsSetWriterPosition" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteText">
    <summary>
      <para>Writes the specified text to the XML writer.</para>
      <para>To write characters to an attribute value call <see cref="WsWriteStartAttribute" />. Only whitespace characters may be written at the root of an xml document unless the <b>WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT</b> has been set to <b>TRUE</b>.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the text is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="text">
      <para>A pointer to the text to write.  <b>Note</b>  See <see cref="WS_XML_TEXT" /> and its derived classes for more information on the text object.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsWriteText</b> can be called only once between <see cref="WsWriteStartAttribute" /> and <see cref="WsWriteEndAttribute" /></para>
      <para>unless the text type is one of the following:</para>
      <list type="bullet">
        <item>
          <description>
            <b>WS_XML_TEXT_TYPE_UTF8</b>
          </description>
        </item>
        <item>
          <description>
            <b>WS_XML_TEXT_TYPE_UTF16</b>
          </description>
        </item>
        <item>
          <description>
            <b>WS_XML_TEXT_TYPE_BASE64</b>
          </description>
        </item>
      </list>
      <b>Note</b>  If the text Type is set to either of the previous values WsWriteText can be called more than once.  However the text Type must be the same for all calls within an attribute.
</remarks>
  </member>
  <member name="Windows.WsWriteType">
    <summary>
      <para>Write a value of a given <see cref="WS_TYPE" /> to XML according to the <see cref="WS_TYPE_MAPPING" />.</para>
    </summary>
    <param name="writer">
      <para>The writer to write the value to.</para>
    </param>
    <param name="typeMapping">
      <para>Describes how the type maps to the XML that is being written.</para>
    </param>
    <param name="type">
      <para>The type of the value to serialize.</para>
    </param>
    <param name="typeDescription">
      <para>Additional information about the type.  Each type has a different description
structure.  This may be <b>NULL</b>, depending on the <see cref="WS_TYPE" />.</para>
    </param>
    <param name="writeOption">
      <para>Whether the value is required, and how the value is allocated.
See <see cref="WS_WRITE_OPTION" /> for more information.</para>
      <para>This parameter must have one of the following values:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="WS_WRITE_REQUIRED_VALUE" />.
</description>
        </item>
        <item>
          <description>
            <see cref="WS_WRITE_REQUIRED_POINTER" />.
</description>
        </item>
      </list>
    </param>
    <param name="value">
      <para>A pointer to the value to serialize.</para>
    </param>
    <param name="valueSize">
      <para>The size of the value being serialized.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The input data was not in the expected format or did not have the expected value.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Ran out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b> Other Errors </b>
            </para>
          </description>
          <description>
            <para>This function may return other errors not listed above.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>See <see cref="WS_TYPE_MAPPING" /> for how to use this function to write values in elements and attributes.</para>
      <para>If the API fails, the state of input writer becomes undefined. The only APIs that may be used on the writer
if this occurs are <see cref="WsSetOutput" /> and <see cref="WsSetOutputToBuffer" /> to return the writer to a usable state,
or <see cref="WsFreeWriter" /> to free the writer.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteValue">
    <summary>
      <para>This operation derives the best representation for a  primitive value from the underlying encoding and passes the derived value to a Writer object.
<b>Note</b>  It is generally more efficient to use this function to write out primitive values rather than converting
the value to text and subsequently using <see cref="WsWriteChars" />.</para>
    </summary>
    <param name="writer">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-writer">WS_XML_WRITER</a> object to which the value is written.  The pointer must reference a valid <b>XML Writer</b> object.</para>
    </param>
    <param name="valueType">
      <para>Indicates the Type of primitive value referenced by the <i>value</i> parameter.</para>
      <para>I</para>
    </param>
    <param name="value">
      <para>A void  pointer to the primitive value.</para>
    </param>
    <param name="valueSize">
      <para>The size in bytes of the value being written.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>WsWriteValue</b> may be called only once between <see cref="WsWriteStartAttribute" /> and <see cref="WsWriteEndAttribute" />.
It may not be combined with <see cref="WsWriteChars" />, <see cref="WsWriteBytes" />, <see cref="WsWriteCharsUtf8" /> or <see cref="WsWriteText" /> when writing an attribute.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteXmlBuffer">
    <summary>
      <para>Writes a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> to a writer.</para>
    </summary>
    <param name="writer">
      <para>The writer to which the XML buffer will be written.</para>
    </param>
    <param name="xmlBuffer">
      <para>The XML buffer to write.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function will copy the entire contents of the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> to the writer at the current position.</para>
    </remarks>
  </member>
  <member name="Windows.WsWriteXmlBufferToBytes">
    <summary>
      <para>Uses a writer to convert a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> to an encoded set of bytes.</para>
    </summary>
    <param name="writer">
      <para>The writer to use to generate the encoded bytes.</para>
    </param>
    <param name="xmlBuffer">
      <para>The XML buffer to write.</para>
    </param>
    <param name="encoding">
      <para>The encoding to use when generating the bytes.  If <b>NULL</b>, the bytes will be encoded in utf8.</para>
    </param>
    <param name="properties">
      <para>An array of optional properties of the writer.  See <see cref="WS_XML_WRITER_PROPERTY" />.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
    </param>
    <param name="heap">
      <para>The heap from which to allocate the bytes.</para>
    </param>
    <param name="bytes">
      <para>The generated bytes are returned here.</para>
    </param>
    <param name="byteCount">
      <para>The number of generated bytes are returned here.</para>
    </param>
    <param name="error">
      <para>Specifies where additional error information should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_INVALID_OPERATION</b>
            </para>
          </description>
          <description>
            <para>The operation is not allowed due to the current state of the object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WS_E_QUOTA_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>A quota was exceeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function will generate the entire contents of the <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-xml-buffer">WS_XML_BUFFER</a> as a linear set of bytes
allocated from the specified heap in the encoding specified.</para>
      <para>The writer will be left in an undefined state after calling this function.  However, <b>WsWriteXmlBufferToBytes</b></para>
      <para>may be used again with such a writer.  Otherwise, <see cref="WsSetOutput" /> or <see cref="WsSetOutputToBuffer" /> should be
used to bring the writer back to a known state, or the writer should be freed using <see cref="WsFreeWriter" />.</para>
    </remarks>
  </member>
  <member name="Windows.WsXmlStringEquals">
    <summary>
      <para>Compares two <see cref="WS_XML_STRING" /> objects for equality.  The operation performs an ordinal comparison
of the character values contained by the String objects.</para>
    </summary>
    <param name="string1">
      <para>A pointer to the first string to compare.</para>
    </param>
    <param name="string2">
      <para>A pointer to the second string to compare.</para>
    </param>
    <param name="error">
      <para>A  pointer to a <a href="https://docs.microsoft.com//windows/desktop/wsw/ws-error">WS_ERROR</a> object where additional information about the error should be stored if the function fails.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The strings are equal.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The strings are not equal.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are not correct.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is typically used to compare localNames and namespaces in XML.</para>
    </remarks>
  </member>
  <member name="Windows.WS_STRING_VALUE">
    <summary>
      <para>Initializes a <see cref="WS_STRING" /> structure given a constant string.</para>
    </summary>
    <param name="S">
      <para>The initializer string.</para>
    </param>
    <remarks>
      <para>The initializer string is assumed to be zero terminated.</para>
      <h4>Examples</h4>
      <para>The following is an example of how to use the macro.</para>
      <para>
        <code>WS_STRING myString = WS_STRING_VALUE(L"MyString");</code>
      </para>
    </remarks>
  </member>
  <member name="Windows.WS_XML_STRING_DICTIONARY_VALUE">
    <summary>
      <para>Provides an initializer for a <see cref="WS_XML_STRING" /> structure when there is an associated dictionary ID.</para>
    </summary>
    <param name="S">
      <para>A static constant string, encoded in UTF-8.</para>
    </param>
    <param name="D">
      <para>A string dictionary.</para>
    </param>
    <param name="I">
      <para>The ID.</para>
    </param>
    <remarks>
      <para>This initializer assumes the string is a static constant string.  It must be encoded in UTF-8.</para>
      <para>The following is example usage:</para>
      <para>
        <code>WS_XML_STRING myString = WS_XML_STRING_DICTIONARY_VALUE("MyString", myDictionary, 5);</code>
      </para>
    </remarks>
  </member>
  <member name="Windows.WS_XML_STRING_VALUE">
    <summary>
      <para>Provides an initializer for a <see cref="WS_XML_STRING" /> structure when there is no associated dictionary ID.</para>
    </summary>
    <param name="S">
      <para>A static constant string, encoded in UTF-8.</para>
    </param>
    <remarks>
      <para>This initializer assumes the string is a static constant string.  It must be encoded in UTF-8.</para>
      <para>The following is example usage:</para>
      <para>
        <code>WS_XML_STRING myString = WS_XML_STRING_VALUE("MyString");</code>
      </para>
    </remarks>
  </member>
</doc>