<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="WS_TYPE_MAPPING">
    <summary>How a <see cref="WS_TYPE" /> maps to or from XML when serialized or deserialized.</summary>
  </member>
  <member name="WS_TYPE_MAPPING.WS_ELEMENT_TYPE_MAPPING">
    <summary>
      <para>This is used when reading or writing an element where the type corresponds to the type of the element. The definition of the type may include mappings to attributes, text, or child elements of the element.</para>
      <para>The following calling sequence is used when writing an element:</para>
      <code>WsWriteStartElement(...) WsWriteType(..., WS_ELEMENT_TYPE_MAPPING, ...) WsWriteEndElement(...)</code>
      <para>The following calling sequence is used when reading an element:</para>
      <code>WsReadToStartElement(...)? WsReadType(..., WS_ELEMENT_TYPE_MAPPING, ...)</code>
    </summary>
  </member>
  <member name="WS_TYPE_MAPPING.WS_ATTRIBUTE_TYPE_MAPPING">
    <summary>
      <para>This is used when reading or writing the value of a single attribute. The definition of the type must not require any mappings to attributes or child elements.</para>
      <para>The following calling sequence is used when writing an attribute value.</para>
      <code>WsWriteStartAttribute(...) WsWriteType(..., WS_ATTRIBUTE_TYPE_MAPPING, ...) WsWriteEndAttribute(...)</code>
      <para>The following calling sequence is used when reading an attribute value.</para>
      <code>WsFindAttribute(...) WsReadStartAttribute(...) WsReadType(..., WS_ATTRIBUTE_TYPE_MAPPING, ...) WsReadEndAttribute(...)</code>
    </summary>
  </member>
  <member name="WS_TYPE_MAPPING.WS_ELEMENT_CONTENT_TYPE_MAPPING">
    <summary>
      <para>This is used when the type corresponds to all or part of the content (text and child elements) of an element. The definition of the type may include mappings to text or child elements, but must not include any attributes.</para>
      <para>The following calling sequence is used when writing the contents of an element:</para>
      <code>WsWriteStartElement(...) // Write attributes, if any // Write other element content, if any WsWriteType(..., WS_ELEMENT_CONTENT_TYPE_MAPPING, ...) // Write other element content, if any WsWriteEndElement(...)</code>
      <para>The following calling sequence is used when reading the contents of an element:</para>
      <code>WsReadToStartElement(...) // Read attributes, if any WsReadStartElement(...) // Read other element content, if any WsReadType(..., WS_ELEMENT_CONTENT_TYPE_MAPPING, ...) // Read other element content, if any WsReadEndElement(...)</code>
    </summary>
  </member>
  <member name="WS_TYPE_MAPPING.WS_ANY_ELEMENT_TYPE_MAPPING">
    <summary>
      <para>This is used when the type corresponds to the complete element, including the name and namespace of the element. The definition may include attributes and child elements and text.</para>
      <para>The following calling sequence is used when writing an element:</para>
      <code>WsWriteType(..., WS_ANY_ELEMENT_TYPE_MAPPING, ...)</code>
      <para>The following calling sequence is used when reading the contents of an element:</para>
      <code>WsReadToStartElement(...)? WsReadType(..., WS_ANY_ELEMENT_TYPE_MAPPING, ...)</code>
    </summary>
  </member>
</doc>