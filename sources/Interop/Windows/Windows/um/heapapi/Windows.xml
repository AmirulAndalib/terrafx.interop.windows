<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.GetProcessHeap">
    <summary>Retrieves a handle to the default heap of the calling process. This handle can then be used in subsequent calls to the heap functions.</summary>
    <returns>
      <para>If the function succeeds, the return value is a handle to the calling process's heap.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessHeaps">
    <summary>Returns the number of active heaps and retrieves handles to all of the active heaps for the calling process.</summary>
    <param name="NumberOfHeaps">The maximum number of heap handles that can be stored into the buffer pointed to by <i>ProcessHeaps</i>.</param>
    <param name="ProcessHeaps">A pointer to a buffer that receives an array of heap handles.</param>
    <returns>
      <para>The return value is the number of handles to heaps that are active for the calling process.</para>
      <para>If the return value is less than or equal to <i>NumberOfHeaps</i>, the function has stored that number of heap handles in the buffer pointed to by <i>ProcessHeaps</i>.</para>
      <para>If the return value is greater than <i>NumberOfHeaps</i>, the buffer pointed to by <i>ProcessHeaps</i> is too small to hold all the heap handles for the calling process, and the function stores <i>NumberOfHeaps</i> handles in the buffer. Use the return value to allocate a buffer that is large enough to receive all of the handles, and call the function again.</para>
      <para>If the return value is zero, the function has failed because every process has at least one active heap, the default heap for the process. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapAlloc">
    <summary>Allocates a block of memory from a heap. The allocated memory is not movable.</summary>
    <param name="hHeap">A handle to the heap from which the memory will be allocated. This handle is returned by the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="dwFlags">
      <para>The heap allocation options. Specifying any of these values will override the corresponding value specified when the heap was created with<see cref="HeapCreate" />. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_GENERATE_EXCEPTIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>The system will raise an exception to indicate a function failure, such as an out-of-memory condition, instead of returning <b>NULL</b>.<para>To ensure that exceptions are generated for all calls to this function, specify <b>HEAP_GENERATE_EXCEPTIONS</b> in the call to <see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_GENERATE_EXCEPTIONS</b> in this function call.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_NO_SERIALIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Serialized access will not be used for this allocation. <para>For more information, see Remarks.</para><para>To ensure that serialized access is disabled for all calls to this function, specify <b>HEAP_NO_SERIALIZE</b> in the call to <see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_NO_SERIALIZE</b> in this function call.</para><para>This value should not be specified when accessing the process's default heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process's default heap.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_ZERO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>The allocated memory will be initialized to zero. Otherwise, the memory is not initialized to zero.</description>
        </listheader>
      </list>
    </param>
    <param name="dwBytes">
      <para>The number of bytes to be allocated.</para>
      <para>If the heap specified by the <i>hHeap</i> parameter is a "non-growable" heap, <i>dwBytes</i> must be less than 0x7FFF8. You create a non-growable heap by calling the <see cref="HeapCreate" /> function with a nonzero value.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the allocated memory block.</para>
      <para>If the function fails and you have not specified <b>HEAP_GENERATE_EXCEPTIONS</b>, the return value is <b>NULL</b>.</para>
      <para>If the function fails and you have specified <b>HEAP_GENERATE_EXCEPTIONS</b>, the function may generate either of the exceptions listed in the following table. The particular exception depends upon the nature of the heap corruption. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Debug/getexceptioncode">GetExceptionCode</a>.</para>
      <list type="table">
        <listheader>
          <description>Exception code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>STATUS_NO_MEMORY</b>
          </description>
          <description>The allocation attempt failed because of a lack of available memory or heap corruption.</description>
        </listheader>
        <listheader>
          <description>
            <b>STATUS_ACCESS_VIOLATION</b>
          </description>
          <description>The allocation attempt failed because of heap corruption or improper function parameters.</description>
        </listheader>
      </list> <para>If the function fails, it does not call <see cref="SetLastError" />. An application cannot call <see cref="GetLastError" /> for extended error information.</para></returns>
  </member>
  <member name="Windows.HeapCompact">
    <summary>Returns the size of the largest committed free block in the specified heap. If the <a href="https://msdn.microsoft.com/library/cc265897.aspx">Disable heap coalesce on free</a> global flag is set, this function also coalesces adjacent free blocks of memory in the heap.</summary>
    <param name="hHeap">A handle to the heap. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="dwFlags">
      <para>The heap access options. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_NO_SERIALIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Serialized access will not be used. <para>For more information, see Remarks.</para><para>To ensure that serialized access is disabled for all calls to this function, specify <b>HEAP_NO_SERIALIZE</b> in the call to <see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_NO_SERIALIZE</b> in this function call.</para><para>Do not specify this value when accessing the process heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process heap.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the size of the largest committed free block in the heap, in bytes.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
      <para>In the unlikely case that there is absolutely no space available in the heap, the function return value is zero, and <see cref="GetLastError" /> returns the value NO_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.HeapCreate">
    <summary>Creates a private heap object that can be used by the calling process. The function reserves space in the virtual address space of the process and allocates physical storage for a specified initial portion of this block.</summary>
    <param name="flOptions">
      <para>The heap allocation options. These options affect subsequent access to the new heap through calls to the heap functions. This parameter can be 0 or one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_CREATE_ENABLE_EXECUTE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00040000</term>
              </listheader>
            </list>
          </description>
          <description>All memory blocks that are allocated from this heap allow code execution, if the hardware enforces <a href="https://docs.microsoft.com//windows/desktop/Memory/data-execution-prevention">data execution prevention</a>. Use this flag heap in applications that run code from the heap. If <b>HEAP_CREATE_ENABLE_EXECUTE</b> is not specified and an application attempts to run code from a protected page, the application receives an exception with the status code <b>STATUS_ACCESS_VIOLATION</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_GENERATE_EXCEPTIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>The system raises an exception to indicate failure (for example, an out-of-memory condition) for calls to <see cref="HeapAlloc" /> and <see cref="HeapReAlloc" /> instead of returning <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_NO_SERIALIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Serialized access is not used when the heap functions access this heap. This option applies to all subsequent heap function calls. Alternatively, you can specify this option on individual heap function calls. <para>The low-fragmentation heap (LFH) cannot be enabled for a heap created with this option.</para><para>A heap created with this option cannot be locked.</para><para>For more information about serialized access, see the Remarks section of this topic.</para></description>
        </listheader>
      </list>
    </param>
    <param name="dwInitialSize">
      <para>The initial size of the heap, in bytes. This value determines the initial amount of memory that is committed for the heap. The value is rounded up to a multiple of the system page size. The value must be smaller than <i>dwMaximumSize</i>.</para>
      <para>If this parameter is 0, the function commits one page. To determine the size of a page on the host computer, use the<see cref="GetSystemInfo" /> function.</para>
    </param>
    <param name="dwMaximumSize">
      <para>The maximum size of the heap, in bytes. The<b>HeapCreate</b> function rounds <i>dwMaximumSize</i> up to a multiple of the system page size and then reserves a block of that size in the process's virtual address space for the heap. If allocation requests made by the<see cref="HeapAlloc" /> or<see cref="HeapReAlloc" /> functions exceed the size specified by <i>dwInitialSize</i>, the system commits additional pages of memory for the heap, up to the heap's maximum size.</para>
      <para>If <i>dwMaximumSize</i> is not zero, the heap size is fixed and cannot grow beyond the maximum size. Also, the largest memory block that can be allocated from the heap is slightly less than 512 KB for a 32-bit process and slightly less than 1,024 KB for a 64-bit process. Requests to allocate larger blocks fail, even if the maximum size of the heap is large enough to contain the block.</para>
      <para>If <i>dwMaximumSize</i> is 0, the heap can grow in size. The heap's size is limited only by the available memory. Requests to allocate memory blocks larger than the limit for a fixed-size heap do not automatically fail; instead, the system calls the<see cref="VirtualAlloc" /> function to obtain the memory that is needed for large blocks. Applications that need to allocate large memory blocks should set <i>dwMaximumSize</i> to 0.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created heap.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapDestroy">
    <summary>Destroys the specified heap object. It decommits and releases all the pages of a private heap object, and it invalidates the handle to the heap.</summary>
    <param name="hHeap">A handle to the heap to be destroyed. This handle is returned by the<see cref="HeapCreate" /> function. Do not use the handle to the process heap returned by the<see cref="GetProcessHeap" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapFree">
    <summary>Frees a memory block allocated from a heap by the<see cref="HeapAlloc" /> or<see cref="HeapReAlloc" /> function.</summary>
    <param name="hHeap">A handle to the heap whose memory block is to be freed. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="dwFlags">
      <para>The heap free options. Specifying the following value overrides the corresponding value specified in the <i>flOptions</i> parameter when the heap was created by using the<see cref="HeapCreate" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_NO_SERIALIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Serialized access will not be used. For more information, see Remarks.<para>To ensure that serialized access is disabled for all calls to this function, specify <b>HEAP_NO_SERIALIZE</b> in the call to <see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_NO_SERIALIZE</b> in this function call.</para><para>Do not specify this value when accessing the process heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process heap.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpMem">A pointer to the memory block to be freed. This pointer is returned by the<see cref="HeapAlloc" /> or<see cref="HeapReAlloc" /> function. This pointer can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. An application can call<see cref="GetLastError" /> for extended error information.</para>
    </returns>
  </member>
  <member name="Windows.HeapLock">
    <summary>Attempts to acquire the critical section object, or lock, that is associated with a specified heap.</summary>
    <param name="hHeap">A handle to the heap to be locked. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapQueryInformation">
    <summary>Retrieves information about the specified heap.</summary>
    <param name="HeapHandle">A handle to the heap whose information is to be retrieved. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="HeapInformationClass">
      <para>The class of information to be retrieved. This parameter can be the following value from the <b>HEAP_INFORMATION_CLASS</b> enumeration type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HeapCompatibilityInformation</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Indicates the heap features that are enabled. <para>The <i>HeapInformation</i> parameter is a pointer to a <b>ULONG</b> variable.</para><para>If <i>HeapInformation</i> is 0, the heap is a standard heap that does not support look-aside lists.</para><para>If <i>HeapInformation</i> is 1, the heap supports look-aside lists. For more information, see Remarks.</para><para>If <i>HeapInformation</i> is 2, the <a href="https://docs.microsoft.com//windows/desktop/Memory/low-fragmentation-heap">low-fragmentation heap</a> (LFH) has been enabled for the heap. Enabling the LFH disables look-aside lists.</para></description>
        </listheader>
      </list>
    </param>
    <param name="HeapInformation">A pointer to a buffer that receives the heap information. The format of this data depends on the value of the <i>HeapInformationClass</i> parameter.</param>
    <param name="HeapInformationLength">The size of the heap information being queried, in bytes.</param>
    <param name="ReturnLength">
      <para>A pointer to a variable that receives the length of data written to the <i>HeapInformation</i> buffer. If the buffer is too small, the function fails and <i>ReturnLength</i> specifies the minimum size required for the buffer.</para>
      <para>If you do not want to receive this information, specify <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapReAlloc">
    <summary>Reallocates a block of memory from a heap. This function enables you to resize a memory block and change other memory block properties. The allocated memory is not movable.</summary>
    <param name="hHeap">A handle to the heap from which the memory is to be reallocated. This handle is a returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="dwFlags">
      <para>The heap reallocation options. Specifying a value overrides the corresponding value specified in the <i>flOptions</i> parameter when the heap was created by using the<see cref="HeapCreate" /> function. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_GENERATE_EXCEPTIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>The operating-system raises an exception to indicate a function failure, such as an out-of-memory condition, instead of returning <b>NULL</b>.<para>To ensure that exceptions are generated for all calls to this function, specify <b>HEAP_GENERATE_EXCEPTIONS</b> in the call to <see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_GENERATE_EXCEPTIONS</b> in this function call.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_NO_SERIALIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Serialized access will not be used. For more information, see Remarks.<para>To ensure that serialized access is disabled for all calls to this function, specify <b>HEAP_NO_SERIALIZE</b> in the call to <see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_NO_SERIALIZE</b> in this function call.</para><para>This value should not be specified when accessing the process heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process heap.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_REALLOC_IN_PLACE_ONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>There can be no movement when reallocating a memory block. If this value is not specified, the function may move the block to a new location. If this value is specified and the block cannot be resized without moving, the function fails, leaving the original memory block unchanged.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_ZERO_MEMORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>If the reallocation request is for a larger size, the additional region of memory beyond the original size be initialized to zero. The contents of the memory block up to its original size are unaffected.</description>
        </listheader>
      </list>
    </param>
    <param name="lpMem">A pointer to the block of memory that the function reallocates. This pointer is returned by an earlier call to the<see cref="HeapAlloc" /> or<b>HeapReAlloc</b> function.</param>
    <param name="dwBytes">
      <para>The new size of the memory block, in bytes. A memory block's size can be increased or decreased by using this function.</para>
      <para>If the heap specified by the <i>hHeap</i> parameter is a "non-growable" heap, <i>dwBytes</i> must be less than 0x7FFF8. You create a non-growable heap by calling the<see cref="HeapCreate" /> function with a nonzero value.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the reallocated memory block.</para>
      <para>If the function fails and you have not specified <b>HEAP_GENERATE_EXCEPTIONS</b>, the return value is <b>NULL</b>.</para>
      <para>If the function fails and you have specified <b>HEAP_GENERATE_EXCEPTIONS</b>, the function may generate either of the exceptions listed in the following table. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Debug/getexceptioncode">GetExceptionCode</a>.</para>
      <list type="table">
        <listheader>
          <description>Exception code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>STATUS_NO_MEMORY</b>
          </description>
          <description>The allocation attempt failed because of a lack of available memory or heap corruption.</description>
        </listheader>
        <listheader>
          <description>
            <b>STATUS_ACCESS_VIOLATION</b>
          </description>
          <description>The allocation attempt failed because of heap corruption or improper function parameters.</description>
        </listheader>
      </list>  The alignment of memory returned by <b>HeapReAlloc</b> is <b>MEMORY_ALLOCATION_ALIGNMENT</b> in WinNT.h:<code>#if defined(_WIN64) || defined(_M_ALPHA) #define MEMORY_ALLOCATION_ALIGNMENT 16 #else #define MEMORY_ALLOCATION_ALIGNMENT 8 #endif</code><para>If the function fails, it does not call <see cref="SetLastError" />. An application cannot call <see cref="GetLastError" /> for extended error information.</para></returns>
  </member>
  <member name="Windows.HeapSetInformation">
    <summary>Enables features for a specified heap.</summary>
    <param name="HeapHandle">A handle to the heap where information is to be set. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="HeapInformationClass">
      <para>The class of information to be set. This parameter can be one of the following values from the<b>HEAP_INFORMATION_CLASS</b> enumeration type.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HeapCompatibilityInformation</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Enables heap features. Only the <a href="https://docs.microsoft.com//windows/desktop/Memory/low-fragmentation-heap">low-fragmentation heap</a> (LFH) is supported. However, it is not necessary for applications to enable the LFH because the system uses the LFH as needed to service memory allocation requests. <para><b>Windows XP and Windows Server 2003:  </b>The LFH is not enabled by default. To enable the LFH for the specified heap, set the variable pointed to by the <i>HeapInformation</i> parameter to 2. After the LFH is enabled for a heap, it cannot be disabled.</para><para>The LFH cannot be enabled for heaps created with <b>HEAP_NO_SERIALIZE</b> or for heaps created with a fixed size. The LFH also cannot be enabled if you are using the heap debugging tools in<a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a>or<a href="https://docs.microsoft.com//windows-hardware/drivers/devtest/application-verifier">Microsoft Application Verifier</a>.</para><para>When a process is run under any debugger, certain heap debug options are automatically enabled for all heaps in the process. These heap debug options prevent the use of the LFH. To enable the low-fragmentation heap when running under a debugger, set the _NO_DEBUG_HEAP environment variable to 1.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HeapEnableTerminationOnCorruption</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Enables the terminate-on-corruption feature. If the heap manager detects an error in any heap used by the process, it calls the Windows Error Reporting service and terminates the process.<para>After a process enables this feature, it cannot be disabled.</para><para><b>Windows Server 2003 and Windows XP:  </b>This value is not supported until Windows Vista and Windows XP with SP3. The function succeeds but the <b>HeapEnableTerminationOnCorruption</b> value is ignored.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HeapOptimizeResources</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>If HeapSetInformation is called with <i>HeapHandle</i> set to NULL, then all heaps in the process with a <a href="https://docs.microsoft.com//windows/desktop/Memory/low-fragmentation-heap">low-fragmentation heap</a> (LFH) will have their caches optimized, and the memory will be decommitted if possible. <para>If a heap pointer is supplied in <i>HeapHandle</i>, then only that heap will be optimized.</para><para>Note that the HEAP_OPTIMIZE_RESOURCES_INFORMATION structure passed in <i>HeapInformation</i> must be properly initialized.</para><para><b>Note</b>  This value was added in Windows 8.1.</para></description>
        </listheader>
      </list>
    </param>
    <param name="HeapInformation">
      <para>The heap information buffer. The format of this data depends on the value of the<i>HeapInformationClass</i> parameter.</para>
      <para>If the <i>HeapInformationClass</i> parameter is<b>HeapCompatibilityInformation</b>, the <i>HeapInformation</i>parameter is a pointer to a <b>ULONG</b> variable.</para>
      <para>If the <i>HeapInformationClass</i> parameter is<b>HeapEnableTerminationOnCorruption</b>, the <i>HeapInformation</i>parameter should be <b>NULL</b> and <i>HeapInformationLength</i> should be 0</para>
    </param>
    <param name="HeapInformationLength">The size of the <i>HeapInformation</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapSize">
    <summary>Retrieves the size of a memory block allocated from a heap by the<see cref="HeapAlloc" /> or<see cref="HeapReAlloc" /> function.</summary>
    <param name="hHeap">A handle to the heap in which the memory block resides. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="dwFlags">
      <para>The heap size options. Specifying the following value overrides the corresponding value specified in the<i>flOptions</i> parameter when the heap was created by using the<see cref="HeapCreate" /> function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_NO_SERIALIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Serialized access will not be used. For more information, see Remarks.<para>To ensure that serialized access is disabled for all calls to this function, specify<b>HEAP_NO_SERIALIZE</b> in the call to<see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_NO_SERIALIZE</b> in this function call.</para><para>This value should not be specified when accessing the process heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process heap.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpMem">A pointer to the memory block whose size the function will obtain. This is a pointer returned by the<see cref="HeapAlloc" /> or<see cref="HeapReAlloc" /> function. The memory block must be from the heap specified by the <i>hHeap</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the requested size of the allocated memory block, in bytes.</para>
      <para>If the function fails, the return value is <code>(SIZE_T)-1</code>. The function does not call <see cref="SetLastError" />. An application cannot call <see cref="GetLastError" /> for extended error information.</para>
      <para>If the <i>lpMem</i> parameter refers to a heap allocation that is not in the heap specified by the <i>hHeap</i> parameter, the behavior of the<b>HeapSize</b> function is undefined.</para>
    </returns>
  </member>
  <member name="Windows.HeapSummary">
    <summary>Summarizes the specified heap.</summary>
    <param name="hHeap">A handle to the heap to be summarized. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="dwFlags">The heap summary options.</param>
    <param name="lpSummary">Receives a pointer to a <see cref="Heap_Summary" /> structure representing the heap summary.</param>
    <returns>Returns S_OK on success.</returns>
  </member>
  <member name="Windows.HeapUnlock">
    <summary>Releases ownership of the critical section object, or lock, that is associated with a specified heap. It reverses the action of the<see cref="HeapLock" /> function.</summary>
    <param name="hHeap">A handle to the heap to be unlocked. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapValidate">
    <summary>Validates the specified heap. The function scans all the memory blocks in the heap and verifies that the heap control structures maintained by the heap manager are in a consistent state. You can also use the<b>HeapValidate</b> function to validate a single memory block within a specified heap without checking the validity of the entire heap.</summary>
    <param name="hHeap">A handle to the heap to be validated. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="dwFlags">
      <para>The heap access options. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HEAP_NO_SERIALIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Serialized access will not be used. For more information, see Remarks.<para>To ensure that serialized access is disabled for all calls to this function, specify <b>HEAP_NO_SERIALIZE</b> in the call to <see cref="HeapCreate" />. In this case, it is not necessary to additionally specify <b>HEAP_NO_SERIALIZE</b> in this function call.</para><para>This value should not be specified when accessing the process default heap. The system may create additional threads within the application's process, such as a CTRL+C handler, that simultaneously access the process default heap.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpMem">
      <para>A pointer to a memory block within the specified heap. This parameter may be <b>NULL</b>.</para>
      <para>If this parameter is <b>NULL</b>, the function attempts to validate the entire heap specified by <i>hHeap</i>.</para>
      <para>If this parameter is not <b>NULL</b>, the function attempts to validate the memory block pointed to by <i>lpMem</i>. It does not attempt to validate the rest of the heap.</para>
    </param>
    <returns>
      <para>If the specified heap or memory block is valid, the return value is nonzero.</para>
      <para>If the specified heap or memory block is invalid, the return value is zero. On a system set up for debugging, the<b>HeapValidate</b> function then displays debugging messages that describe the part of the heap or memory block that is invalid, and stops at a hard-coded breakpoint so that you can examine the system to determine the source of the invalidity. The<b>HeapValidate</b> function does not set the thread's last error value. There is no extended error information for this function; do not call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HeapWalk">
    <summary>Enumerates the memory blocks in the specified heap.</summary>
    <param name="hHeap">A handle to the heap. This handle is returned by either the<see cref="HeapCreate" /> or<see cref="GetProcessHeap" /> function.</param>
    <param name="lpEntry">
      <para>A pointer to a <see cref="PROCESS_HEAP_ENTRY" /> structure that maintains state information for a particular heap enumeration.</para>
      <para>If the <b>HeapWalk</b> function succeeds, returning the value<b>TRUE</b>, this structure's members contain information about the next memory block in the heap.</para>
      <para>To initiate a heap enumeration, set the <b>lpData</b> field of the<see cref="PROCESS_HEAP_ENTRY" /> structure to<b>NULL</b>. To continue a particular heap enumeration, call the<b>HeapWalk</b> function repeatedly, with no changes to<i>hHeap</i>, <i>lpEntry</i>, or any of the members of the<b>PROCESS_HEAP_ENTRY</b> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
      <para>If the heap enumeration terminates successfully by reaching the end of the heap, the function returns<b>FALSE</b>, and <see cref="GetLastError" />returns the error code <b>ERROR_NO_MORE_ITEMS</b>.</para>
    </returns>
  </member>
</doc>