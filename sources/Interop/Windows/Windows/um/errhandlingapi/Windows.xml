<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AddVectoredContinueHandler">
    <summary>Registers a vectored continue handler.</summary>
    <param name="First">The order in which the handler should be called. If the parameter is nonzero, the handler is the first handler to be called. If the parameter is zero, the handler is the last handler to be called.</param>
    <param name="Handler">A pointer to the handler to be called. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winnt/nc-winnt-pvectored_exception_handler">VectoredHandler</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the exception handler.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.AddVectoredExceptionHandler">
    <summary>Registers a vectored exception handler.</summary>
    <param name="First">The order in which the handler should be called. If the parameter is nonzero, the handler is the first handler to be called. If the parameter is zero, the handler is the last handler to be called.</param>
    <param name="Handler">A pointer to the handler to be called. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winnt/nc-winnt-pvectored_exception_handler">VectoredHandler</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the exception handler.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.FatalAppExit">
    <summary>Displays a message box and terminates the application when the message box is closed. If the system is running with a debug version of Kernel32.dll, the message box gives the user the opportunity to terminate the application or to cancel the message box and return to the application that called<b>FatalAppExit</b>.</summary>
    <param name="uAction">This parameter must be zero.</param>
    <param name="lpMessageText">The null-terminated string that is displayed in the message box.</param>
  </member>
  <member name="Windows.FatalAppExitA">
    <summary>Displays a message box and terminates the application when the message box is closed. If the system is running with a debug version of Kernel32.dll, the message box gives the user the opportunity to terminate the application or to cancel the message box and return to the application that called<b>FatalAppExit</b>.</summary>
    <param name="uAction">This parameter must be zero.</param>
    <param name="lpMessageText">The null-terminated string that is displayed in the message box.</param>
  </member>
  <member name="Windows.FatalAppExitW">
    <summary>Displays a message box and terminates the application when the message box is closed. If the system is running with a debug version of Kernel32.dll, the message box gives the user the opportunity to terminate the application or to cancel the message box and return to the application that called<b>FatalAppExit</b>.</summary>
    <param name="uAction">This parameter must be zero.</param>
    <param name="lpMessageText">The null-terminated string that is displayed in the message box.</param>
  </member>
  <member name="Windows.FatalAppExit">
    <summary>Displays a message box and terminates the application when the message box is closed. If the system is running with a debug version of Kernel32.dll, the message box gives the user the opportunity to terminate the application or to cancel the message box and return to the application that called<b>FatalAppExit</b>.</summary>
    <param name="uAction">This parameter must be zero.</param>
    <param name="lpMessageText">The null-terminated string that is displayed in the message box.</param>
  </member>
  <member name="Windows.FatalAppExitA">
    <summary>Displays a message box and terminates the application when the message box is closed. If the system is running with a debug version of Kernel32.dll, the message box gives the user the opportunity to terminate the application or to cancel the message box and return to the application that called<b>FatalAppExit</b>.</summary>
    <param name="uAction">This parameter must be zero.</param>
    <param name="lpMessageText">The null-terminated string that is displayed in the message box.</param>
  </member>
  <member name="Windows.FatalAppExitW">
    <summary>Displays a message box and terminates the application when the message box is closed. If the system is running with a debug version of Kernel32.dll, the message box gives the user the opportunity to terminate the application or to cancel the message box and return to the application that called<b>FatalAppExit</b>.</summary>
    <param name="uAction">This parameter must be zero.</param>
    <param name="lpMessageText">The null-terminated string that is displayed in the message box.</param>
  </member>
  <member name="Windows.GetErrorMode">
    <summary>Retrieves the error mode for the current process.</summary>
    <returns>
      <para>The process error mode. This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_FAILCRITICALERRORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling process.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOALIGNMENTFAULTEXCEPT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The system automatically fixes memory alignment faults and makes them invisible to the application. It does this for the calling process and any descendant processes. This feature is only supported by certain processor architectures. For more information, see <see cref="SetErrorMode" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOGPFAULTERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the Windows Error Reporting dialog.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOOPENFILEERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8000</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display a message box when it fails to find a file. Instead, the error is returned to the calling process.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetLastError">
    <summary>
      <para>Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code.</para>
      <para>
        <b>Visual Basic:  </b>Applications should call <b>err.LastDllError</b> instead of<b>GetLastError</b>.</para>
    </summary>
    <returns>
      <para>The return value is the calling thread's last-error code.</para>
      <para>The Return Value section of the documentation for each function that sets the last-error code notes the conditions under which the function sets the last-error code. Most functions that set the thread's last-error code set it when they fail. However, some functions also set the last-error code when they succeed. If the function is not documented to set the last-error code, the value returned by this function is simply the most recent last-error code to have been set; some functions set the last-error code to 0 on success and others do not.</para>
    </returns>
  </member>
  <member name="Windows.GetThreadErrorMode">
    <summary>Retrieves the error mode for the calling thread.</summary>
    <returns>
      <para>The process error mode. This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_FAILCRITICALERRORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling thread.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOGPFAULTERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the Windows Error Reporting dialog.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOOPENFILEERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8000</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display a message box when it fails to find a file. Instead, the error is returned to the calling thread.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.RaiseException">
    <summary>Raises an exception in the calling thread.</summary>
    <param name="dwExceptionCode">
      <para>An application-defined exception code of the exception being raised. The filter expression and exception-handler block of an exception handler can use the<a href="https://docs.microsoft.com//windows/desktop/Debug/getexceptioncode">GetExceptionCode</a> function to retrieve this value.</para>
      <para>Note that the system will clear bit 28 of <i>dwExceptionCode</i> before displaying a message This bit is a reserved exception bit, used by the system for its own purposes.</para>
    </param>
    <param name="dwExceptionFlags">The exception flags. This can be either zero to indicate a continuable exception, or EXCEPTION_NONCONTINUABLE to indicate a noncontinuable exception. Any attempt to continue execution after a noncontinuable exception causes the EXCEPTION_NONCONTINUABLE_EXCEPTION exception.</param>
    <param name="nNumberOfArguments">The number of arguments in the <i>lpArguments</i> array. This value must not exceed EXCEPTION_MAXIMUM_PARAMETERS. This parameter is ignored if <i>lpArguments</i> is <b>NULL</b>.</param>
    <param name="lpArguments">An array of arguments. This parameter can be <b>NULL</b>. These arguments can contain any application-defined data that needs to be passed to the filter expression of the exception handler.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RaiseFailFastException">
    <summary>Raises an exception that bypasses all exception handlers (frame or vector based). Raising this exception terminates the application and invokes Windows Error Reporting, if Windows Error Reporting is enabled.</summary>
    <param name="pExceptionRecord">
      <para>A pointer to an <see cref="EXCEPTION_RECORD" /> structure that contains the exception information. You must specify the <b>ExceptionAddress</b> and <b>ExceptionCode</b> members.</para>
      <para>If this parameter is <b>NULL</b>, the function creates an exception record and sets the <b>ExceptionCode</b> member to STATUS_FAIL_FAST_EXCEPTION. The function will also set the <b>ExceptionAddress</b> member if the <i>dwFlags</i> parameter contains the FAIL_FAST_GENERATE_EXCEPTION_ADDRESS flag.</para>
    </param>
    <param name="pContextRecord">A pointer to a <see cref="CONTEXT" /> structure that contains the context information. If <b>NULL</b>, this function generates the context (however, the context will not exactly match the context of the caller).</param>
    <param name="dwFlags">
      <para>You can specify zero or the following flag that control this function's behavior:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FAIL_FAST_GENERATE_EXCEPTION_ADDRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Causes <b>RaiseFailFastException</b> to set the <b>ExceptionAddress</b> of <see cref="EXCEPTION_RECORD" /> to the return address of this function (the next instruction in the caller after the call to <b>RaiseFailFastException</b>). This function will set the exception address only if <b>ExceptionAddress</b> is not <b>NULL</b>.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.RemoveVectoredContinueHandler">
    <summary>Unregisters a vectored continue handler.</summary>
    <param name="Handle">A pointer to a vectored exception handler previously registered using the <see cref="AddVectoredContinueHandler function" />.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RemoveVectoredExceptionHandler">
    <summary>Unregisters a vectored exception handler.</summary>
    <param name="Handle">A handle to the vectored exception handler previously registered using the <see cref="AddVectoredExceptionHandler function" />.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetErrorMode">
    <summary>Controls whether the system will handle the specified types of serious errors or whether the process will handle them.</summary>
    <param name="uMode">
      <para>The process error mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Use the system default, which is to display all error dialog boxes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_FAILCRITICALERRORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling process.<para>Best practice is that all applications call the process-wide <b>SetErrorMode</b> function with a parameter of <b>SEM_FAILCRITICALERRORS</b> at startup. This is to prevent error mode dialogs from hanging the application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOALIGNMENTFAULTEXCEPT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The system automatically fixes memory alignment faults and makes them invisible to the application. It does this for the calling process and any descendant processes. This feature is only supported by certain processor architectures. For more information, see the Remarks section. 								<para>After this value is set for a process, subsequent attempts to clear the value are ignored.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOGPFAULTERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the Windows Error Reporting dialog.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOOPENFILEERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8000</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="OpenFile" /> function does not display a message box when it fails to find a file. Instead, the error is returned to the caller. This error mode overrides the <b>OF_PROMPT</b> flag.</description>
        </listheader>
      </list>
    </param>
    <returns>The return value is the previous state of the error-mode bit flags.</returns>
  </member>
  <member name="Windows.SetLastError">
    <summary>Sets the last-error code for the calling thread.</summary>
    <param name="dwErrCode">The last-error code for the thread.</param>
  </member>
  <member name="Windows.SetThreadErrorMode">
    <summary>Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them.</summary>
    <param name="dwNewMode">
      <para>The thread error mode. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Use the system default, which is to display all error dialog boxes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_FAILCRITICALERRORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling thread.<para>Best practice is that all applications call the process-wide <see cref="SetErrorMode" /> function with a parameter of <b>SEM_FAILCRITICALERRORS</b> at startup. This is to prevent error mode dialogs from hanging the application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOGPFAULTERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The system does not display the Windows Error Reporting dialog.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SEM_NOOPENFILEERRORBOX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8000</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="OpenFile" /> function does not display a message box when it fails to find a file. Instead, the error is returned to the caller. This error mode overrides the <b>OF_PROMPT</b> flag.</description>
        </listheader>
      </list>
    </param>
    <param name="lpOldMode">If the function succeeds, this parameter is set to the thread's previous error mode. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetUnhandledExceptionFilter">
    <summary>
      <para>Enables an application to supersede the top-level exception handler of each thread of a process.</para>
      <para>After calling this function, if an exception occurs in a process that is not being debugged, and the exception makes it to the unhandled exception filter, that filter will call the exception filter function specified by the <i>lpTopLevelExceptionFilter</i> parameter.</para>
    </summary>
    <param name="lpTopLevelExceptionFilter">
      <para>A pointer to a top-level exception filter function that will be called whenever the<see cref="UnhandledExceptionFilter" /> function gets control, and the process is not being debugged. A value of <b>NULL</b> for this parameter specifies default handling within<b>UnhandledExceptionFilter</b>.</para>
      <para>The filter function has syntax similar to that of<see cref="UnhandledExceptionFilter" />: It takes a single parameter of type <b>LPEXCEPTION_POINTERS</b>, has a WINAPI calling convention, and returns a value of type <b>LONG</b>. The filter function should return one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXCEPTION_EXECUTE_HANDLER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Return from <see cref="UnhandledExceptionFilter" /> and execute the associated exception handler. This usually results in process termination.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXCEPTION_CONTINUE_EXECUTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0xffffffff</term>
              </listheader>
            </list>
          </description>
          <description>Return from <see cref="UnhandledExceptionFilter" /> and continue execution from the point of the exception. Note that the filter function is free to modify the continuation state by modifying the exception information supplied through its <b>LPEXCEPTION_POINTERS</b> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXCEPTION_CONTINUE_SEARCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0</term>
              </listheader>
            </list>
          </description>
          <description>Proceed with normal execution of <see cref="UnhandledExceptionFilter" />. That means obeying the <see cref="SetErrorMode" /> flags, or invoking the Application Error pop-up message box.</description>
        </listheader>
      </list>
    </param>
    <returns>The<b>SetUnhandledExceptionFilter</b> function returns the address of the previous exception filter established with the function. A <b>NULL</b> return value means that there is no current top-level exception handler.</returns>
  </member>
  <member name="Windows.RtlUnhandledExceptionFilter">
    <summary>An application-defined function that passes unhandled exceptions to the debugger, if the process is being debugged. Otherwise, it optionally displays an <b>Application Error</b> message box and causes the exception handler to be executed. This function can be called only from within the filter expression of an exception handler.</summary>
    <param name="ExceptionInfo">A pointer to an<see cref="EXCEPTION_POINTERS" /> structure that specifies a description of the exception and the processor context at the time of the exception. This pointer is the return value of a call to the<a href="https://docs.microsoft.com//windows/desktop/Debug/getexceptioninformation">GetExceptionInformation</a> function.</param>
    <returns>
      <para>The function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXCEPTION_CONTINUE_SEARCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0</term>
              </listheader>
            </list>
          </description>
          <description>The process is being debugged, so the exception should be passed (as second chance) to the application's debugger.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXCEPTION_EXECUTE_HANDLER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>If the SEM_NOGPFAULTERRORBOX flag was specified in a previous call to <see cref="SetErrorMode" />, no Application Error message box is displayed. The function returns control to the exception handler, which is free to take any appropriate action.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.UnhandledExceptionFilter">
    <summary>An application-defined function that passes unhandled exceptions to the debugger, if the process is being debugged. Otherwise, it optionally displays an <b>Application Error</b> message box and causes the exception handler to be executed. This function can be called only from within the filter expression of an exception handler.</summary>
    <param name="ExceptionInfo">A pointer to an<see cref="EXCEPTION_POINTERS" /> structure that specifies a description of the exception and the processor context at the time of the exception. This pointer is the return value of a call to the<a href="https://docs.microsoft.com//windows/desktop/Debug/getexceptioninformation">GetExceptionInformation</a> function.</param>
    <returns>
      <para>The function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXCEPTION_CONTINUE_SEARCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0</term>
              </listheader>
            </list>
          </description>
          <description>The process is being debugged, so the exception should be passed (as second chance) to the application's debugger.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EXCEPTION_EXECUTE_HANDLER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>If the SEM_NOGPFAULTERRORBOX flag was specified in a previous call to <see cref="SetErrorMode" />, no Application Error message box is displayed. The function returns control to the exception handler, which is free to take any appropriate action.</description>
        </listheader>
      </list>
    </returns>
  </member>
</doc>