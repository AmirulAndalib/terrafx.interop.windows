<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMFPresentationClock.AddClockStateSink">
    <summary>Registers an object to be notified whenever the clock starts, stops, or pauses, or changes rate.</summary>
    <param name="pStateSink">Pointer to the object's <see cref="IMFClockStateSink" /> interface.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock.GetTime">
    <summary>Retrieves the latest clock time.</summary>
    <param name="phnsClockTime">Receives the latest clock time, in 100-nanosecond units. The time is relative to when the clock was last started.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The clock does not have a presentation time source. Call <see cref="IMFPresentationClock.SetTimeSource" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock.GetTimeSource">
    <summary>Retrieves the clock's presentation time source.</summary>
    <param name="ppTimeSource">Receives a pointer to the time source's <see cref="IMFPresentationTimeSource" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No time source was set on this clock.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock.Pause">
    <summary>Pauses the presentation clock. While the clock is paused, the clock time does not advance, and the clock's <see cref="IMFPresentationClock.GetTime" /> returns the time at which the clock was paused.</summary>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No time source was set on this clock.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_STATE_ALREADY_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The clock is already paused.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_INVALIDREQUEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The clock is stopped. This request is not valid when the clock is stopped.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock.RemoveClockStateSink">
    <summary>Unregisters an object that is receiving state-change notifications from the clock.</summary>
    <param name="pStateSink">Pointer to the object's <see cref="IMFClockStateSink" /> interface.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock.SetTimeSource">
    <summary>Sets the time source for the presentation clock. The time source is the object that drives the clock by providing the current time.</summary>
    <param name="pTimeSource">Pointer to the <see cref="IMFPresentationTimeSource" /> interface of the time source.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_NOT_SIMPLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The time source does not have a frequency of 10 MHz.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_NOT_INITIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The time source has not been initialized.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock.Start">
    <summary>Starts the presentation clock.</summary>
    <param name="llClockStartOffset">Initial starting time, in 100-nanosecond units. At the time the <b>Start</b> method is called, the clock's <see cref="IMFPresentationClock.GetTime" /> method returns this value, and the clock time increments from there. If the value is PRESENTATION_CURRENT_POSITION, the clock starts from its current position. Use this value if the clock is paused and you want to restart it from the same position.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No time source was set on this clock.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock.Stop">
    <summary>Stops the presentation clock. While the clock is stopped, the clock time does not advance, and the clock's <see cref="IMFPresentationClock.GetTime" /> method returns zero.</summary>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No time source was set on this clock.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_CLOCK_STATE_ALREADY_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The clock is already stopped.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFPresentationClock">
    <summary>Represents a presentation clock, which is used to schedule when samples are rendered and to synchronize multiple streams.</summary>
  </member>
</doc>