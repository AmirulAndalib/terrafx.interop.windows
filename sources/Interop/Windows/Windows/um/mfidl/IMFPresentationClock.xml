<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMFPresentationClock.AddClockStateSink">
    <summary>
      <para>Registers an object to be notified whenever the clock starts, stops, or pauses, or changes rate.</para>
    </summary>
    <param name="pStateSink">
      <para>Pointer to the object's <see cref="IMFClockStateSink" /> interface.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before releasing the object, call <see cref="IMFPresentationClock.RemoveClockStateSink" /> to unregister the object for state-change notifications.</para>
    </remarks>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock.GetTime">
    <summary>
      <para>Retrieves the latest clock time.</para>
    </summary>
    <param name="phnsClockTime">
      <para>Receives the latest clock time, in 100-nanosecond units. The time is relative to when the clock was last started.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
            </para>
          </description>
          <description>
            <para>The clock does not have a presentation time source. Call <see cref="IMFPresentationClock.SetTimeSource" />.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method does not attempt to smooth out jitter or otherwise account for any inaccuracies in the clock time.</para>
    </remarks>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/mftime">MFTIME</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock.GetTimeSource">
    <summary>
      <para>Retrieves the clock's presentation time source.</para>
    </summary>
    <param name="ppTimeSource">
      <para>Receives a pointer to the time source's <see cref="IMFPresentationTimeSource" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
            </para>
          </description>
          <description>
            <para>No time source was set on this clock.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock.Pause">
    <summary>
      <para>Pauses the presentation clock. While the clock is paused, the clock time does not advance, and the clock's <see cref="IMFPresentationClock.GetTime" /> returns the time at which the clock was paused.</para>
    </summary>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
            </para>
          </description>
          <description>
            <para>No time source was set on this clock.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_STATE_ALREADY_SET</b>
            </para>
          </description>
          <description>
            <para>The clock is already paused.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_INVALIDREQUEST</b>
            </para>
          </description>
          <description>
            <para>The clock is stopped. This request is not valid when the clock is stopped.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method is valid when the clock is running. It is not valid when the clock is paused or stopped.</para>
      <para>The presentation clock initiates the state change by calling <see cref="IMFClockStateSink.OnClockPause" /> on the clock's time source. This call is made synchronously. If it fails, the state change does not occur. If the call succeeds, the state changes, and the clock notifies the other state-change subscribers by calling their <b>OnClockPause</b> methods. These calls are made asynchronously.</para>
    </remarks>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock.RemoveClockStateSink">
    <summary>
      <para>Unregisters an object that is receiving state-change notifications from the clock.</para>
    </summary>
    <param name="pStateSink">
      <para>Pointer to the object's <see cref="IMFClockStateSink" /> interface.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock.SetTimeSource">
    <summary>
      <para>Sets the time source for the presentation clock. The time source is the object that drives the clock by providing the current time.</para>
    </summary>
    <param name="pTimeSource">
      <para>Pointer to the <see cref="IMFPresentationTimeSource" /> interface of the time source.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_NOT_SIMPLE</b>
            </para>
          </description>
          <description>
            <para>The time source does not have a frequency of 10 MHz.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_NOT_INITIALIZED</b>
            </para>
          </description>
          <description>
            <para>The time source has not been initialized.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The presentation clock cannot start until it has a time source.</para>
      <para>The time source is automatically registered to receive state change notifications from the clock, through the time source's <see cref="IMFClockStateSink" /> interface, which all time sources must implement.</para>
      <para>This time source have a frequency of 10 MHz. See <see cref="IMFClock.GetClockCharacteristics" />. If not, the method returns MF_E_CLOCK_NOT_SIMPLE.</para>
    </remarks>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock.Start">
    <summary>
      <para>Starts the presentation clock.</para>
    </summary>
    <param name="llClockStartOffset">
      <para>Initial starting time, in 100-nanosecond units. At the time the <b>Start</b> method is called, the clock's <see cref="IMFPresentationClock.GetTime" /> method returns this value, and the clock time increments from there. If the value is PRESENTATION_CURRENT_POSITION, the clock starts from its current position. Use this value if the clock is paused and you want to restart it from the same position.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
            </para>
          </description>
          <description>
            <para>No time source was set on this clock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method is valid in all states (stopped, paused, or running).</para>
      <para>If the clock is paused and restarted from the same position (<i>llClockStartOffset</i> is PRESENTATION_CURRENT_POSITION), the presentation clock sends an <see cref="IMFClockStateSink.OnClockRestart" /> notification. Otherwise, the clock sends an <see cref="IMFClockStateSink.OnClockStart" /> notification.</para>
      <para>The presentation clock initiates the state change by calling <see cref="OnClockStart" /> or <see cref="OnClockRestart" /> on the clock's time source. This call is made synchronously. If it fails, the state change does not occur. If the call succeeds, the state changes, and the clock notifies the other state-change subscribers by calling their <b>OnClockStart</b> or <b>OnClockRestart</b> methods. These calls are made asynchronously.</para>
      <para>If the clock is already running, calling <b>Start</b> again has the effect of seeking the clock to the new <i>StartOffset</i> position.</para>
    </remarks>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock.Stop">
    <summary>
      <para>Stops the presentation clock. While the clock is stopped, the clock time does not advance, and the clock's <see cref="IMFPresentationClock.GetTime" /> method returns zero.</para>
    </summary>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_NO_TIME_SOURCE</b>
            </para>
          </description>
          <description>
            <para>No time source was set on this clock.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_CLOCK_STATE_ALREADY_SET</b>
            </para>
          </description>
          <description>
            <para>The clock is already stopped.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method is valid when the clock is running or paused.</para>
      <para>The presentation clock initiates the state change by calling <see cref="IMFClockStateSink.OnClockStop" /> on the clock's time source. This call is made synchronously. If it fails, the state change does not occur. If the call succeeds, the state changes, and the clock notifies the other state-change subscribers by calling their <b>OnClockStop</b> methods. These calls are made asynchronously.</para>
    </remarks>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
  <member name="IMFPresentationClock">
    <summary>
      <para>Represents a presentation clock, which is used to schedule when samples are rendered and to synchronize multiple streams.</para>
    </summary>
    <remarks>
      <para>To create a new instance of the presentation clock, call the <see cref="MFCreatePresentationClock" /> function. The presentation clock must have a time source, which is an object that provides the clock times. For example, the audio renderer is a time source that uses the sound card to drive the clock. Time sources expose the <see cref="IMFPresentationTimeSource" /> interface. To set the time source, call <see cref="SetTimeSource" />. The presentation clock does not begin running until the <see cref="Start" /> method is called.</para>
      <para>To get the presentation clock from the Media Session, call <see cref="IMFMediaSession.GetClock" />.</para>
    </remarks>
    <seealso cref="IMFClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-interfaces">Media Foundation Interfaces</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
</doc>