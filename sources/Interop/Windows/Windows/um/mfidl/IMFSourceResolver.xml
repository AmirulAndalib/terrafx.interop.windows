<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMFSourceResolver.BeginCreateObjectFromByteStream">
    <summary>
      <para>Begins an asynchronous request to create a media source from a byte stream.</para>
    </summary>
    <param name="pByteStream">
      <para>A pointer to the byte stream's <see cref="IMFByteStream" /> interface.</para>
    </param>
    <param name="pwszURL">
      <para>A null-terminated string that contains the original URL of the byte stream. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="dwFlags">
      <para>A bitwise <b>OR</b> of one or more flags. See <a href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver-flags">Source Resolver Flags</a>.</para>
    </param>
    <param name="pProps">
      <para>A pointer to the <b>IPropertyStore</b> interface of a property store. The method passes the property store to the byte-stream handler. The byte-stream handler can use the property store to configure the media source. This parameter can be <b>NULL</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/configuring-a-media-source">Configuring a Media Source</a>.</para>
    </param>
    <param name="ppIUnknownCancelCookie">
      <para>Receives an <b>IUnknown</b> pointer or the value <b>NULL</b>. If the value is not <b>NULL</b>, you can cancel the asynchronous operation by passing this pointer to the <see cref="IMFSourceResolver.CancelObjectCreation" /> method. The caller must release the interface. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pCallback">
      <para>A pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</para>
    </param>
    <param name="punkState">
      <para>A pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>dwFlags</i> parameter contains mutually exclusive flags.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_UNSUPPORTED_BYTESTREAM_TYPE</b>
            </para>
          </description>
          <description>
            <para>The byte stream is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_BYTESTREAM_NOT_SEEKABLE</b>
            </para>
          </description>
          <description>
            <para>The byte stream does not support seeking.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <i>dwFlags</i> parameter must contain the <b>MF_RESOLUTION_MEDIASOURCE</b> flag and should not contain the <b>MF_RESOLUTION_BYTESTREAM</b> flag.</para>
      <para>The source resolver attempts to find one or more byte-stream handlers for the byte stream, based on the file name extension of the URL, or the MIME type of the byte stream (or both). The URL is specified in the optional <i>pwszURL</i> parameter, and the MIME type may be specified in the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-bytestream-content-type-attribute">MF_BYTESTREAM_CONTENT_TYPE</a> attribute on the byte stream. Byte-stream handlers are registered by file name extension or MIME type, or both, as described in <a href="https://docs.microsoft.com//windows/desktop/medfound/scheme-handlers-and-byte-stream-handlers">Scheme Handlers and Byte-Stream Handlers</a>. The caller should specify at least one of these values.</para>
      <para>When the operation completes, the source resolver calls the <see cref="IMFAsyncCallback.Invoke" /> method. The <b>Invoke</b> method should call <see cref="IMFSourceResolver.EndCreateObjectFromByteStream" /> to get a pointer to the media source.</para>
    </remarks>
    <seealso cref="IMFSourceResolver" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="IMFSourceResolver.BeginCreateObjectFromURL">
    <summary>
      <para>Begins an asynchronous request to create a media source or a byte stream from a URL.</para>
    </summary>
    <param name="pwszURL">
      <para>Null-terminated string that contains the URL to resolve.</para>
    </param>
    <param name="dwFlags">
      <para>Bitwise OR of flags. See <a href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver-flags">Source Resolver Flags</a>.</para>
    </param>
    <param name="pProps">
      <para>Pointer to the <b>IPropertyStore</b> interface of a property store. The method passes the property store to the scheme handler or byte-stream handler that creates the object. The handler can use the property store to configure the object. This parameter can be <b>NULL</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/configuring-a-media-source">Configuring a Media Source</a>.</para>
    </param>
    <param name="ppIUnknownCancelCookie">
      <para>Receives an <b>IUnknown</b> pointer or the value <b>NULL</b>. If the value is not <b>NULL</b>, you can cancel the asynchronous operation by passing this pointer to the <see cref="IMFSourceResolver.CancelObjectCreation" /> method. The caller must release the interface. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pCallback">
      <para>Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</para>
    </param>
    <param name="punkState">
      <para>Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>dwFlags</i> parameter contains mutually exclusive flags.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_UNSUPPORTED_SCHEME</b>
            </para>
          </description>
          <description>
            <para>The URL scheme is not supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <i>dwFlags</i> parameter must contain either the MF_RESOLUTION_MEDIASOURCE flag or the MF_RESOLUTION_BYTESTREAM flag, but should not contain both.</para>
      <para>For local files, you can pass the file name in the <i>pwszURL</i> parameter; the <code>file:</code> scheme is not required.</para>
      <para>When the operation completes, the source resolver calls the <see cref="IMFAsyncCallback.Invoke" /> method. The <b>Invoke</b> method should call <see cref="IMFSourceResolver.EndCreateObjectFromURL" /> to get a pointer to the object that was created.</para>
      <para>The usage of the <i>pProps</i> parameter depends on the implementation of the media source.</para>
    </remarks>
    <seealso cref="IMFSourceResolver" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="IMFSourceResolver.CancelObjectCreation">
    <summary>
      <para>Cancels an asynchronous request to create an object.</para>
    </summary>
    <param name="pIUnknownCancelCookie">
      <para>Pointer to the <b>IUnknown</b> interface that was returned in the <i>ppIUnknownCancelCookie</i> parameter of the <see cref="IMFSourceResolver.BeginCreateObjectFromByteStream" /> or <see cref="IMFSourceResolver.BeginCreateObjectFromURL" /> method.</para>
    </param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>You can use this method to cancel a previous call to <see cref="BeginCreateObjectFromByteStream" /> or <see cref="BeginCreateObjectFromURL" />. Because these methods are asynchronous, however, they might be completed before the operation can be canceled. Therefore, your callback might still be invoked after you call this method.</para>
      <para>
        <b>Note</b>  This method cannot be called remotely.</para>
    </remarks>
    <seealso cref="IMFSourceResolver" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="IMFSourceResolver.CreateObjectFromByteStream">
    <summary>
      <para>Creates a media source from a byte stream. This method is synchronous.</para>
    </summary>
    <param name="pByteStream">
      <para>Pointer to the byte stream's <see cref="IMFByteStream" /> interface.</para>
    </param>
    <param name="pwszURL">
      <para>Null-terminated string that contains the URL of the byte stream. The URL is optional and can be <b>NULL</b>. See Remarks for more information.</para>
    </param>
    <param name="dwFlags">
      <para>Bitwise <b>OR</b> of flags. See <a href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver-flags">Source Resolver Flags</a>.</para>
    </param>
    <param name="pProps">
      <para>Pointer to the <b>IPropertyStore</b> interface of a property store. The method passes the property store to the byte-stream handler. The byte-stream handler can use the property store to configure the media source. This parameter can be <b>NULL</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/configuring-a-media-source">Configuring a Media Source</a>.</para>
    </param>
    <param name="pObjectType">
      <para>Receives a member of the <see cref="MF_OBJECT_TYPE" /> enumeration, specifying the type of object that was created.</para>
    </param>
    <param name="ppObject">
      <para>Receives a pointer to the media source's <b>IUnknown</b> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>dwFlags</i> parameter contains mutually exclusive flags.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_UNSUPPORTED_BYTESTREAM_TYPE</b>
            </para>
          </description>
          <description>
            <para>This byte stream is not supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <i>dwFlags</i> parameter must contain the <b>MF_RESOLUTION_MEDIASOURCE</b> flag and should not contain the <b>MF_RESOLUTION_BYTESTREAM</b> flag.</para>
      <para>The source resolver attempts to find one or more byte-stream handlers for the byte stream, based on the file name extension of the URL, or the MIME type of the byte stream (or both). The URL is specified in the optional <i>pwszURL</i> parameter, and the MIME type may be specified in the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-bytestream-content-type-attribute">MF_BYTESTREAM_CONTENT_TYPE</a> attribute on the byte stream. Byte-stream handlers are registered by file name extension or MIME type, or both, as described in <a href="https://docs.microsoft.com//windows/desktop/medfound/scheme-handlers-and-byte-stream-handlers">Scheme Handlers and Byte-Stream Handlers</a>. The caller should specify at least one of these values (both if possible):</para>
      <list type="bullet">
        <item>
          <description>Specify the URL in the <i>pwszURL</i> parameter.
</description>
        </item>
        <item>
          <description>Specify the MIME type by setting the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-bytestream-content-type-attribute">MF_BYTESTREAM_CONTENT_TYPE</a> attribute on the byte stream. (This attribute might be set already when you create the byte stream, depending on how the byte stream was created.)
</description>
        </item>
      </list>
      <b>Note</b>  This method cannot be called remotely.
</remarks>
    <seealso cref="IMFSourceResolver" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="IMFSourceResolver.CreateObjectFromURL">
    <summary>
      <para>Creates a media source or a byte stream from a URL. This method is synchronous.</para>
    </summary>
    <param name="pwszURL">
      <para>Null-terminated string that contains the URL to resolve.</para>
    </param>
    <param name="dwFlags">
      <para>Bitwise OR of one or more flags. See <a href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver-flags">Source Resolver Flags</a>.
See remarks below.</para>
    </param>
    <param name="pProps">
      <para>Pointer to the <b>IPropertyStore</b> interface of a property store. The method passes the property store to the scheme handler or byte-stream handler that creates the object. The handler can use the property store to configure the object. This parameter can be <b>NULL</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/configuring-a-media-source">Configuring a Media Source</a>.</para>
    </param>
    <param name="pObjectType">
      <para>Receives a member of the <see cref="MF_OBJECT_TYPE" /> enumeration, specifying the type of object that was created.</para>
    </param>
    <param name="ppObject">
      <para>Receives a pointer to the object's <b>IUnknown</b> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>dwFlags</i> parameter contains mutually exclusive flags.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_UNSUPPORTED_SCHEME</b>
            </para>
          </description>
          <description>
            <para>The URL scheme is not supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <i>dwFlags</i> parameter must contain either the <b>MF_RESOLUTION_MEDIASOURCE</b> flag or the <b>MF_RESOLUTION_BYTESTREAM</b> flag, but should not contain both.</para>
      <para>It is recommended that you do not set <b>MF_RESOLUTION_WRITE</b> on the input argument <i>dwFlags</i>  unless it is necessary for your scenario. For most use-cases, media sources do not need to be created with write capability. Creating a media source with write capability may have a lower probability of success than creating a media source without write capability. This is because there can be stricter checks on the content represented by the URL when creating a media source with write capability.</para>
      <para>For local files, you can pass the file name in the <i>pwszURL</i> parameter; the <code>file:</code> scheme is not required.</para>
      <para>
        <b>Note</b>  This method cannot be called remotely.</para>
      <h4>Examples</h4>
      <code>//  Create a media source from a URL.
HRESULT CreateMediaSource(PCWSTR sURL, IMFMediaSource **ppSource)
{
    MF_OBJECT_TYPE ObjectType = MF_OBJECT_INVALID;

    IMFSourceResolver* pSourceResolver = NULL;
    IUnknown* pSource = NULL;

    // Create the source resolver.
    HRESULT hr = MFCreateSourceResolver(&amp;amp;amp;amp;amp;amp;pSourceResolver);
    if (FAILED(hr))
    {
        goto done;
    }

    // Use the source resolver to create the media source.

    // Note: For simplicity this sample uses the synchronous method to create
    // the media source. However, creating a media source can take a noticeable
    // amount of time, especially for a network source. For a more responsive
    // UI, use the asynchronous BeginCreateObjectFromURL method.

    hr = pSourceResolver-&gt;CreateObjectFromURL(
        sURL,                       // URL of the source.
        MF_RESOLUTION_MEDIASOURCE,  // Create a source object.
        NULL,                       // Optional property store.
        &amp;amp;amp;amp;amp;amp;ObjectType,        // Receives the created object type.
        &amp;amp;amp;amp;amp;amp;pSource            // Receives a pointer to the media source.
        );
    if (FAILED(hr))
    {
        goto done;
    }

    // Get the IMFMediaSource interface from the media source.
    hr = pSource-&gt;QueryInterface(IID_PPV_ARGS(ppSource));

done:
    SafeRelease(&amp;amp;amp;amp;amp;amp;pSourceResolver);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pSource);
    return hr;
}

</code>
    </remarks>
    <seealso cref="IMFSourceResolver" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="IMFSourceResolver.EndCreateObjectFromByteStream">
    <summary>
      <para>Completes an asynchronous request to create a media source from a byte stream.</para>
    </summary>
    <param name="pResult">
      <para>Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="Invoke" /> method.</para>
    </param>
    <param name="pObjectType">
      <para>Receives a member of the <see cref="MF_OBJECT_TYPE" /> enumeration, specifying the type of object that was created.</para>
    </param>
    <param name="ppObject">
      <para>Receives a pointer to the media source's <b>IUnknown</b> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_ABORT</b>
            </para>
          </description>
          <description>
            <para>The application canceled the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Call this method from inside your application's <see cref="IMFAsyncCallback.Invoke" /> method.</para>
    </remarks>
    <seealso cref="IMFSourceResolver" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="IMFSourceResolver.EndCreateObjectFromURL">
    <summary>
      <para>Completes an asynchronous request to create an object from a URL.</para>
    </summary>
    <param name="pResult">
      <para>Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="Invoke" /> method.</para>
    </param>
    <param name="pObjectType">
      <para>Receives a member of the <see cref="MF_OBJECT_TYPE" /> enumeration, specifying the type of object that was created.</para>
    </param>
    <param name="ppObject">
      <para>Receives a pointer to the media source's <b>IUnknown</b> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_ABORT</b>
            </para>
          </description>
          <description>
            <para>The operation was canceled.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Call this method from inside your application's <see cref="IMFAsyncCallback.Invoke" /> method.</para>
    </remarks>
    <seealso cref="IMFSourceResolver" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="IMFSourceResolver">
    <summary>
      <para>Creates a media source from a URL or a byte stream. The <a href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</a> implements this interface. To create the source resolver, call <see cref="MFCreateSourceResolver" /> function.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-interfaces">Media Foundation Interfaces</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
</doc>