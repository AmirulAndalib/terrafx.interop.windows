<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.MFCreate3GPMediaSink">
    <summary>
      <para>Creates a media sink for authoring 3GP files.</para>
    </summary>
    <param name="pIByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream.  The media sink writes the 3GP file to this byte stream. The byte stream must be writable and support seeking.</para>
    </param>
    <param name="pVideoMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of a video media type. This type specifies the format of the video stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pAudioMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of an audio media type. This type specifies the format of the audio stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pVideoMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="ppIMediaSink">
      <para>Receives a pointer to the 3GP media sink's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The 3GP media sink supports a maximum of one video stream and one audio stream. The initial stream formats are given in the <i>pVideoMediaType</i> and <i>pAudioMediaType</i> parameters. To create an MP4 file with one stream, set the other stream type to <b>NULL</b>. For example, to create an audio-only file, set <i>pVideoMediaType</i> to <b>NULL</b>.</para>
      <para>The number of streams is fixed when you create the media sink. The sink does not support the <see cref="IMFMediaSink.AddStreamSink" /> method.</para>
      <para>To author MP4 files, use the <see cref="MFCreateMPEG4MediaSink" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateAC3MediaSink">
    <summary>
      <para>Creates an instance of the AC-3 media sink.</para>
    </summary>
    <param name="pTargetByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the AC-3 file to this byte stream. The byte stream must be writable.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface. This parameter specifies the media type for the AC-3 audio stream. The media type must contain the following attributes.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Value</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-major-type-attribute">MF_MT_MAJOR_TYPE</a>
          </description>
          <description>
            <b>MFMediaType_Audio</b>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-subtype-attribute">MF_MT_SUBTYPE</a>
          </description>
          <description>
            <b>MFAudioFormat_Dolby_AC3</b> or <b>MFAudioFormat_Dolby_DDPlus</b></description>
        </item>
      </list>
    </param>
    <param name="ppMediaSink">
      <para>Receives a pointer to the <see cref="IMFMediaSink" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The AC-3 media sink takes compressed AC-3 audio as input and writes the audio to the  byte stream without modification. The primary use for this media sink is to stream AC-3 audio over a network. The media sink does not perform AC-3 audio encoding.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateADTSMediaSink">
    <summary>
      <para>Creates an instance of the audio data transport stream (ADTS) media sink.</para>
    </summary>
    <param name="pTargetByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the ADTS stream to this byte stream. The byte stream must be writable.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface. This parameter specifies the media type for the ADTS stream. The media type must contain the following attributes.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Value</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-major-type-attribute">MF_MT_MAJOR_TYPE</a>
          </description>
          <description>
            <b>MFMediaType_Audio</b>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-subtype-attribute">MF_MT_SUBTYPE</a>
          </description>
          <description>
            <b>MFAudioFormat_AAC</b>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-aac-payload-type">MF_MT_AAC_PAYLOAD_TYPE</a>
          </description>
          <description>0 (raw AAC) or 1 (ADTS)</description>
        </item>
      </list>
    </param>
    <param name="ppMediaSink">
      <para>Receives a pointer to the <see cref="IMFMediaSink" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The ADTS media sink converts Advanced Audio Coding (AAC) audio packets into an ADTS stream. The primary use for this media sink is to stream ADTS over a network. The output is not an audio file, but a stream of audio frames with ADTS headers.</para>
      <para>The media sink can accept raw AAC frames (<a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-aac-payload-type">MF_MT_AAC_PAYLOAD_TYPE</a> = 0) or ADTS packets (MF_MT_AAC_PAYLOAD_TYPE = 1). If the input is raw AAC, the media sink inserts an ADTS header at the start of each audio frame. If the input is ADTS packets, the media sink passes the packets through to the byte stream, without modification.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateAggregateSource">
    <summary>
      <para>Creates a media source that aggregates a collection of media sources.</para>
    </summary>
    <param name="pSourceCollection">
      <para>A pointer to the <see cref="IMFCollection" /> interface of the collection object that contains a list of media sources.</para>
    </param>
    <param name="ppAggSource">
      <para>Receives a pointer to the <see cref="IMFMediaSource" /> interface of the aggregated media source. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pSourceCollection</i> collection does not contain any elements.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The aggregated media source is useful for combining  streams from separate media sources. For example, you can use it to  combine a video capture source and an audio capture source.</para>
      <h4>Examples</h4>
      <code>HRESULT CreateAggregatedSource(
    IMFMediaSource *pSource1,
    IMFMediaSource *pSource2,
    IMFMediaSource **ppAggSource
    )
{
    *ppAggSource = NULL;

    IMFCollection *pCollection = NULL;

    HRESULT hr = MFCreateCollection(&amp;amp;amp;amp;amp;amp;pCollection);

    if (SUCCEEDED(hr))
    {
        hr = pCollection-&gt;AddElement(pSource1);
    }
    if (SUCCEEDED(hr))
    {
        hr = pCollection-&gt;AddElement(pSource2);
    }
    if (SUCCEEDED(hr))
    {
        hr = MFCreateAggregateSource(pCollection, ppAggSource);
    }
    SafeRelease(&amp;amp;amp;amp;amp;amp;pCollection);
    return hr;
}

</code>
    </remarks>
    <seealso cref="IMFMediaSource" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateAudioRenderer">
    <summary>
      <para>Creates the <a href="https://docs.microsoft.com//windows/desktop/medfound/streaming-audio-renderer">Streaming Audio Renderer</a>.</para>
    </summary>
    <param name="pAudioAttributes">
      <para>A pointer to the <see cref="IMFAttributes" /> interface, which is used to configure the audio renderer. This parameter can be <b>NULL</b>. See Remarks.</para>
    </param>
    <param name="ppSink">
      <para>Receives a pointer to the audio renderer's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>To configure the audio renderer, set any of the following attributes on the <see cref="IMFAttributes" /> interface specified in the <i>pAudioAttributes</i> parameter.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-endpoint-id-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID</a>
          </description>
          <description>The audio endpoint device identifier.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-endpoint-role-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE</a>
          </description>
          <description>The audio endpoint role.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-flags-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS</a>
          </description>
          <description>Miscellaneous configuration flags.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-session-id-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID</a>
          </description>
          <description>The audio policy class.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-stream-category">MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY</a>
          </description>
          <description>The audio stream category.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-low-latency">MF_LOW_LATENCY</a>
          </description>
          <description>Enables low-latency audio streaming.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/streaming-audio-renderer">Streaming Audio Renderer</seealso>
  </member>
  <member name="Windows.MFCreateAudioRendererActivate">
    <summary>
      <para>Creates an activation object for the <a href="https://docs.microsoft.com//windows/desktop/medfound/streaming-audio-renderer">Streaming Audio Renderer</a>.</para>
    </summary>
    <param name="ppActivate">
      <para>Receives a pointer to the <see cref="IMFActivate" /> interface. Use this interface to create the audio renderer. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>To create the audio renderer, call <see cref="IMFActivate.ActivateObject" /> on the retrieved <see cref="IMFActivate" /> pointer.</para>
      <para>
        <b>Note</b>  To avoid a memory leak, call <see cref="IMFActivate.ShutdownObject" /> before releasing the final reference to the audio renderer or the audio renderer activate object.</para>
      <para>To configure the audio renderer, set any of the following attributes on the <see cref="IMFActivate" /> object before calling <see cref="ActivateObject" />. (If you are using the Media Session, the Media Session automatically calls <b>ActivateObject</b> when you queue the topology.)</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-endpoint-id-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID</a>
          </description>
          <description>The audio endpoint device identifier.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-endpoint-role-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE</a>
          </description>
          <description>The audio endpoint role.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-flags-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS</a>
          </description>
          <description>Miscellaneous configuration flags.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-session-id-attribute">MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID</a>
          </description>
          <description>The audio policy class.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-audio-renderer-attribute-stream-category">MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY</a>
          </description>
          <description>The audio stream category.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-low-latency">MF_LOW_LATENCY</a>
          </description>
          <description>Enables low-latency audio streaming.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/activation-objects">Activation Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/streaming-audio-renderer">Streaming Audio Renderer</seealso>
  </member>
  <member name="Windows.MFCreateAVIMediaSink">
    <summary>
      <para>Creates an Audio-Video Interleaved (AVI) Sink.</para>
    </summary>
    <param name="pIByteStream">
      <para>Pointer to the byte stream that will be used to write the AVI file.</para>
    </param>
    <param name="pVideoMediaType">
      <para>Pointer to the media type of the video input stream</para>
    </param>
    <param name="pAudioMediaType">
      <para>Pointer to the media type of the audio input stream</para>
    </param>
    <param name="ppIMediaSink">
      <para>Receives a pointer to the <see cref="IMFMediaSink" /> Interface.  The caller must release this interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateCameraOcclusionStateMonitor">
    <summary>
      <para>Creates a new instance of <see cref="IMFCameraOcclusionStateMonitor" /> which allows an application to receive notifications when the camera occlusion state changes.</para>
    </summary>
    <param name="symbolicLink">
      <para>The symbolic link name of the video device for which occlusion state will be monitored. This value is enumerated through the standard Windows enumeration APIs such as <see cref="MFEnumDeviceSources" /> and <a href="https://docs.microsoft.com//uwp/api/Windows.Devices.Enumeration.DeviceInformation">DeviceInformation</a></para>
    </param>
    <param name="callback">
      <para>The <see cref="IMFCameraOcclusionStateReportCallback" /> implemented by the client to receive camera occlusion state change notifications.</para>
    </param>
    <param name="occlusionStateMonitor">
      <para>An output parameter that receives the <see cref="IMFCameraOcclusionStateMonitor" />.</para>
    </param>
    <returns>
      <para>Returns an HRESULT value, including but not limited to the following values:</para>
      <para>| Error code | Description |
|------------|-------------|
| S_OK    | Succeeded |
| E_INVALIDARG    | One or more parameters is nullptr |</para>
    </returns>
  </member>
  <member name="Windows.MFCreateContentDecryptorContext">
    <summary>
      <para>Creates an <see cref="IMFContentDecryptorContext" /> interface for the specified media protection system.</para>
    </summary>
    <param name="guidMediaProtectionSystemId">
      <para>The identifier of the media protection system for which you want to create an <see cref="IMFContentDecryptorContext" /> interface.</para>
    </param>
    <param name="pD3DManager">
      <para>Pointer to the <see cref="IMFDXGIDeviceManager" /> interface that you want to use for sharing the Direct3D 11 device.</para>
    </param>
    <param name="pContentProtectionDevice">
      <para>The <see cref="IMFContentProtectionDevice" /> interface for the specified media protection system.</para>
    </param>
    <param name="ppContentDecryptorContext">
      <para>Pointer to the created <see cref="IMFContentDecryptorContext" /> interface.</para>
    </param>
    <seealso cref="IMFContentDecryptorContext" />
    <seealso cref="IMFContentProtectionDevice" />
    <seealso cref="IMFDXGIDeviceManager" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateContentProtectionDevice">
    <summary>
      <para>Creates an <see cref="IMFContentProtectionDevice" /> interface for the specified media protection system.</para>
    </summary>
    <param name="ProtectionSystemId">
      <para>The identifier of the media protection system for which you want to create the <see cref="IMFContentProtectionDevice" /> interface.</para>
    </param>
    <param name="ContentProtectionDevice">
      <para>Pointer to the created <see cref="IMFContentProtectionDevice" /> interface.</para>
    </param>
    <seealso cref="IMFContentProtectionDevice" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateCredentialCache">
    <summary>
      <para>Creates a credential cache object. An application can use this object to implement a custom credential manager.</para>
    </summary>
    <param name="ppCache">
      <para>Receives a pointer to the <see cref="IMFNetCredentialCache" /> interface of the new credential cache object. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IMFNetCredentialCache" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateDeviceSource">
    <summary>
      <para>Creates a media source for a hardware capture device.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of an attribute store, which is used to select the device. See Remarks.</para>
    </param>
    <param name="ppSource">
      <para>Receives a pointer to the media source's <see cref="IMFMediaSource" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>Important</b>  When the capture device is no longer needed, you must shut down the device by calling <see cref="Shutdown" /> on the <see cref="IMFMediaSource" /> object you obtained by calling <b>MFCreateDeviceSource</b>. Failure to call <b>Shutdown</b> can result in memory links because the system may keep a reference to <b>IMFMediaSource</b> resources until <b>Shutdown</b> is called.</para>
      <para>The <i>pAttributes</i> parameter specifies an attribute store. To create the attribute store, call the <see cref="MFCreateAttributes" /> function.  You must set the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE</a> attribute, which specifies the type of device (audio or video).</para>
      <para>For audio capture devices, optionally set one of the following attributes:</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-endpoint-id">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID</a>
          </description>
          <description>
            <para>Specifies the audio endpoint ID of the audio capture device.</para>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-role">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE</a>
          </description>
          <description>
            <para>Specifies the device role. If this attribute is set, the function uses the default audio capture device for that device role.</para>
            <para>Do not combine this attribute with the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-endpoint-id">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID</a> attribute.</para>
          </description>
        </item>
      </list>
      <para>If neither attribute is specified, the function selects the default audio capture device for the <b>eCommunications</b> role.</para>
      <para>For video capture devices, you must set the following attribute:</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-symbolic-link">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK</a>
          </description>
          <description>
            <para>Specifies the symbolic link to the device.</para>
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/audio-video-capture-in-media-foundation">Audio/Video Capture in Media Foundation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/capture-device-attributes">Capture Device Attributes</seealso>
    <seealso cref="MFCreateDeviceSourceActivate" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateDeviceSourceActivate">
    <summary>
      <para>Creates an activation object that represents a hardware capture device.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of an attribute store, which is used to select the device. See Remarks.</para>
    </param>
    <param name="ppActivate">
      <para>Receives a pointer to the <see cref="IMFActivate" /> interface. The caller must release the interface.</para>
    </param>
    <remarks>
      <para>This function creates an activation object that can be used to create a media source for a hardware device. To create the media source itself, call <see cref="IMFActivate.ActivateObject" />.</para>
      <para>The <i>pAttributes</i> parameter specifies an attribute store. To create the attribute store, call the <see cref="MFCreateAttributes" /> function.  You must set the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE</a> attribute, which specifies the type of device (audio or video).</para>
      <para>For audio capture devices, optionally set one of the following attributes:</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-endpoint-id">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID</a>
          </description>
          <description>
            <para>Specifies the audio endpoint ID of the audio capture device.</para>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-role">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE</a>
          </description>
          <description>
            <para>Specifies the device role. If this attribute is set, the function uses the default audio capture device for that device role.</para>
            <para>Do not combine this attribute with the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-endpoint-id">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID</a> attribute.</para>
          </description>
        </item>
      </list>
      <para>If neither attribute is specified, the function selects the default audio capture device for the <b>eCommunications</b> role.</para>
      <para>For video capture devices, you must set the following attribute:</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-symbolic-link">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK</a>
          </description>
          <description>
            <para>Specifies the symbolic link to the device.</para>
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/activation-objects">Activation Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/audio-video-capture-in-media-foundation">Audio/Video Capture in Media Foundation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/capture-device-attributes">Capture Device Attributes</seealso>
    <seealso cref="MFCreateDeviceSource" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateFMPEG4MediaSink">
    <summary>
      <para>Creates a media sink for authoring fragmented MP4 files.</para>
    </summary>
    <param name="pIByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream.  The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking.</para>
    </param>
    <param name="pVideoMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of a video media type. This type specifies the format of the video stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pAudioMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of an audio media type. This type specifies the format of the audio stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pVideoMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="ppIMediaSink">
      <para>Receives a pointer to the MP4 media sink's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMediaSession">
    <summary>
      <para>Creates the <a href="https://docs.microsoft.com//windows/desktop/medfound/media-session">Media Session</a> in the application's process.</para>
    </summary>
    <param name="pConfiguration">
      <para>Pointer to the <see cref="IMFAttributes" /> interface. This parameter can be <b>NULL</b>. See Remarks.</para>
    </param>
    <param name="ppMediaSession">
      <para>Receives a pointer to the Media Session's <see cref="IMFMediaSession" /> interface. The caller must release the interface. Before releasing the last reference to the <b>IMFMediaSession</b> pointer, the application must call the <see cref="IMFMediaSession.Shutdown" /> method.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If your application does not play protected content, you can use this function to create the Media Session in the application's process. To use the Media Session for protected content, you must call <see cref="MFCreatePMPMediaSession" />.</para>
      <para>You can use the <i>pConfiguration</i> parameter to specify any of the following attributes:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-global-time-attribute">MF_SESSION_GLOBAL_TIME</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-quality-manager-attribute">MF_SESSION_QUALITY_MANAGER</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-topoloader-attribute">MF_SESSION_TOPOLOADER</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-low-latency">MF_LOW_LATENCY</a>
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/about-the-media-session">About the Media Session</seealso>
    <seealso cref="MFCreatePMPMediaSession" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-session">Media Session</seealso>
  </member>
  <member name="Windows.MFCreateMediaTypeFromProperties">
    <summary>
      <para>Create an <see cref="IMFMediaType" /> from properties.</para>
    </summary>
    <param name="punkStream">
      <para>A pointer to properties.</para>
    </param>
    <param name="ppMediaType">
      <para>Receives a pointer to the <see cref="IMFMediaType" />. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMFByteStreamOnStream">
    <summary>
      <para>Creates a Microsoft Media Foundation byte stream that wraps an <b>IStream</b> pointer.</para>
    </summary>
    <param name="pStream">
      <para>A pointer to the <b>IStream</b> interface.</para>
    </param>
    <param name="ppByteStream">
      <para>Receives a pointer to the <see cref="IMFByteStream" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value.</para>
    </returns>
    <remarks>
      <para>This function enables applications to pass an <b>IStream</b> object to a Media Foundation API that takes an <see cref="IMFByteStream" /> pointer.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMFByteStreamOnStreamEx">
    <summary>
      <para>Creates a Microsoft Media Foundation byte stream that wraps an <a href="https://docs.microsoft.com//previous-versions/hh438400(v=vs.85)">IRandomAccessStream</a> object.</para>
    </summary>
    <param name="punkStream">
      <para>A pointer to the <a href="https://docs.microsoft.com//previous-versions/hh438400(v=vs.85)">IRandomAccessStream</a> interface.</para>
    </param>
    <param name="ppByteStream">
      <para>Receives a pointer to the <see cref="IMFByteStream" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMP3MediaSink">
    <summary>
      <para>Creates the MP3 media sink.</para>
    </summary>
    <param name="pTargetByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream.  The media sink writes the MP3 file to this byte stream. The byte stream must be writable.</para>
    </param>
    <param name="ppMediaSink">
      <para>Receives a pointer to the <see cref="IMFMediaSink" /> interface of the MP3 media sink.. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The MP3  media sink takes compressed MP3
audio samples as input, and writes an MP3 file with ID3 headers as output. The MP3 media sink does not perform MP3 audio encoding.</para>
      <h4>Examples</h4>
      <code>HRESULT CreateMP3Sink(PCWSTR pszOutputFile, IMFMediaSink **ppSink)
{
    *ppSink = NULL;

    IMFByteStream* pStream = NULL;

    // Create a byte stream for the output file.
    HRESULT hr =  MFCreateFile(
        MF_ACCESSMODE_WRITE,
        MF_OPENMODE_DELETE_IF_EXIST,
        MF_FILEFLAGS_NONE,
        pszOutputFile,
        &amp;amp;amp;amp;amp;amp;pStream
        );

    // Create the MP3 media sink.
    if (SUCCEEDED(hr))
    {
        hr =  MFCreateMP3MediaSink(pStream, ppSink);
    }

    SafeRelease(&amp;amp;amp;amp;amp;amp;pStream);
    return hr;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMPEG4MediaSink">
    <summary>
      <para>Creates a media sink for authoring MP4 files.</para>
    </summary>
    <param name="pIByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream.  The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking.</para>
    </param>
    <param name="pVideoMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of a video media type. This type specifies the format of the video stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pAudioMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of an audio media type. This type specifies the format of the audio stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pVideoMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="ppIMediaSink">
      <para>Receives a pointer to the MP4 media sink's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The MP4 media sink supports a maximum of one video stream and one audio stream. The initial stream formats are given in the <i>pVideoMediaType</i> and <i>pAudioMediaType</i> parameters. To create an MP4 file with one stream, set the other stream type to <b>NULL</b>. For example, to create an audio-only file, set <i>pVideoMediaType</i> to <b>NULL</b>.</para>
      <para>The number of streams is fixed when you create the media sink. The sink does not support the <see cref="IMFMediaSink.AddStreamSink" /> method.</para>
      <para>To author 3GP files, use the <see cref="MFCreate3GPMediaSink" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/mpeg-4-file-sink">MPEG-4 File Sink</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMuxSink">
    <summary>
      <para>Creates a generic media sink that wraps a multiplexer Microsoft Media Foundation transform (MFT).</para>
    </summary>
    <param name="guidOutputSubType">
      <para>The subtype GUID of the output type for the MFT.</para>
    </param>
    <param name="pOutputAttributes">
      <para>A list of format attributes for the MFT output type. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="pOutputByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The output from the MFT is written to this byte stream. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="ppMuxSink">
      <para>Receives a pointer to the <see cref="IMFMediaSink" /> interface of the media sink. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function attempts to find a multiplexer MFT that supports an output type with the following definition:</para>
      <list type="bullet">
        <item>
          <description>Major type: <b>MFMediaType_Stream</b></description>
        </item>
        <item>
          <description>Subtype: <i>guidOutputSubType</i></description>
        </item>
        <item>
          <description>Additional format attributes (optional)</description>
        </item>
      </list>
      <para>To provide a list of additional format attributes:</para>
      <list type="number">
        <item>
          <description>Call <see cref="MFCreateAttributes" /> to get an <see cref="IMFAttributes" /> pointer.</description>
        </item>
        <item>
          <description>Use the <see cref="IMFAttributes" /> interface to set the attributes. (See <a href="https://docs.microsoft.com//windows/desktop/medfound/media-type-attributes">Media Type Attributes</a>.)</description>
        </item>
        <item>
          <description>Pass the <see cref="IMFAttributes" /> pointer in the <i>pOutputAttributes</i> parameter.</description>
        </item>
      </list>
      <para>The multiplexer MFT must be registered in the <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY_MULTIPLEXER</a>  category.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateNetSchemePlugin">
    <summary>
      <para>Creates the scheme handler for the network source.</para>
    </summary>
    <param name="riid">
      <para>Interface identifier (IID) of the interface to retrieve.</para>
    </param>
    <param name="ppvHandler">
      <para>Receives a pointer to the requested interface. The caller must release the interface. The scheme handler exposes the <see cref="IMFSchemeHandler" /> interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreatePMPMediaSession">
    <summary>
      <para>Creates an instance of the <a href="https://docs.microsoft.com//windows/desktop/medfound/media-session">Media Session</a> inside a Protected Media Path (PMP) process.</para>
    </summary>
    <param name="dwCreationFlags">
      <para>A member of the <see cref="MFPMPSESSION_CREATION_FLAGS" /> enumeration that specifies how to create the session object.</para>
    </param>
    <param name="pConfiguration">
      <para>A pointer to the <see cref="IMFAttributes" /> interface. This parameter can be <b>NULL</b>. See Remarks.</para>
    </param>
    <param name="ppMediaSession">
      <para>Receives a pointer to the PMP Media Session's <see cref="IMFMediaSession" /> interface. The caller must release the interface. Before releasing the last reference to the <b>IMFMediaSession</b> pointer, the application must call the <see cref="IMFMediaSession.Shutdown" /> method.</para>
    </param>
    <param name="ppEnablerActivate">
      <para>Receives a pointer to the <see cref="IMFActivate" /> interface or the value <b>NULL</b>. If non-<b>NULL</b>, the caller must release the interface. See Remarks.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>You can use the <i>pConfiguration</i> parameter to set any of the following attributes:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-content-protection-manager-attribute">MF_SESSION_CONTENT_PROTECTION_MANAGER</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-global-time-attribute">MF_SESSION_GLOBAL_TIME</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-quality-manager-attribute">MF_SESSION_QUALITY_MANAGER</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-remote-source-mode-attribute">MF_SESSION_REMOTE_SOURCE_MODE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-server-context-attribute">MF_SESSION_SERVER_CONTEXT</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-session-topoloader-attribute">MF_SESSION_TOPOLOADER</a>
          </description>
        </item>
      </list>
      <para>If this function cannot create the PMP Media Session because a trusted binary was revoked, the <i>ppEnablerActivate</i> parameter receives an <see cref="IMFActivate" /> interface pointer. The application can use this pointer to create a content enabler object, which can then be used to download an updated binary:</para>
      <list type="number">
        <item>
          <description>Call <see cref="IMFActivate.ActivateObject" /> with the interface identifier IID_IMFContentEnabler to get an <see cref="IMFContentEnabler" /> interface pointer.
</description>
        </item>
        <item>
          <description>Use that interface to download the updated binary.
</description>
        </item>
        <item>
          <description>Call <b>MFCreatePMPMediaSession</b> again.
</description>
        </item>
      </list>
      <para>If the function successfully creates the PMP Media Session, the <i>ppEnablerActivate</i> parameter receives the value <b>NULL</b>.</para>
      <para>Do not make calls to the PMP Media Session from a thread that is processing a window message sent from another thread. To test whether the current thread falls into this category, call <see cref="InSendMessage" />.</para>
    </remarks>
    <seealso cref="MFCreateMediaSession" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/pmp-media-session">PMP Media Session</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/protected-media-path">Protected Media Path</seealso>
  </member>
  <member name="Windows.MFCreatePMPServer">
    <summary>
      <para>Creates the protected media path (PMP) server object.</para>
    </summary>
    <param name="dwCreationFlags">
      <para>A member of the <see cref="MFPMPSESSION_CREATION_FLAGS" /> enumeration that specifies how to create the PMP session.</para>
    </param>
    <param name="ppPMPServer">
      <para>Receives a pointer to the <see cref="IMFPMPServer" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreatePresentationClock">
    <summary>
      <para>Creates the presentation clock. The presentation clock is used to schedule the time at which samples are rendered and to synchronize multiple streams.</para>
    </summary>
    <param name="ppPresentationClock">
      <para>Receives a pointer to the clock's <see cref="IMFPresentationClock" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The caller must shut down the presentation clock by calling <see cref="IMFShutdown.Shutdown" /> on the clock.</para>
      <para>Typically applications do not create the presentation clock. The Media Session automatically creates the presentation clock. To get a pointer to the presentation clock from the Media Session, call <see cref="IMFMediaSession.GetClock" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/about-the-media-session">About the Media Session</seealso>
    <seealso cref="IMFPresentationClock" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreatePresentationDescriptor">
    <summary>
      <para>Creates a presentation descriptor.</para>
    </summary>
    <param name="cStreamDescriptors">
      <para>Number of elements in the <i>apStreamDescriptors</i> array.</para>
    </param>
    <param name="apStreamDescriptors">
      <para>Array of <see cref="IMFStreamDescriptor" /> interface pointers. Each pointer represents a stream descriptor for one stream in the presentation.</para>
    </param>
    <param name="ppPresentationDescriptor">
      <para>Receives a pointer to an <see cref="IMFPresentationDescriptor" /> interface of the presentation descriptor. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If you are writing a custom media source, you can use this function to create the source presentation descriptor. The presentation descriptor is created with no streams selected. Generally, a media source should select at least one stream by default. To select a stream, call <see cref="IMFPresentationDescriptor.SelectStream" />.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-descriptors">Presentation Descriptors</seealso>
  </member>
  <member name="Windows.MFCreatePropertiesFromMediaType">
    <summary>
      <para>Creates properties from a <see cref="IMFMediaType" />.</para>
    </summary>
    <param name="pMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface.</para>
    </param>
    <param name="riid">
      <para>The interface identifier (IID) of the interface being requested.</para>
    </param>
    <param name="ppv">
      <para>Receives a pointer to the requested interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateProtectedEnvironmentAccess">
    <summary>
      <para>Creates an <see cref="IMFProtectedEnvironmentAccess" /> object that allows content protection systems to perform a handshake with the protected environment.</para>
    </summary>
    <param name="ppAccess">
      <para>Receives a pointer to the <see cref="IMFProtectedEnvironmentAccess" /> interface.</para>
    </param>
    <seealso cref="Call" />
    <seealso cref="IMFProtectedEnvironmentAccess" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateProxyLocator">
    <summary>
      <para>Creates a default proxy locator.</para>
    </summary>
    <param name="pszProtocol">
      <para>The name of the protocol.</para>
      <para>
        <b>Note</b>  In this release of Media Foundation, the default proxy locator does not support RTSP.</para>
    </param>
    <param name="pProxyConfig">
      <para>Pointer to the <b>IPropertyStore</b> interface of a property store that contains the proxy configuration in the <a href="https://docs.microsoft.com//windows/desktop/medfound/mfnetsource-proxysettings-property">MFNETSOURCE_PROXYSETTINGS</a> property.</para>
    </param>
    <param name="ppProxyLocator">
      <para>Receives a pointer to the <see cref="IMFNetProxyLocator" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/proxy-support-for-network-sources">Proxy Support for Network Sources</seealso>
  </member>
  <member name="Windows.MFCreateRelativePanelWatcher">
    <summary>
      <para>Creates a new instance of the <b>IMFRelativePanelWatcher</b> interface, which monitors the panel associated with the provided display monitor, so that the app receives notifications when the relative location of the panel changes.</para>
    </summary>
    <param name="videoDeviceId">
      <para>A string containing the symbolic link name of the video capture device.</para>
    </param>
    <param name="displayMonitorDeviceId">
      <para>A string containing the symbolic link name of the display monitor device.</para>
    </param>
    <param name="ppRelativePanelWatcher">
      <para>A pointer to an <b>IMFRelativePanelWatcher</b> interface representing the watcher.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <para>| Return code | Description |
|--------------|------------------------|
|S_OK | The function succeeded.|</para>
    </returns>
  </member>
  <member name="Windows.MFCreateRemoteDesktopPlugin">
    <summary>
      <para>Creates the remote desktop plug-in object. Use this object if the application is running in a Terminal Services client session.</para>
    </summary>
    <param name="ppPlugin">
      <para>Receives a pointer to the <see cref="IMFRemoteDesktopPlugin" /> interface of the plug-in object. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_ACCESSDENIED</b>
            </para>
          </description>
          <description>
            <para>Remote desktop connections are not allowed by the current session policy.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateSampleCopierMFT">
    <summary>
      <para>Creates an instance of the sample copier transform.</para>
    </summary>
    <param name="ppCopierMFT">
      <para>Receives a pointer to the <see cref="IMFTransform" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The sample copier is a Media Foundation transform (MFT) that copies data from input samples to output samples without modifying the data. The following data is copied from the sample:</para>
      <list type="bullet">
        <item>
          <description>All <a href="https://docs.microsoft.com//windows/desktop/medfound/sample-attributes">Sample Attributes</a>.</description>
        </item>
        <item>
          <description>The time stamp and duration.</description>
        </item>
        <item>
          <description>Sample flags (see <see cref="IMFSample.SetSampleFlags" />).</description>
        </item>
        <item>
          <description>The data in the media buffers. If the input sample contains multiple buffers, the data is copied into a single buffer on the output sample.</description>
        </item>
      </list>
      <para>This MFT is useful in the following situation:</para>
      <list type="bullet">
        <item>
          <description>One pipeline object, such as a media source, allocates media samples for output.</description>
        </item>
        <item>
          <description>Another pipeline object, such as a media sink, allocates its own media samples for input. For example, the object might require buffers allocated from a special memory pool, such as video memory.</description>
        </item>
      </list>
      <para>The following diagram shows this situation with a media source and a media sink.</para>
      <para>
        <img alt="Diagram: Media Source points to a Sample; Media Sink points to a second Sample; Sample Copier points to an arrow from the first sample to the second" src="https://docs.microsoft.com/windows/win32/api/mfidl/images/SampleCopierMFT.gif" />
      </para>
      <para>In order for the media sink to receive data from the media source, the data must be copied into the media samples owned by the media sink. The sample copier can be used for this purpose.</para>
      <para>A specific example of such a media sink is the  <a href="https://docs.microsoft.com//windows/desktop/medfound/enhanced-video-renderer">Enhanced Video Renderer</a> (EVR). The EVR allocates samples that contain Direct3D surface buffers, so it cannot receive video samples directly from a media source. Starting in Windows 7, the topology loader automatically handles this case by inserting the sample copier between the media source and the EVR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateSampleGrabberSinkActivate">
    <summary>
      <para>Creates an activation object for the sample grabber media sink.</para>
    </summary>
    <param name="pIMFMediaType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface, defining the media type for the sample grabber's input stream.</para>
    </param>
    <param name="pIMFSampleGrabberSinkCallback">
      <para>Pointer to the <see cref="IMFSampleGrabberSinkCallback" /> interface of a callback object. The caller must implement this interface.</para>
    </param>
    <param name="ppIActivate">
      <para>Receives a pointer to the <see cref="IMFActivate" /> interface. Use this interface to complete the creation of the sample grabber. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>To create the sample grabber sink, call <see cref="IMFActivate.ActivateObject" /> on the pointer received in the <i>ppIActivate</i> parameter.</para>
      <para>Before calling <see cref="ActivateObject" />, you can configure the sample grabber by setting any of the following attributes on the <i>ppIActivate</i> pointer:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-samplegrabbersink-ignore-clock">MF_SAMPLEGRABBERSINK_IGNORE_CLOCK</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-samplegrabbersink-sample-time-offset-attribute">MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET</a>
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateSensorActivityMonitor">
    <summary>
      <para>Initializes a new instance of the <see cref="IMFSensorActivityMonitor" /> interface.</para>
    </summary>
    <param name="pCallback">
      <para>An implementation of the <see cref="IMFSensorActivitiesReportCallback" /> interface through which the system delivers <see cref="IMFSensorActivitiesReport" /> objects.</para>
    </param>
    <param name="ppActivityMonitor">
      <para>A pointer to the new <see cref="IMFSensorActivityMonitor" />.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The <i>ppActivityMonitor</i> parameter is null.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSensorGroup">
    <summary>
      <para>Creates an instance of the <see cref="IMFSensorGroup" /> interface based on the provided symbolic link name.</para>
    </summary>
    <param name="SensorGroupSymbolicLink">
      <para>The symbolic link for the new <see cref="IMFSensorGroup" />. This name can be obtained through device enumeration APIs such as <see cref="SetupDiGetClassDevs" /> or <see cref="MFEnumDeviceSources" /> or by getting the  <a href="https://docs.microsoft.com//uwp/api/Windows.Devices.Enumeration.DeviceInformation">Id</a> property of the <a href="https://docs.microsoft.com//uwp/api/Windows.Devices.Enumeration.DeviceInformation">DeviceInformation</a> class.</para>
    </param>
    <param name="ppSensorGroup">
      <para>The symbolic link for the new <see cref="IMFSensorGroup" />.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The supplied <see cref="IMFSensorGroup" /> is null.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The supplied <b>LPCWSTR</b> is null.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the function succeeds, <i>ppSensorGroup</i> will point to a valid <see cref="IMFSensorGroup" /> object.  The caller must release this interface.</para>
      <para>
        <b>Note</b>  When this API is used with a <a href="https://docs.microsoft.com//previous-versions/ff548567(v=vs.85)">KSCATEGORY_SENSOR_CAMERA</a> or <a href="https://docs.microsoft.com//previous-versions/ff548567(v=vs.85)">KSCATEGORY_VIDEO_CAMERA</a> symbolic name, the resulting <see cref="IMFSensorGroup" /> object will only contain one sensor device but behaves as a virtualized sensor group.  The caller  may use the resulting object in the same manner as a sensor group obtained from a <a href="https://docs.microsoft.com//previous-versions/ff548567(v=vs.85)">KSCATEGORY_SENSOR_GROUP</a>.</para>
    </remarks>
  </member>
  <member name="Windows.MFCreateSensorProfile">
    <summary>
      <para>Creates a sensor profile, based on the specified type, index, and optional constraints.</para>
    </summary>
    <param name="ProfileType">
      <para>The profile type to create.</para>
    </param>
    <param name="ProfileIndex">
      <para>The profile index.</para>
    </param>
    <param name="Constraints">
      <para>Any optional constraints to be put on the profile.</para>
    </param>
    <param name="ppProfile">
      <para>On success, returns a double pointer to the <see cref="IMFSensorProfile" /> containing the sensor profile.</para>
    </param>
    <returns>
      <para>This function does not return a value.</para>
    </returns>
  </member>
  <member name="Windows.MFCreateSensorProfileCollection">
    <summary>
      <para>Creates a sensor profile collection.</para>
    </summary>
    <param name="ppSensorProfile">
      <para>On success, points to an <see cref="IMFSensorProfileCollection" /> containing the sensor profile collection.</para>
    </param>
    <returns>
      <para>This function does not return a value.</para>
    </returns>
  </member>
  <member name="Windows.MFCreateSensorStream">
    <summary>
      <para>Creates an instance of the <see cref="IMFSensorStream" /> interface.</para>
    </summary>
    <param name="StreamId">
      <para>The identifier for the created stream. This is the same as setting the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devicestream-stream-id">MF_DEVICESTREAM_STREAM_ID</a> attribute. This value is used if <i>pAttributes</i> is null.</para>
    </param>
    <param name="pAttributes">
      <para>The attribute store for the created stream.</para>
    </param>
    <param name="pMediaTypeCollection">
      <para>The collection of <see cref="IMFMediaType" /> objects specifying the media types supported by the stream.</para>
    </param>
    <param name="ppStream">
      <para>The created stream interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The supplied <see cref="IMFSensorGroup" /> is null.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The supplied <b>LPCWSTR</b> is null.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSequencerSegmentOffset">
    <summary>
      <para>Creates a <b>PROPVARIANT</b> that can be used to seek within a sequencer source presentation.</para>
    </summary>
    <param name="dwId">
      <para>Sequencer element identifier. This value specifies the segment in which to begin playback. The element identifier is returned in the <see cref="IMFSequencerSource.AppendTopology" /> method.</para>
    </param>
    <param name="hnsOffset">
      <para>Starting position within the segment, in 100-nanosecond units.</para>
    </param>
    <param name="pvarSegmentOffset">
      <para>Pointer to a <b>PROPVARIANT</b>. The method fills in the <b>PROPVARIANT</b> with the information needed for performing a seek operation. The caller must free the <b>PROPVARIANT</b> by calling <b>PropVariantClear</b>.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The <b>PROPVARIANT</b> returned in <i>pvarSegmentOffset</i> can be used for the <i>pvarStartPosition</i> parameter in the <see cref="IMFMediaSession.Start" /> method. Use the time format <b>GUID MF_TIME_FORMAT_SEGMENT_OFFSET</b>.</para>
      <h4>Examples</h4>
      <code>// Skips to the specified segment in the sequencer source

HRESULT CPlaylist.SkipTo(DWORD index)
{
    if (index &gt;= m_count)
    {
        return E_INVALIDARG;
    }

    MFSequencerElementId ID = m_segments[index].SegmentID;

    PROPVARIANT var;

    HRESULT hr = MFCreateSequencerSegmentOffset(ID, NULL, &amp;amp;amp;amp;amp;amp;var);

    if (SUCCEEDED(hr))
    {
        hr = m_pSession-&gt;Start(&amp;amp;amp;amp;amp;amp;MF_TIME_FORMAT_SEGMENT_OFFSET, &amp;amp;amp;amp;amp;amp;var);
        PropVariantClear(&amp;amp;amp;amp;amp;amp;var);
    }
    return hr;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/mftime">MFTIME</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/sequencer-source">Sequencer Source</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/using-the-sequencer-source">Using the Sequencer Source</seealso>
  </member>
  <member name="Windows.MFCreateSequencerSource">
    <summary>
      <para>Creates the sequencer source.</para>
    </summary>
    <param name="pReserved">
      <para>Reserved. Must be <b>NULL</b>.</para>
    </param>
    <param name="ppSequencerSource">
      <para>Receives a pointer to the <see cref="IMFSequencerSource" /> interface of the sequencer source. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/sequencer-source">Sequencer Source</seealso>
  </member>
  <member name="Windows.MFCreateSimpleTypeHandler">
    <summary>
      <para>Creates a media-type handler that supports a single media type at a time.</para>
    </summary>
    <param name="ppHandler">
      <para>Receives a pointer to the <see cref="IMFMediaTypeHandler" /> interface of the media-type handler. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The media-type handler created by this function supports one media type at a time. Set the media type by calling <see cref="IMFMediaTypeHandler.SetCurrentMediaType" />. After the type is set, <see cref="IMFMediaTypeHandler.IsMediaTypeSupported" /> always checks against that type.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateSourceResolver">
    <summary>
      <para>Creates the source resolver, which is used to create a media source from a URL or byte stream.</para>
    </summary>
    <param name="ppISourceResolver">
      <para>Receives a pointer to the source resolver's <see cref="IMFSourceResolver" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from mf.dll. Starting in Windows 7, this function is exported from mfplat.dll, and mf.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/source-resolver">Source Resolver</seealso>
  </member>
  <member name="Windows.MFCreateStandardQualityManager">
    <summary>
      <para>Creates the default implementation of the quality manager.</para>
    </summary>
    <param name="ppQualityManager">
      <para>Receives a pointer to the quality manager's <see cref="IMFQualityManager" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateStreamDescriptor">
    <summary>
      <para>Creates a stream descriptor.</para>
    </summary>
    <param name="dwStreamIdentifier">
      <para>Stream identifier.</para>
    </param>
    <param name="cMediaTypes">
      <para>Number of elements in the <i>apMediaTypes</i> array.</para>
    </param>
    <param name="apMediaTypes">
      <para>Pointer to an array of <see cref="IMFMediaType" /> interface pointers. These pointers are used to initialize the media type handler for the stream descriptor.</para>
    </param>
    <param name="ppDescriptor">
      <para>Receives a pointer to the <see cref="IMFStreamDescriptor" /> interface of the new stream descriptor. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If you are writing a custom media source, you can use this function to create stream descriptors for the source. This function automatically creates the stream descriptor media type handler and initializes it with the list of types given in <i>apMediaTypes</i>. The function does not set the current media type on the handler, however. To set the type, call <see cref="IMFMediaTypeHandler.SetCurrentMediaType" />.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-descriptors">Presentation Descriptors</seealso>
  </member>
  <member name="Windows.MFCreateStreamOnMFByteStream">
    <summary>
      <para>Returns an <see cref="IStream" /> pointer that wraps a Microsoft Media Foundation byte stream.</para>
    </summary>
    <param name="pByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of the Media Foundation byte stream.</para>
    </param>
    <param name="ppStream">
      <para>Receives a pointer to the <see cref="IStream" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function enables an application to pass a Media Foundation byte stream to an API that takes an <see cref="IStream" /> pointer.</para>
    </remarks>
    <seealso cref="MFCreateMFByteStreamOnStream" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateStreamOnMFByteStreamEx">
    <summary>
      <para>Creates an <a href="https://docs.microsoft.com//previous-versions/hh438400(v=vs.85)">IRandomAccessStream</a> object that wraps a Microsoft Media Foundation byte stream.</para>
    </summary>
    <param name="pByteStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of the Media Foundation byte stream.</para>
    </param>
    <param name="riid">
      <para>The interface identifier (IID) of the interface being requested.</para>
    </param>
    <param name="ppv">
      <para>Receives a pointer to the requested interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The returned byte stream object exposes the <see cref="IMFGetService" /> interface. To get the original <see cref="IMFByteStream" /> pointer, call <see cref="IMFGetService.GetService" /> using the service identifier <b>MF_WRAPPED_OBJECT</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateSystemTimeSource">
    <summary>
      <para>Creates a presentation time source that is based on the system time.</para>
    </summary>
    <param name="ppSystemTimeSource">
      <para>Receives a pointer to the object's <see cref="IMFPresentationTimeSource" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateTopoLoader">
    <summary>
      <para>Creates a new instance of the topology loader.</para>
    </summary>
    <param name="ppObj">
      <para>Receives a pointer to the <see cref="IMFTopoLoader" /> interface of the topology loader. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateTopology">
    <summary>
      <para>Creates a topology object.</para>
    </summary>
    <param name="ppTopo">
      <para>Receives a pointer to the <see cref="IMFTopology" /> interface of the topology object. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/topologies">Topologies</seealso>
  </member>
  <member name="Windows.MFCreateTopologyNode">
    <summary>
      <para>Creates a topology node.</para>
    </summary>
    <param name="NodeType">
      <para>The type of node to create, specified as a member of the <see cref="MF_TOPOLOGY_TYPE" /> enumeration.</para>
    </param>
    <param name="ppNode">
      <para>Receives a pointer to the node's <see cref="IMFTopologyNode" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/creating-output-nodes">Creating Output Nodes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/creating-source-nodes">Creating Source Nodes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/creating-transform-nodes">Creating Transform Nodes</seealso>
    <seealso cref="IMFTopologyNode" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/topologies">Topologies</seealso>
  </member>
  <member name="Windows.MFCreateTrackedSample">
    <summary>
      <para>Creates an <see cref="IMFTrackedSample" /> object that tracks the reference counts on a video media sample.</para>
    </summary>
    <param name="ppMFSample">
      <para>Receives a pointer to the <see cref="IMFTrackedSample" /> interface.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateTranscodeProfile">
    <summary>
      <para>Creates an empty transcode profile object.</para>
      <para>The transcode profile stores configuration settings for the output file. These configuration settings are specified by the caller, and include audio and video stream properties, encoder settings, and  container settings. To set these properties, the caller must call the appropriate <see cref="IMFTranscodeProfile" /> methods.</para>
      <para>The configured transcode profile is passed to the <see cref="MFCreateTranscodeTopology" /> function.  The underlying topology builder uses these settings to build the transcode topology.</para>
    </summary>
    <param name="ppTranscodeProfile">
      <para>Receives a pointer to the <see cref="IMFTranscodeProfile" /> interface of the transcode profile object. Caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The <b>MFCreateTranscodeProfile</b> function creates an empty transcode profile. You must configure the transcode profile setting attributes that define the media types and the container properties. Use the following methods to configure the profile:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="IMFTranscodeProfile.SetAudioAttributes" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IMFTranscodeProfile.SetVideoAttributes" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IMFTranscodeProfile.SetContainerAttributes" />
          </description>
        </item>
      </list>
      <para>For example code that uses this function, see the following topics:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/tutorial--encoding-an-mp4-file-">Tutorial: Encoding an MP4 File</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/tutorial--converting-an-mp3-file-to-a-wma-file">Tutorial: Encoding a WMA File</a>
          </description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>The following example creates a transcode profile for Windows Media Audio (WMA).</para>
      <code>template &lt;class Q&gt;
HRESULT GetCollectionObject(IMFCollection *pCollection, DWORD index, Q **ppObj)
{
    IUnknown *pUnk;
    HRESULT hr = pCollection-&gt;GetElement(index, &amp;amp;amp;amp;amp;amp;pUnk);
    if (SUCCEEDED(hr))
    {
        hr = pUnk-&gt;QueryInterface(IID_PPV_ARGS(ppObj));
        pUnk-&gt;Release();
    }
    return hr;
}

HRESULT CreateTranscodeProfile(IMFTranscodeProfile **ppProfile)
{
    IMFTranscodeProfile *pProfile = NULL;     // Transcode profile.
    IMFCollection   *pAvailableTypes = NULL;  // List of audio media types.
    IMFMediaType    *pAudioType = NULL;       // Audio media type.
    IMFAttributes   *pAudioAttrs = NULL;      // Copy of the audio media type.
    IMFAttributes   *pContainer = NULL;       // Container attributes.

    DWORD dwMTCount = 0;

    // Create an empty transcode profile.
    HRESULT hr = MFCreateTranscodeProfile(&amp;amp;amp;amp;amp;amp;pProfile);
    if (FAILED(hr))
    {
        goto done;
    }

    // Get output media types for the Windows Media audio encoder.

    // Enumerate all codecs except for codecs with field-of-use restrictions.
    // Sort the results.

    DWORD dwFlags =
        (MFT_ENUM_FLAG_ALL &amp;amp;amp;amp;amp;amp; (~MFT_ENUM_FLAG_FIELDOFUSE)) |
        MFT_ENUM_FLAG_SORTANDFILTER;

    hr = MFTranscodeGetAudioOutputAvailableTypes(MFAudioFormat_WMAudioV9,
        dwFlags, NULL, &amp;amp;amp;amp;amp;amp;pAvailableTypes);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pAvailableTypes-&gt;GetElementCount(&amp;amp;amp;amp;amp;amp;dwMTCount);
    if (FAILED(hr))
    {
        goto done;
    }
    if (dwMTCount == 0)
    {
        hr = E_FAIL;
        goto done;
    }

    // Get the first audio type in the collection and make a copy.
    hr = GetCollectionObject(pAvailableTypes, 0, &amp;amp;amp;amp;amp;amp;pAudioType);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;pAudioAttrs, 0);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pAudioType-&gt;CopyAllItems(pAudioAttrs);
    if (FAILED(hr))
    {
        goto done;
    }

    // Set the audio attributes on the profile.
    hr = pProfile-&gt;SetAudioAttributes(pAudioAttrs);
    if (FAILED(hr))
    {
        goto done;
    }

    // Set the container attributes.
    hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;pContainer, 1);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pContainer-&gt;SetGUID(MF_TRANSCODE_CONTAINERTYPE, MFTranscodeContainerType_ASF);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pProfile-&gt;SetContainerAttributes(pContainer);
    if (FAILED(hr))
    {
        goto done;
    }

    *ppProfile = pProfile;
    (*ppProfile)-&gt;AddRef();

done:
    SafeRelease(&amp;amp;amp;amp;amp;amp;pProfile);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pAvailableTypes);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pAudioType);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pAudioAttrs);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pContainer);
    return hr;
}

</code>
    </remarks>
    <seealso cref="IMFTranscodeProfile" />
    <seealso cref="MFTranscodeGetAudioOutputAvailableTypes" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/transcode-api">Transcode API</seealso>
  </member>
  <member name="Windows.MFCreateTranscodeSinkActivate">
    <summary>
      <para>Creates the transcode sink activation object.</para>
      <para>The transcode sink activation object can be used to create any of the following file sinks:</para>
      <list type="bullet">
        <item>
          <description>3GP file sink</description>
        </item>
        <item>
          <description>MP3 file sink</description>
        </item>
        <item>
          <description>MP4 file sink</description>
        </item>
      </list>The transcode sink activation object exposes the <see cref="IMFTranscodeSinkInfoProvider" /> interface.
</summary>
    <param name="ppActivate">
      <para>Receives a pointer to the <see cref="IMFActivate" /> interface. This interface is used to create the file sink instance from the activation object. Before doing so, query the returned pointer for the <see cref="IMFTranscodeSinkInfoProvider" /> interface and use that interface to initialize the object.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IMFTranscodeSinkInfoProvider" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateTranscodeTopology">
    <summary>
      <para>Creates a partial transcode topology.</para>
      <para>The underlying topology builder creates a partial topology by connecting the required pipeline objects:
source, encoder, and sink. The encoder and the sink are configured according to the settings specified by the caller in the transcode profile.</para>
      <para>To create the transcode profile object, call the <see cref="MFCreateTranscodeProfile" /> function and set the required attributes by calling the appropriate the <see cref="IMFTranscodeProfile" /> methods.</para>
      <para>The configured transcode profile is passed to the <b>MFCreateTranscodeTopology</b> function, which creates the transcode topology with the appropriate settings. The caller can then set this topology on the Media Session and start the session to begin the encoding process. When the Media Session ends, the transcoded file is generated.</para>
    </summary>
    <param name="pSrc">
      <para>A pointer to a media source that encapsulates the source file to be transcoded. The media source object exposes the <see cref="IMFMediaSource" /> interface and can be created by using the source resolver. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/using-the-source-resolver">Using the Source Resolver</a>.</para>
    </param>
    <param name="pwszOutputFilePath">
      <para>A pointer to a null-terminated string that contains the name and path of the output file to be generated.</para>
    </param>
    <param name="pProfile">
      <para>A pointer to the transcode profile that contains the configuration settings for the audio stream, the video stream, and the container to which the file is written. The transcode profile object exposes the <see cref="IMFTranscodeProfile" /> interface and must be created by calling the <see cref="MFCreateTranscodeProfile" /> function. After the object has been created the caller must provide the configuration settings by calling appropriate the <b>IMFTranscodeProfile</b> methods.</para>
    </param>
    <param name="ppTranscodeTopo">
      <para>Receives a pointer to the <see cref="IMFTopology" /> interface of the transcode topology object. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function call succeeded, and <i>ppTranscodeTopo</i> receives a pointer to the transcode topology.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pwszOutputFilePath</i> contains invalid characters.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED</b>
            </para>
          </description>
          <description>
            <para>No streams are selected in the media source.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_TRANSCODE_NO_CONTAINERTYPE</b>
            </para>
          </description>
          <description>
            <para>The profile does not contain the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-transcode-containertype">MF_TRANSCODE_CONTAINERTYPE</a> attribute.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_TRANSCODE_NO_MATCHING_ENCODER</b>
            </para>
          </description>
          <description>
            <para>For one or more streams, cannot find an encoder that accepts the media type given in the profile.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS</b>
            </para>
          </description>
          <description>
            <para>The profile does not specify a media type for any of the selected streams on the media source.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>For example code that uses this function, see the following topics:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/tutorial--encoding-an-mp4-file-">Tutorial: Encoding an MP4 File</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/tutorial--converting-an-mp3-file-to-a-wma-file">Tutorial: Encoding a WMA File</a>
          </description>
        </item>
      </list>
    </remarks>
    <seealso cref="IMFTopology" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/topologies">Topologies</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/transcode-api">Transcode API</seealso>
  </member>
  <member name="Windows.MFCreateTranscodeTopologyFromByteStream">
    <summary>
      <para>Creates a topology for transcoding to a byte stream.</para>
    </summary>
    <param name="pSrc">
      <para>A pointer to the <see cref="IMFMediaSource" /> interface of a media source. The media source provides that source content for transcoding.</para>
    </param>
    <param name="pOutputStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The transcoded output will be written to this byte stream.</para>
    </param>
    <param name="pProfile">
      <para>A pointer to the <see cref="IMFTranscodeProfile" /> interface of a transcoding profile.</para>
    </param>
    <param name="ppTranscodeTopo">
      <para>Receives a pointer to the <see cref="IMFTopology" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function creates a partial topology that contains the media source, the encoder, and the media sink.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-session">Media Session</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/topologies">Topologies</seealso>
  </member>
  <member name="Windows.MFCreateVideoRendererActivate">
    <summary>
      <para>Creates an activation object for the enhanced video renderer (EVR) media sink.</para>
    </summary>
    <param name="hwndVideo">
      <para>Handle to the window where the video will be displayed.</para>
    </param>
    <param name="ppActivate">
      <para>Receives a pointer to the <see cref="IMFActivate" /> interface. Use this interface to create the EVR. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To create the EVR, call <see cref="IMFActivate.ActivateObject" /> on the retrieved <see cref="IMFActivate" /> pointer. (If you are using the Media Session, the Media Session automatically calls <b>ActivateObject</b> when you queue the topology.)</para>
      <para>To configure the EVR, set any of the following attributes on the <see cref="IMFActivate" /> object before calling <see cref="ActivateObject" />.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-activate-custom-video-mixer-activate-attribute">MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE</a>
          </description>
          <description>Activation object for a custom mixer.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-activate-custom-video-mixer-clsid-attribute">MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID</a>
          </description>
          <description>CLSID for a custom mixer.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-activate-custom-video-mixer-flags-attribute">MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS</a>
          </description>
          <description>Flags for creating a custom mixer.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-activate-custom-video-presenter-activate-attribute">MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE</a>
          </description>
          <description>Activation object for a custom presenter.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-activate-custom-video-presenter-clsid-attribute">MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID</a>
          </description>
          <description>CLSID for a custom presenter.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-activate-custom-video-presenter-flags-attribute">MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS</a>
          </description>
          <description>Flags for creating a custom presenter.</description>
        </item>
      </list>
      <para>When <see cref="IMFActivate.ActivateObject" /> is called, the activation objects sets the video window on the EVR by calling <see cref="IMFVideoDisplayControl.SetVideoPosition" />. Passing <b>NULL</b> for the <i>hwndVideo</i> parameter is not an error, but no video will render unless the EVR has a valid video window.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/activation-objects">Activation Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/enhanced-video-renderer">Enhanced Video Renderer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateWAVEMediaSink">
    <summary>
      <para>Creates a WAVE archive sink.  The WAVE archive sink takes
audio and writes it to an .wav file.</para>
    </summary>
    <param name="pTargetByteStream">
      <para>Pointer to the byte stream that will be used to write the .wav file.</para>
    </param>
    <param name="pAudioMediaType">
      <para>Pointer to the audio media type.</para>
    </param>
    <param name="ppMediaSink">
      <para>Receives a pointer to the <see cref="IMFMediaSink" /> interface.  The caller must release this interface.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFDeserializePresentationDescriptor">
    <summary>
      <para>Deserializes a presentation descriptor from a byte array.</para>
    </summary>
    <param name="cbData">
      <para>Size of the <i>pbData</i> array, in bytes.</para>
    </param>
    <param name="pbData">
      <para>Pointer to an array of bytes that contains the serialized presentation descriptor.</para>
    </param>
    <param name="ppPD">
      <para>Receives a pointer to the <see cref="IMFPresentationDescriptor" /> interface of the presentation descriptor. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="MFSerializePresentationDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFEnumDeviceSources">
    <summary>
      <para>Enumerates a list of audio or video capture devices.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to an attribute store that contains search criteria. To create the attribute store, call <see cref="MFCreateAttributes" />. Set one or more of the following attributes on the attribute store:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE</a>
            </b>
          </description>
          <description>
            <para>Specifies whether to enumerate audio or video devices. (Required.)</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-role">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE</a>
            </b>
          </description>
          <description>
            <para>For audio capture devices, specifies the device role. (Optional.)</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-category">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY</a>
            </b>
          </description>
          <description>
            <para>For video capture devices, specifies the device category. (Optional.)</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pppSourceActivate">
      <para>Receives an array of <see cref="IMFActivate" /> interface pointers. Each pointer represents an activation object for a media source. The function allocates the memory for the array. The caller must release the pointers in the array and call <see cref="CoTaskMemFree" /> to free the memory for the array.</para>
    </param>
    <param name="pcSourceActivate">
      <para>Receives the number of elements in the <i>pppSourceActivate</i> array. If no capture devices match the search criteria, this parameter receives the value 0.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Each returned <see cref="IMFActivate" /> pointer represents a capture device, and can be used to create a media source for that device. You can also use the <b>IMFActivate</b> pointer to query for attributes that describe the device. The following attributes might be set:</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-friendly-name">MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME</a>
          </description>
          <description>The display name of the device.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-media-type">MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE</a>
          </description>
          <description>The major type and subtype GUIDs that describe the device's output format.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE</a>
          </description>
          <description>The type of capture device (audio or video).</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-endpoint-id">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID</a>
          </description>
          <description>The audio endpoint ID string. (Audio devices only.)</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-category">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY</a>
          </description>
          <description>The device category. (Video devices only.)</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-hw-source">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE</a>
          </description>
          <description> Whether a device is a hardware or software device. (Video devices only.)</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-symbolic-link">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK</a>
          </description>
          <description>The symbolic link for the device driver. (Video devices only.)</description>
        </item>
      </list>
      <para>To create a media source from an <see cref="IMFActivate" /> pointer, call the <see cref="IMFActivate.ActivateObject" /> method.</para>
      <h4>Examples</h4>
      <para>The following example enumerates the video capture devices on the system and creates a media source for the first device on the list.</para>
      <code>HRESULT CreateVideoDeviceSource(IMFMediaSource **ppSource)
{
    *ppSource = NULL;

    IMFMediaSource *pSource = NULL;
    IMFAttributes *pAttributes = NULL;
    IMFActivate **ppDevices = NULL;

    // Create an attribute store to specify the enumeration parameters.
    HRESULT hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;pAttributes, 1);
    if (FAILED(hr))
    {
        goto done;
    }

    // Source type: video capture devices
    hr = pAttributes-&gt;SetGUID(
        MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE,
        MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID
        );
    if (FAILED(hr))
    {
        goto done;
    }

    // Enumerate devices.
    UINT32 count;
    hr = MFEnumDeviceSources(pAttributes, &amp;amp;amp;amp;amp;amp;ppDevices, &amp;amp;amp;amp;amp;amp;count);
    if (FAILED(hr))
    {
        goto done;
    }

    if (count == 0)
    {
        hr = E_FAIL;
        goto done;
    }

    // Create the media source object.
    hr = ppDevices[0]-&gt;ActivateObject(IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;pSource));
    if (FAILED(hr))
    {
        goto done;
    }

    *ppSource = pSource;
    (*ppSource)-&gt;AddRef();

done:
    SafeRelease(&amp;amp;amp;amp;amp;amp;pAttributes);

    for (DWORD i = 0; i &lt; count; i++)
    {
        SafeRelease(&amp;amp;amp;amp;amp;amp;ppDevices[i]);
    }
    CoTaskMemFree(ppDevices);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pSource);
    return hr;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/audio-video-capture-in-media-foundation">Audio/Video Capture in Media Foundation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetLocalId">
    <summary>
      <para>Gets the local system ID.</para>
    </summary>
    <param name="verifier">
      <para>Application-specific verifier value.</para>
    </param>
    <param name="size">
      <para>Length in bytes of verifier.</para>
    </param>
    <param name="id">
      <para>Returned ID string.  This value must be freed by the caller by calling <see cref="CoTaskMemFree" />.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetService">
    <summary>
      <para>Queries an object for a specified service interface.</para>
      <para>This function is a helper function that wraps the <see cref="IMFGetService.GetService" /> method. The function queries the object for the <see cref="IMFGetService" /> interface and, if successful, calls <b>GetService</b> on the object.</para>
    </summary>
    <param name="punkObject">
      <para>A pointer to the <b>IUnknown</b> interface of the object to query.</para>
    </param>
    <param name="guidService">
      <para>The service identifier (SID) of the service. For a list of service identifiers, see <a href="https://docs.microsoft.com//windows/desktop/medfound/service-interfaces">Service Interfaces</a>.</para>
    </param>
    <param name="riid">
      <para>The interface identifier (IID) of the interface being requested.</para>
    </param>
    <param name="ppvObject">
      <para>Receives the interface pointer. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_UNSUPPORTED_SERVICE</b>
            </para>
          </description>
          <description>
            <para>The service requested cannot be found in the object represented by <i>punkObject</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IMFGetService" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/service-interfaces">Service Interfaces</seealso>
  </member>
  <member name="Windows.MFGetSupportedMimeTypes">
    <summary>
      <para>Retrieves the MIME types that are registered for the source resolver.</para>
    </summary>
    <param name="pPropVarMimeTypeArray">
      <para>Pointer to a <b>PROPVARIANT</b> that receives the MIME types. Before calling this method, call <b>PropVariantInit</b> to initialize the <b>PROPVARIANT</b>. If the method succeeds, the <b>PROPVARIANT</b> contains an array of wide-character strings. The <b>PROPVARIANT</b> data type is VT_VECTOR | VT_LPWSTR. The caller must release the <b>PROPVARIANT</b> by calling <b>PropVariantClear</b>.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetSupportedSchemes">
    <summary>
      <para>Retrieves the URL schemes that are registered for the source resolver.</para>
    </summary>
    <param name="pPropVarSchemeArray">
      <para>Pointer to a <b>PROPVARIANT</b> that receives the URL schemes. Before calling this method, call <b>PropVariantInit</b> to initialize the <b>PROPVARIANT</b>. If the method succeeds, the <b>PROPVARIANT</b> contains an array of wide-character strings. The <b>PROPVARIANT</b> data type is VT_VECTOR | VT_LPWSTR. The caller must release the <b>PROPVARIANT</b> by calling <b>PropVariantClear</b>.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetSystemId">
    <summary>
      <para>Returns an <see cref="IMFSystemId" /> object for retrieving system id data.</para>
    </summary>
    <param name="ppId">
      <para>Receives a pointer to the <see cref="IMFSystemId" /> interface.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetSystemTime">
    <summary>
      <para>Returns the system time.</para>
    </summary>
    <returns>
      <para>Returns the system time, in 100-nanosecond units.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/mftime">MFTIME</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetTopoNodeCurrentType">
    <summary>
      <para>Gets the media type for a stream associated with a topology node.</para>
    </summary>
    <param name="pNode">
      <para>A pointer to the <see cref="IMFTopologyNode" /> interface.</para>
    </param>
    <param name="dwStreamIndex">
      <para>The identifier of the stream to query. This parameter is interpreted as follows:</para>
      <list type="bullet">
        <item>
          <description>Transform nodes: The value is the zero-based index of the input or output stream.</description>
        </item>
        <item>
          <description>All other node types: The value must be zero.</description>
        </item>
      </list>
    </param>
    <param name="fOutput">
      <para>
        <b>If TRUE</b>, the function gets an output type<b>. If FALSE</b>, the function gets an input type. This parameter is interpreted as follows:</para>
      <list type="bullet">
        <item>
          <description>Output nodes: The value must be <b>TRUE</b>.</description>
        </item>
        <item>
          <description>Source nodes: The value must be <b>FALSE</b>.</description>
        </item>
        <item>
          <description>Tee nodes: The value is ignored.</description>
        </item>
        <item>
          <description>Transform nodes: If the value is <b>TRUE</b>, the <i>dwStreamIndex</i> parameter is the index for an output stream. Otherwise, <i>dwStreamIndex</i> is the index for an input stream.</description>
        </item>
      </list>
    </param>
    <param name="ppType">
      <para>Receives a pointer to the <see cref="IMFMediaType" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_INVALIDSTREAMNUMBER</b>
            </para>
          </description>
          <description>
            <para>The stream index is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function gets the actual media type from the object that is associated with the topology node. The <i>pNode</i> parameter should specify a node that belongs to a fully resolved topology.  If the node belongs to a partial topology, the function will probably fail.</para>
      <para>Tee nodes do not have an associated object to query. For tee nodes, the function gets the node's input type, if available. Otherwise, if no input type is available, the function gets the media type of the node's primary output stream. The primary output stream is identified by the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-toponode-primaryoutput-attribute">MF_TOPONODE_PRIMARYOUTPUT</a>  attribute.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFIsContentProtectionDeviceSupported">
    <summary>
      <para>Checks whether a hardware security processor is supported for the specified media protection system.</para>
    </summary>
    <param name="ProtectionSystemId">
      <para>The identifier of the protection system that you want to check.</para>
    </param>
    <param name="isSupported">
      <para>
        <b>TRUE</b> if the hardware security processor is supported for the specified protection system; otherwise <b>FALSE</b>.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFLoadSignedLibrary">
    <summary>
      <para>Loads a dynamic link library that is signed for the protected environment.</para>
    </summary>
    <param name="pszName">
      <para>The name of the dynamic link library to load.  This dynamic link library must be signed for the protected environment.</para>
    </param>
    <param name="ppLib">
      <para>Receives a pointer to the <see cref="IMFSignedLibrary" /> interface for the library.</para>
    </param>
    <remarks>
      <para>A singlemodule load count is maintained on the dynamic link library (as it is with <see cref="LoadLibrary" />).  This load count  is freed when the final release is called on the <see cref="IMFSignedLibrary" /> object.</para>
      <h4>Examples</h4>
      <para>The following example demonstrates how to load a signed library and retrieve the address of a function in that library.</para>
      <code>IMFSignedLibrary *pLib;
hr = MFLoadSignedLibrary(TEST_PELOAD_FILE, &amp;amp;amp;amp;amp;amp;pLib);
if (SUCCEEDED(hr))
{
    PVOID functionAddress;
    hr = pLib-&gt;GetProcedureAddress("myFunctionName", &amp;amp;amp;amp;amp;amp;functionAddress);
}
//  Unload the library
pLib-&gt;Release();

</code>
    </remarks>
    <seealso cref="GetProcedureAddress" />
    <seealso cref="IMFSignedLibrary" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFRequireProtectedEnvironment">
    <summary>
      <para>Queries whether a media presentation requires the Protected Media Path (PMP).</para>
    </summary>
    <param name="pPresentationDescriptor">
      <para>Pointer to the <see cref="IMFPresentationDescriptor" /> interface of a presentation descriptor. The presentation descriptor is created by the media source, and describes the presentation.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>This presentation requires a protected environment.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <b>S_FALSE</b>
              </b>
            </para>
          </description>
          <description>
            <para>This presentation does not require a protected environment.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this function returns <b>S_OK</b>, it means the PMP is required for this presentation. Call <see cref="MFCreatePMPMediaSession" /> to create the PMP session object.</para>
      <para>If the function returns <b>S_FALSE</b>, you can use the unprotected pipeline. Call <see cref="MFCreateMediaSession" /> to create the regular Media Session object.</para>
      <para>Internally, this function checks whether any of the stream descriptors in the presentation have the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-sd-protected-attribute">MF_SD_PROTECTED</a> attribute with the value <b>TRUE</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFSerializePresentationDescriptor">
    <summary>
      <para>Serializes a presentation descriptor to a byte array.</para>
    </summary>
    <param name="pPD">
      <para>Pointer to the <see cref="IMFPresentationDescriptor" /> interface of the presentation descriptor to serialize.</para>
    </param>
    <param name="pcbData">
      <para>Receives the size of the <i>ppbData</i> array, in bytes.</para>
    </param>
    <param name="ppbData">
      <para>Receives a pointer to an array of bytes containing the serialized presentation descriptor. The caller must free the memory for the array by calling <see cref="CoTaskMemFree" />.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To deserialize the presentation descriptor, pass the byte array to the <see cref="MFDeserializePresentationDescriptor" /> function.</para>
    </remarks>
    <seealso cref="IMFPresentationDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFShutdownObject">
    <summary>
      <para>Shuts down a Media Foundation object and releases all resources associated with the object.</para>
      <para>This function is a helper function that wraps the <see cref="IMFShutdown.Shutdown" /> method. The function queries the object for the <see cref="IMFShutdown" /> interface and, if successful, calls <b>Shutdown</b> on the object.</para>
    </summary>
    <param name="pUnk">
      <para>Pointer to the <b>IUnknown</b> interface of the object.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is not related to the <see cref="MFShutdown" /> function, which shuts down the Media Foundation platform, as described in <a href="https://docs.microsoft.com//windows/desktop/medfound/initializing-media-foundation">Initializing Media Foundation</a>.</para>
    </remarks>
    <seealso cref="IMFShutdown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFTranscodeGetAudioOutputAvailableTypes">
    <summary>
      <para>Gets a list of output formats from an audio encoder.</para>
    </summary>
    <param name="guidSubType">
      <para>Specifies the subtype of the output media. The encoder uses this value as a filter when it is enumerating the available output types. For information about the audio subtypes, see  <a href="https://docs.microsoft.com//windows/desktop/medfound/audio-subtype-guids">Audio Subtype GUIDs</a>.</para>
    </param>
    <param name="dwMFTFlags">
      <para>Bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</para>
    </param>
    <param name="pCodecConfig">
      <para>A pointer to the <see cref="IMFAttributes" /> interface of an attribute store. The attribute store specifies the encoder configuration settings. This parameter can be <b>NULL</b>. The attribute store can hold any of the following attributes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-fieldofuse-unlock-attribute">MFT_FIELDOFUSE_UNLOCK_Attribute</a>
            </b>
          </description>
          <description>
            <para>Set this attribute to unlock an encoder that has field-of-use descriptions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-transcode-encodingprofile">MF_TRANSCODE_ENCODINGPROFILE</a>
            </b>
          </description>
          <description>
            <para>Specifies a device conformance profile for a Windows Media encoder.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-transcode-qualityvsspeed">MF_TRANSCODE_QUALITYVSSPEED</a>
            </b>
          </description>
          <description>
            <para>Sets the tradeoff between encoding quality and encoding speed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppAvailableTypes">
      <para>Receives a pointer to the <see cref="IMFCollection" /> interface of a collection object that contains a list of preferred audio media types. The collection contains <see cref="IMFMediaType" /> pointers. The caller must release the interface pointer.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function call succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_TRANSCODE_NO_MATCHING_ENCODER</b>
            </para>
          </description>
          <description>
            <para>Failed to find an encoder that matches the specified configuration settings.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function assumes the encoder will be used in its default encoding mode, which is typically constant bit-rate (CBR) encoding. Therefore, the types returned by the function might not work with other modes, such as variable bit-rate (VBR) encoding.</para>
      <para>Internally, this function works by calling <see cref="MFTEnumEx" /> to find a matching encoder, and then calling <see cref="IMFTransform.GetOutputAvailableType" /> to get the encoder's output types.</para>
      <h4>Examples</h4>
      <para>The following example creates a transcode profile for Windows Media Audio (WMA).</para>
      <code>template &lt;class Q&gt;
HRESULT GetCollectionObject(IMFCollection *pCollection, DWORD index, Q **ppObj)
{
    IUnknown *pUnk;
    HRESULT hr = pCollection-&gt;GetElement(index, &amp;amp;amp;amp;amp;amp;pUnk);
    if (SUCCEEDED(hr))
    {
        hr = pUnk-&gt;QueryInterface(IID_PPV_ARGS(ppObj));
        pUnk-&gt;Release();
    }
    return hr;
}

HRESULT CreateTranscodeProfile(IMFTranscodeProfile **ppProfile)
{
    IMFTranscodeProfile *pProfile = NULL;     // Transcode profile.
    IMFCollection   *pAvailableTypes = NULL;  // List of audio media types.
    IMFMediaType    *pAudioType = NULL;       // Audio media type.
    IMFAttributes   *pAudioAttrs = NULL;      // Copy of the audio media type.
    IMFAttributes   *pContainer = NULL;       // Container attributes.

    DWORD dwMTCount = 0;

    // Create an empty transcode profile.
    HRESULT hr = MFCreateTranscodeProfile(&amp;amp;amp;amp;amp;amp;pProfile);
    if (FAILED(hr))
    {
        goto done;
    }

    // Get output media types for the Windows Media audio encoder.

    // Enumerate all codecs except for codecs with field-of-use restrictions.
    // Sort the results.

    DWORD dwFlags =
        (MFT_ENUM_FLAG_ALL &amp;amp;amp;amp;amp;amp; (~MFT_ENUM_FLAG_FIELDOFUSE)) |
        MFT_ENUM_FLAG_SORTANDFILTER;

    hr = MFTranscodeGetAudioOutputAvailableTypes(MFAudioFormat_WMAudioV9,
        dwFlags, NULL, &amp;amp;amp;amp;amp;amp;pAvailableTypes);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pAvailableTypes-&gt;GetElementCount(&amp;amp;amp;amp;amp;amp;dwMTCount);
    if (FAILED(hr))
    {
        goto done;
    }
    if (dwMTCount == 0)
    {
        hr = E_FAIL;
        goto done;
    }

    // Get the first audio type in the collection and make a copy.
    hr = GetCollectionObject(pAvailableTypes, 0, &amp;amp;amp;amp;amp;amp;pAudioType);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;pAudioAttrs, 0);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pAudioType-&gt;CopyAllItems(pAudioAttrs);
    if (FAILED(hr))
    {
        goto done;
    }

    // Set the audio attributes on the profile.
    hr = pProfile-&gt;SetAudioAttributes(pAudioAttrs);
    if (FAILED(hr))
    {
        goto done;
    }

    // Set the container attributes.
    hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;pContainer, 1);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pContainer-&gt;SetGUID(MF_TRANSCODE_CONTAINERTYPE, MFTranscodeContainerType_ASF);
    if (FAILED(hr))
    {
        goto done;
    }

    hr = pProfile-&gt;SetContainerAttributes(pContainer);
    if (FAILED(hr))
    {
        goto done;
    }

    *ppProfile = pProfile;
    (*ppProfile)-&gt;AddRef();

done:
    SafeRelease(&amp;amp;amp;amp;amp;amp;pProfile);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pAvailableTypes);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pAudioType);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pAudioAttrs);
    SafeRelease(&amp;amp;amp;amp;amp;amp;pContainer);
    return hr;
}

</code>
    </remarks>
    <seealso cref="IMFCollection.GetElement" />
    <seealso cref="MFCreateTranscodeProfile" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/tutorial--converting-an-mp3-file-to-a-wma-file">Tutorial: Encoding a WMA File</seealso>
  </member>
</doc>