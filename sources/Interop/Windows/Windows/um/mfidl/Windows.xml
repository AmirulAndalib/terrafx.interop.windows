<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.MFCreate3GPMediaSink">
    <summary>Creates a media sink for authoring 3GP files.</summary>
    <param name="pIByteStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the 3GP file to this byte stream. The byte stream must be writable and support seeking.</param>
    <param name="pVideoMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of a video media type. This type specifies the format of the video stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pAudioMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of an audio media type. This type specifies the format of the audio stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pVideoMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="ppIMediaSink">Receives a pointer to the 3GP media sink's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateAC3MediaSink">
    <summary>Creates an instance of the AC-3 media sink.</summary>
    <param name="pTargetByteStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the AC-3 file to this byte stream. The byte stream must be writable.</param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface. This parameter specifies the media type for the AC-3 audio stream. The media type must contain the following attributes.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-major-type-attribute">MF_MT_MAJOR_TYPE</a>
          </description>
          <description>
            <b>MFMediaType_Audio</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-subtype-attribute">MF_MT_SUBTYPE</a>
          </description>
          <description>
            <b>MFAudioFormat_Dolby_AC3</b> or <b>MFAudioFormat_Dolby_DDPlus</b></description>
        </listheader>
      </list>
    </param>
    <param name="ppMediaSink">Receives a pointer to the <see cref="IMFMediaSink" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateADTSMediaSink">
    <summary>Creates an instance of the audio data transport stream (ADTS) media sink.</summary>
    <param name="pTargetByteStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the ADTS stream to this byte stream. The byte stream must be writable.</param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface. This parameter specifies the media type for the ADTS stream. The media type must contain the following attributes.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-major-type-attribute">MF_MT_MAJOR_TYPE</a>
          </description>
          <description>
            <b>MFMediaType_Audio</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-subtype-attribute">MF_MT_SUBTYPE</a>
          </description>
          <description>
            <b>MFAudioFormat_AAC</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-aac-payload-type">MF_MT_AAC_PAYLOAD_TYPE</a>
          </description>
          <description>0 (raw AAC) or 1 (ADTS)</description>
        </listheader>
      </list>
    </param>
    <param name="ppMediaSink">Receives a pointer to the <see cref="IMFMediaSink" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateAggregateSource">
    <summary>Creates a media source that aggregates a collection of media sources.</summary>
    <param name="pSourceCollection">A pointer to the <see cref="IMFCollection" /> interface of the collection object that contains a list of media sources.</param>
    <param name="ppAggSource">Receives a pointer to the <see cref="IMFMediaSource" /> interface of the aggregated media source. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pSourceCollection</i> collection does not contain any elements.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateAudioRenderer">
    <summary>Creates the <a href="https://docs.microsoft.com//windows/desktop/medfound/streaming-audio-renderer">Streaming Audio Renderer</a>.</summary>
    <param name="pAudioAttributes">A pointer to the <see cref="IMFAttributes" /> interface, which is used to configure the audio renderer. This parameter can be <b>NULL</b>. See Remarks.</param>
    <param name="ppSink">Receives a pointer to the audio renderer's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateAudioRendererActivate">
    <summary>Creates an activation object for the <a href="https://docs.microsoft.com//windows/desktop/medfound/streaming-audio-renderer">Streaming Audio Renderer</a>.</summary>
    <param name="ppActivate">Receives a pointer to the <see cref="IMFActivate" /> interface. Use this interface to create the audio renderer. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateAVIMediaSink">
    <summary>Creates an Audio-Video Interleaved (AVI) Sink.</summary>
    <param name="pIByteStream">Pointer to the byte stream that will be used to write the AVI file.</param>
    <param name="pVideoMediaType">Pointer to the media type of the video input stream</param>
    <param name="pAudioMediaType">Pointer to the media type of the audio input stream</param>
    <param name="ppIMediaSink">Receives a pointer to the <see cref="IMFMediaSink" /> Interface. The caller must release this interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateCameraControlMonitor">
    <summary>Creates an instance of <see cref="IMFCameraControlMonitor" /></summary>
    <param name="symbolicLink">String symbolic link name of the video capture device that is active.</param>
    <param name="callback">Pointer to an object that implements the <see cref="IMFCameraControlNotify" /> callback interface.</param>
    <param name="ppCameraControlMonitor">Receives a pointer to the created <b>IMFCameraControlMonitor</b> object.</param>
    <returns>
      <para>An HRESULT including the following:</para>
      <para>| Value | Description | |-------|-------------| | S_OK | Success. | | E_INVALIDARG | The symbolic link specified in <i>symbolicLink</i> doesn't match a known camera device. |</para>
    </returns>
  </member>
  <member name="Windows.MFCreateCameraOcclusionStateMonitor">
    <summary>Creates a new instance of <see cref="IMFCameraOcclusionStateMonitor" /> which allows an application to receive notifications when the camera occlusion state changes.</summary>
    <param name="symbolicLink">The symbolic link name of the video device for which occlusion state will be monitored. This value is enumerated through the standard Windows enumeration APIs such as <see cref="MFEnumDeviceSources" /> and <a href="https://docs.microsoft.com//uwp/api/Windows.Devices.Enumeration.DeviceInformation">DeviceInformation</a></param>
    <param name="callback">The <see cref="IMFCameraOcclusionStateReportCallback" /> implemented by the client to receive camera occlusion state change notifications.</param>
    <param name="occlusionStateMonitor">An output parameter that receives the <see cref="IMFCameraOcclusionStateMonitor" />.</param>
    <returns>
      <para>Returns an HRESULT value, including but not limited to the following values:</para>
      <para>| Error code | Description | |------------|-------------| | S_OK | Succeeded | | E_INVALIDARG | One or more parameters is nullptr |</para>
    </returns>
  </member>
  <member name="Windows.MFCreateContentDecryptorContext">
    <summary>Creates an <see cref="IMFContentDecryptorContext" /> interface for the specified media protection system.</summary>
    <param name="guidMediaProtectionSystemId">The identifier of the media protection system for which you want to create an <see cref="IMFContentDecryptorContext" /> interface.</param>
    <param name="pD3DManager">Pointer to the <see cref="IMFDXGIDeviceManager" /> interface that you want to use for sharing the Direct3D 11 device.</param>
    <param name="pContentProtectionDevice">The <see cref="IMFContentProtectionDevice" /> interface for the specified media protection system.</param>
    <param name="ppContentDecryptorContext">Pointer to the created <see cref="IMFContentDecryptorContext" /> interface.</param>
  </member>
  <member name="Windows.MFCreateContentProtectionDevice">
    <summary>Creates an <see cref="IMFContentProtectionDevice" /> interface for the specified media protection system.</summary>
    <param name="ProtectionSystemId">The identifier of the media protection system for which you want to create the <see cref="IMFContentProtectionDevice" /> interface.</param>
    <param name="ContentProtectionDevice">Pointer to the created <see cref="IMFContentProtectionDevice" /> interface.</param>
  </member>
  <member name="Windows.MFCreateCredentialCache">
    <summary>Creates a credential cache object. An application can use this object to implement a custom credential manager.</summary>
    <param name="ppCache">Receives a pointer to the <see cref="IMFNetCredentialCache" /> interface of the new credential cache object. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateDeviceSource">
    <summary>Creates a media source for a hardware capture device.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of an attribute store, which is used to select the device. See Remarks.</param>
    <param name="ppSource">Receives a pointer to the media source's <see cref="IMFMediaSource" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateDeviceSourceActivate">
    <summary>Creates an activation object that represents a hardware capture device.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of an attribute store, which is used to select the device. See Remarks.</param>
    <param name="ppActivate">Receives a pointer to the <see cref="IMFActivate" /> interface. The caller must release the interface.</param>
  </member>
  <member name="Windows.MFCreateFMPEG4MediaSink">
    <summary>Creates a media sink for authoring fragmented MP4 files.</summary>
    <param name="pIByteStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking.</param>
    <param name="pVideoMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of a video media type. This type specifies the format of the video stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pAudioMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of an audio media type. This type specifies the format of the audio stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pVideoMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="ppIMediaSink">Receives a pointer to the MP4 media sink's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMediaSession">
    <summary>Creates the <a href="https://docs.microsoft.com//windows/desktop/medfound/media-session">Media Session</a> in the application's process.</summary>
    <param name="pConfiguration">Pointer to the <see cref="IMFAttributes" /> interface. This parameter can be <b>NULL</b>. See Remarks.</param>
    <param name="ppMediaSession">Receives a pointer to the Media Session's <see cref="IMFMediaSession" /> interface. The caller must release the interface. Before releasing the last reference to the <b>IMFMediaSession</b> pointer, the application must call the <see cref="IMFMediaSession.Shutdown" /> method.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMediaTypeFromProperties">
    <summary>Create an <see cref="IMFMediaType" /> from properties.</summary>
    <param name="punkStream">A pointer to properties.</param>
    <param name="ppMediaType">Receives a pointer to the <see cref="IMFMediaType" />. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMFByteStreamOnStream">
    <summary>Creates a Microsoft Media Foundation byte stream that wraps an <b>IStream</b> pointer.</summary>
    <param name="pStream">A pointer to the <b>IStream</b> interface.</param>
    <param name="ppByteStream">Receives a pointer to the <see cref="IMFByteStream" /> interface. The caller must release the interface.</param>
    <returns>Returns an <b>HRESULT</b> value.</returns>
  </member>
  <member name="Windows.MFCreateMFByteStreamOnStreamEx">
    <summary>Creates a Microsoft Media Foundation byte stream that wraps an <a href="https://docs.microsoft.com//previous-versions/hh438400(v=vs.85)">IRandomAccessStream</a> object.</summary>
    <param name="punkStream">A pointer to the <a href="https://docs.microsoft.com//previous-versions/hh438400(v=vs.85)">IRandomAccessStream</a> interface.</param>
    <param name="ppByteStream">Receives a pointer to the <see cref="IMFByteStream" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMP3MediaSink">
    <summary>Creates the MP3 media sink.</summary>
    <param name="pTargetByteStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the MP3 file to this byte stream. The byte stream must be writable.</param>
    <param name="ppMediaSink">Receives a pointer to the <see cref="IMFMediaSink" /> interface of the MP3 media sink.. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMPEG4MediaSink">
    <summary>Creates a media sink for authoring MP4 files.</summary>
    <param name="pIByteStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking.</param>
    <param name="pVideoMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of a video media type. This type specifies the format of the video stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pAudioMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="pAudioMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of an audio media type. This type specifies the format of the audio stream.</para>
      <para>This parameter can be <b>NULL</b>, but not if <i>pVideoMediaType</i> is <b>NULL</b>.</para>
    </param>
    <param name="ppIMediaSink">Receives a pointer to the MP4 media sink's <see cref="IMFMediaSink" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMuxSink">
    <summary>Creates a generic media sink that wraps a multiplexer Microsoft Media Foundation transform (MFT).</summary>
    <param name="guidOutputSubType">The subtype GUID of the output type for the MFT.</param>
    <param name="pOutputAttributes">A list of format attributes for the MFT output type. This parameter is optional and can be <b>NULL</b>.</param>
    <param name="pOutputByteStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The output from the MFT is written to this byte stream. This parameter can be <b>NULL</b>.</param>
    <param name="ppMuxSink">Receives a pointer to the <see cref="IMFMediaSink" /> interface of the media sink. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateNetSchemePlugin">
    <summary>Creates the scheme handler for the network source.</summary>
    <param name="riid">Interface identifier (IID) of the interface to retrieve.</param>
    <param name="ppvHandler">Receives a pointer to the requested interface. The caller must release the interface. The scheme handler exposes the <see cref="IMFSchemeHandler" /> interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreatePMPMediaSession">
    <summary>Creates an instance of the <a href="https://docs.microsoft.com//windows/desktop/medfound/media-session">Media Session</a> inside a Protected Media Path (PMP) process.</summary>
    <param name="dwCreationFlags">A member of the <see cref="MFPMPSESSION_CREATION_FLAGS" /> enumeration that specifies how to create the session object.</param>
    <param name="pConfiguration">A pointer to the <see cref="IMFAttributes" /> interface. This parameter can be <b>NULL</b>. See Remarks.</param>
    <param name="ppMediaSession">Receives a pointer to the PMP Media Session's <see cref="IMFMediaSession" /> interface. The caller must release the interface. Before releasing the last reference to the <b>IMFMediaSession</b> pointer, the application must call the <see cref="IMFMediaSession.Shutdown" /> method.</param>
    <param name="ppEnablerActivate">Receives a pointer to the <see cref="IMFActivate" /> interface or the value <b>NULL</b>. If non-<b>NULL</b>, the caller must release the interface. See Remarks.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreatePMPServer">
    <summary>Creates the protected media path (PMP) server object.</summary>
    <param name="dwCreationFlags">A member of the <see cref="MFPMPSESSION_CREATION_FLAGS" /> enumeration that specifies how to create the PMP session.</param>
    <param name="ppPMPServer">Receives a pointer to the <see cref="IMFPMPServer" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreatePresentationClock">
    <summary>Creates the presentation clock. The presentation clock is used to schedule the time at which samples are rendered and to synchronize multiple streams.</summary>
    <param name="ppPresentationClock">Receives a pointer to the clock's <see cref="IMFPresentationClock" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreatePresentationDescriptor">
    <summary>Creates a presentation descriptor.</summary>
    <param name="cStreamDescriptors">Number of elements in the <i>apStreamDescriptors</i> array.</param>
    <param name="apStreamDescriptors">Array of <see cref="IMFStreamDescriptor" /> interface pointers. Each pointer represents a stream descriptor for one stream in the presentation.</param>
    <param name="ppPresentationDescriptor">Receives a pointer to an <see cref="IMFPresentationDescriptor" /> interface of the presentation descriptor. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreatePropertiesFromMediaType">
    <summary>Creates properties from a <see cref="IMFMediaType" />.</summary>
    <param name="pMediaType">A pointer to the <see cref="IMFMediaType" /> interface.</param>
    <param name="riid">The interface identifier (IID) of the interface being requested.</param>
    <param name="ppv">Receives a pointer to the requested interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateProtectedEnvironmentAccess">
    <summary>Creates an <see cref="IMFProtectedEnvironmentAccess" /> object that allows content protection systems to perform a handshake with the protected environment.</summary>
    <param name="ppAccess">Receives a pointer to the <see cref="IMFProtectedEnvironmentAccess" /> interface.</param>
  </member>
  <member name="Windows.MFCreateProxyLocator">
    <summary>Creates a default proxy locator.</summary>
    <param name="pszProtocol">
      <para>The name of the protocol.</para>
      <div>
        <b>Note</b>  In this release of Media Foundation, the default proxy locator does not support RTSP.</div>
    </param>
    <param name="pProxyConfig">Pointer to the <b>IPropertyStore</b> interface of a property store that contains the proxy configuration in the <a href="https://docs.microsoft.com//windows/desktop/medfound/mfnetsource-proxysettings-property">MFNETSOURCE_PROXYSETTINGS</a> property.</param>
    <param name="ppProxyLocator">Receives a pointer to the <see cref="IMFNetProxyLocator" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateRelativePanelWatcher">
    <summary>Creates a new instance of the <b>IMFRelativePanelWatcher</b> interface, which monitors the panel associated with the provided display monitor, so that the app receives notifications when the relative location of the panel changes.</summary>
    <param name="videoDeviceId">A string containing the symbolic link name of the video capture device.</param>
    <param name="displayMonitorDeviceId">A string containing the symbolic link name of the display monitor device.</param>
    <param name="ppRelativePanelWatcher">A pointer to an <b>IMFRelativePanelWatcher</b> interface representing the watcher.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <para>| Return code | Description | |--------------|------------------------| |S_OK | The function succeeded.|</para>
    </returns>
  </member>
  <member name="Windows.MFCreateRemoteDesktopPlugin">
    <summary>Creates the remote desktop plug-in object. Use this object if the application is running in a Terminal Services client session.</summary>
    <param name="ppPlugin">Receives a pointer to the <see cref="IMFRemoteDesktopPlugin" /> interface of the plug-in object. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Remote desktop connections are not allowed by the current session policy.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSampleCopierMFT">
    <summary>Creates an instance of the sample copier transform.</summary>
    <param name="ppCopierMFT">Receives a pointer to the <see cref="IMFTransform" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateSampleGrabberSinkActivate">
    <summary>Creates an activation object for the sample grabber media sink.</summary>
    <param name="pIMFMediaType">Pointer to the <see cref="IMFMediaType" /> interface, defining the media type for the sample grabber's input stream.</param>
    <param name="pIMFSampleGrabberSinkCallback">Pointer to the <see cref="IMFSampleGrabberSinkCallback" /> interface of a callback object. The caller must implement this interface.</param>
    <param name="ppIActivate">Receives a pointer to the <see cref="IMFActivate" /> interface. Use this interface to complete the creation of the sample grabber. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateSensorActivityMonitor">
    <summary>Initializes a new instance of the <see cref="IMFSensorActivityMonitor" /> interface.</summary>
    <param name="pCallback">An implementation of the <see cref="IMFSensorActivitiesReportCallback" /> interface through which the system delivers <see cref="IMFSensorActivitiesReport" /> objects.</param>
    <param name="ppActivityMonitor">A pointer to the new <see cref="IMFSensorActivityMonitor" />.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>ppActivityMonitor</i> parameter is null.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSensorGroup">
    <summary>Creates an instance of the <see cref="IMFSensorGroup" /> interface based on the provided symbolic link name.</summary>
    <param name="SensorGroupSymbolicLink">The symbolic link for the new <see cref="IMFSensorGroup" />. This name can be obtained through device enumeration APIs such as <see cref="SetupDiGetClassDevs" /> or <see cref="MFEnumDeviceSources" /> or by getting the <a href="https://docs.microsoft.com//uwp/api/Windows.Devices.Enumeration.DeviceInformation">Id</a> property of the <a href="https://docs.microsoft.com//uwp/api/Windows.Devices.Enumeration.DeviceInformation">DeviceInformation</a> class.</param>
    <param name="ppSensorGroup">The symbolic link for the new <see cref="IMFSensorGroup" />.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied <see cref="IMFSensorGroup" /> is null.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied <b>LPCWSTR</b> is null.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSensorProfile">
    <summary>Creates a sensor profile, based on the specified type, index, and optional constraints.</summary>
    <param name="ProfileType">The profile type to create.</param>
    <param name="ProfileIndex">The profile index.</param>
    <param name="Constraints">Any optional constraints to be put on the profile.</param>
    <param name="ppProfile">On success, returns a double pointer to the <see cref="IMFSensorProfile" /> containing the sensor profile.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.MFCreateSensorProfileCollection">
    <summary>Creates a sensor profile collection.</summary>
    <param name="ppSensorProfile">On success, points to an <see cref="IMFSensorProfileCollection" /> containing the sensor profile collection.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.MFCreateSensorStream">
    <summary>Creates an instance of the <see cref="IMFSensorStream" /> interface.</summary>
    <param name="StreamId">The identifier for the created stream. This is the same as setting the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devicestream-stream-id">MF_DEVICESTREAM_STREAM_ID</a> attribute. This value is used if <i>pAttributes</i> is null.</param>
    <param name="pAttributes">The attribute store for the created stream.</param>
    <param name="pMediaTypeCollection">The collection of <see cref="IMFMediaType" /> objects specifying the media types supported by the stream.</param>
    <param name="ppStream">The created stream interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied <see cref="IMFSensorGroup" /> is null.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied <b>LPCWSTR</b> is null.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSequencerSegmentOffset">
    <summary>Creates a <b>PROPVARIANT</b> that can be used to seek within a sequencer source presentation.</summary>
    <param name="dwId">Sequencer element identifier. This value specifies the segment in which to begin playback. The element identifier is returned in the <see cref="IMFSequencerSource.AppendTopology" /> method.</param>
    <param name="hnsOffset">Starting position within the segment, in 100-nanosecond units.</param>
    <param name="pvarSegmentOffset">Pointer to a <b>PROPVARIANT</b>. The method fills in the <b>PROPVARIANT</b> with the information needed for performing a seek operation. The caller must free the <b>PROPVARIANT</b> by calling <b>PropVariantClear</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateSequencerSource">
    <summary>Creates the sequencer source.</summary>
    <param name="pReserved">Reserved. Must be <b>NULL</b>.</param>
    <param name="ppSequencerSource">Receives a pointer to the <see cref="IMFSequencerSource" /> interface of the sequencer source. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSimpleTypeHandler">
    <summary>Creates a media-type handler that supports a single media type at a time.</summary>
    <param name="ppHandler">Receives a pointer to the <see cref="IMFMediaTypeHandler" /> interface of the media-type handler. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSourceResolver">
    <summary>Creates the source resolver, which is used to create a media source from a URL or byte stream.</summary>
    <param name="ppISourceResolver">Receives a pointer to the source resolver's <see cref="IMFSourceResolver" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateStandardQualityManager">
    <summary>Creates the default implementation of the quality manager.</summary>
    <param name="ppQualityManager">Receives a pointer to the quality manager's <see cref="IMFQualityManager" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateStreamDescriptor">
    <summary>Creates a stream descriptor.</summary>
    <param name="dwStreamIdentifier">Stream identifier.</param>
    <param name="cMediaTypes">Number of elements in the <i>apMediaTypes</i> array.</param>
    <param name="apMediaTypes">Pointer to an array of <see cref="IMFMediaType" /> interface pointers. These pointers are used to initialize the media type handler for the stream descriptor.</param>
    <param name="ppDescriptor">Receives a pointer to the <see cref="IMFStreamDescriptor" /> interface of the new stream descriptor. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateStreamOnMFByteStream">
    <summary>Returns an <see cref="IStream" /> pointer that wraps a Microsoft Media Foundation byte stream.</summary>
    <param name="pByteStream">A pointer to the <see cref="IMFByteStream" /> interface of the Media Foundation byte stream.</param>
    <param name="ppStream">Receives a pointer to the <see cref="IStream" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateStreamOnMFByteStreamEx">
    <summary>Creates an <a href="https://docs.microsoft.com//previous-versions/hh438400(v=vs.85)">IRandomAccessStream</a> object that wraps a Microsoft Media Foundation byte stream.</summary>
    <param name="pByteStream">A pointer to the <see cref="IMFByteStream" /> interface of the Media Foundation byte stream.</param>
    <param name="riid">The interface identifier (IID) of the interface being requested.</param>
    <param name="ppv">Receives a pointer to the requested interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateSystemTimeSource">
    <summary>Creates a presentation time source that is based on the system time.</summary>
    <param name="ppSystemTimeSource">Receives a pointer to the object's <see cref="IMFPresentationTimeSource" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateTopoLoader">
    <summary>Creates a new instance of the topology loader.</summary>
    <param name="ppObj">Receives a pointer to the <see cref="IMFTopoLoader" /> interface of the topology loader. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateTopology">
    <summary>Creates a topology object.</summary>
    <param name="ppTopo">Receives a pointer to the <see cref="IMFTopology" /> interface of the topology object. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateTopologyNode">
    <summary>Creates a topology node.</summary>
    <param name="NodeType">The type of node to create, specified as a member of the <see cref="MF_TOPOLOGY_TYPE" /> enumeration.</param>
    <param name="ppNode">Receives a pointer to the node's <see cref="IMFTopologyNode" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateTrackedSample">
    <summary>Creates an <see cref="IMFTrackedSample" /> object that tracks the reference counts on a video media sample.</summary>
    <param name="ppMFSample">Receives a pointer to the <see cref="IMFTrackedSample" /> interface.</param>
  </member>
  <member name="Windows.MFCreateTranscodeProfile">
    <summary>
      <para>Creates an empty transcode profile object.</para>
      <para>The transcode profile stores configuration settings for the output file. These configuration settings are specified by the caller, and include audio and video stream properties, encoder settings, and container settings. To set these properties, the caller must call the appropriate <see cref="IMFTranscodeProfile" /> methods.</para>
      <para>The configured transcode profile is passed to the <see cref="MFCreateTranscodeTopology" /> function. The underlying topology builder uses these settings to build the transcode topology.</para>
    </summary>
    <param name="ppTranscodeProfile">Receives a pointer to the <see cref="IMFTranscodeProfile" /> interface of the transcode profile object. Caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateTranscodeSinkActivate">
    <summary>
      <para>Creates the transcode sink activation object.</para>
      <para>The transcode sink activation object can be used to create any of the following file sinks:</para>
      <list type="bullet">
        <item>
          <description>3GP file sink</description>
        </item>
        <item>
          <description>MP3 file sink</description>
        </item>
        <item>
          <description>MP4 file sink</description>
        </item>
      </list>The transcode sink activation object exposes the <see cref="IMFTranscodeSinkInfoProvider" /> interface.</summary>
    <param name="ppActivate">Receives a pointer to the <see cref="IMFActivate" /> interface. This interface is used to create the file sink instance from the activation object. Before doing so, query the returned pointer for the <see cref="IMFTranscodeSinkInfoProvider" /> interface and use that interface to initialize the object.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateTranscodeTopology">
    <summary>
      <para>Creates a partial transcode topology.</para>
      <para>The underlying topology builder creates a partial topology by connecting the required pipeline objects: source, encoder, and sink. The encoder and the sink are configured according to the settings specified by the caller in the transcode profile.</para>
      <para>To create the transcode profile object, call the <see cref="MFCreateTranscodeProfile" /> function and set the required attributes by calling the appropriate the <see cref="IMFTranscodeProfile" /> methods.</para>
      <para>The configured transcode profile is passed to the <b>MFCreateTranscodeTopology</b> function, which creates the transcode topology with the appropriate settings. The caller can then set this topology on the Media Session and start the session to begin the encoding process. When the Media Session ends, the transcoded file is generated.</para>
    </summary>
    <param name="pSrc">A pointer to a media source that encapsulates the source file to be transcoded. The media source object exposes the <see cref="IMFMediaSource" /> interface and can be created by using the source resolver. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/using-the-source-resolver">Using the Source Resolver</a>.</param>
    <param name="pwszOutputFilePath">A pointer to a null-terminated string that contains the name and path of the output file to be generated.</param>
    <param name="pProfile">A pointer to the transcode profile that contains the configuration settings for the audio stream, the video stream, and the container to which the file is written. The transcode profile object exposes the <see cref="IMFTranscodeProfile" /> interface and must be created by calling the <see cref="MFCreateTranscodeProfile" /> function. After the object has been created the caller must provide the configuration settings by calling appropriate the <b>IMFTranscodeProfile</b> methods.</param>
    <param name="ppTranscodeTopo">Receives a pointer to the <see cref="IMFTopology" /> interface of the transcode topology object. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function call succeeded, and <i>ppTranscodeTopo</i> receives a pointer to the transcode topology.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pwszOutputFilePath</i> contains invalid characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No streams are selected in the media source.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_TRANSCODE_NO_CONTAINERTYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The profile does not contain the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-transcode-containertype">MF_TRANSCODE_CONTAINERTYPE</a> attribute.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_TRANSCODE_NO_MATCHING_ENCODER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For one or more streams, cannot find an encoder that accepts the media type given in the profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The profile does not specify a media type for any of the selected streams on the media source.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateTranscodeTopologyFromByteStream">
    <summary>Creates a topology for transcoding to a byte stream.</summary>
    <param name="pSrc">A pointer to the <see cref="IMFMediaSource" /> interface of a media source. The media source provides that source content for transcoding.</param>
    <param name="pOutputStream">A pointer to the <see cref="IMFByteStream" /> interface of a byte stream. The transcoded output will be written to this byte stream.</param>
    <param name="pProfile">A pointer to the <see cref="IMFTranscodeProfile" /> interface of a transcoding profile.</param>
    <param name="ppTranscodeTopo">Receives a pointer to the <see cref="IMFTopology" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateVideoRendererActivate">
    <summary>Creates an activation object for the enhanced video renderer (EVR) media sink.</summary>
    <param name="hwndVideo">Handle to the window where the video will be displayed.</param>
    <param name="ppActivate">Receives a pointer to the <see cref="IMFActivate" /> interface. Use this interface to create the EVR. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateWAVEMediaSink">
    <summary>Creates a WAVE archive sink. The WAVE archive sink takes audio and writes it to an .wav file.</summary>
    <param name="pTargetByteStream">Pointer to the byte stream that will be used to write the .wav file.</param>
    <param name="pAudioMediaType">Pointer to the audio media type.</param>
    <param name="ppMediaSink">Receives a pointer to the <see cref="IMFMediaSink" /> interface. The caller must release this interface.</param>
  </member>
  <member name="Windows.MFDeserializePresentationDescriptor">
    <summary>Deserializes a presentation descriptor from a byte array.</summary>
    <param name="cbData">Size of the <i>pbData</i> array, in bytes.</param>
    <param name="pbData">Pointer to an array of bytes that contains the serialized presentation descriptor.</param>
    <param name="ppPD">Receives a pointer to the <see cref="IMFPresentationDescriptor" /> interface of the presentation descriptor. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFEnumDeviceSources">
    <summary>Enumerates a list of audio or video capture devices.</summary>
    <param name="pAttributes">
      <para>Pointer to an attribute store that contains search criteria. To create the attribute store, call <see cref="MFCreateAttributes" />. Set one or more of the following attributes on the attribute store:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies whether to enumerate audio or video devices. (Required.)</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-audcap-role">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For audio capture devices, specifies the device role. (Optional.)</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-category">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For video capture devices, specifies the device category. (Optional.)</description>
        </listheader>
      </list>
    </param>
    <param name="pppSourceActivate">Receives an array of <see cref="IMFActivate" /> interface pointers. Each pointer represents an activation object for a media source. The function allocates the memory for the array. The caller must release the pointers in the array and call <see cref="CoTaskMemFree" /> to free the memory for the array.</param>
    <param name="pcSourceActivate">Receives the number of elements in the <i>pppSourceActivate</i> array. If no capture devices match the search criteria, this parameter receives the value 0.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetLocalId">
    <summary>Gets the local system ID.</summary>
    <param name="verifier">Application-specific verifier value.</param>
    <param name="size">Length in bytes of verifier.</param>
    <param name="id">Returned ID string. This value must be freed by the caller by calling <see cref="CoTaskMemFree" />.</param>
    <returns>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</returns>
  </member>
  <member name="Windows.MFGetService">
    <summary>
      <para>Queries an object for a specified service interface.</para>
      <para>This function is a helper function that wraps the <see cref="IMFGetService.GetService" /> method. The function queries the object for the <see cref="IMFGetService" /> interface and, if successful, calls <b>GetService</b> on the object.</para>
    </summary>
    <param name="punkObject">A pointer to the <b>IUnknown</b> interface of the object to query.</param>
    <param name="guidService">The service identifier (SID) of the service. For a list of service identifiers, see <a href="https://docs.microsoft.com//windows/desktop/medfound/service-interfaces">Service Interfaces</a>.</param>
    <param name="riid">The interface identifier (IID) of the interface being requested.</param>
    <param name="ppvObject">Receives the interface pointer. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_UNSUPPORTED_SERVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The service requested cannot be found in the object represented by <i>punkObject</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetSupportedMimeTypes">
    <summary>Retrieves the MIME types that are registered for the source resolver.</summary>
    <param name="pPropVarMimeTypeArray">Pointer to a <b>PROPVARIANT</b> that receives the MIME types. Before calling this method, call <b>PropVariantInit</b> to initialize the <b>PROPVARIANT</b>. If the method succeeds, the <b>PROPVARIANT</b> contains an array of wide-character strings. The <b>PROPVARIANT</b> data type is VT_VECTOR | VT_LPWSTR. The caller must release the <b>PROPVARIANT</b> by calling <b>PropVariantClear</b>.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetSupportedSchemes">
    <summary>Retrieves the URL schemes that are registered for the source resolver.</summary>
    <param name="pPropVarSchemeArray">Pointer to a <b>PROPVARIANT</b> that receives the URL schemes. Before calling this method, call <b>PropVariantInit</b> to initialize the <b>PROPVARIANT</b>. If the method succeeds, the <b>PROPVARIANT</b> contains an array of wide-character strings. The <b>PROPVARIANT</b> data type is VT_VECTOR | VT_LPWSTR. The caller must release the <b>PROPVARIANT</b> by calling <b>PropVariantClear</b>.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetSystemId">
    <summary>Returns an <see cref="IMFSystemId" /> object for retrieving system id data.</summary>
    <param name="ppId">Receives a pointer to the <see cref="IMFSystemId" /> interface.</param>
  </member>
  <member name="Windows.MFGetSystemTime">
    <summary>Returns the system time.</summary>
    <returns>Returns the system time, in 100-nanosecond units.</returns>
  </member>
  <member name="Windows.MFGetTopoNodeCurrentType">
    <summary>Gets the media type for a stream associated with a topology node.</summary>
    <param name="pNode">A pointer to the <see cref="IMFTopologyNode" /> interface.</param>
    <param name="dwStreamIndex">
      <para>The identifier of the stream to query. This parameter is interpreted as follows:</para>
      <list type="bullet">
        <item>
          <description>Transform nodes: The value is the zero-based index of the input or output stream.</description>
        </item>
        <item>
          <description>All other node types: The value must be zero.</description>
        </item>
      </list>
    </param>
    <param name="fOutput">
      <para>
        <b>If TRUE</b>, the function gets an output type<b>. If FALSE</b>, the function gets an input type. This parameter is interpreted as follows:</para>
      <list type="bullet">
        <item>
          <description>Output nodes: The value must be <b>TRUE</b>.</description>
        </item>
        <item>
          <description>Source nodes: The value must be <b>FALSE</b>.</description>
        </item>
        <item>
          <description>Tee nodes: The value is ignored.</description>
        </item>
        <item>
          <description>Transform nodes: If the value is <b>TRUE</b>, the <i>dwStreamIndex</i> parameter is the index for an output stream. Otherwise, <i>dwStreamIndex</i> is the index for an input stream.</description>
        </item>
      </list>
    </param>
    <param name="ppType">Receives a pointer to the <see cref="IMFMediaType" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_INVALIDSTREAMNUMBER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The stream index is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFIsContentProtectionDeviceSupported">
    <summary>Checks whether a hardware security processor is supported for the specified media protection system.</summary>
    <param name="ProtectionSystemId">The identifier of the protection system that you want to check.</param>
    <param name="isSupported">
      <b>TRUE</b> if the hardware security processor is supported for the specified protection system; otherwise <b>FALSE</b>.</param>
  </member>
  <member name="Windows.MFLoadSignedLibrary">
    <summary>Loads a dynamic link library that is signed for the protected environment.</summary>
    <param name="pszName">The name of the dynamic link library to load. This dynamic link library must be signed for the protected environment.</param>
    <param name="ppLib">Receives a pointer to the <see cref="IMFSignedLibrary" /> interface for the library.</param>
  </member>
  <member name="Windows.MFRequireProtectedEnvironment">
    <summary>Queries whether a media presentation requires the Protected Media Path (PMP).</summary>
    <param name="pPresentationDescriptor">Pointer to the <see cref="IMFPresentationDescriptor" /> interface of a presentation descriptor. The presentation descriptor is created by the media source, and describes the presentation.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This presentation requires a protected environment.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_FALSE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This presentation does not require a protected environment.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFSerializePresentationDescriptor">
    <summary>Serializes a presentation descriptor to a byte array.</summary>
    <param name="pPD">Pointer to the <see cref="IMFPresentationDescriptor" /> interface of the presentation descriptor to serialize.</param>
    <param name="pcbData">Receives the size of the <i>ppbData</i> array, in bytes.</param>
    <param name="ppbData">Receives a pointer to an array of bytes containing the serialized presentation descriptor. The caller must free the memory for the array by calling <see cref="CoTaskMemFree" />.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFShutdownObject">
    <summary>
      <para>Shuts down a Media Foundation object and releases all resources associated with the object.</para>
      <para>This function is a helper function that wraps the <see cref="IMFShutdown.Shutdown" /> method. The function queries the object for the <see cref="IMFShutdown" /> interface and, if successful, calls <b>Shutdown</b> on the object.</para>
    </summary>
    <param name="pUnk">Pointer to the <b>IUnknown</b> interface of the object.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFTranscodeGetAudioOutputAvailableTypes">
    <summary>Gets a list of output formats from an audio encoder.</summary>
    <param name="guidSubType">Specifies the subtype of the output media. The encoder uses this value as a filter when it is enumerating the available output types. For information about the audio subtypes, see <a href="https://docs.microsoft.com//windows/desktop/medfound/audio-subtype-guids">Audio Subtype GUIDs</a>.</param>
    <param name="dwMFTFlags">Bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</param>
    <param name="pCodecConfig">
      <para>A pointer to the <see cref="IMFAttributes" /> interface of an attribute store. The attribute store specifies the encoder configuration settings. This parameter can be <b>NULL</b>. The attribute store can hold any of the following attributes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-fieldofuse-unlock-attribute">MFT_FIELDOFUSE_UNLOCK_Attribute</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Set this attribute to unlock an encoder that has field-of-use descriptions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-transcode-encodingprofile">MF_TRANSCODE_ENCODINGPROFILE</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies a device conformance profile for a Windows Media encoder.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-transcode-qualityvsspeed">MF_TRANSCODE_QUALITYVSSPEED</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the tradeoff between encoding quality and encoding speed.</description>
        </listheader>
      </list>
    </param>
    <param name="ppAvailableTypes">Receives a pointer to the <see cref="IMFCollection" /> interface of a collection object that contains a list of preferred audio media types. The collection contains <see cref="IMFMediaType" /> pointers. The caller must release the interface pointer.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function call succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_TRANSCODE_NO_MATCHING_ENCODER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Failed to find an encoder that matches the specified configuration settings.</description>
        </listheader>
      </list>
    </returns>
  </member>
</doc>