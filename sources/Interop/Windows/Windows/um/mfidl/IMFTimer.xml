<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMFTimer.CancelTimer">
    <summary>
      <para>Cancels a timer that was set using the <see cref="IMFTimer.SetTimer" /> method.</para>
    </summary>
    <param name="punkKey">
      <para>Pointer to the <b>IUnknown</b> interface that was returned in the <i>ppunkKey</i> parameter of the <see cref="SetTimer" /> method.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Because the timer is dispatched asynchronously, the application's timer callback might get invoked even if this method succeeds.</para>
    </remarks>
    <seealso cref="IMFTimer" />
  </member>
  <member name="IMFTimer.SetTimer">
    <summary>
      <para>Sets a timer that invokes a callback at the specified time.</para>
    </summary>
    <param name="dwFlags">
      <para>Bitwise OR of zero or more flags from the <see cref="MFTIMER_FLAGS" /> enumeration.</para>
    </param>
    <param name="llClockTime">
      <para>The time at which the timer should fire, in units of the clock's frequency. The time is either absolute or relative to the current time, depending on the value of <i>dwFlags</i>.</para>
    </param>
    <param name="pCallback">
      <para>Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface. The callback's <see cref="Invoke" /> method is called at the time specified in the <i>llClockTime</i> parameter.</para>
    </param>
    <param name="punkState">
      <para>Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <param name="ppunkKey">
      <para>Receives a pointer to the <b>IUnknown</b> interface of a cancellation object. The caller must release the interface. To cancel the timer, pass this pointer to the <see cref="IMFTimer.CancelTimer" /> method. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The clock was shut down.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_S_CLOCK_STOPPED</b>
            </para>
          </description>
          <description>
            <para>The method succeeded, but the clock is stopped.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the clock is stopped, the method returns MF_S_CLOCK_STOPPED. The callback will not be invoked until the clock is started.</para>
    </remarks>
    <seealso cref="IMFTimer" />
  </member>
  <member name="IMFTimer">
    <summary>
      <para>Provides a timer that invokes a callback at a specified time.</para>
    </summary>
    <remarks>
      <para>The presentation clock exposes this interface. To get a pointer to the interface, call <b>QueryInterface</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-interfaces">Media Foundation Interfaces</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/presentation-clock">Presentation Clock</seealso>
  </member>
</doc>