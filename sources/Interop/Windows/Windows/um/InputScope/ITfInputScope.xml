<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITfInputScope.GetInputScopes">
    <summary>Gets the input scopes that are associated with this context.</summary>
    <param name="pprgInputScopes">Pointer to an array of pointers to the input scopes. The calling function must call <b>CoTaskMemFree()</b> to free the buffer.</param>
    <param name="pcCount">Pointer to the number of input scopes returned.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ITfInputScope.GetPhrase">
    <summary>Gets the phrase list set to this context.</summary>
    <param name="ppbstrPhrases">Pointer to an array of pointers to strings containing phrases. The calling function must call <b>SystFreeString()</b> to free the memory allocated to the strings and <b>CoTaskMemFree</b> to free the buffer.</param>
    <param name="pcCount">Pointer to the number of phrases returned.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ITfInputScope.GetRegularExpression">
    <summary>Gets the regular expression string to be rssecognized.</summary>
    <param name="pbstrRegExp">Pointer to a string containing the regular expression. The calling function must call <b>SystFreeString()</b> to free the memory allocated to the strings.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ITfInputScope.GetSRGS">
    <summary>Gets the Speech Recognition Grammar Specification (SRGS) string to be recognized.</summary>
    <param name="pbstrSRGS">The xml string. The calling function must call <b>SysFreeString()</b> to free the buffer.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ITfInputScope.GetXML">
    <summary>Gets the custom XML string to be recognized.</summary>
    <param name="pbstrXML">Pointer to a string containing the xml string. The calling function must call <b>SysFreeString()</b> to free the buffer.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ITfInputScope">
    <summary>
      <para>The <b>ITfInputScope</b> interface is used by the text input processors to get the <see cref="InputScope" /> value that represents a document context associated with a window. The input scope provides rules to help speech and handwriting recognition. For instance, if a text box on a form is used to enter an address, the input scope for that text box can be set to recognize and accept only those characters that are valid for an address.</para>
      <para>The interface ID is IID_ITfInputScope.</para>
      <para>The document context is used by the speech and handwriting recognition engine and is set by a text input processor by calling the <see cref="SetInputScope" /> method. A TSF-aware application does not call <b>SetInputScope</b> directly, but rather implements either <see cref="ITextStoreACP" /> or <see cref="ITfContextOwner" /> to get a pointer to <b>ITfInputScope</b>.</para>
      <para>To get the pointer to the <b>ITfInputScope</b> interface, the text input processor or TSF-aware application calls <see cref="ITfContext.GetAppProperty" />, passing in <b>GUID_PROP_INPUTSCOPE</b> and a pointer to the <see cref="ITFReadOnlyProperty" /> interface, as in the following example.</para>
      <code>extern const GUID GUID_PROP_INPUTSCOPE; // // The TIP can call this to get the input scope of the document mgr. // HRESULT GetInputScope(ITfContext *pic, ITfRange *pRange, TfEditCookie ec, ITfInutScope **ppiscope){ ITFReadOnlyProperty *prop; HRESULT hr; If (SUCCEEDED(hr = pic-&gt;GetAppProperty(GUID_PROP_INPUTSCOPE, &amp;prop)) { VARIANT var; If (SUCCEEDED(hr = prop-&gt;GetValue(ec, pRange, &amp;var))) { hr = var.punkVal-&gt;QueryInterface(IID_ITfInputScope, (void **)ppiscope); } prop-&gt;Release(); } return hr }</code>
    </summary>
  </member>
</doc>