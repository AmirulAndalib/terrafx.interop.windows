<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AbortSystemShutdown">
    <summary>Stops a system shutdown that has been initiated.</summary>
    <param name="lpMachineName">The network name of the computer where the shutdown is to be stopped. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function stops the shutdown on the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AbortSystemShutdownA">
    <summary>Stops a system shutdown that has been initiated.</summary>
    <param name="lpMachineName">The network name of the computer where the shutdown is to be stopped. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function stops the shutdown on the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AbortSystemShutdownW">
    <summary>Stops a system shutdown that has been initiated.</summary>
    <param name="lpMachineName">The network name of the computer where the shutdown is to be stopped. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function stops the shutdown on the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AbortSystemShutdown">
    <summary>Stops a system shutdown that has been initiated.</summary>
    <param name="lpMachineName">The network name of the computer where the shutdown is to be stopped. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function stops the shutdown on the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AbortSystemShutdownA">
    <summary>Stops a system shutdown that has been initiated.</summary>
    <param name="lpMachineName">The network name of the computer where the shutdown is to be stopped. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function stops the shutdown on the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AbortSystemShutdownW">
    <summary>Stops a system shutdown that has been initiated.</summary>
    <param name="lpMachineName">The network name of the computer where the shutdown is to be stopped. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function stops the shutdown on the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateShutdown">
    <summary>Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.</summary>
    <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is <b>NULL</b>, the local computer is shut down.</param>
    <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
    <param name="dwGracePeriod">
      <para>The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b>.</para>
      <para>If the value of this parameter is greater than zero, and the <i>dwShutdownFlags</i> parameter specifies the flag <b>SHUTDOWN_GRACE_OVERRIDE</b>, the function fails and returns the error code <b>ERROR_BAD_ARGUMENTS</b>.</para>
    </param>
    <param name="dwShutdownFlags">
      <para>One or more bit flags that specify options for the shutdown. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_OTHERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>All sessions are forcefully logged off. If this flag is not set and users other than the current user are logged on to the computer specified by the <i>lpMachineName</i> parameter, this function fails with a return value of <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_SELF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session is shut down interactively, so a shutdown is not guaranteed even if the function returns successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_GRACE_OVERRIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020 (0x20)</term>
              </listheader>
            </list>
          </description>
          <description>Overrides the grace period so that the computer is shut down immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_HYBRID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200 (0x200)</term>
              </listheader>
            </list>
          </description>
          <description>Beginning with <b>InitiateShutdown</b> running on Windows 8, you must include the <b>SHUTDOWN_HYBRID</b> flag with one or more of the flags in this table to specify options for the shutdown. <para>Beginning with Windows 8, <b>InitiateShutdown</b> always initiate a full system shutdown if the <b>SHUTDOWN_HYBRID</b> flag is absent.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_INSTALL_UPDATES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040 (0x40)</term>
              </listheader>
            </list>
          </description>
          <description>The computer installs any updates before starting the shutdown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_NOREBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010 (0x10)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down but is not powered down or rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_POWEROFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008 (0x8)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and powered down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTART</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTARTAPPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080 (0x80)</term>
              </listheader>
            </list>
          </description>
          <description>The system is rebooted using the <see cref="ExitWindowsEx" /> function with the EWX_RESTARTAPPS flag. This restarts any applications that have been registered for restart using the <see cref="RegisterApplicationRestart" /> function.</description>
        </listheader>
      </list>
    </param>
    <param name="dwReason">The reason for initiating the shutdown. This parameter must be one of the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>. If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the required privilege (SE_SHUTDOWN_PRIVILEGE or SE_REMOTE_SHUTDOWN_PRIVILEGE) to perform this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_NETPATH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not exist or is not accessible.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_COMPUTERNAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer name is not a valid computer name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_FUNCTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not support a shutdown interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of parameters was passed. This includes the following combinations.<list type="bullet"><item><description>The <i>lpMachineName</i> parameter specifies a remote computer, and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter specifies <b>SHUTDOWN_GRACE_OVERRIDE</b>.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IN_PROGRESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown has already been started on the specified computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IS_SCHEDULED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown for the specified computer has been scheduled but not started. For this function to succeed, the <b>SHUTDOWN_GRACE_OVERRIDE</b> flag must be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more users other than the current user are logged on the specified machine, and the <b>SHUTDOWN_FORCE_OTHERS</b> flag was not set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InitiateShutdownA">
    <summary>Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.</summary>
    <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is <b>NULL</b>, the local computer is shut down.</param>
    <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
    <param name="dwGracePeriod">
      <para>The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b>.</para>
      <para>If the value of this parameter is greater than zero, and the <i>dwShutdownFlags</i> parameter specifies the flag <b>SHUTDOWN_GRACE_OVERRIDE</b>, the function fails and returns the error code <b>ERROR_BAD_ARGUMENTS</b>.</para>
    </param>
    <param name="dwShutdownFlags">
      <para>One or more bit flags that specify options for the shutdown. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_OTHERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>All sessions are forcefully logged off. If this flag is not set and users other than the current user are logged on to the computer specified by the <i>lpMachineName</i> parameter, this function fails with a return value of <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_SELF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session is shut down interactively, so a shutdown is not guaranteed even if the function returns successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_GRACE_OVERRIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020 (0x20)</term>
              </listheader>
            </list>
          </description>
          <description>Overrides the grace period so that the computer is shut down immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_HYBRID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200 (0x200)</term>
              </listheader>
            </list>
          </description>
          <description>Beginning with <b>InitiateShutdown</b> running on Windows 8, you must include the <b>SHUTDOWN_HYBRID</b> flag with one or more of the flags in this table to specify options for the shutdown. <para>Beginning with Windows 8, <b>InitiateShutdown</b> always initiate a full system shutdown if the <b>SHUTDOWN_HYBRID</b> flag is absent.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_INSTALL_UPDATES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040 (0x40)</term>
              </listheader>
            </list>
          </description>
          <description>The computer installs any updates before starting the shutdown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_NOREBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010 (0x10)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down but is not powered down or rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_POWEROFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008 (0x8)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and powered down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTART</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTARTAPPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080 (0x80)</term>
              </listheader>
            </list>
          </description>
          <description>The system is rebooted using the <see cref="ExitWindowsEx" /> function with the EWX_RESTARTAPPS flag. This restarts any applications that have been registered for restart using the <see cref="RegisterApplicationRestart" /> function.</description>
        </listheader>
      </list>
    </param>
    <param name="dwReason">The reason for initiating the shutdown. This parameter must be one of the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>. If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the required privilege (SE_SHUTDOWN_PRIVILEGE or SE_REMOTE_SHUTDOWN_PRIVILEGE) to perform this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_NETPATH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not exist or is not accessible.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_COMPUTERNAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer name is not a valid computer name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_FUNCTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not support a shutdown interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of parameters was passed. This includes the following combinations.<list type="bullet"><item><description>The <i>lpMachineName</i> parameter specifies a remote computer, and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter specifies <b>SHUTDOWN_GRACE_OVERRIDE</b>.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IN_PROGRESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown has already been started on the specified computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IS_SCHEDULED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown for the specified computer has been scheduled but not started. For this function to succeed, the <b>SHUTDOWN_GRACE_OVERRIDE</b> flag must be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more users other than the current user are logged on the specified machine, and the <b>SHUTDOWN_FORCE_OTHERS</b> flag was not set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InitiateShutdownW">
    <summary>Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.</summary>
    <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is <b>NULL</b>, the local computer is shut down.</param>
    <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
    <param name="dwGracePeriod">
      <para>The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b>.</para>
      <para>If the value of this parameter is greater than zero, and the <i>dwShutdownFlags</i> parameter specifies the flag <b>SHUTDOWN_GRACE_OVERRIDE</b>, the function fails and returns the error code <b>ERROR_BAD_ARGUMENTS</b>.</para>
    </param>
    <param name="dwShutdownFlags">
      <para>One or more bit flags that specify options for the shutdown. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_OTHERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>All sessions are forcefully logged off. If this flag is not set and users other than the current user are logged on to the computer specified by the <i>lpMachineName</i> parameter, this function fails with a return value of <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_SELF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session is shut down interactively, so a shutdown is not guaranteed even if the function returns successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_GRACE_OVERRIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020 (0x20)</term>
              </listheader>
            </list>
          </description>
          <description>Overrides the grace period so that the computer is shut down immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_HYBRID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200 (0x200)</term>
              </listheader>
            </list>
          </description>
          <description>Beginning with <b>InitiateShutdown</b> running on Windows 8, you must include the <b>SHUTDOWN_HYBRID</b> flag with one or more of the flags in this table to specify options for the shutdown. <para>Beginning with Windows 8, <b>InitiateShutdown</b> always initiate a full system shutdown if the <b>SHUTDOWN_HYBRID</b> flag is absent.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_INSTALL_UPDATES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040 (0x40)</term>
              </listheader>
            </list>
          </description>
          <description>The computer installs any updates before starting the shutdown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_NOREBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010 (0x10)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down but is not powered down or rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_POWEROFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008 (0x8)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and powered down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTART</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTARTAPPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080 (0x80)</term>
              </listheader>
            </list>
          </description>
          <description>The system is rebooted using the <see cref="ExitWindowsEx" /> function with the EWX_RESTARTAPPS flag. This restarts any applications that have been registered for restart using the <see cref="RegisterApplicationRestart" /> function.</description>
        </listheader>
      </list>
    </param>
    <param name="dwReason">The reason for initiating the shutdown. This parameter must be one of the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>. If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the required privilege (SE_SHUTDOWN_PRIVILEGE or SE_REMOTE_SHUTDOWN_PRIVILEGE) to perform this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_NETPATH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not exist or is not accessible.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_COMPUTERNAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer name is not a valid computer name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_FUNCTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not support a shutdown interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of parameters was passed. This includes the following combinations.<list type="bullet"><item><description>The <i>lpMachineName</i> parameter specifies a remote computer, and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter specifies <b>SHUTDOWN_GRACE_OVERRIDE</b>.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IN_PROGRESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown has already been started on the specified computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IS_SCHEDULED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown for the specified computer has been scheduled but not started. For this function to succeed, the <b>SHUTDOWN_GRACE_OVERRIDE</b> flag must be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more users other than the current user are logged on the specified machine, and the <b>SHUTDOWN_FORCE_OTHERS</b> flag was not set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InitiateShutdown">
    <summary>Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.</summary>
    <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is <b>NULL</b>, the local computer is shut down.</param>
    <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
    <param name="dwGracePeriod">
      <para>The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b>.</para>
      <para>If the value of this parameter is greater than zero, and the <i>dwShutdownFlags</i> parameter specifies the flag <b>SHUTDOWN_GRACE_OVERRIDE</b>, the function fails and returns the error code <b>ERROR_BAD_ARGUMENTS</b>.</para>
    </param>
    <param name="dwShutdownFlags">
      <para>One or more bit flags that specify options for the shutdown. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_OTHERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>All sessions are forcefully logged off. If this flag is not set and users other than the current user are logged on to the computer specified by the <i>lpMachineName</i> parameter, this function fails with a return value of <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_SELF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session is shut down interactively, so a shutdown is not guaranteed even if the function returns successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_GRACE_OVERRIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020 (0x20)</term>
              </listheader>
            </list>
          </description>
          <description>Overrides the grace period so that the computer is shut down immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_HYBRID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200 (0x200)</term>
              </listheader>
            </list>
          </description>
          <description>Beginning with <b>InitiateShutdown</b> running on Windows 8, you must include the <b>SHUTDOWN_HYBRID</b> flag with one or more of the flags in this table to specify options for the shutdown. <para>Beginning with Windows 8, <b>InitiateShutdown</b> always initiate a full system shutdown if the <b>SHUTDOWN_HYBRID</b> flag is absent.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_INSTALL_UPDATES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040 (0x40)</term>
              </listheader>
            </list>
          </description>
          <description>The computer installs any updates before starting the shutdown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_NOREBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010 (0x10)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down but is not powered down or rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_POWEROFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008 (0x8)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and powered down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTART</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTARTAPPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080 (0x80)</term>
              </listheader>
            </list>
          </description>
          <description>The system is rebooted using the <see cref="ExitWindowsEx" /> function with the EWX_RESTARTAPPS flag. This restarts any applications that have been registered for restart using the <see cref="RegisterApplicationRestart" /> function.</description>
        </listheader>
      </list>
    </param>
    <param name="dwReason">The reason for initiating the shutdown. This parameter must be one of the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>. If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the required privilege (SE_SHUTDOWN_PRIVILEGE or SE_REMOTE_SHUTDOWN_PRIVILEGE) to perform this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_NETPATH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not exist or is not accessible.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_COMPUTERNAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer name is not a valid computer name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_FUNCTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not support a shutdown interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of parameters was passed. This includes the following combinations.<list type="bullet"><item><description>The <i>lpMachineName</i> parameter specifies a remote computer, and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter specifies <b>SHUTDOWN_GRACE_OVERRIDE</b>.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IN_PROGRESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown has already been started on the specified computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IS_SCHEDULED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown for the specified computer has been scheduled but not started. For this function to succeed, the <b>SHUTDOWN_GRACE_OVERRIDE</b> flag must be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more users other than the current user are logged on the specified machine, and the <b>SHUTDOWN_FORCE_OTHERS</b> flag was not set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InitiateShutdownA">
    <summary>Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.</summary>
    <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is <b>NULL</b>, the local computer is shut down.</param>
    <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
    <param name="dwGracePeriod">
      <para>The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b>.</para>
      <para>If the value of this parameter is greater than zero, and the <i>dwShutdownFlags</i> parameter specifies the flag <b>SHUTDOWN_GRACE_OVERRIDE</b>, the function fails and returns the error code <b>ERROR_BAD_ARGUMENTS</b>.</para>
    </param>
    <param name="dwShutdownFlags">
      <para>One or more bit flags that specify options for the shutdown. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_OTHERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>All sessions are forcefully logged off. If this flag is not set and users other than the current user are logged on to the computer specified by the <i>lpMachineName</i> parameter, this function fails with a return value of <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_SELF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session is shut down interactively, so a shutdown is not guaranteed even if the function returns successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_GRACE_OVERRIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020 (0x20)</term>
              </listheader>
            </list>
          </description>
          <description>Overrides the grace period so that the computer is shut down immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_HYBRID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200 (0x200)</term>
              </listheader>
            </list>
          </description>
          <description>Beginning with <b>InitiateShutdown</b> running on Windows 8, you must include the <b>SHUTDOWN_HYBRID</b> flag with one or more of the flags in this table to specify options for the shutdown. <para>Beginning with Windows 8, <b>InitiateShutdown</b> always initiate a full system shutdown if the <b>SHUTDOWN_HYBRID</b> flag is absent.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_INSTALL_UPDATES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040 (0x40)</term>
              </listheader>
            </list>
          </description>
          <description>The computer installs any updates before starting the shutdown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_NOREBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010 (0x10)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down but is not powered down or rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_POWEROFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008 (0x8)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and powered down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTART</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTARTAPPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080 (0x80)</term>
              </listheader>
            </list>
          </description>
          <description>The system is rebooted using the <see cref="ExitWindowsEx" /> function with the EWX_RESTARTAPPS flag. This restarts any applications that have been registered for restart using the <see cref="RegisterApplicationRestart" /> function.</description>
        </listheader>
      </list>
    </param>
    <param name="dwReason">The reason for initiating the shutdown. This parameter must be one of the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>. If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the required privilege (SE_SHUTDOWN_PRIVILEGE or SE_REMOTE_SHUTDOWN_PRIVILEGE) to perform this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_NETPATH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not exist or is not accessible.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_COMPUTERNAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer name is not a valid computer name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_FUNCTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not support a shutdown interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of parameters was passed. This includes the following combinations.<list type="bullet"><item><description>The <i>lpMachineName</i> parameter specifies a remote computer, and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter specifies <b>SHUTDOWN_GRACE_OVERRIDE</b>.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IN_PROGRESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown has already been started on the specified computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IS_SCHEDULED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown for the specified computer has been scheduled but not started. For this function to succeed, the <b>SHUTDOWN_GRACE_OVERRIDE</b> flag must be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more users other than the current user are logged on the specified machine, and the <b>SHUTDOWN_FORCE_OTHERS</b> flag was not set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InitiateShutdownW">
    <summary>Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.</summary>
    <param name="lpMachineName">The name of the computer to be shut down. If the value of this parameter is <b>NULL</b>, the local computer is shut down.</param>
    <param name="lpMessage">The message to be displayed in the interactive shutdown dialog box.</param>
    <param name="dwGracePeriod">
      <para>The number of seconds to wait before shutting down the computer. If the value of this parameter is zero, the computer is shut down immediately. This value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b>.</para>
      <para>If the value of this parameter is greater than zero, and the <i>dwShutdownFlags</i> parameter specifies the flag <b>SHUTDOWN_GRACE_OVERRIDE</b>, the function fails and returns the error code <b>ERROR_BAD_ARGUMENTS</b>.</para>
    </param>
    <param name="dwShutdownFlags">
      <para>One or more bit flags that specify options for the shutdown. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_OTHERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001 (0x1)</term>
              </listheader>
            </list>
          </description>
          <description>All sessions are forcefully logged off. If this flag is not set and users other than the current user are logged on to the computer specified by the <i>lpMachineName</i> parameter, this function fails with a return value of <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_FORCE_SELF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the originating session is logged off forcefully. If this flag is not set, the originating session is shut down interactively, so a shutdown is not guaranteed even if the function returns successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_GRACE_OVERRIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020 (0x20)</term>
              </listheader>
            </list>
          </description>
          <description>Overrides the grace period so that the computer is shut down immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_HYBRID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200 (0x200)</term>
              </listheader>
            </list>
          </description>
          <description>Beginning with <b>InitiateShutdown</b> running on Windows 8, you must include the <b>SHUTDOWN_HYBRID</b> flag with one or more of the flags in this table to specify options for the shutdown. <para>Beginning with Windows 8, <b>InitiateShutdown</b> always initiate a full system shutdown if the <b>SHUTDOWN_HYBRID</b> flag is absent.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_INSTALL_UPDATES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040 (0x40)</term>
              </listheader>
            </list>
          </description>
          <description>The computer installs any updates before starting the shutdown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_NOREBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010 (0x10)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down but is not powered down or rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_POWEROFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008 (0x8)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and powered down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTART</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004 (0x4)</term>
              </listheader>
            </list>
          </description>
          <description>The computer is shut down and rebooted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHUTDOWN_RESTARTAPPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080 (0x80)</term>
              </listheader>
            </list>
          </description>
          <description>The system is rebooted using the <see cref="ExitWindowsEx" /> function with the EWX_RESTARTAPPS flag. This restarts any applications that have been registered for restart using the <see cref="RegisterApplicationRestart" /> function.</description>
        </listheader>
      </list>
    </param>
    <param name="dwReason">The reason for initiating the shutdown. This parameter must be one of the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>. If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the required privilege (SE_SHUTDOWN_PRIVILEGE or SE_REMOTE_SHUTDOWN_PRIVILEGE) to perform this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_NETPATH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not exist or is not accessible.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_COMPUTERNAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer name is not a valid computer name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_FUNCTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified computer does not support a shutdown interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of parameters was passed. This includes the following combinations.<list type="bullet"><item><description>The <i>lpMachineName</i> parameter specifies a remote computer, and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter does not specify <b>SHUTDOWN_FORCE_SELF</b>.</description></item><item><description>The value of the <i>dwGracePeriod</i> is greater than zero and the <i>dwShutdownFlags</i> parameter specifies <b>SHUTDOWN_GRACE_OVERRIDE</b>.</description></item></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IN_PROGRESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown has already been started on the specified computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_IS_SCHEDULED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A shutdown for the specified computer has been scheduled but not started. For this function to succeed, the <b>SHUTDOWN_GRACE_OVERRIDE</b> flag must be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHUTDOWN_USERS_LOGGED_ON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more users other than the current user are logged on the specified machine, and the <b>SHUTDOWN_FORCE_OTHERS</b> flag was not set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdown">
    <summary>
      <para>Initiates a shutdown and optional restart of the specified computer.</para>
      <para>To record a reason for the shutdown in the event log, call the<see cref="InitiateSystemShutdownEx" /> function.</para>
    </summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, the shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdown</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before a forced shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b> seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">
      <para>If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. Note that this can result in data loss.</para>
      <para>If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</para>
    </param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownA">
    <summary>
      <para>Initiates a shutdown and optional restart of the specified computer.</para>
      <para>To record a reason for the shutdown in the event log, call the<see cref="InitiateSystemShutdownEx" /> function.</para>
    </summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, the shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdown</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before a forced shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b> seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">
      <para>If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. Note that this can result in data loss.</para>
      <para>If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</para>
    </param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownW">
    <summary>
      <para>Initiates a shutdown and optional restart of the specified computer.</para>
      <para>To record a reason for the shutdown in the event log, call the<see cref="InitiateSystemShutdownEx" /> function.</para>
    </summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, the shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdown</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before a forced shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b> seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">
      <para>If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. Note that this can result in data loss.</para>
      <para>If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</para>
    </param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownEx">
    <summary>Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.</summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdownEx</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to MAX_SHUTDOWN_TIMEOUT seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <param name="dwReason">
      <para>The reason for initiating the shutdown. This parameter must be one of the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>.</para>
      <para>If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
      <para>
        <b>Windows XP:  </b>System state information is not saved during an unplanned system shutdown. The preceding text does not apply.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownExA">
    <summary>Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.</summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdownEx</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to MAX_SHUTDOWN_TIMEOUT seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <param name="dwReason">
      <para>The reason for initiating the shutdown. This parameter must be one of the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>.</para>
      <para>If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
      <para>
        <b>Windows XP:  </b>System state information is not saved during an unplanned system shutdown. The preceding text does not apply.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownExW">
    <summary>Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.</summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdownEx</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to MAX_SHUTDOWN_TIMEOUT seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <param name="dwReason">
      <para>The reason for initiating the shutdown. This parameter must be one of the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>.</para>
      <para>If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
      <para>
        <b>Windows XP:  </b>System state information is not saved during an unplanned system shutdown. The preceding text does not apply.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownEx">
    <summary>Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.</summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdownEx</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to MAX_SHUTDOWN_TIMEOUT seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <param name="dwReason">
      <para>The reason for initiating the shutdown. This parameter must be one of the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>.</para>
      <para>If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
      <para>
        <b>Windows XP:  </b>System state information is not saved during an unplanned system shutdown. The preceding text does not apply.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownExA">
    <summary>Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.</summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdownEx</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to MAX_SHUTDOWN_TIMEOUT seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <param name="dwReason">
      <para>The reason for initiating the shutdown. This parameter must be one of the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>.</para>
      <para>If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
      <para>
        <b>Windows XP:  </b>System state information is not saved during an unplanned system shutdown. The preceding text does not apply.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownExW">
    <summary>Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.</summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdownEx</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to MAX_SHUTDOWN_TIMEOUT seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <param name="dwReason">
      <para>The reason for initiating the shutdown. This parameter must be one of the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>.</para>
      <para>If this parameter is zero, the default is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
      <para>
        <b>Windows XP:  </b>System state information is not saved during an unplanned system shutdown. The preceding text does not apply.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdown">
    <summary>
      <para>Initiates a shutdown and optional restart of the specified computer.</para>
      <para>To record a reason for the shutdown in the event log, call the<see cref="InitiateSystemShutdownEx" /> function.</para>
    </summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, the shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdown</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before a forced shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b> seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">
      <para>If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. Note that this can result in data loss.</para>
      <para>If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</para>
    </param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownA">
    <summary>
      <para>Initiates a shutdown and optional restart of the specified computer.</para>
      <para>To record a reason for the shutdown in the event log, call the<see cref="InitiateSystemShutdownEx" /> function.</para>
    </summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, the shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdown</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before a forced shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b> seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">
      <para>If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. Note that this can result in data loss.</para>
      <para>If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</para>
    </param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InitiateSystemShutdownW">
    <summary>
      <para>Initiates a shutdown and optional restart of the specified computer.</para>
      <para>To record a reason for the shutdown in the event log, call the<see cref="InitiateSystemShutdownEx" /> function.</para>
    </summary>
    <param name="lpMachineName">The network name of the computer to be shut down. If <i>lpMachineName</i> is <b>NULL</b> or an empty string, the function shuts down the local computer.</param>
    <param name="lpMessage">
      <para>The message to be displayed in the shutdown dialog box. This parameter can be <b>NULL</b> if no message is required.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This string is also stored as a comment in the event log entry.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The string is limited to 3072 <b>TCHARs</b>.</para>
    </param>
    <param name="dwTimeout">
      <para>The length of time that the shutdown dialog box should be displayed, in seconds. While this dialog box is displayed, the shutdown can be stopped by the<see cref="AbortSystemShutdown" /> function.</para>
      <para>If <i>dwTimeout</i> is not zero,<b>InitiateSystemShutdown</b> displays a dialog box on the specified computer. The dialog box displays the name of the user who called the function, displays the message specified by the <i>lpMessage</i> parameter, and prompts the user to log off. The dialog box beeps when it is created and remains on top of other windows in the system. The dialog box can be moved but not closed. A timer counts down the remaining time before a forced shutdown.</para>
      <para>If <i>dwTimeout</i> is zero, the computer shuts down without displaying the dialog box, and the shutdown cannot be stopped by<see cref="AbortSystemShutdown" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>The time-out value is limited to <b>MAX_SHUTDOWN_TIMEOUT</b> seconds.</para>
      <para>
        <b>Windows Server 2003 and Windows XP with SP1:  </b>If the computer to be shut down is a Terminal Services server, the system displays a dialog box to all local and remote users warning them that shutdown has been initiated. The dialog box includes who requested the shutdown, the display message (see <i>lpMessage</i>), and how much time there is until the server is shut down.</para>
    </param>
    <param name="bForceAppsClosed">
      <para>If this parameter is <b>TRUE</b>, applications with unsaved changes are to be forcibly closed. Note that this can result in data loss.</para>
      <para>If this parameter is <b>FALSE</b>, the system displays a dialog box instructing the user to close the applications.</para>
    </param>
    <param name="bRebootAfterShutdown">If this parameter is <b>TRUE</b>, the computer is to restart immediately after shutting down. If this parameter is <b>FALSE</b>, the system flushes all caches to disk and safely powers down the system.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegCloseKey">
    <summary>Closes a handle to the specified registry key.</summary>
    <param name="hKey">A handle to the open key to be closed. The handle must have been opened by the<see cref="RegCreateKeyEx" />,<see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, <see cref="RegOpenKeyTransacted" />, or <see cref="RegConnectRegistry" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegConnectRegistry">
    <summary>Establishes a connection to a predefined registry key on another computer.</summary>
    <param name="lpMachineName">
      <para>The name of the remote computer. The string has the following form:</para>
      <para>\\<i>computername</i></para>
      <para>The caller must have access to the remote computer or the function fails.</para>
      <para>If this parameter is <b>NULL</b>, the local computer name is used.</para>
    </param>
    <param name="hKey">
      <para>A predefined registry handle. This parameter can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a> on the remote computer.</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_PERFORMANCE_DATA</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a key handle identifying the predefined handle on the remote computer.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegConnectRegistryA">
    <summary>Establishes a connection to a predefined registry key on another computer.</summary>
    <param name="lpMachineName">
      <para>The name of the remote computer. The string has the following form:</para>
      <para>\\<i>computername</i></para>
      <para>The caller must have access to the remote computer or the function fails.</para>
      <para>If this parameter is <b>NULL</b>, the local computer name is used.</para>
    </param>
    <param name="hKey">
      <para>A predefined registry handle. This parameter can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a> on the remote computer.</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_PERFORMANCE_DATA</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a key handle identifying the predefined handle on the remote computer.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegConnectRegistryW">
    <summary>Establishes a connection to a predefined registry key on another computer.</summary>
    <param name="lpMachineName">
      <para>The name of the remote computer. The string has the following form:</para>
      <para>\\<i>computername</i></para>
      <para>The caller must have access to the remote computer or the function fails.</para>
      <para>If this parameter is <b>NULL</b>, the local computer name is used.</para>
    </param>
    <param name="hKey">
      <para>A predefined registry handle. This parameter can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a> on the remote computer.</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_PERFORMANCE_DATA</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a key handle identifying the predefined handle on the remote computer.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegConnectRegistry">
    <summary>Establishes a connection to a predefined registry key on another computer.</summary>
    <param name="lpMachineName">
      <para>The name of the remote computer. The string has the following form:</para>
      <para>\\<i>computername</i></para>
      <para>The caller must have access to the remote computer or the function fails.</para>
      <para>If this parameter is <b>NULL</b>, the local computer name is used.</para>
    </param>
    <param name="hKey">
      <para>A predefined registry handle. This parameter can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a> on the remote computer.</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_PERFORMANCE_DATA</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a key handle identifying the predefined handle on the remote computer.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegConnectRegistryA">
    <summary>Establishes a connection to a predefined registry key on another computer.</summary>
    <param name="lpMachineName">
      <para>The name of the remote computer. The string has the following form:</para>
      <para>\\<i>computername</i></para>
      <para>The caller must have access to the remote computer or the function fails.</para>
      <para>If this parameter is <b>NULL</b>, the local computer name is used.</para>
    </param>
    <param name="hKey">
      <para>A predefined registry handle. This parameter can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a> on the remote computer.</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_PERFORMANCE_DATA</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a key handle identifying the predefined handle on the remote computer.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegConnectRegistryW">
    <summary>Establishes a connection to a predefined registry key on another computer.</summary>
    <param name="lpMachineName">
      <para>The name of the remote computer. The string has the following form:</para>
      <para>\\<i>computername</i></para>
      <para>The caller must have access to the remote computer or the function fails.</para>
      <para>If this parameter is <b>NULL</b>, the local computer name is used.</para>
    </param>
    <param name="hKey">
      <para>A predefined registry handle. This parameter can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a> on the remote computer.</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_PERFORMANCE_DATA</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a key handle identifying the predefined handle on the remote computer.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCopyTree">
    <summary>Copies the specified registry key, along with its values and subkeys, to the specified destination key.</summary>
    <param name="hKeySrc">
      <para>A handle to an open registry key. The key must have been opened with the KEY_READ access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <param name="lpSubKey">The name of the key. This key must be a subkey of the key identified by the <i>hKeySrc</i> parameter. This parameter can also be <b>NULL</b>.</param>
    <param name="hKeyDest">
      <para>A handle to the destination key. The calling process must have KEY_CREATE_SUB_KEY access to the key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCopyTreeA">
    <summary>Copies the specified registry key, along with its values and subkeys, to the specified destination key.</summary>
    <param name="hKeySrc">
      <para>A handle to an open registry key. The key must have been opened with the KEY_READ access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <param name="lpSubKey">The name of the key. This key must be a subkey of the key identified by the <i>hKeySrc</i> parameter. This parameter can also be <b>NULL</b>.</param>
    <param name="hKeyDest">
      <para>A handle to the destination key. The calling process must have KEY_CREATE_SUB_KEY access to the key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCopyTreeW">
    <summary>Copies the specified registry key, along with its values and subkeys, to the specified destination key.</summary>
    <param name="hKeySrc">
      <para>A handle to an open registry key. The key must have been opened with the KEY_READ access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <param name="lpSubKey">The name of the key. This key must be a subkey of the key identified by the <i>hKeySrc</i> parameter. This parameter can also be <b>NULL</b>.</param>
    <param name="hKeyDest">
      <para>A handle to the destination key. The calling process must have KEY_CREATE_SUB_KEY access to the key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCopyTree">
    <summary>Copies the specified registry key, along with its values and subkeys, to the specified destination key.</summary>
    <param name="hKeySrc">
      <para>A handle to an open registry key. The key must have been opened with the KEY_READ access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <param name="lpSubKey">The name of the key. This key must be a subkey of the key identified by the <i>hKeySrc</i> parameter. This parameter can also be <b>NULL</b>.</param>
    <param name="hKeyDest">
      <para>A handle to the destination key. The calling process must have KEY_CREATE_SUB_KEY access to the key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCopyTreeA">
    <summary>Copies the specified registry key, along with its values and subkeys, to the specified destination key.</summary>
    <param name="hKeySrc">
      <para>A handle to an open registry key. The key must have been opened with the KEY_READ access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <param name="lpSubKey">The name of the key. This key must be a subkey of the key identified by the <i>hKeySrc</i> parameter. This parameter can also be <b>NULL</b>.</param>
    <param name="hKeyDest">
      <para>A handle to the destination key. The calling process must have KEY_CREATE_SUB_KEY access to the key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCopyTreeW">
    <summary>Copies the specified registry key, along with its values and subkeys, to the specified destination key.</summary>
    <param name="hKeySrc">
      <para>A handle to an open registry key. The key must have been opened with the KEY_READ access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <param name="lpSubKey">The name of the key. This key must be a subkey of the key identified by the <i>hKeySrc</i> parameter. This parameter can also be <b>NULL</b>.</param>
    <param name="hKeyDest">
      <para>A handle to the destination key. The calling process must have KEY_CREATE_SUB_KEY access to the key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the <a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyEx">
    <summary>
      <para>Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegCreateKeyTransacted" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that modify the registry if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyEx</b> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class type of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, the key is opened with the ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_CREATE_LINK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>
            <div>
              <b>Note</b>  Registry symbolic links should only be used for for application compatibility when <u>absolutely</u> necessary.</div>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs only when the system initiates a full shutdown. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist. <div><b>Note</b>  On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</div></description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyExA">
    <summary>
      <para>Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegCreateKeyTransacted" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that modify the registry if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyEx</b> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class type of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, the key is opened with the ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_CREATE_LINK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>
            <div>
              <b>Note</b>  Registry symbolic links should only be used for for application compatibility when <u>absolutely</u> necessary.</div>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs only when the system initiates a full shutdown. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist. <div><b>Note</b>  On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</div></description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyExW">
    <summary>
      <para>Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegCreateKeyTransacted" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that modify the registry if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyEx</b> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class type of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, the key is opened with the ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_CREATE_LINK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>
            <div>
              <b>Note</b>  Registry symbolic links should only be used for for application compatibility when <u>absolutely</u> necessary.</div>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs only when the system initiates a full shutdown. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist. <div><b>Note</b>  On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</div></description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyEx">
    <summary>
      <para>Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegCreateKeyTransacted" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that modify the registry if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyEx</b> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class type of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, the key is opened with the ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_CREATE_LINK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>
            <div>
              <b>Note</b>  Registry symbolic links should only be used for for application compatibility when <u>absolutely</u> necessary.</div>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs only when the system initiates a full shutdown. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist. <div><b>Note</b>  On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</div></description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyExA">
    <summary>
      <para>Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegCreateKeyTransacted" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that modify the registry if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyEx</b> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class type of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, the key is opened with the ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_CREATE_LINK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>
            <div>
              <b>Note</b>  Registry symbolic links should only be used for for application compatibility when <u>absolutely</u> necessary.</div>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs only when the system initiates a full shutdown. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist. <div><b>Note</b>  On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</div></description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyExW">
    <summary>
      <para>Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegCreateKeyTransacted" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that modify the registry if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyEx</b> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class type of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, beginning with Windows Vista, the key is opened with the ACCESS_SYSTEM_SECURITY, DELETE and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_CREATE_LINK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>
            <div>
              <b>Note</b>  Registry symbolic links should only be used for for application compatibility when <u>absolutely</u> necessary.</div>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs only when the system initiates a full shutdown. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist. <div><b>Note</b>  On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</div></description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyTransacted">
    <summary>
      <para>Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyTransacted</b> or<see cref="RegOpenKeyTransacted" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs when the system is shut down. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyTransactedA">
    <summary>
      <para>Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyTransacted</b> or<see cref="RegOpenKeyTransacted" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs when the system is shut down. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyTransactedW">
    <summary>
      <para>Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyTransacted</b> or<see cref="RegOpenKeyTransacted" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs when the system is shut down. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyTransacted">
    <summary>
      <para>Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyTransacted</b> or<see cref="RegOpenKeyTransacted" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs when the system is shut down. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyTransactedA">
    <summary>
      <para>Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyTransacted</b> or<see cref="RegOpenKeyTransacted" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs when the system is shut down. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegCreateKeyTransactedW">
    <summary>
      <para>Creates the specified registry key and associates it with a transaction. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. The calling process must have KEY_CREATE_SUB_KEY access to the key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <i>hKey</i> was opened with a <i>samDesired</i> of KEY_READ, it can be used in operations that create keys if allowed by its security descriptor.</para>
      <para>This handle is returned by the<b>RegCreateKeyTransacted</b> or<see cref="RegOpenKeyTransacted" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <i>hKey</i> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/structure-of-the-registry">Structure of the Registry</a>.</para>
      <para>If <i>lpSubKey</i> is a pointer to an empty string, <i>phkResult</i> receives a new handle to the key specified by <i>hKey</i>.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="Reserved">This parameter is reserved and must be zero.</param>
    <param name="lpClass">The user-defined class of this key. This parameter may be ignored. This parameter can be <b>NULL</b>.</param>
    <param name="dwOptions">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_BACKUP_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the function ignores the <i>samDesired</i> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_READ access rights. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with the ACCESS_SYSTEM_SECURITY and KEY_WRITE access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/running-with-special-privileges">Running with Special Privileges</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_NON_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <see cref="RegSaveKey" /> function saves keys that are not volatile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>All keys created by the function are volatile. The information is stored in memory and is not preserved when the corresponding registry hive is unloaded. For <b>HKEY_LOCAL_MACHINE</b>, this occurs when the system is shut down. For registry keys loaded by the <see cref="RegLoadKey" /> function, this occurs when the corresponding <see cref="RegUnLoadKey" /> is performed. The <see cref="RegSaveKey" /> function does not save volatile keys. This flag is ignored for keys that already exist.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="lpSecurityAttributes">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new key. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="lpdwDisposition">
      <para>A pointer to a variable that receives one of the following disposition values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_CREATED_NEW_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The key did not exist and was created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPENED_EXISTING_KEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The key existed and was simply opened without being changed.</description>
        </listheader>
      </list> <para>If <i>lpdwDisposition</i> is <b>NULL</b>, no disposition information is returned.</para></param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteKeyValue">
    <summary>Removes the specified value from the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the registry key. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</param>
    <param name="lpValueName">The registry value to be removed from the key.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteKeyValueA">
    <summary>Removes the specified value from the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the registry key. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</param>
    <param name="lpValueName">The registry value to be removed from the key.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteKeyValueW">
    <summary>Removes the specified value from the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the registry key. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</param>
    <param name="lpValueName">The registry value to be removed from the key.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteKeyValue">
    <summary>Removes the specified value from the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the registry key. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</param>
    <param name="lpValueName">The registry value to be removed from the key.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteKeyValueA">
    <summary>Removes the specified value from the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the registry key. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</param>
    <param name="lpValueName">The registry value to be removed from the key.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteKeyValueW">
    <summary>Removes the specified value from the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the registry key. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</param>
    <param name="lpValueName">The registry value to be removed from the key.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteValue">
    <summary>Removes a named value from the specified registry key. Note that value names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpValueName">
      <para>The registry value to be removed. If this parameter is <b>NULL</b> or an empty string, the value set by the<see cref="RegSetValueEx" /> function is removed.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteValueA">
    <summary>Removes a named value from the specified registry key. Note that value names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpValueName">
      <para>The registry value to be removed. If this parameter is <b>NULL</b> or an empty string, the value set by the<see cref="RegSetValueEx" /> function is removed.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteValueW">
    <summary>Removes a named value from the specified registry key. Note that value names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpValueName">
      <para>The registry value to be removed. If this parameter is <b>NULL</b> or an empty string, the value set by the<see cref="RegSetValueEx" /> function is removed.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteValue">
    <summary>Removes a named value from the specified registry key. Note that value names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpValueName">
      <para>The registry value to be removed. If this parameter is <b>NULL</b> or an empty string, the value set by the<see cref="RegSetValue" /> function is removed.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteValueA">
    <summary>Removes a named value from the specified registry key. Note that value names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpValueName">
      <para>The registry value to be removed. If this parameter is <b>NULL</b> or an empty string, the value set by the<see cref="RegSetValue" /> function is removed.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDeleteValueW">
    <summary>Removes a named value from the specified registry key. Note that value names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpValueName">
      <para>The registry value to be removed. If this parameter is <b>NULL</b> or an empty string, the value set by the<see cref="RegSetValue" /> function is removed.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegDisablePredefinedCache">
    <summary>
      <para>Disables handle caching of the predefined registry handle for <b>HKEY_CURRENT_USER</b> for the current process. This function does not work on a remote computer.</para>
      <para>To disables handle caching of all predefined registry handles, use the <see cref="RegDisablePredefinedCacheEx" /> function.</para>
    </summary>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
    </returns>
  </member>
  <member name="Windows.RegDisablePredefinedCacheEx">
    <summary>Disables handle caching for all predefined registry handles for the current process.</summary>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
    </returns>
  </member>
  <member name="Windows.RegDisableReflectionKey">
    <summary>Disables registry reflection for the specified key. Disabling reflection for a key does not affect reflection of any subkeys.</summary>
    <param name="hBase">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function; it cannot specify a key on a remote computer.</para>
      <para>If the key is not on the reflection list, the function succeeds but has no effect. For more information, see <a href="https://docs.microsoft.com//windows/desktop/WinProg64/registry-redirector">Registry Redirector</a> and <a href="https://docs.microsoft.com//windows/desktop/WinProg64/registry-reflection">Registry Reflection</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the <see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegEnableReflectionKey">
    <summary>Restores registry reflection for the specified disabled key. Restoring reflection for a key does not affect reflection of any subkeys.</summary>
    <param name="hBase">
      <para>A handle to the registry key that was previously disabled using the <see cref="RegDisableReflectionKey" /> function. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function; it cannot specify a key on a remote computer.</para>
      <para>If the key is not on the reflection list, this function succeeds but has no effect. For more information, see <a href="https://docs.microsoft.com//windows/desktop/WinProg64/registry-redirector">Registry Redirector</a> and <a href="https://docs.microsoft.com//windows/desktop/WinProg64/registry-reflection">Registry Reflection</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the <see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegGetKeySecurity">
    <summary>The <b>RegGetKeySecurity</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> protecting the specified open registry key.</summary>
    <param name="hKey">A handle to an open key for which to retrieve the security descriptor.</param>
    <param name="SecurityInformation">A<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that indicates the requested security information.</param>
    <param name="pSecurityDescriptor">A pointer to a buffer that receives a copy of the requested security descriptor.</param>
    <param name="lpcbSecurityDescriptor">A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pSecurityDescriptor</i> parameter. When the function returns, the variable contains the number of bytes written to the buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadAppKey">
    <summary>Loads the specified registry hive as an application hive.</summary>
    <param name="lpFile">The name of the hive file. This hive must have been created with the<see cref="RegSaveKey" /> or <see cref="RegSaveKeyEx" /> function. If the file does not exist, an empty hive file is created with the specified name.</param>
    <param name="phkResult">
      <para>Pointer to the handle for the root key of the loaded hive.</para>
      <para>The only way to access keys in the hive is through this handle. The registry will prevent an application from accessing keys in this hive using an absolute path to the key. As a result, it is not possible to navigate to this hive through the registry's namespace.</para>
    </param>
    <param name="samDesired">A mask that specifies the access rights requested for the returned root key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="dwOptions">If this parameter is REG_PROCESS_APPKEY, the hive cannot be loaded again while it is loaded by the caller. This prevents access to this registry hive by another caller.</param>
    <param name="Reserved">This parameter is reserved.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadAppKeyA">
    <summary>Loads the specified registry hive as an application hive.</summary>
    <param name="lpFile">The name of the hive file. This hive must have been created with the<see cref="RegSaveKey" /> or <see cref="RegSaveKeyEx" /> function. If the file does not exist, an empty hive file is created with the specified name.</param>
    <param name="phkResult">
      <para>Pointer to the handle for the root key of the loaded hive.</para>
      <para>The only way to access keys in the hive is through this handle. The registry will prevent an application from accessing keys in this hive using an absolute path to the key. As a result, it is not possible to navigate to this hive through the registry's namespace.</para>
    </param>
    <param name="samDesired">A mask that specifies the access rights requested for the returned root key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="dwOptions">If this parameter is REG_PROCESS_APPKEY, the hive cannot be loaded again while it is loaded by the caller. This prevents access to this registry hive by another caller.</param>
    <param name="Reserved">This parameter is reserved.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadAppKeyW">
    <summary>Loads the specified registry hive as an application hive.</summary>
    <param name="lpFile">The name of the hive file. This hive must have been created with the<see cref="RegSaveKey" /> or <see cref="RegSaveKeyEx" /> function. If the file does not exist, an empty hive file is created with the specified name.</param>
    <param name="phkResult">
      <para>Pointer to the handle for the root key of the loaded hive.</para>
      <para>The only way to access keys in the hive is through this handle. The registry will prevent an application from accessing keys in this hive using an absolute path to the key. As a result, it is not possible to navigate to this hive through the registry's namespace.</para>
    </param>
    <param name="samDesired">A mask that specifies the access rights requested for the returned root key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="dwOptions">If this parameter is REG_PROCESS_APPKEY, the hive cannot be loaded again while it is loaded by the caller. This prevents access to this registry hive by another caller.</param>
    <param name="Reserved">This parameter is reserved.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadAppKey">
    <summary>Loads the specified registry hive as an application hive.</summary>
    <param name="lpFile">The name of the hive file. This hive must have been created with the<see cref="RegSaveKey" /> or <see cref="RegSaveKeyEx" /> function. If the file does not exist, an empty hive file is created with the specified name.</param>
    <param name="phkResult">
      <para>Pointer to the handle for the root key of the loaded hive.</para>
      <para>The only way to access keys in the hive is through this handle. The registry will prevent an application from accessing keys in this hive using an absolute path to the key. As a result, it is not possible to navigate to this hive through the registry's namespace.</para>
    </param>
    <param name="samDesired">A mask that specifies the access rights requested for the returned root key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="dwOptions">If this parameter is REG_PROCESS_APPKEY, the hive cannot be loaded again while it is loaded by the caller. This prevents access to this registry hive by another caller.</param>
    <param name="Reserved">This parameter is reserved.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadAppKeyA">
    <summary>Loads the specified registry hive as an application hive.</summary>
    <param name="lpFile">The name of the hive file. This hive must have been created with the<see cref="RegSaveKey" /> or <see cref="RegSaveKeyEx" /> function. If the file does not exist, an empty hive file is created with the specified name.</param>
    <param name="phkResult">
      <para>Pointer to the handle for the root key of the loaded hive.</para>
      <para>The only way to access keys in the hive is through this handle. The registry will prevent an application from accessing keys in this hive using an absolute path to the key. As a result, it is not possible to navigate to this hive through the registry's namespace.</para>
    </param>
    <param name="samDesired">A mask that specifies the access rights requested for the returned root key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="dwOptions">If this parameter is REG_PROCESS_APPKEY, the hive cannot be loaded again while it is loaded by the caller. This prevents access to this registry hive by another caller.</param>
    <param name="Reserved">This parameter is reserved.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadAppKeyW">
    <summary>Loads the specified registry hive as an application hive.</summary>
    <param name="lpFile">The name of the hive file. This hive must have been created with the<see cref="RegSaveKey" /> or <see cref="RegSaveKeyEx" /> function. If the file does not exist, an empty hive file is created with the specified name.</param>
    <param name="phkResult">
      <para>Pointer to the handle for the root key of the loaded hive.</para>
      <para>The only way to access keys in the hive is through this handle. The registry will prevent an application from accessing keys in this hive using an absolute path to the key. As a result, it is not possible to navigate to this hive through the registry's namespace.</para>
    </param>
    <param name="samDesired">A mask that specifies the access rights requested for the returned root key. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="dwOptions">If this parameter is REG_PROCESS_APPKEY, the hive cannot be loaded again while it is loaded by the caller. This prevents access to this registry hive by another caller.</param>
    <param name="Reserved">This parameter is reserved.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadKey">
    <summary>
      <para>Creates a subkey under <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> and loads the data from the specified registry hive into that subkey.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the key where the subkey will be created. This can be a handle returned by a call to<see cref="RegConnectRegistry" />, or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>This function always loads information at the top of the registry hierarchy. The <b>HKEY_CLASSES_ROOT</b> and <b>HKEY_CURRENT_USER</b> handle values cannot be specified for this parameter, because they represent subsets of the <b>HKEY_LOCAL_MACHINE</b> and <b>HKEY_USERS</b> handle values, respectively.</para>
    </param>
    <param name="lpSubKey">
      <para>The name of the key to be created under <i>hKey</i>. This subkey is where the registration information from the file will be loaded.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpFile">The name of the file containing the registry data. This file must be a local file that was created with the<see cref="RegSaveKey" /> function. If this file does not exist, a file is created with the specified name.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadKeyA">
    <summary>
      <para>Creates a subkey under <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> and loads the data from the specified registry hive into that subkey.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the key where the subkey will be created. This can be a handle returned by a call to<see cref="RegConnectRegistry" />, or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>This function always loads information at the top of the registry hierarchy. The <b>HKEY_CLASSES_ROOT</b> and <b>HKEY_CURRENT_USER</b> handle values cannot be specified for this parameter, because they represent subsets of the <b>HKEY_LOCAL_MACHINE</b> and <b>HKEY_USERS</b> handle values, respectively.</para>
    </param>
    <param name="lpSubKey">
      <para>The name of the key to be created under <i>hKey</i>. This subkey is where the registration information from the file will be loaded.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpFile">The name of the file containing the registry data. This file must be a local file that was created with the<see cref="RegSaveKey" /> function. If this file does not exist, a file is created with the specified name.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadKeyW">
    <summary>
      <para>Creates a subkey under <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> and loads the data from the specified registry hive into that subkey.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the key where the subkey will be created. This can be a handle returned by a call to<see cref="RegConnectRegistry" />, or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>This function always loads information at the top of the registry hierarchy. The <b>HKEY_CLASSES_ROOT</b> and <b>HKEY_CURRENT_USER</b> handle values cannot be specified for this parameter, because they represent subsets of the <b>HKEY_LOCAL_MACHINE</b> and <b>HKEY_USERS</b> handle values, respectively.</para>
    </param>
    <param name="lpSubKey">
      <para>The name of the key to be created under <i>hKey</i>. This subkey is where the registration information from the file will be loaded.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpFile">The name of the file containing the registry data. This file must be a local file that was created with the<see cref="RegSaveKey" /> function. If this file does not exist, a file is created with the specified name.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadKey">
    <summary>
      <para>Creates a subkey under <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> and loads the data from the specified registry hive into that subkey.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the key where the subkey will be created. This can be a handle returned by a call to<see cref="RegConnectRegistry" />, or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>This function always loads information at the top of the registry hierarchy. The <b>HKEY_CLASSES_ROOT</b> and <b>HKEY_CURRENT_USER</b> handle values cannot be specified for this parameter, because they represent subsets of the <b>HKEY_LOCAL_MACHINE</b> and <b>HKEY_USERS</b> handle values, respectively.</para>
    </param>
    <param name="lpSubKey">
      <para>The name of the key to be created under <i>hKey</i>. This subkey is where the registration information from the file will be loaded.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpFile">The name of the file containing the registry data. This file must be a local file that was created with the<see cref="RegSaveKey" /> function. If this file does not exist, a file is created with the specified name.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadKeyA">
    <summary>
      <para>Creates a subkey under <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> and loads the data from the specified registry hive into that subkey.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the key where the subkey will be created. This can be a handle returned by a call to<see cref="RegConnectRegistry" />, or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>This function always loads information at the top of the registry hierarchy. The <b>HKEY_CLASSES_ROOT</b> and <b>HKEY_CURRENT_USER</b> handle values cannot be specified for this parameter, because they represent subsets of the <b>HKEY_LOCAL_MACHINE</b> and <b>HKEY_USERS</b> handle values, respectively.</para>
    </param>
    <param name="lpSubKey">
      <para>The name of the key to be created under <i>hKey</i>. This subkey is where the registration information from the file will be loaded.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpFile">The name of the file containing the registry data. This file must be a local file that was created with the<see cref="RegSaveKey" /> function. If this file does not exist, a file is created with the specified name.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegLoadKeyW">
    <summary>
      <para>Creates a subkey under <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> and loads the data from the specified registry hive into that subkey.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the key where the subkey will be created. This can be a handle returned by a call to<see cref="RegConnectRegistry" />, or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>This function always loads information at the top of the registry hierarchy. The <b>HKEY_CLASSES_ROOT</b> and <b>HKEY_CURRENT_USER</b> handle values cannot be specified for this parameter, because they represent subsets of the <b>HKEY_LOCAL_MACHINE</b> and <b>HKEY_USERS</b> handle values, respectively.</para>
    </param>
    <param name="lpSubKey">
      <para>The name of the key to be created under <i>hKey</i>. This subkey is where the registration information from the file will be loaded.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpFile">The name of the file containing the registry data. This file must be a local file that was created with the<see cref="RegSaveKey" /> function. If this file does not exist, a file is created with the specified name.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegNotifyChangeKeyValue">
    <summary>Notifies the caller about changes to the attributes or contents of a specified registry key.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>This parameter must be a local handle. If<b>RegNotifyChangeKeyValue</b> is called with a remote handle, it returns ERROR_INVALID_HANDLE.</para>
      <para>The key must have been opened with the KEY_NOTIFY access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
    </param>
    <param name="bWatchSubtree">If this parameter is TRUE, the function reports changes in the specified key and its subkeys. If the parameter is <b>FALSE</b>, the function reports changes only in the specified key.</param>
    <param name="dwNotifyFilter">
      <para>A value that indicates the changes that should be reported. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NOTIFY_CHANGE_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Notify the caller if a subkey is added or deleted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NOTIFY_CHANGE_ATTRIBUTES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Notify the caller of changes to the attributes of the key, such as the security descriptor information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NOTIFY_CHANGE_LAST_SET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Notify the caller of changes to a value of the key. This can include adding or deleting a value, or changing an existing value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NOTIFY_CHANGE_SECURITY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>Notify the caller of changes to the security descriptor of the key.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NOTIFY_THREAD_AGNOSTIC</b>
                </term>
              </listheader>
              <listheader>
                <term>0x10000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the lifetime of the registration must not be tied to the lifetime of the thread issuing the <b>RegNotifyChangeKeyValue</b> call.<div><b>Note</b>  This flag value is only supported in Windows 8 and later.</div></description>
        </listheader>
      </list>
    </param>
    <param name="hEvent">A handle to an event. If the <i>fAsynchronous</i> parameter is <b>TRUE</b>, the function returns immediately and changes are reported by signaling this event. If <i>fAsynchronous</i> is <b>FALSE</b>, <i>hEvent</i> is ignored.</param>
    <param name="fAsynchronous">
      <para>If this parameter is <b>TRUE</b>, the function returns immediately and reports changes by signaling the specified event. If this parameter is <b>FALSE</b>, the function does not return until a change has occurred.</para>
      <para>If <i>hEvent</i> does not specify a valid event, the <i>fAsynchronous</i> parameter cannot be <b>TRUE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenCurrentUser">
    <summary>Retrieves a handle to the <b>HKEY_CURRENT_USER</b> key for the user the current thread is impersonating.</summary>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. When you no longer need the returned handle, call the<see cref="RegCloseKey" /> function to close it.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKey">
    <summary>
      <para>Opens the specified registry key.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="RegOpenKeyEx" /> function.</div>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key to be opened. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</para>
      <para>Key names are not case sensitive.</para>
      <para>If this parameter is <b>NULL</b> or a pointer to an empty string, the function returns the same handle that was passed in.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyA">
    <summary>
      <para>Opens the specified registry key.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="RegOpenKeyEx" /> function.</div>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key to be opened. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</para>
      <para>Key names are not case sensitive.</para>
      <para>If this parameter is <b>NULL</b> or a pointer to an empty string, the function returns the same handle that was passed in.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyW">
    <summary>
      <para>Opens the specified registry key.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="RegOpenKeyEx" /> function.</div>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key to be opened. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</para>
      <para>Key names are not case sensitive.</para>
      <para>If this parameter is <b>NULL</b> or a pointer to an empty string, the function returns the same handle that was passed in.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyEx">
    <summary>
      <para>Opens the specified registry key. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegOpenKeyTransacted" /> function.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<b>RegOpenKeyEx</b> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">
      <para>Specifies the option to apply when opening the key. Set this parameter to zero or the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_OPEN_LINK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <blockquote>[!NOTE] On legacy versions of Windows, this API is also exposed by kernel32.dll.</blockquote>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyExA">
    <summary>
      <para>Opens the specified registry key. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegOpenKeyTransacted" /> function.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<b>RegOpenKeyEx</b> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">
      <para>Specifies the option to apply when opening the key. Set this parameter to zero or the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_OPEN_LINK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <blockquote>[!NOTE] On legacy versions of Windows, this API is also exposed by kernel32.dll.</blockquote>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyExW">
    <summary>
      <para>Opens the specified registry key. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegOpenKeyTransacted" /> function.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<b>RegOpenKeyEx</b> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">
      <para>Specifies the option to apply when opening the key. Set this parameter to zero or the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_OPEN_LINK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <blockquote>[!NOTE] On legacy versions of Windows, this API is also exposed by kernel32.dll.</blockquote>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyEx">
    <summary>
      <para>Opens the specified registry key. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegOpenKeyTransacted" /> function.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<b>RegOpenKeyEx</b> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">
      <para>Specifies the option to apply when opening the key. Set this parameter to zero or the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_OPEN_LINK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyExA">
    <summary>
      <para>Opens the specified registry key. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegOpenKeyTransacted" /> function.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<b>RegOpenKeyEx</b> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">
      <para>Specifies the option to apply when opening the key. Set this parameter to zero or the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_OPEN_LINK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyExW">
    <summary>
      <para>Opens the specified registry key. Note that key names are not case sensitive.</para>
      <para>To perform transacted registry operations on a key, call the <see cref="RegOpenKeyTransacted" /> function.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<b>RegOpenKeyEx</b> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">
      <para>Specifies the option to apply when opening the key. Set this parameter to zero or the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_OPTION_OPEN_LINK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</description>
        </listheader>
      </list>
    </param>
    <param name="samDesired">A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyTransacted">
    <summary>Opens the specified registry key and associates it with a transaction. Note that key names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<b>RegOpenKeyTransacted</b> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">This parameter is reserved and must be zero.</param>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyTransactedA">
    <summary>Opens the specified registry key and associates it with a transaction. Note that key names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<b>RegOpenKeyTransacted</b> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">This parameter is reserved and must be zero.</param>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyTransactedW">
    <summary>Opens the specified registry key and associates it with a transaction. Note that key names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<b>RegOpenKeyTransacted</b> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">This parameter is reserved and must be zero.</param>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyTransacted">
    <summary>Opens the specified registry key and associates it with a transaction. Note that key names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<b>RegOpenKeyTransacted</b> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">This parameter is reserved and must be zero.</param>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyTransactedA">
    <summary>Opens the specified registry key and associates it with a transaction. Note that key names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<b>RegOpenKeyTransacted</b> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">This parameter is reserved and must be zero.</param>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyTransactedW">
    <summary>Opens the specified registry key and associates it with a transaction. Note that key names are not case sensitive.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<b>RegOpenKeyTransacted</b> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry subkey to be opened.</para>
      <para>Key names are not case sensitive.</para>
      <para>If the <i>lpSubKey</i> parameter is <b>NULL</b> or a pointer to an empty string, and if <i>hKey</i> is a predefined key, then the system refreshes the predefined key, and <i>phkResult</i> receives the same <i>hKey</i> handle passed into the function. Otherwise, <i>phkResult</i> receives a new handle to the opened key.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="ulOptions">This parameter is reserved and must be zero.</param>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <param name="hTransaction">A handle to an active transaction. This handle is returned by the <see cref="CreateTransaction" /> function.</param>
    <param name="pExtendedParemeter">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKey">
    <summary>
      <para>Opens the specified registry key.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="RegOpenKeyEx" /> function.</div>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key to be opened. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</para>
      <para>Key names are not case sensitive.</para>
      <para>If this parameter is <b>NULL</b> or a pointer to an empty string, the function returns the same handle that was passed in.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyA">
    <summary>
      <para>Opens the specified registry key.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="RegOpenKeyEx" /> function.</div>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key to be opened. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</para>
      <para>Key names are not case sensitive.</para>
      <para>If this parameter is <b>NULL</b> or a pointer to an empty string, the function returns the same handle that was passed in.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenKeyW">
    <summary>
      <para>Opens the specified registry key.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="RegOpenKeyEx" /> function.</div>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key to be opened. This key must be a subkey of the key identified by the <i>hKey</i> parameter.</para>
      <para>Key names are not case sensitive.</para>
      <para>If this parameter is <b>NULL</b> or a pointer to an empty string, the function returns the same handle that was passed in.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the<see cref="RegCloseKey" /> function after you have finished using the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOpenUserClassesRoot">
    <summary>Retrieves a handle to the <b>HKEY_CLASSES_ROOT</b> key for a specified user. The user is identified by an access token. The returned key has a view of the registry that merges the contents of the <b>HKEY_LOCAL_MACHINE</b>\Software\Classes key with the contents of the Software\Classes keys in the user's registry hive. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/hkey-classes-root-key">HKEY_CLASSES_ROOT Key</a>.</summary>
    <param name="hToken">
      <para>A handle to a primary or impersonation access token that identifies the user of interest. This can be a token handle returned by a call to<see cref="LogonUser" />,<see cref="CreateRestrictedToken" />,<see cref="DuplicateToken" />,<see cref="DuplicateTokenEx" />,<see cref="OpenProcessToken" />, or<see cref="OpenThreadToken" /> functions.</para>
      <para>The handle must have TOKEN_QUERY access. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-rights-for-access-token-objects">Access Rights for Access-Token Objects</a>.</para>
    </param>
    <param name="dwOptions">This parameter is reserved and must be zero.</param>
    <param name="samDesired">A mask that specifies the desired access rights to the key. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</param>
    <param name="phkResult">A pointer to a variable that receives a handle to the opened key. When you no longer need the returned handle, call the<see cref="RegCloseKey" /> function to close it.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegOverridePredefKey">
    <summary>Maps a predefined registry key to the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_CONFIG</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_LOCAL_MACHINE</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_PERFORMANCE_DATA</b>
          </description>
        </item>
        <item>
          <description>
            <b>HKEY_USERS</b>
          </description>
        </item>
      </list>
    </param>
    <param name="hNewHKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It cannot be one of the predefined keys. The function maps <i>hKey</i> to refer to the <i>hNewHKey</i> key. This affects only the calling process.</para>
      <para>If <i>hNewHKey</i> is <b>NULL</b>, the function restores the default mapping of the predefined key.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegQueryInfoKey">
    <summary>Retrieves information about the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:<code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_PERFORMANCE_DATA</b>   <b>HKEY_USERS</b></code></para>
    </param>
    <param name="lpClass">A pointer to a buffer that receives the user-defined class of the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcchClass">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>lpClass</i> parameter, in characters.</para>
      <para>The size should include the terminating <b>null</b> character. When the function returns, this variable contains the size of the class string that is stored in the buffer. The count returned does not include the terminating <b>null</b> character. If the buffer is not big enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string, in characters, without counting the terminating <b>null</b> character.</para>
      <para>If <i>lpClass</i> is <b>NULL</b>, <i>lpcClass</i> can be <b>NULL</b>.</para>
      <para>If the <i>lpClass</i> parameter is a valid address, but the <i>lpcClass</i> parameter is not, for example, it is <b>NULL</b>, then the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="lpReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="lpcSubKeys">A pointer to a variable that receives the number of subkeys that are contained by the specified key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxSubKeyLen">A pointer to a variable that receives the size of the key's subkey with the longest name, in ANSI characters, not including the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxClassLen">A pointer to a variable that receives the size of the longest string that specifies a subkey class, in ANSI characters. The count returned does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcValues">A pointer to a variable that receives the number of values that are associated with the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueNameLen">A pointer to a variable that receives the size of the key's longest value name, in ANSI characters. The size does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueLen">A pointer to a variable that receives the size of the longest data component among the key's values, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbSecurityDescriptor">A pointer to a variable that receives the size of the key's security descriptor, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpftLastWriteTime">
      <para>A pointer to a<see cref="FILETIME" /> structure that receives the last write time. This parameter can be <b>NULL</b>.</para>
      <para>The function sets the members of the<see cref="FILETIME" /> structure to indicate the last time that the key or any of its value entries is modified.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
      <para>If the <i>lpClass</i> buffer is too small to receive the name of the class, the function returns ERROR_MORE_DATA.</para>
    </returns>
  </member>
  <member name="Windows.RegQueryInfoKeyA">
    <summary>Retrieves information about the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:<code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_PERFORMANCE_DATA</b>   <b>HKEY_USERS</b></code></para>
    </param>
    <param name="lpClass">A pointer to a buffer that receives the user-defined class of the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcchClass">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>lpClass</i> parameter, in characters.</para>
      <para>The size should include the terminating <b>null</b> character. When the function returns, this variable contains the size of the class string that is stored in the buffer. The count returned does not include the terminating <b>null</b> character. If the buffer is not big enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string, in characters, without counting the terminating <b>null</b> character.</para>
      <para>If <i>lpClass</i> is <b>NULL</b>, <i>lpcClass</i> can be <b>NULL</b>.</para>
      <para>If the <i>lpClass</i> parameter is a valid address, but the <i>lpcClass</i> parameter is not, for example, it is <b>NULL</b>, then the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="lpReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="lpcSubKeys">A pointer to a variable that receives the number of subkeys that are contained by the specified key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxSubKeyLen">A pointer to a variable that receives the size of the key's subkey with the longest name, in ANSI characters, not including the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxClassLen">A pointer to a variable that receives the size of the longest string that specifies a subkey class, in ANSI characters. The count returned does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcValues">A pointer to a variable that receives the number of values that are associated with the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueNameLen">A pointer to a variable that receives the size of the key's longest value name, in ANSI characters. The size does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueLen">A pointer to a variable that receives the size of the longest data component among the key's values, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbSecurityDescriptor">A pointer to a variable that receives the size of the key's security descriptor, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpftLastWriteTime">
      <para>A pointer to a<see cref="FILETIME" /> structure that receives the last write time. This parameter can be <b>NULL</b>.</para>
      <para>The function sets the members of the<see cref="FILETIME" /> structure to indicate the last time that the key or any of its value entries is modified.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
      <para>If the <i>lpClass</i> buffer is too small to receive the name of the class, the function returns ERROR_MORE_DATA.</para>
    </returns>
  </member>
  <member name="Windows.RegQueryInfoKeyW">
    <summary>Retrieves information about the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:<code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_PERFORMANCE_DATA</b>   <b>HKEY_USERS</b></code></para>
    </param>
    <param name="lpClass">A pointer to a buffer that receives the user-defined class of the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcchClass">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>lpClass</i> parameter, in characters.</para>
      <para>The size should include the terminating <b>null</b> character. When the function returns, this variable contains the size of the class string that is stored in the buffer. The count returned does not include the terminating <b>null</b> character. If the buffer is not big enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string, in characters, without counting the terminating <b>null</b> character.</para>
      <para>If <i>lpClass</i> is <b>NULL</b>, <i>lpcClass</i> can be <b>NULL</b>.</para>
      <para>If the <i>lpClass</i> parameter is a valid address, but the <i>lpcClass</i> parameter is not, for example, it is <b>NULL</b>, then the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="lpReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="lpcSubKeys">A pointer to a variable that receives the number of subkeys that are contained by the specified key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxSubKeyLen">A pointer to a variable that receives the size of the key's subkey with the longest name, in ANSI characters, not including the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxClassLen">A pointer to a variable that receives the size of the longest string that specifies a subkey class, in ANSI characters. The count returned does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcValues">A pointer to a variable that receives the number of values that are associated with the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueNameLen">A pointer to a variable that receives the size of the key's longest value name, in ANSI characters. The size does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueLen">A pointer to a variable that receives the size of the longest data component among the key's values, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbSecurityDescriptor">A pointer to a variable that receives the size of the key's security descriptor, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpftLastWriteTime">
      <para>A pointer to a<see cref="FILETIME" /> structure that receives the last write time. This parameter can be <b>NULL</b>.</para>
      <para>The function sets the members of the<see cref="FILETIME" /> structure to indicate the last time that the key or any of its value entries is modified.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
      <para>If the <i>lpClass</i> buffer is too small to receive the name of the class, the function returns ERROR_MORE_DATA.</para>
    </returns>
  </member>
  <member name="Windows.RegQueryInfoKey">
    <summary>Retrieves information about the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:<code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_PERFORMANCE_DATA</b>   <b>HKEY_USERS</b></code></para>
    </param>
    <param name="lpClass">A pointer to a buffer that receives the user-defined class of the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcchClass">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>lpClass</i> parameter, in characters.</para>
      <para>The size should include the terminating <b>null</b> character. When the function returns, this variable contains the size of the class string that is stored in the buffer. The count returned does not include the terminating <b>null</b> character. If the buffer is not big enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string, in characters, without counting the terminating <b>null</b> character.</para>
      <para>If <i>lpClass</i> is <b>NULL</b>, <i>lpcClass</i> can be <b>NULL</b>.</para>
      <para>If the <i>lpClass</i> parameter is a valid address, but the <i>lpcClass</i> parameter is not, for example, it is <b>NULL</b>, then the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="lpReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="lpcSubKeys">A pointer to a variable that receives the number of subkeys that are contained by the specified key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxSubKeyLen">A pointer to a variable that receives the size of the key's subkey with the longest name, in Unicode characters, not including the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxClassLen">A pointer to a variable that receives the size of the longest string that specifies a subkey class, in Unicode characters. The count returned does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcValues">A pointer to a variable that receives the number of values that are associated with the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueNameLen">A pointer to a variable that receives the size of the key's longest value name, in Unicode characters. The size does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueLen">A pointer to a variable that receives the size of the longest data component among the key's values, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbSecurityDescriptor">A pointer to a variable that receives the size of the key's security descriptor, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpftLastWriteTime">
      <para>A pointer to a<see cref="FILETIME" /> structure that receives the last write time. This parameter can be <b>NULL</b>.</para>
      <para>The function sets the members of the<see cref="FILETIME" /> structure to indicate the last time that the key or any of its value entries is modified.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
      <para>If the <i>lpClass</i> buffer is too small to receive the name of the class, the function returns ERROR_MORE_DATA.</para>
    </returns>
  </member>
  <member name="Windows.RegQueryInfoKeyA">
    <summary>Retrieves information about the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:<code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_PERFORMANCE_DATA</b>   <b>HKEY_USERS</b></code></para>
    </param>
    <param name="lpClass">A pointer to a buffer that receives the user-defined class of the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcchClass">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>lpClass</i> parameter, in characters.</para>
      <para>The size should include the terminating <b>null</b> character. When the function returns, this variable contains the size of the class string that is stored in the buffer. The count returned does not include the terminating <b>null</b> character. If the buffer is not big enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string, in characters, without counting the terminating <b>null</b> character.</para>
      <para>If <i>lpClass</i> is <b>NULL</b>, <i>lpcClass</i> can be <b>NULL</b>.</para>
      <para>If the <i>lpClass</i> parameter is a valid address, but the <i>lpcClass</i> parameter is not, for example, it is <b>NULL</b>, then the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="lpReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="lpcSubKeys">A pointer to a variable that receives the number of subkeys that are contained by the specified key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxSubKeyLen">A pointer to a variable that receives the size of the key's subkey with the longest name, in Unicode characters, not including the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxClassLen">A pointer to a variable that receives the size of the longest string that specifies a subkey class, in Unicode characters. The count returned does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcValues">A pointer to a variable that receives the number of values that are associated with the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueNameLen">A pointer to a variable that receives the size of the key's longest value name, in Unicode characters. The size does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueLen">A pointer to a variable that receives the size of the longest data component among the key's values, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbSecurityDescriptor">A pointer to a variable that receives the size of the key's security descriptor, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpftLastWriteTime">
      <para>A pointer to a<see cref="FILETIME" /> structure that receives the last write time. This parameter can be <b>NULL</b>.</para>
      <para>The function sets the members of the<see cref="FILETIME" /> structure to indicate the last time that the key or any of its value entries is modified.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
      <para>If the <i>lpClass</i> buffer is too small to receive the name of the class, the function returns ERROR_MORE_DATA.</para>
    </returns>
  </member>
  <member name="Windows.RegQueryInfoKeyW">
    <summary>Retrieves information about the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:<code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_PERFORMANCE_DATA</b>   <b>HKEY_USERS</b></code></para>
    </param>
    <param name="lpClass">A pointer to a buffer that receives the user-defined class of the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcchClass">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>lpClass</i> parameter, in characters.</para>
      <para>The size should include the terminating <b>null</b> character. When the function returns, this variable contains the size of the class string that is stored in the buffer. The count returned does not include the terminating <b>null</b> character. If the buffer is not big enough, the function returns ERROR_MORE_DATA, and the variable contains the size of the string, in characters, without counting the terminating <b>null</b> character.</para>
      <para>If <i>lpClass</i> is <b>NULL</b>, <i>lpcClass</i> can be <b>NULL</b>.</para>
      <para>If the <i>lpClass</i> parameter is a valid address, but the <i>lpcClass</i> parameter is not, for example, it is <b>NULL</b>, then the function returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="lpReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="lpcSubKeys">A pointer to a variable that receives the number of subkeys that are contained by the specified key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxSubKeyLen">A pointer to a variable that receives the size of the key's subkey with the longest name, in Unicode characters, not including the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxClassLen">A pointer to a variable that receives the size of the longest string that specifies a subkey class, in Unicode characters. The count returned does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcValues">A pointer to a variable that receives the number of values that are associated with the key. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueNameLen">A pointer to a variable that receives the size of the key's longest value name, in Unicode characters. The size does not include the terminating <b>null</b> character. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbMaxValueLen">A pointer to a variable that receives the size of the longest data component among the key's values, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpcbSecurityDescriptor">A pointer to a variable that receives the size of the key's security descriptor, in bytes. This parameter can be <b>NULL</b>.</param>
    <param name="lpftLastWriteTime">
      <para>A pointer to a<see cref="FILETIME" /> structure that receives the last write time. This parameter can be <b>NULL</b>.</para>
      <para>The function sets the members of the<see cref="FILETIME" /> structure to indicate the last time that the key or any of its value entries is modified.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">system error code</a>.</para>
      <para>If the <i>lpClass</i> buffer is too small to receive the name of the class, the function returns ERROR_MORE_DATA.</para>
    </returns>
  </member>
  <member name="Windows.RegQueryReflectionKey">
    <summary>Determines whether reflection has been disabled or enabled for the specified key.</summary>
    <param name="hBase">A handle to the registry key. This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function; it cannot specify a key on a remote computer.</param>
    <param name="bIsReflectionDisabled">A value that indicates whether reflection has been disabled through <see cref="RegDisableReflectionKey" /> or enabled through <see cref="RegEnableReflectionKey" />.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegRenameKey">
    <summary>Changes the name of the specified registry key.</summary>
    <param name="hKey">
      <para>A handle to the key to be renamed. The handle must be opened with the KEY_WRITE access right. For more information, see <a href="https://docs.microsoft.com//windows/win32/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the <see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function, or it can be one of the following <a href="https://docs.microsoft.com//windows/win32/SysInfo/predefined-keys">Predefined Keys</a>:</para>
      <list type="bullet">
        <item>
          <description>HKEY_CLASSES_ROOT</description>
        </item>
        <item>
          <description>HKEY_CURRENT_CONFIG</description>
        </item>
        <item>
          <description>HKEY_CURRENT_USER</description>
        </item>
        <item>
          <description>HKEY_LOCAL_MACHINE</description>
        </item>
        <item>
          <description>HKEY_USERS</description>
        </item>
      </list>
    </param>
    <param name="lpSubKeyName">The name of the subkey to be renamed. This key must be a subkey of the key identified by the <i>hKey</i> parameter. This parameter can also be <b>NULL</b>, in which case the key identified by the <i>hKey</i> parameter will be renamed.</param>
    <param name="lpNewKeyName">The new name of the key. The new name must not already exist.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the <see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error. An error code of STATUS_ACCESS_DENIED indicates that the caller does not have the necessary access rights to the specified registry key or subkeys.</para>
    </returns>
  </member>
  <member name="Windows.RegReplaceKey">
    <summary>
      <para>Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key whose subkeys and values are to be replaced. If the key exists, it must be a subkey of the key identified by the <i>hKey</i> parameter. If the subkey does not exist, it is created. This parameter can be <b>NULL</b>.</para>
      <para>If the specified subkey is not the root of a hive,<b>RegReplaceKey</b> traverses up the hive tree structure until it encounters a hive root, then it replaces the contents of that hive with the contents of the data file specified by <i>lpNewFile</i>.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpNewFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="lpOldFile">The name of the file that receives a backup copy of the registry information being replaced.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegReplaceKeyA">
    <summary>
      <para>Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key whose subkeys and values are to be replaced. If the key exists, it must be a subkey of the key identified by the <i>hKey</i> parameter. If the subkey does not exist, it is created. This parameter can be <b>NULL</b>.</para>
      <para>If the specified subkey is not the root of a hive,<b>RegReplaceKey</b> traverses up the hive tree structure until it encounters a hive root, then it replaces the contents of that hive with the contents of the data file specified by <i>lpNewFile</i>.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpNewFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="lpOldFile">The name of the file that receives a backup copy of the registry information being replaced.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegReplaceKeyW">
    <summary>
      <para>Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key whose subkeys and values are to be replaced. If the key exists, it must be a subkey of the key identified by the <i>hKey</i> parameter. If the subkey does not exist, it is created. This parameter can be <b>NULL</b>.</para>
      <para>If the specified subkey is not the root of a hive,<b>RegReplaceKey</b> traverses up the hive tree structure until it encounters a hive root, then it replaces the contents of that hive with the contents of the data file specified by <i>lpNewFile</i>.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpNewFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="lpOldFile">The name of the file that receives a backup copy of the registry information being replaced.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegReplaceKey">
    <summary>
      <para>Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key whose subkeys and values are to be replaced. If the key exists, it must be a subkey of the key identified by the <i>hKey</i> parameter. If the subkey does not exist, it is created. This parameter can be <b>NULL</b>.</para>
      <para>If the specified subkey is not the root of a hive,<b>RegReplaceKey</b> traverses up the hive tree structure until it encounters a hive root, then it replaces the contents of that hive with the contents of the data file specified by <i>lpNewFile</i>.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpNewFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="lpOldFile">The name of the file that receives a backup copy of the registry information being replaced.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegReplaceKeyA">
    <summary>
      <para>Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key whose subkeys and values are to be replaced. If the key exists, it must be a subkey of the key identified by the <i>hKey</i> parameter. If the subkey does not exist, it is created. This parameter can be <b>NULL</b>.</para>
      <para>If the specified subkey is not the root of a hive,<b>RegReplaceKey</b> traverses up the hive tree structure until it encounters a hive root, then it replaces the contents of that hive with the contents of the data file specified by <i>lpNewFile</i>.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpNewFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="lpOldFile">The name of the file that receives a backup copy of the registry information being replaced.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegReplaceKeyW">
    <summary>
      <para>Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the registry key whose subkeys and values are to be replaced. If the key exists, it must be a subkey of the key identified by the <i>hKey</i> parameter. If the subkey does not exist, it is created. This parameter can be <b>NULL</b>.</para>
      <para>If the specified subkey is not the root of a hive,<b>RegReplaceKey</b> traverses up the hive tree structure until it encounters a hive root, then it replaces the contents of that hive with the contents of the data file specified by <i>lpNewFile</i>.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <param name="lpNewFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="lpOldFile">The name of the file that receives a backup copy of the registry information being replaced.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegRestoreKey">
    <summary>
      <para>Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>Any information contained in this key and its descendent keys is overwritten by the information in the file pointed to by the <i>lpFile</i> parameter.</para>
    </param>
    <param name="lpFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="dwFlags">
      <para>The flags that indicate how the key or keys are to be restored. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_FORCE_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the restore operation is executed even if open handles exist at or beneath the location in the registry hierarchy to which the <i>hKey</i> parameter points.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_WHOLE_HIVE_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, a new, volatile (memory only) set of registry information, or hive, is created. If REG_WHOLE_HIVE_VOLATILE is specified, the key identified by the <i>hKey</i> parameter must be either the <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> value.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegRestoreKeyA">
    <summary>
      <para>Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>Any information contained in this key and its descendent keys is overwritten by the information in the file pointed to by the <i>lpFile</i> parameter.</para>
    </param>
    <param name="lpFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="dwFlags">
      <para>The flags that indicate how the key or keys are to be restored. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_FORCE_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the restore operation is executed even if open handles exist at or beneath the location in the registry hierarchy to which the <i>hKey</i> parameter points.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_WHOLE_HIVE_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, a new, volatile (memory only) set of registry information, or hive, is created. If REG_WHOLE_HIVE_VOLATILE is specified, the key identified by the <i>hKey</i> parameter must be either the <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> value.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegRestoreKeyW">
    <summary>
      <para>Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>Any information contained in this key and its descendent keys is overwritten by the information in the file pointed to by the <i>lpFile</i> parameter.</para>
    </param>
    <param name="lpFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="dwFlags">
      <para>The flags that indicate how the key or keys are to be restored. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_FORCE_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the restore operation is executed even if open handles exist at or beneath the location in the registry hierarchy to which the <i>hKey</i> parameter points.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_WHOLE_HIVE_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, a new, volatile (memory only) set of registry information, or hive, is created. If REG_WHOLE_HIVE_VOLATILE is specified, the key identified by the <i>hKey</i> parameter must be either the <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> value.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegRestoreKey">
    <summary>
      <para>Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>Any information contained in this key and its descendent keys is overwritten by the information in the file pointed to by the <i>lpFile</i> parameter.</para>
    </param>
    <param name="lpFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="dwFlags">
      <para>The flags that indicate how the key or keys are to be restored. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_FORCE_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the restore operation is executed even if open handles exist at or beneath the location in the registry hierarchy to which the <i>hKey</i> parameter points.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_WHOLE_HIVE_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, a new, volatile (memory only) set of registry information, or hive, is created. If REG_WHOLE_HIVE_VOLATILE is specified, the key identified by the <i>hKey</i> parameter must be either the <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> value.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegRestoreKeyA">
    <summary>
      <para>Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>Any information contained in this key and its descendent keys is overwritten by the information in the file pointed to by the <i>lpFile</i> parameter.</para>
    </param>
    <param name="lpFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="dwFlags">
      <para>The flags that indicate how the key or keys are to be restored. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_FORCE_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the restore operation is executed even if open handles exist at or beneath the location in the registry hierarchy to which the <i>hKey</i> parameter points.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_WHOLE_HIVE_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, a new, volatile (memory only) set of registry information, or hive, is created. If REG_WHOLE_HIVE_VOLATILE is specified, the key identified by the <i>hKey</i> parameter must be either the <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> value.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegRestoreKeyW">
    <summary>
      <para>Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key. This handle is returned by the<see cref="RegCreateKeyEx" /> or <see cref="RegOpenKeyEx" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <para>
        <b>HKEY_CLASSES_ROOT</b>
        <b>HKEY_CURRENT_CONFIG</b>
        <b>HKEY_CURRENT_USER</b>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>Any information contained in this key and its descendent keys is overwritten by the information in the file pointed to by the <i>lpFile</i> parameter.</para>
    </param>
    <param name="lpFile">The name of the file with the registry information. This file is typically created by using the<see cref="RegSaveKey" /> function.</param>
    <param name="dwFlags">
      <para>The flags that indicate how the key or keys are to be restored. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_FORCE_RESTORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the restore operation is executed even if open handles exist at or beneath the location in the registry hierarchy to which the <i>hKey</i> parameter points.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_WHOLE_HIVE_VOLATILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>If specified, a new, volatile (memory only) set of registry information, or hive, is created. If REG_WHOLE_HIVE_VOLATILE is specified, the key identified by the <i>hKey</i> parameter must be either the <b>HKEY_USERS</b> or <b>HKEY_LOCAL_MACHINE</b> value.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKey">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a new file, in the standard format.</para>
      <para>To specify the format for the saved key or hive, use the <see cref="RegSaveKeyEx" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key. The new file has the archive attribute.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If the file already exists, the function fails with the ERROR_ALREADY_EXISTS error.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyA">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a new file, in the standard format.</para>
      <para>To specify the format for the saved key or hive, use the <see cref="RegSaveKeyEx" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key. The new file has the archive attribute.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If the file already exists, the function fails with the ERROR_ALREADY_EXISTS error.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyW">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a new file, in the standard format.</para>
      <para>To specify the format for the saved key or hive, use the <see cref="RegSaveKeyEx" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key. The new file has the archive attribute.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If the file already exists, the function fails with the ERROR_ALREADY_EXISTS error.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyEx">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a registry file, in the specified format.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This function does not support the <b>HKEY_CLASSES_ROOT</b> predefined key.</para>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>The new file has the archive attribute.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <param name="Flags">
      <para>The format of the saved key or hive. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_STANDARD_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in standard format. The standard format is the only format supported by Windows 2000.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_LATEST_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in the latest format. The latest format is supported starting with Windows XP. After the key or hive is saved in this format, it cannot be loaded on an earlier system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NO_COMPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The hive is saved with no compression, for faster save operations. The <i>hKey</i> parameter must specify the root of a hive under <b>HKEY_LOCAL_MACHINE</b> or <b>HKEY_USERS</b>. For example, <b>HKLM\SOFTWARE</b> is the root of a hive.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If more than one of the possible values listed above for the <i>Flags</i> parameter is specified in one call to this function—for example, if two or more values are OR'ed— or if REG_NO_COMPRESSION is specified and <i>hKey</i> specifies a key that is not the root of a hive, this function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyExA">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a registry file, in the specified format.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This function does not support the <b>HKEY_CLASSES_ROOT</b> predefined key.</para>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>The new file has the archive attribute.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <param name="Flags">
      <para>The format of the saved key or hive. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_STANDARD_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in standard format. The standard format is the only format supported by Windows 2000.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_LATEST_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in the latest format. The latest format is supported starting with Windows XP. After the key or hive is saved in this format, it cannot be loaded on an earlier system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NO_COMPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The hive is saved with no compression, for faster save operations. The <i>hKey</i> parameter must specify the root of a hive under <b>HKEY_LOCAL_MACHINE</b> or <b>HKEY_USERS</b>. For example, <b>HKLM\SOFTWARE</b> is the root of a hive.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If more than one of the possible values listed above for the <i>Flags</i> parameter is specified in one call to this function—for example, if two or more values are OR'ed— or if REG_NO_COMPRESSION is specified and <i>hKey</i> specifies a key that is not the root of a hive, this function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyExW">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a registry file, in the specified format.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This function does not support the <b>HKEY_CLASSES_ROOT</b> predefined key.</para>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>The new file has the archive attribute.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <param name="Flags">
      <para>The format of the saved key or hive. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_STANDARD_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in standard format. The standard format is the only format supported by Windows 2000.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_LATEST_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in the latest format. The latest format is supported starting with Windows XP. After the key or hive is saved in this format, it cannot be loaded on an earlier system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NO_COMPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The hive is saved with no compression, for faster save operations. The <i>hKey</i> parameter must specify the root of a hive under <b>HKEY_LOCAL_MACHINE</b> or <b>HKEY_USERS</b>. For example, <b>HKLM\SOFTWARE</b> is the root of a hive.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If more than one of the possible values listed above for the <i>Flags</i> parameter is specified in one call to this function—for example, if two or more values are OR'ed— or if REG_NO_COMPRESSION is specified and <i>hKey</i> specifies a key that is not the root of a hive, this function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyEx">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a registry file, in the specified format.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This function does not support the <b>HKEY_CLASSES_ROOT</b> predefined key.</para>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>The new file has the archive attribute.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <param name="Flags">
      <para>The format of the saved key or hive. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_STANDARD_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in standard format. The standard format is the only format supported by Windows 2000.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_LATEST_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in the latest format. The latest format is supported starting with Windows XP. After the key or hive is saved in this format, it cannot be loaded on an earlier system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NO_COMPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The hive is saved with no compression, for faster save operations. The <i>hKey</i> parameter must specify the root of a hive under <b>HKEY_LOCAL_MACHINE</b> or <b>HKEY_USERS</b>. For example, <b>HKLM\SOFTWARE</b> is the root of a hive.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If more than one of the possible values listed above for the <i>Flags</i> parameter is specified in one call to this function—for example, if two or more values are OR'ed— or if REG_NO_COMPRESSION is specified and <i>hKey</i> specifies a key that is not the root of a hive, this function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyExA">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a registry file, in the specified format.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This function does not support the <b>HKEY_CLASSES_ROOT</b> predefined key.</para>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>The new file has the archive attribute.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <param name="Flags">
      <para>The format of the saved key or hive. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_STANDARD_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in standard format. The standard format is the only format supported by Windows 2000.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_LATEST_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in the latest format. The latest format is supported starting with Windows XP. After the key or hive is saved in this format, it cannot be loaded on an earlier system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NO_COMPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The hive is saved with no compression, for faster save operations. The <i>hKey</i> parameter must specify the root of a hive under <b>HKEY_LOCAL_MACHINE</b> or <b>HKEY_USERS</b>. For example, <b>HKLM\SOFTWARE</b> is the root of a hive.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If more than one of the possible values listed above for the <i>Flags</i> parameter is specified in one call to this function—for example, if two or more values are OR'ed— or if REG_NO_COMPRESSION is specified and <i>hKey</i> specifies a key that is not the root of a hive, this function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyExW">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a registry file, in the specified format.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This function does not support the <b>HKEY_CLASSES_ROOT</b> predefined key.</para>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>The new file has the archive attribute.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <param name="Flags">
      <para>The format of the saved key or hive. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_STANDARD_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in standard format. The standard format is the only format supported by Windows 2000.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_LATEST_FORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The key or hive is saved in the latest format. The latest format is supported starting with Windows XP. After the key or hive is saved in this format, it cannot be loaded on an earlier system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REG_NO_COMPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The hive is saved with no compression, for faster save operations. The <i>hKey</i> parameter must specify the root of a hive under <b>HKEY_LOCAL_MACHINE</b> or <b>HKEY_USERS</b>. For example, <b>HKLM\SOFTWARE</b> is the root of a hive.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If more than one of the possible values listed above for the <i>Flags</i> parameter is specified in one call to this function—for example, if two or more values are OR'ed— or if REG_NO_COMPRESSION is specified and <i>hKey</i> specifies a key that is not the root of a hive, this function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKey">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a new file, in the standard format.</para>
      <para>To specify the format for the saved key or hive, use the <see cref="RegSaveKeyEx" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key. The new file has the archive attribute.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If the file already exists, the function fails with the ERROR_ALREADY_EXISTS error.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyA">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a new file, in the standard format.</para>
      <para>To specify the format for the saved key or hive, use the <see cref="RegSaveKeyEx" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key. The new file has the archive attribute.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If the file already exists, the function fails with the ERROR_ALREADY_EXISTS error.</para>
    </returns>
  </member>
  <member name="Windows.RegSaveKeyW">
    <summary>
      <para>Saves the specified key and all of its subkeys and values to a new file, in the standard format.</para>
      <para>To specify the format for the saved key or hive, use the <see cref="RegSaveKeyEx" /> function.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to an open registry key.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" /> or<see cref="RegOpenKeyEx" /> function, or it can be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <list type="table">
        <listheader>
          <description>
            <b>HKEY_CLASSES_ROOT</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <b>HKEY_CURRENT_USER</b>
          </description>
        </listheader>
      </list>
    </param>
    <param name="lpFile">
      <para>The name of the file in which the specified key and subkeys are to be saved. If the file already exists, the function fails.</para>
      <para>If the string does not include a path, the file is created in the current directory of the calling process for a local key, or in the %systemroot%\system32 directory for a remote key. The new file has the archive attribute.</para>
    </param>
    <param name="lpSecurityAttributes">A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a security descriptor for the new file. If <i>lpSecurityAttributes</i> is <b>NULL</b>, the file gets a default security descriptor. The ACLs in a default security descriptor for a file are inherited from its parent directory.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
      <para>If the file already exists, the function fails with the ERROR_ALREADY_EXISTS error.</para>
    </returns>
  </member>
  <member name="Windows.RegSetKeySecurity">
    <summary>The <b>RegSetKeySecurity</b> function sets the security of an open registry key.</summary>
    <param name="hKey">A handle to an open key for which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> is set.</param>
    <param name="SecurityInformation">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pSecurityDescriptor">A pointer to a<see cref="SECURITY_DESCRIPTOR" /> structure that specifies the security <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">attributes</a> to set for the specified key.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegSetKeyValue">
    <summary>Sets the data for the specified value in the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the subkey relative to the key identified by <i>hKey</i>. If the subkey does not exist, it is created as a non-volatile key with a default security descriptor. If this parameter is <b>NULL</b>, then the value is created in the key specified by <i>hKey</i>.</param>
    <param name="lpValueName">The name of the registry value whose data is to be updated.</param>
    <param name="dwType">The type of data pointed to by the <i>lpData</i> parameter. For a list of the possible types, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-value-types">Registry Value Types</a>.</param>
    <param name="lpData">
      <para>The data to be stored with the specified value name.</para>
      <para>For string-based types, such as REG_SZ, the string must be null-terminated. With the REG_MULTI_SZ data type, the string must be terminated with two null characters.</para>
    </param>
    <param name="cbData">The size of the information pointed to by the <i>lpData</i> parameter, in bytes. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, <i>cbData</i> must include the size of the terminating null character or characters.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegSetKeyValueA">
    <summary>Sets the data for the specified value in the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the subkey relative to the key identified by <i>hKey</i>. If the subkey does not exist, it is created as a non-volatile key with a default security descriptor. If this parameter is <b>NULL</b>, then the value is created in the key specified by <i>hKey</i>.</param>
    <param name="lpValueName">The name of the registry value whose data is to be updated.</param>
    <param name="dwType">The type of data pointed to by the <i>lpData</i> parameter. For a list of the possible types, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-value-types">Registry Value Types</a>.</param>
    <param name="lpData">
      <para>The data to be stored with the specified value name.</para>
      <para>For string-based types, such as REG_SZ, the string must be null-terminated. With the REG_MULTI_SZ data type, the string must be terminated with two null characters.</para>
    </param>
    <param name="cbData">The size of the information pointed to by the <i>lpData</i> parameter, in bytes. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, <i>cbData</i> must include the size of the terminating null character or characters.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegSetKeyValueW">
    <summary>Sets the data for the specified value in the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the subkey relative to the key identified by <i>hKey</i>. If the subkey does not exist, it is created as a non-volatile key with a default security descriptor. If this parameter is <b>NULL</b>, then the value is created in the key specified by <i>hKey</i>.</param>
    <param name="lpValueName">The name of the registry value whose data is to be updated.</param>
    <param name="dwType">The type of data pointed to by the <i>lpData</i> parameter. For a list of the possible types, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-value-types">Registry Value Types</a>.</param>
    <param name="lpData">
      <para>The data to be stored with the specified value name.</para>
      <para>For string-based types, such as REG_SZ, the string must be null-terminated. With the REG_MULTI_SZ data type, the string must be terminated with two null characters.</para>
    </param>
    <param name="cbData">The size of the information pointed to by the <i>lpData</i> parameter, in bytes. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, <i>cbData</i> must include the size of the terminating null character or characters.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegSetKeyValue">
    <summary>Sets the data for the specified value in the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the subkey relative to the key identified by <i>hKey</i>. If the subkey does not exist, it is created as a non-volatile key with a default security descriptor. If this parameter is <b>NULL</b>, then the value is created in the key specified by <i>hKey</i>.</param>
    <param name="lpValueName">The name of the registry value whose data is to be updated.</param>
    <param name="dwType">The type of data pointed to by the <i>lpData</i> parameter. For a list of the possible types, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-value-types">Registry Value Types</a>.</param>
    <param name="lpData">
      <para>The data to be stored with the specified value name.</para>
      <para>For string-based types, such as REG_SZ, the string must be null-terminated. With the REG_MULTI_SZ data type, the string must be terminated with two null characters.</para>
    </param>
    <param name="cbData">The size of the information pointed to by the <i>lpData</i> parameter, in bytes. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, <i>cbData</i> must include the size of the terminating null character or characters.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegSetKeyValueA">
    <summary>Sets the data for the specified value in the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the subkey relative to the key identified by <i>hKey</i>. If the subkey does not exist, it is created as a non-volatile key with a default security descriptor. If this parameter is <b>NULL</b>, then the value is created in the key specified by <i>hKey</i>.</param>
    <param name="lpValueName">The name of the registry value whose data is to be updated.</param>
    <param name="dwType">The type of data pointed to by the <i>lpData</i> parameter. For a list of the possible types, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-value-types">Registry Value Types</a>.</param>
    <param name="lpData">
      <para>The data to be stored with the specified value name.</para>
      <para>For string-based types, such as REG_SZ, the string must be null-terminated. With the REG_MULTI_SZ data type, the string must be terminated with two null characters.</para>
    </param>
    <param name="cbData">The size of the information pointed to by the <i>lpData</i> parameter, in bytes. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, <i>cbData</i> must include the size of the terminating null character or characters.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegSetKeyValueW">
    <summary>Sets the data for the specified value in the specified registry key and subkey.</summary>
    <param name="hKey">
      <para>A handle to an open registry key. The key must have been opened with the KEY_SET_VALUE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-key-security-and-access-rights">Registry Key Security and Access Rights</a>.</para>
      <para>This handle is returned by the<see cref="RegCreateKeyEx" />, <see cref="RegCreateKeyTransacted" />, <see cref="RegOpenKeyEx" />, or<see cref="RegOpenKeyTransacted" /> function. It can also be one of the following<a href="https://docs.microsoft.com//windows/desktop/SysInfo/predefined-keys">predefined keys</a>:</para>
      <code>   <b>HKEY_CLASSES_ROOT</b>   <b>HKEY_CURRENT_CONFIG</b>   <b>HKEY_CURRENT_USER</b>   <b>HKEY_LOCAL_MACHINE</b>   <b>HKEY_USERS</b></code>
    </param>
    <param name="lpSubKey">The name of the subkey relative to the key identified by <i>hKey</i>. If the subkey does not exist, it is created as a non-volatile key with a default security descriptor. If this parameter is <b>NULL</b>, then the value is created in the key specified by <i>hKey</i>.</param>
    <param name="lpValueName">The name of the registry value whose data is to be updated.</param>
    <param name="dwType">The type of data pointed to by the <i>lpData</i> parameter. For a list of the possible types, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-value-types">Registry Value Types</a>.</param>
    <param name="lpData">
      <para>The data to be stored with the specified value name.</para>
      <para>For string-based types, such as REG_SZ, the string must be null-terminated. With the REG_MULTI_SZ data type, the string must be terminated with two null characters.</para>
    </param>
    <param name="cbData">The size of the information pointed to by the <i>lpData</i> parameter, in bytes. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, <i>cbData</i> must include the size of the terminating null character or characters.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegUnLoadKey">
    <summary>
      <para>Unloads the specified registry key and its subkeys from the registry.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the registry key to be unloaded. This parameter can be a handle returned by a call to<see cref="RegConnectRegistry" /> function or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the subkey to be unloaded. The key referred to by the <i>lpSubKey</i> parameter must have been created by using the<see cref="RegLoadKey" /> function.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegUnLoadKeyA">
    <summary>
      <para>Unloads the specified registry key and its subkeys from the registry.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the registry key to be unloaded. This parameter can be a handle returned by a call to<see cref="RegConnectRegistry" /> function or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the subkey to be unloaded. The key referred to by the <i>lpSubKey</i> parameter must have been created by using the<see cref="RegLoadKey" /> function.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegUnLoadKeyW">
    <summary>
      <para>Unloads the specified registry key and its subkeys from the registry.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the registry key to be unloaded. This parameter can be a handle returned by a call to<see cref="RegConnectRegistry" /> function or one of the following predefined handles:</para>
      <para>
        <b>HKEY_LOCAL_MACHINE</b>
        <b>HKEY_USERS</b>
      </para>
    </param>
    <param name="lpSubKey">
      <para>The name of the subkey to be unloaded. The key referred to by the <i>lpSubKey</i> parameter must have been created by using the<see cref="RegLoadKey" /> function.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegUnLoadKey">
    <summary>
      <para>Unloads the specified registry key and its subkeys from the registry.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the registry key to be unloaded. This parameter can be a handle returned by a call to<see cref="RegConnectRegistry" /> function or one of the following predefined handles:</para>
      <list type="bullet">
        <item>
          <description>HKEY_LOCAL_MACHINE</description>
        </item>
        <item>
          <description>HKEY_USERS</description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the subkey to be unloaded. The key referred to by the <i>lpSubKey</i> parameter must have been created by using the<see cref="RegLoadKey" /> function.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegUnLoadKeyA">
    <summary>
      <para>Unloads the specified registry key and its subkeys from the registry.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the registry key to be unloaded. This parameter can be a handle returned by a call to<see cref="RegConnectRegistry" /> function or one of the following predefined handles:</para>
      <list type="bullet">
        <item>
          <description>HKEY_LOCAL_MACHINE</description>
        </item>
        <item>
          <description>HKEY_USERS</description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the subkey to be unloaded. The key referred to by the <i>lpSubKey</i> parameter must have been created by using the<see cref="RegLoadKey" /> function.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
  <member name="Windows.RegUnLoadKeyW">
    <summary>
      <para>Unloads the specified registry key and its subkeys from the registry.</para>
      <para>Applications that back up or restore system state including system files and registry hives should use the <a href="https://docs.microsoft.com//windows/win32/vss/volume-shadow-copy-service-overview">Volume Shadow Copy Service</a> instead of the registry functions.</para>
    </summary>
    <param name="hKey">
      <para>A handle to the registry key to be unloaded. This parameter can be a handle returned by a call to<see cref="RegConnectRegistry" /> function or one of the following predefined handles:</para>
      <list type="bullet">
        <item>
          <description>HKEY_LOCAL_MACHINE</description>
        </item>
        <item>
          <description>HKEY_USERS</description>
        </item>
      </list>
    </param>
    <param name="lpSubKey">
      <para>The name of the subkey to be unloaded. The key referred to by the <i>lpSubKey</i> parameter must have been created by using the<see cref="RegLoadKey" /> function.</para>
      <para>Key names are not case sensitive.</para>
      <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/registry-element-size-limits">Registry Element Size Limits</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the<see cref="FormatMessage" /> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</para>
    </returns>
  </member>
</doc>