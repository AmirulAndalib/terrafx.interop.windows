<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.WinHttpAddRequestHeaders">
    <summary>The <b>WinHttpAddRequestHeaders</b> function adds one or more HTTP request headers to the HTTP request handle.</summary>
    <param name="hRequest">A <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by a call to the<see cref="WinHttpOpenRequest" /> function.</param>
    <param name="lpszHeaders">A pointer to a string variable that contains the headers to append to the request. Each header except the last must be terminated by a carriage return/line feed (CR/LF).</param>
    <param name="dwHeadersLength">An unsigned long integer value that contains the length, in characters, of<i>pwszHeaders</i>. If this parameter is -1L, the function assumes that<i>pwszHeaders</i> is zero-terminated (ASCIIZ), and the length is computed.</param>
    <param name="dwModifiers">
      <para>An unsigned long integer value that contains the flags used to modify the semantics of this function. Can be one or more of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_ADD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds the header if it does not exist. Used with <b>WINHTTP_ADDREQ_FLAG_REPLACE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_ADD_IF_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds the header only if it does not already exist; otherwise, an error is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_COALESCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges headers of the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges headers of the same name using a comma. For example, adding "Accept: text/*" followed by "Accept: audio/*" with this flag results in a single header "Accept: text/*, audio/*". This causes the first header found to be merged. The calling application must to ensure a cohesive scheme with respect to merged and separate headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges headers of the same name using a semicolon.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_REPLACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Replaces or removes a header. If the header value is empty and the header is found, it is removed. If the value is not empty, it is replaced.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be performed because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpAddRequestHeadersEx">
    <summary>Adds one or more HTTP request headers to an HTTP request handle, allowing you to use separate name/value strings.</summary>
    <param name="hRequest">An <b>HINTERNET</b> handle returned by a call to <see cref="WinHttpOpenRequest" />.</param>
    <param name="dwModifiers">
      <para>An unsigned long integer value that contains the flags used to modify the semantics of this function. Can be one or more of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_ADD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds the header if it does not exist. Used with <b>WINHTTP_ADDREQ_FLAG_REPLACE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_ADD_IF_NEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds the header only if it does not already exist; otherwise, an error is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_COALESCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges headers of the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges headers of the same name using a comma. For example, adding "Accept: text/*" followed by "Accept: audio/*" with this flag results in a single header "Accept: text/*, audio/*". This causes the first header found to be merged. The calling application must to ensure a cohesive scheme with respect to merged and separate headers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges headers of the same name using a semicolon.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_ADDREQ_FLAG_REPLACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Replaces or removes a header. If the header value is empty and the header is found, it is removed. If the value is not empty, it is replaced.</description>
        </listheader>
      </list>
    </param>
    <param name="ullFlags">Pass <b>WINHTTP_EXTENDED_HEADER_FLAG_UNICODE</b> to indicate that the strings passed in are Unicode strings.</param>
    <param name="ullExtra">Reserved.</param>
    <param name="cHeaders">The number of elements in <i>pHeaders</i>.</param>
    <param name="pHeaders">An array of <b>WINHTTP_EXTENDED_HEADER</b> structures.</param>
    <returns>
      <para>A status code indicating the result of the operation. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be performed because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpCheckPlatform">
    <summary>The <b>WinHttpCheckPlatform</b> function determines whether the current platform is supported by this version of Microsoft Windows HTTP Services (WinHTTP).</summary>
    <returns>The return value is <b>TRUE</b> if the platform is supported by Microsoft Windows HTTP Services (WinHTTP), or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.WinHttpCloseHandle">
    <summary>The <b>WinHttpCloseHandle</b> function closes a single <b>HINTERNET</b> handle (see <a href="https://docs.microsoft.com//windows/win32/winhttp/hinternet-handles-in-winhttp">HINTERNET Handles in WinHTTP</a>).</summary>
    <param name="hInternet">A valid <b>HINTERNET</b> handle (see <a href="https://docs.microsoft.com//windows/win32/winhttp/hinternet-handles-in-winhttp">HINTERNET Handles in WinHTTP</a>) to be closed.</param>
    <returns>
      <para>
        <b>TRUE</b> if the handle is successfully closed, otherwise <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Codes</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The WinHTTP function support is being shut down or unloaded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpConnect">
    <summary>The <b>WinHttpConnect</b> function specifies the initial target server of an HTTP request and returns an <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> connection handle to an HTTP session for that initial target.</summary>
    <param name="hSession">Valid<a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> WinHTTP session handle returned by a previous call to<see cref="WinHttpOpen" />.</param>
    <param name="pswzServerName">Pointer to a <b>null</b>-terminated string that contains the host name of an HTTP server. Alternately, the string can contain the IP address of the site in ASCII, for example, 10.0.1.45. Note that WinHttp does not accept international host names without converting them first to <a href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/">Punycode</a>. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/handling-internationalized-domain-names--idns">Handling Internationalized Domain Names (IDNs)</a>.</param>
    <param name="nServerPort">
      <para>Unsigned integer that specifies the TCP/IP port on the server to which a connection is made. This parameter can be any valid TCP/IP port number, or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INTERNET_DEFAULT_HTTP_PORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the default port for HTTP servers (port 80).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INTERNET_DEFAULT_HTTPS_PORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the default port for HTTPS servers (port 443). Selecting this port does not automatically establish a secure connection. You must still specify the use of secure transaction semantics by using the <see cref="WINHTTP_FLAG_SECURE" /> flag with <see cref="WinHttpOpenRequest" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INTERNET_DEFAULT_PORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses port 80 for HTTP and port 443 for Secure Hypertext Transfer Protocol (HTTPS).</description>
        </listheader>
      </list>
    </param>
    <param name="dwReserved">This parameter is reserved and must be 0.</param>
    <returns>
      <para>Returns a valid connection handle to the HTTP session if the connection is successful, or <b>NULL</b> otherwise. To retrieve extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Codes</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_URL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNRECOGNIZED_SCHEME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL scheme could not be recognized, or is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The WinHTTP function support is being shut down or unloaded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpCrackUrl">
    <summary>The <b>WinHttpCrackUrl</b> function separates a URL into its component parts such as host name and path.</summary>
    <param name="pwszUrl">Pointer to a string that contains the canonical URL to separate. <b>WinHttpCrackUrl</b> does not check this URL for validity or correct format before attempting to crack it.</param>
    <param name="dwUrlLength">The length of the<i>pwszUrl</i> string, in characters. If<i>dwUrlLength</i> is set to zero,<b>WinHttpCrackUrl</b> assumes that the<i>pwszUrl</i> string is <b>null</b> terminated and determines the length of the<i>pwszUrl</i> string based on that assumption.</param>
    <param name="dwFlags">
      <para>The flags that control the operation. This parameter can be a combination of one or more of the following flags (values can be bitwise OR'd together). Or, the parameter can be 0, which performs no special operations.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICU_DECODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Converts characters that are "escape encoded" (%xx) to their non-escaped form. This does not decode other encodings, such as UTF-8. This feature can be used only if the user provides buffers in the <see cref="URL_COMPONENTS" /> structure to copy the components into.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICU_ESCAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Escapes certain characters to their escape sequences (%xx). Characters to be escaped are non-ASCII characters or those ASCII characters that must be escaped to be represented in an HTTP request. This feature can be used only if the user provides buffers in the <see cref="URL_COMPONENTS" /> structure to copy the components into.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICU_REJECT_USERPWD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Rejects URLs as input that contain embedded credentials (either a username, a password, or both). If the function fails because of an invalid URL, then subsequent calls to GetLastError return <b>ERROR_WINHTTP_INVALID_URL</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpUrlComponents">Pointer to a<see cref="URL_COMPONENTS" /> structure that receives the URL components.</param>
    <returns>
      <para>Returns <b>TRUE</b> if the function succeeds, or <b>FALSE</b> otherwise. To get extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Codes</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_URL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNRECOGNIZED_SCHEME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL scheme could not be recognized, or is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpCreateProxyResolver">
    <summary>The <b>WinHttpCreateProxyResolver</b> function creates a handle for use by <see cref="WinHttpGetProxyForUrlEx" />.</summary>
    <param name="hSession">Valid <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> WinHTTP session handle returned by a previous call to<see cref="WinHttpOpen" />. The session handle must be opened using <b>WINHTTP_FLAG_ASYNC</b>.</param>
    <param name="phResolver">A pointer to a new handle for use by <see cref="WinHttpGetProxyForUrlEx" />. When finished or cancelling an outstanding operation, close this handle with <see cref="WinHttpCloseHandle" />.</param>
    <returns>
      <para>A status code indicating the result of the operation.</para>
      <list type="table">
        <listheader>
          <description>The following codes may be returned.</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>hSession</i> is NULL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>hSession</i> is not the result of a call to <see cref="WinHttpOpen" /> or <i>hSession</i> is not marked as asynchronous using <b>WINHTTP_FLAG_ASYNC</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpCreateUrl">
    <summary>The <b>WinHttpCreateUrl</b> function creates a URL from component parts such as the host name and path.</summary>
    <param name="lpUrlComponents">Pointer to a<see cref="URL_COMPONENTS" /> structure that contains the components from which to create the URL.</param>
    <param name="dwFlags">
      <para>Flags that control the operation of this function. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICU_ESCAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Converts all unsafe characters to their corresponding escape sequences in the path string pointed to by the <b>lpszUrlPath</b> member and in <b>lpszExtraInfo</b> the extra-information string pointed to by the member of the <see cref="URL_COMPONENTS" /> structure pointed to by the <i>lpUrlComponents</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICU_REJECT_USERPWD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Rejects URLs as input that contains either a username, or a password, or both. If the function fails because of an invalid URL, subsequent calls to GetLastError will return ERROR_WINHTTP_INVALID_URL.</description>
        </listheader>
      </list>
    </param>
    <param name="pwszUrl">Pointer to a character buffer that receives the URL as a wide character (Unicode) string.</param>
    <param name="pdwUrlLength">Pointer to a variable of type unsigned long integer that receives the length of the<i>pwszUrl</i> buffer in wide (Unicode) characters. When the function returns, this parameter receives the length of the URL string wide in characters, minus 1 for the terminating character. If<see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER, this parameter receives the number of wide characters required to hold the created URL.</param>
    <returns>
      <para>Returns <b>TRUE</b> if the function succeeds, or <b>FALSE</b> otherwise. To get extended error data, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpDetectAutoProxyConfigUrl">
    <summary>The <b>WinHttpDetectAutoProxyConfigUrl</b> function finds the URL for the Proxy Auto-Configuration (PAC) file. This function reports the URL of the PAC file, but it does not download the file.</summary>
    <param name="dwAutoDetectFlags">
      <para>A data type that specifies what protocols to use to locate the PAC file. If both the DHCP and DNS auto detect flags are set, DHCP is used first; if no PAC URL is discovered using DHCP, then DNS is used.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTO_DETECT_TYPE_DHCP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use DHCP to locate the proxy auto-configuration file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTO_DETECT_TYPE_DNS_A</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use DNS to attempt to locate the proxy auto-configuration file at a well-known location on the domain of the local computer.</description>
        </listheader>
      </list>
    </param>
    <param name="ppwstrAutoConfigUrl">A data type that returns a pointer to a null-terminated Unicode string that contains the configuration URL that receives the proxy data. You must free the string pointed to by <i>ppwszAutoConfigUrl</i> using the <see cref="GlobalFree" /> function.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_AUTODETECTION_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned if WinHTTP was unable to discover the URL of the Proxy Auto-Configuration (PAC) file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpFreeProxyResult">
    <summary>Frees the data retrieved from a previous call to <see cref="WinHttpGetProxyResult" />.</summary>
    <param name="pProxyResult">A pointer to a <see cref="WINHTTP_PROXY_RESULT" /> structure retrieved from a previous call to <see cref="WinHttpGetProxyResult" />.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.WinHttpFreeProxySettingsEx">
    <summary>Frees the data retrieved from a previous call to <see cref="WinHttpGetProxySettingsResultEx" />.</summary>
    <param name="ProxySettingsType">A proxy settings type.</param>
    <param name="pProxySettingsEx">A pointer to a <see cref="WINHTTP_PROXY_SETTINGS_EX" /> structure that was retrieved from a previous call to <see cref="WinHttpGetProxySettingsResultEx" />.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.WinHttpFreeQueryConnectionGroupResult">
    <summary>Frees the memory allocated by a previous call to <see cref="WinHttpQueryConnectionGroup" />.</summary>
    <param name="pResult">A pointer to the <see cref="WINHTTP_QUERY_CONNECTION_GROUP_RESULT" /> object to free.</param>
  </member>
  <member name="Windows.WinHttpGetDefaultProxyConfiguration">
    <summary>The <b>WinHttpGetDefaultProxyConfiguration</b> function retrieves the default WinHTTP proxy configuration from the registry.</summary>
    <param name="pProxyInfo">A pointer to a variable of type<see cref="WINHTTP_PROXY_INFO" /> that receives the default proxy configuration.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful or <b>FALSE</b> otherwise. To retrieve a specific error message, call<see cref="GetLastError" />. Error codes returned include the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpGetIEProxyConfigForCurrentUser">
    <summary>The <b>WinHttpGetIEProxyConfigForCurrentUser</b> function retrieves the Internet Explorer proxy configuration for the current user.</summary>
    <param name="pProxyConfig">A pointer, on input, to a <see cref="WINHTTP_CURRENT_USER_IE_PROXY_CONFIG" /> structure. On output, the structure contains the Internet Explorer proxy settings for the current active network connection (for example, LAN, dial-up, or VPN connection).</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No Internet Explorer proxy settings can be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpGetProxyForUrl">
    <summary>The <b>WinHttpGetProxyForUrl</b> function retrieves the proxy data for the specified URL.</summary>
    <param name="hSession">The WinHTTP session handle returned by the <see cref="WinHttpOpen" /> function.</param>
    <param name="lpcwszUrl">A pointer to a null-terminated Unicode string that contains the URL of the HTTP request that the application is preparing to send.</param>
    <param name="pAutoProxyOptions">A pointer to a <see cref="WINHTTP_AUTOPROXY_OPTIONS" /> structure that specifies the auto-proxy options to use.</param>
    <param name="pProxyInfo">A pointer to a <see cref="WINHTTP_PROXY_INFO" /> structure that receives the proxy setting. This structure is then applied to the request handle using the WINHTTP_OPTION_PROXY option. Free the <b>lpszProxy</b> and <b>lpszProxyBypass</b> strings contained in this structure (if they are non-NULL) using the <see cref="GlobalFree" /> function.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error data, call<see cref="GetLastError" />.</para>
      <para>Possible error codes include the folllowing.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned by <see cref="WinHttpGetProxyForUrl" /> when a proxy for the specified URL cannot be located.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred executing the script code in the Proxy Auto-Configuration (PAC) file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_URL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_LOGIN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The login attempt failed. When this error is encountered, close the request handle with <see cref="WinHttpCloseHandle" />. A new request handle must be created before retrying the function that originally produced this error.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The PAC file could not be downloaded. For example, the server referenced by the PAC URL may not have been reachable, or the server returned a 404 NOT FOUND response.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNRECOGNIZED_SCHEME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL of the PAC file specified a scheme other than "http:" or "https:".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpGetProxyForUrlEx">
    <summary>The <b>WinHttpGetProxyForUrlEx</b> function retrieves the proxy data for the specified URL.</summary>
    <param name="hResolver">The WinHTTP resolver handle returned by the <see cref="WinHttpCreateProxyResolver" /> function.</param>
    <param name="pcwszUrl">A pointer to a null-terminated Unicode string that contains a URL for which proxy information will be determined.</param>
    <param name="pAutoProxyOptions">A pointer to a <see cref="WINHTTP_AUTOPROXY_OPTIONS" /> structure that specifies the auto-proxy options to use.</param>
    <param name="pContext">Context data that will be passed to the completion callback function.</param>
    <returns>
      <para>A status code indicating the result of the operation.</para>
      <list type="table">
        <listheader>
          <description>The following codes may be returned.</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_IO_PENDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation is continuing asynchronously.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned by <see cref="WinHttpGetProxyForUrlEx" /> when a proxy for the specified URL cannot be located.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred executing the script code in the Proxy Auto-Configuration (PAC) file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_URL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The PAC file could not be downloaded. For example, the server referenced by the PAC URL may not have been reachable, or the server returned a 404 NOT FOUND response.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNRECOGNIZED_SCHEME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL of the PAC file specified a scheme other than "http:" or "https:".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpGetProxyResult">
    <summary>The <b>WinHttpGetProxyResult</b> function retrieves the results of a call to <see cref="WinHttpGetProxyForUrlEx" />.</summary>
    <param name="hResolver">The resolver handle used to issue a previously completed call to <see cref="WinHttpGetProxyForUrlEx" />.</param>
    <param name="pProxyResult">A pointer to a <see cref="WINHTTP_PROXY_RESULT" /> structure that contains the results of a previous call to <see cref="WinHttpGetProxyForUrlEx" />. The results must be freed by calling <see cref="WinHttpFreeProxyResult" />.</param>
    <returns>
      <para>A status code indicating the result of the operation.</para>
      <list type="table">
        <listheader>
          <description>The following codes may be returned.</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The resolver handle has not successfully completed a call to <see cref="WinHttpGetProxyForUrlEx" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpGetProxySettingsEx">
    <summary>Retrieves extended proxy settings.</summary>
    <param name="hResolver">The WinHTTP resolver handle returned by the <see cref="WinHttpCreateProxyResolver" /> function.</param>
    <param name="ProxySettingsType">A proxy settings type.</param>
    <param name="pProxySettingsParam">An optional pointer to a <see cref="WINHTTP_PROXY_SETTINGS_PARAM" />.</param>
    <param name="pContext">An optional pointer to a <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">DWORD</a></b> containing context data that will be passed to the completion callback function.</param>
    <returns>
      <para>A <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">DWORD</a></b> containing a status code indicating the result of the operation. The following codes can be returned (the list is not exhaustive).</para>
      <para>|Code|Description| |-|-| |ERROR_IO_PENDING|The operation is continuing asynchronously.|</para>
    </returns>
  </member>
  <member name="Windows.WinHttpGetProxySettingsResultEx">
    <summary>Retrieves the results of a call to <see cref="WinHttpGetProxySettingsEx" />.</summary>
    <param name="hResolver">The resolver handle used to issue a previously completed call to <see cref="WinHttpGetProxySettingsEx" />.</param>
    <param name="pProxySettingsEx">A pointer to a <see cref="WINHTTP_PROXY_SETTINGS_EX" /> structure. The memory occupied by the structure is allocated by <b>WinHttpGetProxySettingsResultEx</b>, so you need to free that memory by passing this pointer to <see cref="WinHttpFreeProxySettingsEx" />.</param>
  </member>
  <member name="Windows.WinHttpOpenRequest">
    <summary>The <b>WinHttpOpenRequest</b> function creates an HTTP request handle.</summary>
    <param name="hConnect">
      <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> connection handle to an HTTP session returned by<see cref="WinHttpConnect" />.</param>
    <param name="pwszVerb">Pointer to a string that contains the <a href="https://docs.microsoft.com//windows/desktop/WinHttp/glossary">HTTP verb</a> to use in the request. If this parameter is <b>NULL</b>, the function uses GET as the <i>HTTP verb</i>. <b>Note</b>  This string should be all uppercase. Many servers treat HTTP verbs as case-sensitive, and the Internet Engineering Task Force (IETF) Requests for Comments (RFCs) spell these verbs using uppercase characters only.</param>
    <param name="pwszObjectName">Pointer to a string that contains the name of the target resource of the specified HTTP verb. This is generally a file name, an executable module, or a search specifier.</param>
    <param name="pwszVersion">Pointer to a string that contains the HTTP version. If this parameter is <b>NULL</b>, the function uses HTTP/1.1.</param>
    <param name="pwszReferrer">Pointer to a string that specifies the URL of the document from which the URL in the request<i>pwszObjectName</i> was obtained. If this parameter is set to <b>WINHTTP_NO_REFERER</b>, no referring document is specified.</param>
    <param name="ppwszAcceptTypes">Pointer to a <b>null</b>-terminated array of string pointers that specifies media types accepted by the client. If this parameter is set to <b>WINHTTP_DEFAULT_ACCEPT_TYPES</b>, no types are accepted by the client. Typically, servers handle a lack of accepted types as indication that the client accepts only documents of type "text/*"; that is, only text documents—no pictures or other binary files. For a list of valid media types, see Media Types defined by IANA at http://www.iana.org/assignments/media-types/.</param>
    <param name="dwFlags">
      <para>Unsigned long integer value that contains the Internet flag values. This can be one or more of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_FLAG_BYPASS_PROXY_CACHE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag provides the same behavior as <b>WINHTTP_FLAG_REFRESH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_FLAG_ESCAPE_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unsafe characters in the URL passed in for <i>pwszObjectName</i> are not converted to escape sequences.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_FLAG_ESCAPE_DISABLE_QUERY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unsafe characters in the query component of the URL passed in for <i>pwszObjectName</i> are not converted to escape sequences.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_FLAG_ESCAPE_PERCENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string passed in for <i>pwszObjectName</i> is converted from an <b>LPCWSTR</b> to an <b>LPSTR</b>. All unsafe characters are converted to an escape sequence including the percent symbol. By default, all unsafe characters except the percent symbol are converted to an escape sequence.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_FLAG_NULL_CODEPAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string passed in for <i>pwszObjectName</i> is assumed to consist of valid ANSI characters represented by <b>WCHAR</b>. No check are done for unsafe characters.<para><b>Windows 7:  </b>This option is obsolete.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_FLAG_REFRESH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the request should be forwarded to the originating server rather than sending a cached version of a resource from a proxy server. When this flag is used, a "Pragma: no-cache" header is added to the request handle. When creating an HTTP/1.1 request header, a "Cache-Control: no-cache" is also added.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_FLAG_SECURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses secure transaction semantics. This translates to using Secure Sockets Layer (SSL)/Transport Layer Security (TLS).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>Returns a valid HTTP request handle if successful, or <b>NULL</b> if not. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_URL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNRECOGNIZED_SCHEME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL specified a scheme other than "http:" or "https:".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpQueryAuthSchemes">
    <summary>The <b>WinHttpQueryAuthSchemes</b> function returns the authorization schemes that are supported by the server.</summary>
    <param name="hRequest">Valid<a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by<see cref="WinHttpOpenRequest" /></param>
    <param name="lpdwSupportedSchemes">
      <para>An unsigned integer that specifies a flag that contains the supported authentication schemes. This parameter can return one or more flags that are identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_BASIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates basic authentication is available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_NTLM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates NTLM authentication is available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_PASSPORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates passport authentication is available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_DIGEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates digest authentication is available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_NEGOTIATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects between NTLM and Kerberos authentication.</description>
        </listheader>
      </list>
    </param>
    <param name="lpdwFirstScheme">
      <para>An unsigned integer that specifies a flag that contains the first authentication scheme listed by the server. This parameter can return one or more flags that are identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_BASIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates basic authentication is first.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_NTLM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates NTLM authentication is first.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_PASSPORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates passport authentication is first.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_DIGEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates digest authentication is first.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_NEGOTIATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects between NTLM and Kerberos authentication.</description>
        </listheader>
      </list>
    </param>
    <param name="pdwAuthTarget">
      <para>An unsigned integer that specifies a flag that contains the authentication target. This parameter can return one or more flags that are identified in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_TARGET_SERVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Authentication target is a server. Indicates that a 401 status code has been received.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_TARGET_PROXY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Authentication target is a proxy. Indicates that a 407 status code has been received.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> if unsuccessful. To get extended error information, call<see cref="GetLastError" />. The following table identifies the error codes that are returned.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpQueryConnectionGroup">
    <summary>Retrieves a description of the current state of WinHttp's connections.</summary>
    <param name="hInternet">
      <para>A request handle or a connect handle.</para>
      <para>If a connect handle, then WinHttp assumes that the host uses HTTPS by default. But you can pass <b>WINHTTP_QUERY_CONNECTION_GROUP_FLAG_INSECURE</b> (0x0000000000000001ull) in <i>ullFlags</i> to indicate that you want non-HTTPS connections.</para>
    </param>
    <param name="pGuidConnection">An optional GUID. If provided, then only connections matching the GUID are returned. Otherwise, the function returns all connections to the host (specified in <i>hInternet</i> either by a request handle or a connect handle).</param>
    <param name="ullFlags">Flags. Pass <b>WINHTTP_QUERY_CONNECTION_GROUP_FLAG_INSECURE</b> to indicate that you want non-HTTPS connections (see <i>hInternet</i>).</param>
    <param name="ppResult">
      <para>The address of a pointer to a <see cref="WINHTTP_QUERY_CONNECTION_GROUP_RESULT" />, through which the results are returned.</para>
      <para>WinHttp performs an allocation internally, so once you're done with it you must free this pointer by calling <see cref="WinHttpFreeQueryConnectionGroupResult" />.</para>
    </param>
  </member>
  <member name="Windows.WinHttpQueryDataAvailable">
    <summary>The <b>WinHttpQueryDataAvailable</b> function returns the amount of data, in bytes, available to be read with<see cref="WinHttpReadData" />.</summary>
    <param name="hRequest">A valid<a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by<see cref="WinHttpOpenRequest" />. <see cref="WinHttpReceiveResponse" /> must have been called for this handle and have completed before <b>WinHttpQueryDataAvailable</b> is called.</param>
    <param name="lpdwNumberOfBytesAvailable">A pointer to an unsigned long integer variable that receives the number of available bytes. When WinHTTP is used in asynchronous mode, always set this parameter to <b>NULL</b> and retrieve data in the callback function; not doing so can cause a memory fault.</param>
    <returns>
      <para>Returns <b>TRUE</b> if the function succeeds, or <b>FALSE</b> otherwise. To get extended error data, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CONNECTION_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The connection with the server has been reset or terminated, or an incompatible SSL protocol was encountered. For example, WinHTTP version 5.1 does not support SSL2 unless the client specifically enables it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot complete because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request has timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpQueryHeaders">
    <summary>
      <para>The <b>WinHttpQueryHeaders</b> function retrieves header information associated with an HTTP request.</para>
      <para>Also see <see cref="WinHttpQueryHeadersEx" />, which offers a way to retrieve parsed header name and value strings.</para>
    </summary>
    <param name="hRequest">
      <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> request handle returned by<see cref="WinHttpOpenRequest" />. WinHttpReceiveResponse must have been called for this handle and have completed before <b>WinHttpQueryHeaders</b> is called.</param>
    <param name="dwInfoLevel">Value of type <b>DWORD</b> that specifies a combination of attribute and modifier flags listed on the<a href="https://docs.microsoft.com//windows/desktop/WinHttp/query-info-flags">Query Info Flags</a> page. These attribute and modifier flags indicate that the information is being requested and how it is to be formatted.</param>
    <param name="pwszName">Pointer to a string that contains the header name. If the flag in<i>dwInfoLevel</i> is not<b>WINHTTP_QUERY_CUSTOM</b>, set this parameter to WINHTTP_HEADER_NAME_BY_INDEX.</param>
    <param name="lpBuffer">Pointer to the buffer that receives the information. Setting this parameter to WINHTTP_NO_OUTPUT_BUFFER causes this function to return <b>FALSE</b>. Calling<see cref="GetLastError" /> then returns<b>ERROR_INSUFFICIENT_BUFFER</b> and<i>lpdwBufferLength</i> contains the number of bytes required to hold the requested information.</param>
    <param name="lpdwBufferLength">
      <para>Pointer to a value of type <b>DWORD</b> that specifies the length of the data buffer, in bytes. When the function returns, this parameter contains the pointer to a value that specifies the length of the information written to the buffer. When the function returns strings, the following rules apply.</para>
      <list type="bullet">
        <item>
          <description>If the function succeeds, <i>lpdwBufferLength</i> specifies the length of the string, in bytes, minus 2 for the terminating null.</description>
        </item>
        <item>
          <description>If the function fails and <b>ERROR_INSUFFICIENT_BUFFER</b> is returned, <i>lpdwBufferLength</i> specifies the number of bytes that the application must allocate to receive the string.</description>
        </item>
      </list>
    </param>
    <param name="lpdwIndex">Pointer to a zero-based header index used to enumerate multiple headers with the same name. When calling the function, this parameter is the index of the specified header to return. When the function returns, this parameter is the index of the next header. If the next index cannot be found,<b>ERROR_WINHTTP_HEADER_NOT_FOUND</b> is returned. Set this parameter to WINHTTP_NO_HEADER_INDEX to specify that only the first occurrence of a header should be returned.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. To get extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_HEADER_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested header could not be located.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpQueryHeadersEx">
    <summary>Retrieves header information associated with an HTTP request; offers a way to retrieve parsed header name and value strings.</summary>
    <param name="hRequest">Request handle returned by <see cref="WinHttpOpenRequest" />. The <see cref="WinHttpReceiveResponse" /> call for this handle must have completed before calling <b>WinHttpQueryHeadersEx</b>. If you're querying trailers, then the <see cref="WinHttpReadData" /> call for this handle must return 0 bytes read before calling <b>WinHttpQueryHeadersEx</b>.</param>
    <param name="dwInfoLevel">
      <para>Value of type <b>DWORD</b> that specifies a combination of attribute and modifier flags listed in the<a href="https://docs.microsoft.com//windows/desktop/WinHttp/query-info-flags">Query info flags</a> topic. These attribute and modifier flags indicate the information that is being requested, and how it is to be formatted.</para>
      <blockquote>[!NOTE] The following flags return <b>ERROR_INVALID_PARAMETER</b> if used: <b>WINHTTP_QUERY_VERSION</b>, <b>WINHTTP_QUERY_STATUS_CODE</b>, <b>WINHTTP_QUERY_STATUS_TEXT</b>, <b>WINHTTP_QUERY_FLAG_NUMBER</b>, <b>WINHTTP_QUERY_FLAG_NUMBER64</b>, <b>WINHTTP_QUERY_FLAG_SYSTEMTIME</b>, and <b>WINHTTP_QUERY_RAW_HEADERS_CRLF</b>.</blockquote>
      <para>The flag <b>WINHTTP_QUERY_EX_ALL_HEADERS</b> returns all the headers.</para>
      <para>If you're not querying for all of the headers, then you can pass the flag corresponding to a specific known header, or you can pass <b>WINHTTP_QUERY_CUSTOM</b> along with a string for the header name in the <i>pHeaderName</i> parameter.</para>
      <para>Passing <b>WINHTTP_QUERY_FLAG_WIRE_ENCODING</b> returns the headers in the format in which they're sent over the wire (you should access/set the <i>psz*</i> members of <see cref="WINHTTP_EXTENDED_HEADER" /> and <see cref="WINHTTP_HEADER_NAME" />). If you don't set the wire encoding flag, then the default behavior is to return headers in Unicode format (you should access/set the <i>pwsz*</i> members of <see cref="WINHTTP_EXTENDED_HEADER" /> and <see cref="WINHTTP_HEADER_NAME" />).</para>
    </param>
    <param name="ullFlags">Reserved. Set to 0.</param>
    <param name="uiCodePage">The code page to use for Unicode conversion. You should pass in 0 for default behavior (CP_ACP), or when using <b>WINHTTP_QUERY_FLAG_WIRE_ENCODING</b>. No validation is done for this parameter.</param>
    <param name="pdwIndex">The address of a zero-based index used to enumerate multiple headers with the same name. When calling the function, this parameter is the index of the specified header to return. When the function returns, this parameter is the index of the next header. Pass <b>NULL</b> to access the first instance of a given header.</param>
    <param name="pHeaderName">
      <para>The address of a <see cref="WINHTTP_HEADER_NAME" /> structure.</para>
      <para>Set <i>pHeaderName</i> to <b>NULL</b> when retrieving all headers. If this parameter is not <b>NULL</b>, and you pass <b>WINHTTP_QUERY_CUSTOM</b> with <i>dwInfoLevel</i>, then <b>WinHttpQueryHeadersEx</b> will retrieve only the header specified by this parameter. If you pass <b>WINHTTP_QUERY_FLAG_WIRE_ENCODING</b> with <i>dwInfoLevel</i>, then you should use the <i>pszName</i> member (if the flag is not set, then use <i>pwszName</i> member).</para>
    </param>
    <param name="pBuffer">A caller-provided buffer to store the parsed header pointers and the headers. If this parameter is <b>NULL</b> or too small, then <b>WinHttpQueryHeadersEx</b> returns <b>ERROR_INSUFFICIENT_BUFFER</b>, and the <i>pdwBufferLength</i> parameter contains the required buffer size in bytes.</param>
    <param name="pdwBufferLength">Length of the caller-provided buffer. If <i>pBuffer</i> is <b>NULL</b> or too small, then <b>WinHttpQueryHeadersEx</b> writes the required buffer size in bytes to this parameter.</param>
    <param name="ppHeaders">A handle to an array of <see cref="WINHTTP_EXTENDED_HEADER" /> for accessing parsed header names/values. You should pass in the address of a <b>WINHTTP_EXTENDED_HEADER</b> pointer that's initialized to <b>NULL</b>. Upon completion, you should access the <i>pszName</i>/<i>pszValue</i> parameters if using <b>WINHTTP_QUERY_FLAG_WIRE_ENCODING</b>, and <i>pwszName</i>/<i>pwszValue</i> otherwise.</param>
    <param name="pdwHeadersCount">The number of headers returned. You shouldn't try to access beyond <code>ppHeaders[cHeaders - 1]</code>, because that is out of bounds of the array.</param>
    <returns>
      <para>A status code indicating the result of the operation. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_HEADER_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested header could not be located.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpQueryOption">
    <summary>The <b>WinHttpQueryOption</b> function queries an Internet option on the specified handle.</summary>
    <param name="hInternet">An <b>HINTERNET</b> handle on which to query information. Note that this can be either a Session handle or a Request handle, depending on what option is being queried; see the <a href="https://docs.microsoft.com//windows/desktop/WinHttp/option-flags">Option Flags</a> topic to determine which handle is appropriate to use in querying a particular option.</param>
    <param name="dwOption">An unsigned long integer value that contains the Internet option to query. This can be one of the<a href="https://docs.microsoft.com//windows/desktop/WinHttp/option-flags">Option Flags</a> values.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the option setting. Strings returned by the<b>WinHttpQueryOption</b> function are globally allocated, so the calling application must globally free the string when it finishes using it. Setting this parameter to <b>NULL</b> causes this function to return <b>FALSE</b>. Calling<see cref="GetLastError" /> then returns ERROR_INSUFFICIENT_BUFFER and<i>lpdwBufferLength</i> contains the number of bytes required to hold the requested information.</param>
    <param name="lpdwBufferLength">A pointer to an unsigned long integer variable that contains the length of<i>lpBuffer</i>, in bytes. When the function returns, the variable receives the length of the data placed into<i>lpBuffer</i>. If<see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER, this parameter receives the number of bytes required to hold the requested information.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. To get a specific error message, call<see cref="GetLastError" />. Among the error codes returned are the following:</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_OPTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid option value was specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpReadData">
    <summary>
      <para>The <b>WinHttpReadData</b> function reads data from a handle opened by the<see cref="WinHttpOpenRequest" /> function.</para>
      <para>Also see <see cref="WinHttpReadDataEx" />.</para>
    </summary>
    <param name="hRequest">Valid<a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned from a previous call to<see cref="WinHttpOpenRequest" />. <see cref="WinHttpReceiveResponse" /> or <see cref="WinHttpQueryDataAvailable" /> must have been called for this handle and must have completed before <b>WinHttpReadData</b> is called. Although calling <b>WinHttpReadData</b> immediately after completion of <b>WinHttpReceiveResponse</b> avoids the expense of a buffer copy, doing so requires that the application use a fixed-length buffer for reading.</param>
    <param name="lpBuffer">Pointer to a buffer that receives the data read. Make sure that this buffer remains valid until <b>WinHttpReadData</b> has completed.</param>
    <param name="dwNumberOfBytesToRead">Unsigned long integer value that contains the number of bytes to read.</param>
    <param name="lpdwNumberOfBytesRead">Pointer to an unsigned long integer variable that receives the number of bytes read.<b>WinHttpReadData</b> sets this value to zero before doing any work or error checking. When using WinHTTP asynchronously, always set this parameter to <b>NULL</b> and retrieve the information in the callback function; not doing so can cause a memory fault.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. The following table identifies the error codes that are returned.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CONNECTION_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The connection with the server has been reset or terminated, or an incompatible SSL protocol was encountered. For example, WinHTTP 5.1 does not support SSL2 unless the client specifically enables it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned when an incoming response exceeds an internal WinHTTP size limit.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request has timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpReadDataEx">
    <summary>Reads data from a handle opened by the <see cref="WinHttpOpenRequest" /> function.</summary>
    <param name="hRequest">
      <para>An <b>HINTERNET</b> handle returned from a previous call to <see cref="WinHttpOpenRequest" />.</para>
      <para>
        <see cref="WinHttpReceiveResponse" /> or <see cref="WinHttpQueryDataAvailable" /> must have been called for this handle and must have completed before <b>WinHttpReadDataEx</b> is called. Although calling <b>WinHttpReadDataEx</b> immediately after completion of <b>WinHttpReceiveResponse</b> avoids the expense of a buffer copy, doing so requires that your application use a fixed-length buffer for reading.</para>
    </param>
    <param name="lpBuffer">Pointer to a buffer that receives the data read. Make sure that this buffer remains valid until <b>WinHttpReadDataEx</b> has completed.</param>
    <param name="dwNumberOfBytesToRead">Unsigned long integer value that contains the number of bytes to read.</param>
    <param name="lpdwNumberOfBytesRead">Pointer to an unsigned long integer variable that receives the number of bytes read.<b>WinHttpReadDataEx</b> sets this value to zero before doing any work or error checking. When using WinHTTP asynchronously, always set this parameter to <b>NULL</b> and retrieve the information in the callback function; not doing so can cause a memory fault.</param>
    <param name="ullFlags">If you pass <b>WINHTTP_READ_DATA_EX_FLAG_FILL_BUFFER</b>, then WinHttp won't complete the call to <b>WinHttpReadDataEx</b> until the provided data buffer has been filled, or the response is complete. Passing this flag makes the behavior of this API equivalent to that of <see cref="WinHttpReadData" />.</param>
    <param name="cbProperty">Reserved. Pass 0.</param>
    <param name="pvProperty">Reserved. Pass NULL.</param>
    <returns>
      <para>A status code indicating the result of the operation. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CONNECTION_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The connection with the server has been reset or terminated, or an incompatible SSL protocol was encountered. For example, WinHTTP 5.1 does not support SSL2 unless the client specifically enables it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned when an incoming response exceeds an internal WinHTTP size limit.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request has timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpReceiveResponse">
    <summary>The <b>WinHttpReceiveResponse</b> function waits to receive the response to an HTTP request initiated by <see cref="WinHttpSendRequest" />. When <b>WinHttpReceiveResponse</b> completes successfully, the status code and response headers have been received and are available for the application to inspect using <see cref="WinHttpQueryHeaders" />. An application must call <b>WinHttpReceiveResponse</b> before it can use <see cref="WinHttpQueryDataAvailable" /> and <see cref="WinHttpReadData" /> to access the response entity body (if any).</summary>
    <param name="hRequest">
      <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by<see cref="WinHttpOpenRequest" /> and sent by<see cref="WinHttpSendRequest" />. Wait until <b>WinHttpSendRequest</b> has completed for this handle before calling <b>WinHttpReceiveResponse</b>.</param>
    <param name="lpReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CANNOT_CONNECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned if connection to the server failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned when an overflow condition is encountered in the course of parsing chunked encoding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned when the server requests client authentication.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CONNECTION_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The connection with the server has been reset or terminated, or an incompatible SSL protocol was encountered. For example, WinHTTP version 5.1 does not support SSL2 unless the client specifically enables it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_HEADER_COUNT_EXCEEDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned when a larger number of headers were present in a response than WinHTTP could receive.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_HEADER_SIZE_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned by <see cref="WinHttpReceiveResponse" /> when the size of headers received exceeds the limit for the request handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_SERVER_RESPONSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The server response could not be parsed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_URL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_LOGIN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The login attempt failed. When this error is encountered, the request handle should be closed with <see cref="WinHttpCloseHandle" />. A new request handle must be created before retrying the function that originally produced this error.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_NAME_NOT_RESOLVED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The server name could not be resolved.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_REDIRECT_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The redirection failed because either the scheme changed or all attempts made to redirect failed (default is five attempts).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_RESEND_REQUEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The WinHTTP function failed. The desired function can be retried on the same request handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned when an incoming response exceeds an internal WinHTTP size limit.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_SECURE_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more errors were found in the Secure Sockets Layer (SSL) certificate sent by the server. To determine what type of error was encountered, check for a <a href="https://docs.microsoft.com//windows/desktop/api/winhttp/nc-winhttp-winhttp_status_callback">WINHTTP_CALLBACK_STATUS_SECURE_FAILURE</a> notification in a status callback function. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winhttp/nc-winhttp-winhttp_status_callback">WINHTTP_STATUS_CALLBACK</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request has timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNRECOGNIZED_SCHEME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL specified a scheme other than "http:" or "https:".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpRegisterProxyChangeNotification">
    <summary>Registers a callback function that WinHTTP calls when the effective proxy settings change.</summary>
    <param name="ullFlags">The flag to pass to the callback (for example, <b>WINHTTP_PROXY_NOTIFY_CHANGE</b>).</param>
    <param name="pfnCallback">A pointer to the callback function that should be called when the effective proxy settings change.</param>
    <param name="pvContext">A pointer to a context object to pass to the callback.</param>
    <param name="hRegistration">A handle that identifies the registration of the callback function. To unregister, pass this value to <see cref="WinHttpUnregisterProxyChangeNotification" />. <b>WINHTTP_PROXY_CHANGE_REGISTRATION_HANDLE</b> is equivalent to <a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">PVOID</a>.</param>
    <returns>
      <para>A <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">DWORD</a></b> containing a status code indicating the result of the operation. The following codes can be returned (the list is not exhaustive).</para>
      <para>|Code|Description| |-|-| |ERROR_SUCCESS|The operation succeeded.|</para>
    </returns>
  </member>
  <member name="Windows.WinHttpResetAutoProxy">
    <summary>The <b>WinHttpResetAutoProxy</b> function resets the auto-proxy.</summary>
    <param name="hSession">A valid<a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> WinHTTP session handle returned by a previous call to the <see cref="WinHttpOpen" /> function.</param>
    <param name="dwFlags">
      <para>A set of flags that affects the reset operation.</para>
      <para>The following flags are supported as defined in the <i>Winhttp.h</i> header file.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_RESET_STATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Forces a flush and retry of non-persistent proxy information on the current network.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_RESET_SWPAD_CURRENT_NETWORK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Flush the PAD information for the current network.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_RESET_SWPAD_ALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flush the PAD information for all networks.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_RESET_SCRIPT_CACHE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Flush the persistent HTTP cache of proxy scripts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_RESET_ALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000FFFF</term>
              </listheader>
            </list>
          </description>
          <description>Forces a flush and retry of all proxy information on the current network.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_RESET_NOTIFY_NETWORK_CHANGED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Flush the current proxy information and notify that the network changed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_RESET_OUT_OF_PROC</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00020000</term>
              </listheader>
            </list>
          </description>
          <description>Act on the autoproxy service instead of the current process. <div><b>Note</b>  This flag is required.</div><para>Applications that use the <see cref="WinHttpGetProxyForUrl" /> function to purge in-process caching should close the <i>hInternet</i> handle and open a new handle for future calls.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>A code indicating the success or failure of the operation.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hSession</i> parameter is not a valid handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hSession</i> parameter is not the product of a call to <see cref="WinHttpOpen" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpSendRequest">
    <summary>The <b>WinHttpSendRequest</b> function sends the specified request to the HTTP server.</summary>
    <param name="hRequest">An <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by<see cref="WinHttpOpenRequest" />.</param>
    <param name="lpszHeaders">A pointer to a string that contains the additional headers to append to the request. This parameter can be <b>WINHTTP_NO_ADDITIONAL_HEADERS</b> if there are no additional headers to append.</param>
    <param name="dwHeadersLength">An unsigned long integer value that contains the length, in characters, of the additional headers. If this parameter is <b>-1L</b> and<i>pwszHeaders</i> is not <b>NULL</b>, this function assumes that<i>pwszHeaders</i> is <b>null</b>-terminated, and the length is calculated.</param>
    <param name="lpOptional">
      <para>A pointer to a buffer that contains any optional data to send immediately after the request headers. This parameter is generally used for POST and PUT operations. The optional data can be the resource or data posted to the server. This parameter can be <b>WINHTTP_NO_REQUEST_DATA</b> if there is no optional data to send.</para>
      <para>If the <i>dwOptionalLength</i> parameter is 0, this parameter is ignored and set to <b>NULL</b>.</para>
      <para>This buffer must remain available until the request handle is closed or the call to <see cref="WinHttpReceiveResponse" /> has completed.</para>
    </param>
    <param name="dwOptionalLength">
      <para>An unsigned long integer value that contains the length, in bytes, of the optional data. This parameter can be zero if there is no optional data to send.</para>
      <para>This parameter must contain a valid length when the <i>lpOptional</i> parameter is not <b>NULL</b>. Otherwise, <i>lpOptional</i> is ignored and set to <b>NULL</b>.</para>
    </param>
    <param name="dwTotalLength">
      <para>An unsigned long integer value that contains the length, in bytes, of the total data sent. This parameter specifies the Content-Length header of the request. If the value of this parameter is greater than the length specified by<i>dwOptionalLength</i>, then<see cref="WinHttpWriteData" /> can be used to send additional data.</para>
      <para>
        <i>dwTotalLength</i> must not change between calls to <b>WinHttpSendRequest</b> for the same request. If <i>dwTotalLength</i> needs to be changed, the caller should create a new request.</para>
    </param>
    <param name="dwContext">A pointer to a pointer-sized variable that contains an application-defined value that is passed, with the request handle, to any callback functions.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Error codes are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CANNOT_CONNECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned if connection to the server failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The secure HTTP server requires a client certificate. The application retrieves the list of certificate issuers by calling <see cref="WinHttpQueryOption" /> with the <b>WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST</b> option.<para>If the server requests the client certificate, but does not require it, the application can alternately call <see cref="WinHttpSetOption" /> with the <b>WINHTTP_OPTION_CLIENT_CERT_CONTEXT</b> option. In this case, the application specifies the WINHTTP_NO_CLIENT_CERT_CONTEXT macro in the <i>lpBuffer</i> parameter of <b>WinHttpSetOption</b>. For more information, see the <b>WINHTTP_OPTION_CLIENT_CERT_CONTEXT</b> option.<b>Windows Server 2003 with SP1, Windows XP with SP2 and Windows 2000:  </b>This error is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CONNECTION_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The connection with the server has been reset or terminated, or an incompatible SSL protocol was encountered. For example, WinHTTP version 5.1 does not support SSL2 unless the client specifically enables it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_URL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_LOGIN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The login attempt failed. When this error is encountered, the request handle should be closed with <see cref="WinHttpCloseHandle" />. A new request handle must be created before retrying the function that originally produced this error.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_NAME_NOT_RESOLVED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The server name cannot be resolved.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returned when an incoming response exceeds an internal WinHTTP size limit.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_SECURE_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more errors were found in the Secure Sockets Layer (SSL) certificate sent by the server. To determine what type of error was encountered, verify through a <a href="https://docs.microsoft.com//windows/desktop/api/winhttp/nc-winhttp-winhttp_status_callback">WINHTTP_CALLBACK_STATUS_SECURE_FAILURE</a> notification in a status callback function. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winhttp/nc-winhttp-winhttp_status_callback">WINHTTP_STATUS_CALLBACK</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The WinHTTP function support is shut down or unloaded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_UNRECOGNIZED_SCHEME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The URL specified a scheme other than "http:" or "https:".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)<para><b>Windows Server 2003, Windows XP and Windows 2000:  </b>The TCP reservation range set with the <b>WINHTTP_OPTION_PORT_RESERVATION</b> option is not large enough to send this request.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The content length specified in the <i>dwTotalLength</i> parameter does not match the length specified in the Content-Length header.<para>The <i>lpOptional</i> parameter must be <b>NULL</b> and the <i>dwOptionalLength</i> parameter must be zero when the Transfer-Encoding header is present.</para><para>The Content-Length header cannot be present when the Transfer-Encoding header is present.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> ERROR_WINHTTP_RESEND_REQUEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description> The application must call <see cref="WinHttpSendRequest" /> again due to a redirect or authentication challenge.<para><b>Windows Server 2003 with SP1, Windows XP with SP2 and Windows 2000:  </b>This error is not supported.</para></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpSetCredentials">
    <summary>The <b>WinHttpSetCredentials</b> function passes the required authorization credentials to the server.</summary>
    <param name="hRequest">Valid<a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by<see cref="WinHttpOpenRequest" />.</param>
    <param name="AuthTargets">
      <para>An unsigned integer that specifies a flag that contains the authentication target. Can be one of the values in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_TARGET_SERVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Credentials are passed to a server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_TARGET_PROXY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Credentials are passed to a proxy.</description>
        </listheader>
      </list>
    </param>
    <param name="AuthScheme">
      <para>An unsigned integer that specifies a flag that contains the authentication scheme. Must be one of the supported authentication schemes returned from<see cref="WinHttpQueryAuthSchemes" />. The following table identifies the possible values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_BASIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use basic authentication.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_NTLM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use NTLM authentication.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_PASSPORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use passport authentication.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_DIGEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use digest authentication.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_AUTH_SCHEME_NEGOTIATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects between NTLM and Kerberos authentication.</description>
        </listheader>
      </list>
    </param>
    <param name="pwszUserName">Pointer to a string that contains a valid user name.</param>
    <param name="pwszPassword">Pointer to a string that contains a valid password. The password can be blank.</param>
    <param name="pAuthParams">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. The following table identifies the error codes returned.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation (Windows error code).</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpSetDefaultProxyConfiguration">
    <summary>
      <blockquote>[!IMPORTANT] Use of <b>WinHttpSetDefaultProxyConfiguration</b> is deprecated on Windows 8.1 and newer. Most proxy configurations are not supported by <b>WinHttpSetDefaultProxyConfiguration</b>, nor does it support proxy authentication. Instead, use <b>WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY</b> with <see cref="WinHttpOpen" />.</blockquote>
      <para>The <b>WinHttpSetDefaultProxyConfiguration</b> function sets the default WinHTTP proxy configuration in the registry.</para>
    </summary>
    <param name="pProxyInfo">A pointer to a variable of type<see cref="WINHTTP_PROXY_INFO" /> that specifies the default proxy configuration.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpSetOption">
    <summary>The <b>WinHttpSetOption</b> function sets an Internet option.</summary>
    <param name="hInternet">The <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle on which to set data. Be aware that this can be either a Session handle or a Request handle, depending on what option is being set. For more information about how to determine which handle is appropriate to use in setting a particular option, see the <a href="https://docs.microsoft.com//windows/desktop/WinHttp/option-flags">Option Flags</a>.</param>
    <param name="dwOption">An unsigned long integer value that contains the Internet option to set. This can be one of the<a href="https://docs.microsoft.com//windows/desktop/WinHttp/option-flags">Option Flags</a> values.</param>
    <param name="lpBuffer">A pointer to a buffer that contains the option setting.</param>
    <param name="dwBufferLength">Unsigned long integer value that contains the length of the<i>lpBuffer</i> buffer. The length of the buffer is specified in characters for the following options; for all other options, the length is specified in bytes.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following:</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INVALID_OPTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A request to <see cref="WinHttpQueryOption" /> or <see cref="WinHttpSetOption" /> specified an invalid option value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is not valid.<para>This value will be returned if <b>WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL</b> is set to a value lower than 15000.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPTION_NOT_SETTABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested option cannot be set, only queried.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is not valid.<para>This value will be returned if <b>WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL</b> is set to a value lower than 15000.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpSetStatusCallback">
    <summary>The <b>WinHttpSetStatusCallback</b> function sets up a callback function that WinHTTP can call as progress is made during an operation.</summary>
    <param name="hInternet">
      <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle for which the callback is to be set.</param>
    <param name="lpfnInternetCallback">Pointer to the callback function to call when progress is made. Set this to <b>NULL</b> to remove the existing callback function. For more information about the callback function, see<a href="https://docs.microsoft.com//windows/desktop/api/winhttp/nc-winhttp-winhttp_status_callback">WINHTTP_STATUS_CALLBACK</a>.</param>
    <param name="dwNotificationFlags">
      <para>Unsigned long integer value that specifies flags to indicate which events activate the callback function.</para>
      <para>The possible values are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon any completion notification. This flag specifies that all notifications required for read or write operations are used. See <a href="https://docs.microsoft.com//windows/desktop/api/winhttp/nc-winhttp-winhttp_status_callback">WINHTTP_STATUS_CALLBACK</a> for a list of completions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon any status change notification including completions. See <a href="https://docs.microsoft.com//windows/desktop/api/winhttp/nc-winhttp-winhttp_status_callback">WINHTTP_STATUS_CALLBACK</a> for a list of notifications.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_RESOLVE_NAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon beginning and completing name resolution.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon beginning and completing connection to the server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_DETECTING_PROXY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when detecting the proxy server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when completing a query for data.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when the response headers are available for retrieval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_READ_COMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon completion of a data-read operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_REQUEST_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when an asynchronous error occurs.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_SEND_REQUEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon beginning and completing the sending of a request header with <see cref="WinHttpSendRequest" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when a request header has been sent with <see cref="WinHttpSendRequest" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon completion of a data-post operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon beginning and completing the receipt of a resource from the HTTP server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when beginning and completing the closing of an HTTP connection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_HANDLES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when an <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle is created or closed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_REDIRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when the request is redirected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates when receiving an intermediate (100 level) status code message from the server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINHTTP_CALLBACK_FLAG_SECURE_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Activates upon a secure connection failure.</description>
        </listheader>
      </list>
    </param>
    <param name="dwReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>If successful, returns a pointer to the previously defined status callback function or <b>NULL</b> if there was no previously defined status callback function. Returns <b>WINHTTP_INVALID_STATUS_CALLBACK</b> if the callback function could not be installed. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpSetTimeouts">
    <summary>The <b>WinHttpSetTimeouts</b> function sets time-outs involved with HTTP transactions.</summary>
    <param name="hInternet">The <a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by<see cref="WinHttpOpen" /> or <see cref="WinHttpOpenRequest" />.</param>
    <param name="nResolveTimeout">
      <para>A value of type integer that specifies the time-out value, in milliseconds, to use for name resolution. If resolution takes longer than this time-out value, the action is canceled. The initial value is zero, meaning no time-out (infinite).</para>
      <para>
        <b>Windows Vista and Windows XP:  </b>If DNS timeout is specified using NAME_RESOLUTION_TIMEOUT, there is an overhead of one thread per request.</para>
    </param>
    <param name="nConnectTimeout">
      <para>A value of type integer that specifies the time-out value, in milliseconds, to use for server connection requests. If a connection request takes longer than this time-out value, the request is canceled. The initial value is 60,000 (60 seconds).</para>
      <para>TCP/IP can time out while setting up the socket during the three leg SYN/ACK exchange, regardless of the value of this parameter.</para>
    </param>
    <param name="nSendTimeout">A value of type integer that specifies the time-out value, in milliseconds, to use for sending requests. If sending a request takes longer than this time-out value, the send is canceled. The initial value is 30,000 (30 seconds).</param>
    <param name="nReceiveTimeout">A value of type integer that specifies the time-out value, in milliseconds, to receive a response to a request. If a response takes longer than this time-out value, the request is canceled. The initial value is 30,000 (30 seconds).</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the timeout parameters has a negative value other than -1.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpTimeFromSystemTime">
    <summary>The <b>WinHttpTimeFromSystemTime</b> function formats a date and time according to the HTTP version 1.0 specification.</summary>
    <param name="pst">A pointer to a<see cref="SYSTEMTIME" /> structure that contains the date and time to format.</param>
    <param name="pwszTime">A pointer to a string buffer that receives the formatted date and time. The buffer should equal to the size, in bytes, of WINHTTP_TIME_FORMAT_BUFSIZE.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. To get extended error information, call<see cref="GetLastError" />. Error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpTimeToSystemTime">
    <summary>The <b>WinHttpTimeToSystemTime</b> function takes an HTTP time/date string and converts it to a<see cref="SYSTEMTIME" /> structure.</summary>
    <param name="pwszTime">Pointer to a null-terminated date/time string to convert. This value must use the format defined in section 3.3 of the <a href="http://www.ietf.org/rfc/rfc2616.txt">RFC2616</a>.</param>
    <param name="pst">Pointer to the<see cref="SYSTEMTIME" /> structure that receives the converted time.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned is:</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpUnregisterProxyChangeNotification">
    <summary>Unregisters a callback function that was registered by calling <see cref="WinHttpRegisterProxyChangeNotification" />.</summary>
    <param name="hRegistration">The handle that was returned from <see cref="WinHttpRegisterProxyChangeNotification" />.</param>
    <returns>A <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">DWORD</a></b> containing a status code indicating the result of the operation.</returns>
  </member>
  <member name="Windows.WinHttpWebSocketClose">
    <summary>The <b>WinHttpWebSocketClose</b> function closes a WebSocket connection.</summary>
    <param name="hWebSocket">
      <para>Handle to a WebSocket.<div><b>Note</b>  <b>WinHttpWebSocketClose</b> does not close this handle. To close the handle, call <see cref="WinHttpCloseHandle" /> on <i>hWebSocket</i> once it is no longer needed.</div></para>
    </param>
    <param name="usStatus">A close status code. See <see cref="WINHTTP_WEB_SOCKET_CLOSE_STATUS" /> for possible values.</param>
    <param name="pvReason">A detailed reason for the close.</param>
    <param name="dwReasonLength">
      <para>The length of <i>pvReason</i>, in bytes.</para>
      <para>If <i>pvReason</i> is NULL, this must be 0. This value must be within the range of 0 to 123.</para>
    </param>
    <returns>
      <para>With the following exception, all error codes indicate that the underlying TCP connection has been aborted.</para>
      <list type="table">
        <listheader>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_OPERATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A close or send is pending.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_SERVER_RESPONSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid data was received from the server.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpWebSocketCompleteUpgrade">
    <summary>The <b>WinHttpWebSocketCompleteUpgrade</b> function completes a WebSocket handshake started by <see cref="WinHttpSendRequest" />.</summary>
    <param name="hRequest">HTTP request handle used to send a WebSocket handshake.</param>
    <param name="pContext">Context to be associated with the new handle.</param>
    <returns>A new WebSocket handle. If NULL, call <see cref="GetLastError" /> to determine the cause of failure.</returns>
  </member>
  <member name="Windows.WinHttpWebSocketQueryCloseStatus">
    <summary>The <b>WinHttpWebSocketQueryCloseStatus</b> function retrieves the close status sent by a server.</summary>
    <param name="hWebSocket">Handle to a WebSocket</param>
    <param name="pusStatus">A pointer to a close status code that will be filled upon return. See <see cref="WINHTTP_WEB_SOCKET_CLOSE_STATUS" /> for possible values.</param>
    <param name="pvReason">A pointer to a buffer that will receive a close reason on return.</param>
    <param name="dwReasonLength">The length of the <i>pvReason</i> buffer, in bytes.</param>
    <param name="pdwReasonLengthConsumed">The number of bytes consumed. If <i>pvReason</i> is <b>NULL</b> and <i>dwReasonLength</i> is 0, <i>pdwReasonLengthConsumed</i> will contain the size of the buffer that needs to be allocated by the calling application.</param>
    <returns>
      <para>
        <b>NO_ERROR</b> on success. Otherwise an error code.</para>
      <list type="table">
        <listheader>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is not enough space in <i>pvReason</i> to write the whole close reason.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_OPERATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No close frame has been received yet.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpWebSocketReceive">
    <summary>The <b>WinHttpWebSocketReceive</b> function receives data from a WebSocket connection.</summary>
    <param name="hWebSocket">Handle to a WebSocket.</param>
    <param name="pvBuffer">Pointer to a buffer to receive the data.</param>
    <param name="dwBufferLength">Length of <i>pvBuffer</i>, in bytes.</param>
    <param name="pdwBytesRead">Pointer to a <b>DWORD</b> that receives the number of bytes read from the connection at the end of the operation. This is set only if <b>WinHttpWebSocketReceive</b> returns <b>NO_ERROR</b> and the handle was opened in synchronous mode.</param>
    <param name="peBufferType">The type of a returned buffer. This is only set if <b>WinHttpWebSocketReceive</b> returns <b>NO_ERROR</b> and the handle was opened in synchronous mode.</param>
    <returns>
      <para>
        <b>NO_ERROR</b> on success. Otherwise an error code.</para>
      <list type="table">
        <listheader>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_OPERATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A close or receive is pending, or the receive channel has already been closed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_SERVER_RESPONSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid data was received from the server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was cancelled because <see cref="WinHttpWebSocketClose" /> was called to close the connection.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpWebSocketSend">
    <summary>The <b>WinHttpWebSocketSend</b> function sends data over a WebSocket connection.</summary>
    <param name="hWebSocket">Handle to a websocket.</param>
    <param name="eBufferType">
      <para>Type of buffer.<div><b>Note</b>  Do not specify <b>WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE</b>. Use <see cref="WinHttpWebSocketClose" /> or <see cref="WinHttpWebSocketShutdown" /> to close the connection.</div></para>
    </param>
    <param name="pvBuffer">Pointer to a buffer containing the data to send. Can be <b>NULL</b> only if <i>dwBufferLength</i> is 0.</param>
    <param name="dwBufferLength">Length of <i>pvBuffer</i>.</param>
    <returns>
      <para>
        <b>NO_ERROR</b> on success. Otherwise an error code.</para>
      <list type="table">
        <listheader>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_OPERATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A close or send is pending, or the send channel has already been closed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpWebSocketShutdown">
    <summary>The <b>WinHttpWebSocketShutdown</b> function sends a close frame to a WebSocket server to close the send channel, but leaves the receive channel open.</summary>
    <param name="hWebSocket">
      <para>Handle to a WebSocket.<div><b>Note</b>  <b>WinHttpWebSocketShutdown</b> does not close this handle. To close the handle, call <see cref="WinHttpCloseHandle" /> on <i>hWebSocket</i> once it is no longer needed.</div></para>
    </param>
    <param name="usStatus">A close status code. See <see cref="WINHTTP_WEB_SOCKET_CLOSE_STATUS" /> for possible values.</param>
    <param name="pvReason">A detailed reason for the close.</param>
    <param name="dwReasonLength">
      <para>The length of <i>pvReason</i>, in bytes.</para>
      <para>If <i>pvReason</i> is NULL, this must be 0. This value must be within the range of 0 to 123.</para>
    </param>
    <returns>
      <para>With the following exception, all error codes indicate that the underlying TCP connection has been aborted.</para>
      <list type="table">
        <listheader>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_IO_PENDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation will complete asynchronously.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WinHttpWriteData">
    <summary>The <b>WinHttpWriteData</b> function writes request data to an HTTP server.</summary>
    <param name="hRequest">Valid<a href="https://docs.microsoft.com//windows/desktop/WinHttp/hinternet-handles-in-winhttp">HINTERNET</a> handle returned by<see cref="WinHttpOpenRequest" />. Wait until <see cref="WinHttpSendRequest" /> has completed before calling this function.</param>
    <param name="lpBuffer">Pointer to a buffer that contains the data to be sent to the server. Be sure that this buffer remains valid until after <b>WinHttpWriteData</b> completes.</param>
    <param name="dwNumberOfBytesToWrite">Unsigned long integer value that contains the number of bytes to be written to the file.</param>
    <param name="lpdwNumberOfBytesWritten">Pointer to an unsigned long integer variable that receives the number of bytes written to the buffer. The<b>WinHttpWriteData</b> function sets this value to zero before doing any work or error checking. When using WinHTTP asynchronously, this parameter must be set to <b>NULL</b> and retrieve the information in the callback function. Not doing so can cause a memory fault.</param>
    <returns>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. For extended error information, call<see cref="GetLastError" />. Among the error codes returned are:</para>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_CONNECTION_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The connection with the server has been reset or terminated, or an incompatible SSL protocol was encountered. For example, WinHTTP version 5.1 does not support SSL2 unless the client specifically enables it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested operation cannot be carried out because the handle supplied is not in the correct state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INCORRECT_HANDLE_TYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The type of handle supplied is incorrect for this operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_INTERNAL_ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_OPERATION_CANCELLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_WINHTTP_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request has timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory was available to complete the requested operation. (Windows error code)</description>
        </listheader>
      </list>
    </returns>
  </member>
</doc>