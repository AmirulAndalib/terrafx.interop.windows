<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IWICColorTransform.Initialize">
    <summary>
      <para>Initializes an <see cref="IWICColorTransform" /> with a <see cref="IWICBitmapSource" /> and transforms it from one <see cref="IWICColorContext" /> to another.</para>
    </summary>
    <param name="pIBitmapSource">
      <para>Type: <b><see cref="IWICBitmapSource" />*</b></para>
      <para>The bitmap source used to initialize the color transform.</para>
    </param>
    <param name="pIContextSource">
      <para>Type: <b><see cref="IWICColorContext" />*</b></para>
      <para>The color context source.</para>
    </param>
    <param name="pIContextDest">
      <para>Type: <b><see cref="IWICColorContext" />*</b></para>
      <para>The color context destination.</para>
    </param>
    <param name="pixelFmtDest">
      <para>Type: <b>REFWICPixelFormatGUID</b></para>
      <para>The GUID of the desired pixel format.</para>
      <para>This parameter is limited to a subset of the native WIC pixel formats, see Remarks for a list.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The currently supported formats for the <i>pIContextSource</i>  and <i>pixelFmtDest</i> parameters are:</para>
      <list type="bullet">
        <item>
          <description>GUID_WICPixelFormat8bppGray</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat16bppGray</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat16bppBGR555</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat16bppBGR565</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat24bppBGR</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat24bppRGB</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat32bppBGR</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat32bppBGRA</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat32bppPBGRA</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat32bppPRGBA (Windows 8 and later)</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat32bppRGBA</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat32bppBGR101010</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat32bppCMYK</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat48bppBGR</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat64bppBGRA         (Windows 8 and later)</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat64bppPBGRA (Windows 8 and later)</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat64bppPRGBA (Windows 8 and later)</description>
        </item>
        <item>
          <description>GUID_WICPixelFormat64bppRGBA          (Windows 8 and later)</description>
        </item>
      </list>
      <para>In order to get correct behavior from a color transform, the input and output pixel formats must be compatible with the source and destination color profiles. For example, an sRGB destination color profile will produce incorrect results when used with a CMYK destination pixel format.</para>
      <h4>Examples</h4>
      <para>The following example performs a color transform from one <see cref="IWICColorContext" /> to another.</para>
      <code>
    IWICImagingFactory *pFactory = NULL;
    IWICBitmapDecoder *pDecoder = NULL;
    IWICBitmapFrameDecode *pBitmapFrame = NULL;
    IWICColorContext *pContextSrc = NULL;
    IWICColorContext *pContextDst = NULL;
    IWICColorTransform *pColorTransform = NULL;

    UINT uiFrameCount = 0;

    HRESULT hr = CoCreateInstance(
                    CLSID_WICImagingFactory,
                    NULL, CLSCTX_INPROC_SERVER,
                    IID_IWICImagingFactory,
                    (LPVOID*) &amp;amp;amp;amp;amp;amp;pFactory);

    if (SUCCEEDED(hr))
    {
        hr = pFactory-&gt;CreateDecoderFromFilename(
                           L"test.jpg",
                           NULL,
                           GENERIC_READ,
                           WICDecodeMetadataCacheOnDemand,
                           &amp;amp;amp;amp;amp;amp;pDecoder);
    }

    if (SUCCEEDED(hr))
    {
        hr = pDecoder-&gt;GetFrameCount(&amp;amp;amp;amp;amp;amp;uiFrameCount);
    }

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; (uiFrameCount &gt; 0))
    {
        hr = pDecoder-&gt;GetFrame(0, &amp;amp;amp;amp;amp;amp;piBitmapFrame);
    }

    if (SUCCEEDED(hr))
    {
        hr = pFactory-&gt;CreateColorContext(&amp;amp;amp;amp;amp;amp;pContextSrc);
    }

    if (SUCCEEDED(hr))
    {
        hr = pContextSrc-&gt;InitializeFromFilename(
                              L"c:\\windows\\system32\\spool\\drivers\\color\\kodak_dc.icm");
    }

    if (SUCCEEDED(hr))
    {
        hr = pFactory-&gt;CreateColorContext(&amp;amp;amp;amp;amp;amp;pContextDst);
    }

    if (SUCCEEDED(hr))
    {
        hr = pContextDst-&gt;InitializeFromFilename(
                              L"c:\\windows\\system32\\spool\\drivers\\color\\sRGB Color Space Profile.icm");
    }

    hr = E_FAIL;

    if (SUCCEEDED(hr))
    {
        // Transform from src icm to the destination icm.
        hr = pColorTransform-&gt;Initialize( pBitmapFrame,
                                          pContextSrc,
                                          pContextDst,
                                          GUID_WICPixelFormat32bppBGRA);
    }

    if (SUCCEEDED(hr))
    {
        UINT uiWidth = 0, uiHeight = 0;
        UINT cbStride = 0;
        UINT cbBufferSize = 0;
        BYTE *pbBuffer = NULL;

        hr = pColorTransform-&gt;GetSize(&amp;amp;amp;amp;amp;amp;uiWidth, &amp;amp;amp;amp;amp;amp;uiHeight);

        if (SUCCEEDED(hr))
        {
            WICRect rc = { 0 };
            rc.X = 0;
            rc.Y = 0;
            rc.Width = uiWidth;
            rc.Height = 1; // scanline

            for (UINT i = 0; SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; (i &lt; uiHeight); i++)
            {
                hr = pColorTransform-&gt;CopyPixels(&amp;amp;amp;amp;amp;amp;rc, cbStride, cbBufferSize - (rc.Y * cbStride), pbBuffer);
                pbBuffer += cbStride;
                rc.Y += 1;
            }
        }
    }

    if (pFactory)
    {
        pFactory-&gt;Release();
    }

    if (pDecoder)
    {
        pDecoder-&gt;Release();
    }

    if (pBitmapFrame)
    {
        pBitmapFrame-&gt;Release();
    }

    if (pContextSrc)
    {
        pContextSrc-&gt;Release();
    }

    if (pContextDst)
    {
        pContextDst-&gt;Release();
    }

    if (pColorTransform)
    {
        pColorTransform-&gt;Release();
    }

    return hr;

</code>
    </remarks>
  </member>
  <member name="IWICColorTransform">
    <summary>
      <para>Exposes methods that transforms an <see cref="IWICBitmapSource" /> from one color context to another.</para>
    </summary>
    <remarks>
      <para>A <b>IWICColorTransform</b> is an imaging pipeline component that knows how to pull pixels obtained from a given <see cref="IWICBitmapSource" /> through a color transform. The color transform is defined by mapping colors from the source color context to the destination color context in a given output pixel format.</para>
      <para>Once initialized, a color transform cannot be reinitialized. Because of this, a color transform cannot be used with multiple sources or varying parameters.</para>
    </remarks>
  </member>
</doc>