<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IWICDevelopRaw.GetContrast">
    <summary>
      <para>Gets the contrast value of the raw image.</para>
    </summary>
    <param name="pContrast">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the contrast value of the raw image. The default value is the "as-shot" setting. The value range for contrast is 0.0 through 1.0. The 0.0 lower limit represents no contrast applied to the image, while the 1.0 upper limit represents the highest amount of contrast that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetCurrentParameterSet">
    <summary>
      <para>Gets the current set of parameters.</para>
    </summary>
    <param name="ppCurrentParameterSet">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa768192(v=vs.85)">IPropertyBag2</a>**</b></para>
      <para>A pointer that receives a pointer to the current set of parameters.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetExposureCompensation">
    <summary>
      <para>Gets the exposure compensation stop value of the raw image.</para>
    </summary>
    <param name="pEV">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the exposure compensation stop value. The default is the "as-shot" setting.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetGamma">
    <summary>
      <para>Gets the current gamma setting of the raw image.</para>
    </summary>
    <param name="pGamma">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the current gamma setting.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetKelvinRangeInfo">
    <summary>
      <para>Gets the information about the current Kelvin range of the raw image.</para>
    </summary>
    <param name="pMinKelvinTemp">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the minimum Kelvin temperature.</para>
    </param>
    <param name="pMaxKelvinTemp">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the maximum Kelvin temperature.</para>
    </param>
    <param name="pKelvinTempStepValue">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the Kelvin step value.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetNamedWhitePoint">
    <summary>
      <para>Gets the named white point of the raw image.</para>
    </summary>
    <param name="pWhitePoint">
      <para>Type: <b><see cref="WICNamedWhitePoint" />*</b></para>
      <para>A pointer that receives the bitwise combination of the enumeration values.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If the named white points are not supported by the raw image or the raw file contains named white points that are not supported by this API, the codec implementer should still mark this capability as supported.</para>
      <para>If the named white points are not supported by the raw image, a best effort should be made to adjust the image to the named white point even when it isn't a pre-defined white point of the raw file.</para>
      <para>If the raw file contains named white points not supported by this API, the codec implementer should support the named white points in <see cref="WICNamedWhitePoint" />.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.GetNoiseReduction">
    <summary>
      <para>Gets the noise reduction value of the raw image.</para>
    </summary>
    <param name="pNoiseReduction">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the noise reduction value of the raw image.  The default value is the "as-shot" setting if it exists or 0.0. The value range for noise reduction is 0.0 through 1.0. The 0.0 lower limit represents no noise reduction applied to the image, while the 1.0 upper limit represents full highest noise reduction amount that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetRenderMode">
    <summary>
      <para>Gets the current <see cref="WICRawRenderMode" />.</para>
    </summary>
    <param name="pRenderMode">
      <para>Type: <b><see cref="WICRawRenderMode" />*</b></para>
      <para>A pointer that receives the current <see cref="WICRawRenderMode" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetRotation">
    <summary>
      <para>Gets the current rotation angle.</para>
    </summary>
    <param name="pRotation">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the current rotation angle.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetSaturation">
    <summary>
      <para>Gets the saturation value of the raw image.</para>
    </summary>
    <param name="pSaturation">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the saturation value of the raw image. The default value is the "as-shot" setting. The value range for saturation is 0.0 through 1.0. A value of 0.0 represents an image with a fully de-saturated image, while a value of 1.0 represents the highest amount of saturation that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetSharpness">
    <summary>
      <para>Gets the sharpness value of the raw image.</para>
    </summary>
    <param name="pSharpness">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the sharpness value of the raw image. The default value is the "as-shot" setting. The value range for sharpness is 0.0 through 1.0. The 0.0 lower limit represents no sharpening applied to the image, while the 1.0 upper limit represents the highest amount of sharpness that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetTint">
    <summary>
      <para>Gets the tint value of the raw image.</para>
    </summary>
    <param name="pTint">
      <para>Type: <b>double*</b></para>
      <para>A pointer that receives the tint value of the raw image. The default value is the "as-shot" setting if it exists or 0.0. The value range for sharpness is -1.0 through +1.0. The -1.0 lower limit represents a full green bias to the image, while the 1.0 upper limit represents a full magenta bias.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetToneCurve">
    <summary>
      <para>Gets the tone curve of the raw image.</para>
    </summary>
    <param name="cbToneCurveBufferSize">
      <para>Type: <b>UINT</b></para>
      <para>The size of the <i>pToneCurve</i> buffer.</para>
    </param>
    <param name="pToneCurve">
      <para>Type: <b><see cref="WICRawToneCurve" />*</b></para>
      <para>A pointer that receives the <see cref="WICRawToneCurve" /> of the raw image.</para>
    </param>
    <param name="pcbActualToneCurveBufferSize">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the size needed to obtain the tone curve structure.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetWhitePointKelvin">
    <summary>
      <para>Gets the white point Kelvin temperature of the raw image.</para>
    </summary>
    <param name="pWhitePointKelvin">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the white point Kelvin temperature of the raw image. The default is the "as-shot" setting value.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.GetWhitePointRGB">
    <summary>
      <para>Gets the white point RGB values.</para>
    </summary>
    <param name="pRed">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the red white point value.</para>
    </param>
    <param name="pGreen">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the green white point value.</para>
    </param>
    <param name="pBlue">
      <para>Type: <b>UINT*</b></para>
      <para>A pointer that receives the blue white point value.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.LoadParameterSet">
    <summary>
      <para>Sets the desired <see cref="WICRawParameterSet" /> option.</para>
    </summary>
    <param name="ParameterSet">
      <para>Type: <b><see cref="WICRawParameterSet" /></b></para>
      <para>The desired <see cref="WICRawParameterSet" /> option.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.QueryRawCapabilitiesInfo">
    <summary>
      <para>Retrieves information about which capabilities are supported for a raw image.</para>
    </summary>
    <param name="pInfo">
      <para>Type: <b><see cref="WICRawCapabilitiesInfo" />*</b></para>
      <para>A pointer that receives <see cref="WICRawCapabilitiesInfo" /> that provides the capabilities supported by the raw image.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>It is recommended that a codec report that a capability is supported even if the results at the outer range limits are not of perfect quality.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetContrast">
    <summary>
      <para>Sets the contrast value of the raw image.</para>
    </summary>
    <param name="Contrast">
      <para>Type: <b>double</b></para>
      <para>The contrast value of the raw image.  The default value is the "as-shot" setting. The value range for contrast is 0.0 through 1.0. The 0.0 lower limit represents no contrast applied to the image, while the 1.0 upper limit represents the highest amount of contrast that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The codec implementer must determine what the upper range value represents and must determine how to map the value to their image processing routines.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetDestinationColorContext">
    <summary>
      <para>Sets the destination color context.</para>
    </summary>
    <param name="pColorContext">
      <para>Type: <b>const <see cref="IWICColorContext" />*</b></para>
      <para>The destination color context.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.SetExposureCompensation">
    <summary>
      <para>Sets the exposure compensation stop value.</para>
    </summary>
    <param name="ev">
      <para>Type: <b>double</b></para>
      <para>The exposure compensation value. The value range for exposure compensation is -5.0 through +5.0, which equates to 10 full stops.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>It is recommended that a codec report that this method is supported even if the results at the outer range limits are not of perfect quality.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetGamma">
    <summary>
      <para>Sets the desired gamma value.</para>
    </summary>
    <param name="Gamma">
      <para>Type: <b>double</b></para>
      <para>The desired gamma value.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.SetNamedWhitePoint">
    <summary>
      <para>Sets the named white point of the raw file.</para>
    </summary>
    <param name="WhitePoint">
      <para>Type: <b><see cref="WICNamedWhitePoint" /></b></para>
      <para>A bitwise combination of the enumeration values.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If the named white points are not supported by the raw image or the raw file contains named white points that are not supported by this API, the codec implementer should still mark this capability as supported.</para>
      <para>If the named white points are not supported by the raw image, a best effort should be made to adjust the image to the named white point even when it isn't a pre-defined white point of the raw file.</para>
      <para>If the raw file contains named white points not supported by this API, the codec implementer should support the named white points in the API.</para>
      <para>Due to other white point setting methods (e.g. <see cref="SetWhitePointKelvin" />), care must be taken by codec implementers to ensure proper interoperability. For instance, if the caller sets via a named white point then the codec implementer may wish to disable reading back the corresponding Kelvin temperature. In specific cases where the codec implementer wishes to deny a given action because of previous calls, <b>WINCODEC_ERR_WRONGSTATE</b> should be returned.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetNoiseReduction">
    <summary>
      <para>Sets the noise reduction value of the raw image.</para>
    </summary>
    <param name="NoiseReduction">
      <para>Type: <b>double</b></para>
      <para>The noise reduction value of the raw image.  The default value is the "as-shot" setting if it exists or 0.0. The value range for noise reduction is 0.0 through 1.0. The 0.0 lower limit represents no noise reduction applied to the image, while the 1.0 upper limit represents highest noise reduction amount that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The codec implementer must determine what the upper range value represents and must determine how to map the value to their image processing routines.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetNotificationCallback">
    <summary>
      <para>Sets the notification callback method.</para>
    </summary>
    <param name="pCallback">
      <para>Type: <b><see cref="IWICDevelopRawNotificationCallback" />*</b></para>
      <para>Pointer to the notification callback method.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.SetRenderMode">
    <summary>
      <para>Sets the current <see cref="WICRawRenderMode" />.</para>
    </summary>
    <param name="RenderMode">
      <para>Type: <b><see cref="WICRawRenderMode" /></b></para>
      <para>The render mode to use.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.SetRotation">
    <summary>
      <para>Sets the desired rotation angle.</para>
    </summary>
    <param name="Rotation">
      <para>Type: <b>double</b></para>
      <para>The desired rotation angle.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.SetSaturation">
    <summary>
      <para>Sets the saturation value of the raw image.</para>
    </summary>
    <param name="Saturation">
      <para>Type: <b>double</b></para>
      <para>The saturation value of the raw image. The value range for saturation is 0.0 through 1.0. A value of 0.0 represents an image with a fully de-saturated image, while a value of 1.0 represents the highest amount of saturation that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The codec implementer must determine what the upper range value represents and must determine how to map the value to their image processing routines.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetSharpness">
    <summary>
      <para>Sets the sharpness value of the raw image.</para>
    </summary>
    <param name="Sharpness">
      <para>Type: <b>double</b></para>
      <para>The sharpness value of the raw image. The default value is the "as-shot" setting. The value range for sharpness is 0.0 through 1.0. The 0.0 lower limit represents no sharpening applied to the image, while the 1.0 upper limit represents the highest amount of sharpness that can be applied.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The codec implementer must determine what the upper range value represents and must determine how to map the value to their image processing routines.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetTint">
    <summary>
      <para>Sets the tint value of the raw image.</para>
    </summary>
    <param name="Tint">
      <para>Type: <b>double</b></para>
      <para>The tint value of the raw image. The default value is the "as-shot" setting if it exists or 0.0. The value range for sharpness is -1.0 through +1.0. The -1.0 lower limit represents a full green bias to the image, while the 1.0 upper limit represents a full magenta bias.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The codec implementer must determine what the outer range values represent and must determine how to map the values to their image processing routines.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetToneCurve">
    <summary>
      <para>Sets the tone curve for the raw image.</para>
    </summary>
    <param name="cbToneCurveSize">
      <para>Type: <b>UINT</b></para>
      <para>The size of the <i>pToneCurve</i> structure.</para>
    </param>
    <param name="pToneCurve">
      <para>Type: <b>const <see cref="WICRawToneCurve" />*</b></para>
      <para>The desired tone curve.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IWICDevelopRaw.SetWhitePointKelvin">
    <summary>
      <para>Sets the white point Kelvin value.</para>
    </summary>
    <param name="WhitePointKelvin">
      <para>Type: <b>UINT</b></para>
      <para>The white point Kelvin value. Acceptable Kelvin values are 1,500 through 30,000.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Codec implementers should faithfully adjust the color temperature within the range supported natively by the raw image. For values outside the native support range, the codec implementer should provide a best effort representation of the image at that color temperature.</para>
      <para>Codec implementers should return <b>WINCODEC_ERR_VALUEOUTOFRANGE</b> if the value is out of defined acceptable range.</para>
      <para>Codec implementers must ensure proper interoperability with other white point setting methods such as <see cref="SetWhitePointRGB" />. For example, if the caller sets the white point via <see cref="SetNamedWhitePoint" /> then the codec implementer may want to disable reading back the corresponding Kelvin temperature. In specific cases where the codec implementer wants to deny a given action because of previous calls, <b>WINCODEC_ERR_WRONGSTATE</b> should be returned.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw.SetWhitePointRGB">
    <summary>
      <para>Sets the white point RGB values.</para>
    </summary>
    <param name="Red">
      <para>Type: <b>UINT</b></para>
      <para>The red white point value.</para>
    </param>
    <param name="Green">
      <para>Type: <b>UINT</b></para>
      <para>The green white point value.</para>
    </param>
    <param name="Blue">
      <para>Type: <b>UINT</b></para>
      <para>The blue white point value.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Due to other white point setting methods (e.g. <see cref="SetWhitePointKelvin" />), care must be taken by codec implementers to ensure proper interoperability. For instance, if the caller sets via a named white point then the codec implementer may wish to disable reading back the corresponding Kelvin temperature. In specific cases where the codec implementer wishes to deny a given action because of previous calls, <b>WINCODEC_ERR_WRONGSTATE</b> should be returned.</para>
    </remarks>
  </member>
  <member name="IWICDevelopRaw">
    <summary>
      <para>Exposes methods that provide access to the capabilities of a raw codec format.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/wic/-wic-howtowriteacodec">How to Write a WIC-Enabled CODEC</seealso>
    <seealso cref="IWICBitmapFrameDecode" />
    <seealso href="https://docs.microsoft.com//windows/desktop/wic/-wic-guids-clsids">WIC GUIDs and CLSIDs</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/wic/-wic-about-windows-imaging-codec">Windows Imaging Component Overview</seealso>
  </member>
</doc>