<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IWICPalette.GetColorCount">
    <summary>Retrieves the number of colors in the color table.</summary>
    <param name="pcCount">Pointer that receives the number of colors in the color table.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.GetColors">
    <summary>Fills out the supplied color array with the colors from the internal color table. The color array should be sized according to the return results from <see cref="GetColorCount" />.</summary>
    <param name="cCount">The size of the <i>pColors</i> array.</param>
    <param name="pColors">Pointer that receives the colors of the palette.</param>
    <param name="pcActualColors">The actual size needed to obtain the palette colors.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.GetType">
    <summary>Retrieves the <see cref="WICBitmapPaletteType" /> that describes the palette.</summary>
    <param name="pePaletteType">Pointer that receives the palette type of the bimtap.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.HasAlpha">
    <summary>Indicates whether the palette contains an entry that is non-opaque (that is, an entry with an alpha that is less than 1).</summary>
    <param name="pfHasAlpha">Pointer that receives <code>TRUE</code> if the palette contains a transparent color; otherwise, <code>FALSE</code>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.InitializeCustom">
    <summary>Initializes a palette to the custom color entries provided.</summary>
    <param name="pColors">Pointer to the color array.</param>
    <param name="cCount">The number of colors in <i>pColors</i>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.InitializeFromBitmap">
    <summary>Initializes a palette using a computed optimized values based on the reference bitmap.</summary>
    <param name="pISurface">Pointer to the source bitmap.</param>
    <param name="cCount">The number of colors to initialize the palette with.</param>
    <param name="fAddTransparentColor">A value to indicate whether to add a transparent color.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.InitializeFromPalette">
    <summary>Initialize the palette based on a given palette.</summary>
    <param name="pIPalette">Pointer to the source palette.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.InitializePredefined">
    <summary>Initializes the palette to one of the pre-defined palettes specified by <see cref="WICBitmapPaletteType" /> and optionally adds a transparent color.</summary>
    <param name="ePaletteType">The desired pre-defined palette type.</param>
    <param name="fAddTransparentColor">The optional transparent color to add to the palette. If no transparent color is needed, use 0. When initializing to a grayscale or black and white palette, set this parameter to <b>FALSE</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.IsBlackWhite">
    <summary>Retrieves a value that describes whether the palette is black and white.</summary>
    <param name="pfIsBlackWhite">A pointer to a variable that receives a boolean value that indicates whether the palette is black and white. <b>TRUE</b> indicates that the palette is black and white; otherwise, <b>FALSE</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette.IsGrayscale">
    <summary>Retrieves a value that describes whether a palette is grayscale.</summary>
    <param name="pfIsGrayscale">A pointer to a variable that receives a boolean value that indicates whether the palette is grayscale. <b>TRUE</b> indicates that the palette is grayscale; otherwise <b>FALSE</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICPalette">
    <summary>Exposes methods for accessing and building a color table, primarily for indexed pixel formats.</summary>
  </member>
</doc>