<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE">
    <summary>
      <para>Output structure for the <b>DeviceDsmAction_Allocation</b> action of the
<a href="https://docs.microsoft.com//windows/desktop/api/winioctl/ni-winioctl-ioctl_storage_manage_data_set_attributes">IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES</a></para>
      <para>control code.</para>
    </summary>
    <remarks>
      <para>Provisioning state information is returned when the <b>Action</b> member of the
<see cref="DEVICE_MANAGE_DATA_SET_ATTRIBUTES" /></para>
      <para>structure is set to <b>DeviceDsmAction_Allocation</b>. The caller should include only one data
set range in the system buffer at <b>DataSetRangesOffset</b>.</para>
      <para>On return, the system buffer contains a
<see cref="DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT" /></para>
      <para>structure followed by the
<b>DEVICE_DATA_SET_LB_PROVISIONING_STATE</b></para>
      <para>structure. The
<b>DEVICE_DATA_SET_LB_PROVISIONING_STATE</b></para>
      <para>structure begins at an offset from the beginning of the system buffer specified by
<b>OutputBlockOffset</b> in
<b>DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT</b>.</para>
      <para>Each bit in the allocation bitmap represents a slab mapping within the data set range requested. The bits
correspond directly to the slabs in the data set range. This means that bit 0 in the bitmap marks the first slab
in the range. A slab is mapped if the bit value = 1 and unmapped if the bit value = 0.</para>
      <para>Space for <b>SlabAllocationBitMap</b> should be allocated based on the number of possible
slabs in the requested data set range. The <b>SlabAllocationBitMapLength</b> of the bitmap
returned is
<code>(number_of_slabs / 32) + ((number_of_slabs MOD 32) &gt; 0 ? 1 : 0)</code>.</para>
      <para>Slab size is determined by the <b>OptimalUnmapGranularity</b> member of
the <see cref="DEVICE_LB_PROVISIONING_DESCRIPTOR" /></para>
      <para>structure returned from an
<a href="https://docs.microsoft.com//windows/desktop/api/winioctl/ni-winioctl-ioctl_storage_query_property">IOCTL_STORAGE_QUERY_PROPERTY</a></para>
      <para>control code. The length of the data set range provided should be a multiple of
<b>OptimalUnmapGranularity</b>. When the range length is not a multiple of
<b>OptimalUnmapGranularity</b>, it is reduced to be a multiple.</para>
      <para>If the starting offset in the data set range is not aligned on a slab boundary, a multiple of
<b>OptimalUnmapGranularity</b>, the offset will be adjusted to the next boundary. The
difference between the requested offset and the adjusted offset is returned in
<b>SlabOffsetDeltaInBytes</b>.</para>
      <para>If the slab allocation total returned in <b>SlabAllocationBitMapBitCount</b> is not as
expected because of data set range alignment or length adjustments, an additional request may be submitted with a
data set range modified according to the values in both <b>SlabAllocationBitMapBitCount</b></para>
      <para>and <b>SlabOffsetDeltaInBytes</b>. The new range will properly select the slabs left out of
the bitmap returned by the previous request.</para>
      <para>If the requested slab size is too large (for example if it is larger than the maximum transfer length of the
HBA) then the
<a href="https://docs.microsoft.com//windows/desktop/api/winioctl/ni-winioctl-ioctl_storage_manage_data_set_attributes">IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES</a></para>
      <para>can fail with <b>ERROR_INVALID_PARAMETER</b>.</para>
    </remarks>
    <seealso cref="DEVICE_LB_PROVISIONING_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/DevIO/device-management-structures">Device Management Structures</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/winioctl/ni-winioctl-ioctl_storage_manage_data_set_attributes">IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES</seealso>
  </member>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE.Size">
    <summary>
      <para>The size of this structure, including the bitmap, in bytes.</para>
    </summary>
  </member>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE.Version">
    <summary>
      <para>The version of this structure.</para>
    </summary>
  </member>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE.SlabSizeInBytes">
    <summary>
      <para>The size of a slab, in bytes.</para>
    </summary>
  </member>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE.SlabOffsetDeltaInBytes">
    <summary>
      <para>If the range specified is not aligned to the <b>OptimalUnmapGranularity</b> as returned
in <see cref="DEVICE_LB_PROVISIONING_DESCRIPTOR" /></para>
      <para>structure then the data represented in the <b>SlabAllocationBitMap</b> is offset from the
specified range by this amount.</para>
    </summary>
  </member>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE.SlabAllocationBitMapBitCount">
    <summary>
      <para>The number of relevant bits in the bitmap.</para>
    </summary>
  </member>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE.SlabAllocationBitMapLength">
    <summary>
      <para>The number of<b> DWORD</b>s in the bitmap array.</para>
    </summary>
  </member>
  <member name="DEVICE_DATA_SET_LB_PROVISIONING_STATE.SlabAllocationBitMap">
    <summary>
      <para>The allocation bitmap containing one bit for each slab. If a bit is set then the corresponding slab is allocated. Otherwise, if a bit is clear, the corresponding slab is unallocated.</para>
    </summary>
  </member>
</doc>