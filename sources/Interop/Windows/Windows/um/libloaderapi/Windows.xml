<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AddDllDirectory">
    <summary>Adds a directory to the process DLL search path.</summary>
    <param name="NewDirectory">An absolute path to the directory to add to the search path. For example, to add the directory Dir2 to the process DLL search path, specify \Dir2. For more information about paths, see <a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is an opaque pointer that can be passed to<see cref="RemoveDllDirectory" /> to remove the DLL from the process DLL search path.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DisableThreadLibraryCalls">
    <summary>Disables the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications for the specified dynamic-link library (DLL). This can reduce the size of the working set for some applications.</summary>
    <param name="hLibModule">A handle to the DLL module for which the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications are to be disabled. The<see cref="LoadLibrary" />, <see cref="LoadLibraryEx" />, or<see cref="GetModuleHandle" /> function returns this handle. Note that you cannot call <b>GetModuleHandle</b> with NULL because this returns the base address of the executable image, not the DLL image.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The<b>DisableThreadLibraryCalls</b> function fails if the DLL specified by <i>hModule</i> has active static thread local storage, or if <i>hModule</i> is an invalid module handle. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumResourceLanguagesEx">
    <summary>Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends <see cref="EnumResourceLanguages" /> by allowing more control over the enumeration.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this is a specific .mui file, only that file is searched for resources.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">
      <para>The type of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more</para>
      <para>information, see the Remarks section below.</para>
    </param>
    <param name="lpName">The name of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource language. For more information, see <a href="https://docs.microsoft.com/nc-libloaderapi-enumreslangproca.md">EnumResLangProcA</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for language-specific resources in .mui files associated with the LN file specified by <i>hModule</i>. Alternately, if <i>LangId</i> is nonzero, the only .mui file searched will be the one matching the specified <i>LangId</i>. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_LN</b> flag, despite the name of the flag. See the Remarks section below for sequence of search.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI_SYSTEM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Restricts the .mui files search to system-installed MUI languages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the .mui file. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files are included in the search. If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceLanguagesExA">
    <summary>Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends <see cref="EnumResourceLanguages" /> by allowing more control over the enumeration.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this is a specific .mui file, only that file is searched for resources.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">
      <para>The type of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more</para>
      <para>information, see the Remarks section below.</para>
    </param>
    <param name="lpName">The name of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource language. For more information, see <a href="https://docs.microsoft.com/nc-libloaderapi-enumreslangproca.md">EnumResLangProcA</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for language-specific resources in .mui files associated with the LN file specified by <i>hModule</i>. Alternately, if <i>LangId</i> is nonzero, the only .mui file searched will be the one matching the specified <i>LangId</i>. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_LN</b> flag, despite the name of the flag. See the Remarks section below for sequence of search.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI_SYSTEM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Restricts the .mui files search to system-installed MUI languages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the .mui file. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files are included in the search. If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceLanguagesExW">
    <summary>Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends <see cref="EnumResourceLanguages" /> by allowing more control over the enumeration.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this is a specific .mui file, only that file is searched for resources.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">
      <para>The type of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more</para>
      <para>information, see the Remarks section below.</para>
    </param>
    <param name="lpName">The name of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource language. For more information, see <a href="https://docs.microsoft.com/nc-libloaderapi-enumreslangproca.md">EnumResLangProcA</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for language-specific resources in .mui files associated with the LN file specified by <i>hModule</i>. Alternately, if <i>LangId</i> is nonzero, the only .mui file searched will be the one matching the specified <i>LangId</i>. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_LN</b> flag, despite the name of the flag. See the Remarks section below for sequence of search.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI_SYSTEM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Restricts the .mui files search to system-installed MUI languages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the .mui file. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files are included in the search. If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceLanguagesEx">
    <summary>Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends <see cref="EnumResourceLanguages" /> by allowing more control over the enumeration.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this is a specific .mui file, only that file is searched for resources.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">
      <para>The type of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more</para>
      <para>information, see the Remarks section below.</para>
    </param>
    <param name="lpName">The name of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource language. For more information, see <a href="https://docs.microsoft.com/nc-libloaderapi-enumreslangprocw.md">EnumResLangProcW</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for language-specific resources in .mui files associated with the LN file specified by <i>hModule</i>. Alternately, if <i>LangId</i> is nonzero, the only .mui file searched will be the one matching the specified <i>LangId</i>. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_LN</b> flag, despite the name of the flag. See the Remarks section below for sequence of search.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI_SYSTEM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Restricts the .mui files search to system-installed MUI languages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the .mui file. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files are included in the search. If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceLanguagesExA">
    <summary>Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends <see cref="EnumResourceLanguages" /> by allowing more control over the enumeration.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this is a specific .mui file, only that file is searched for resources.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">
      <para>The type of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more</para>
      <para>information, see the Remarks section below.</para>
    </param>
    <param name="lpName">The name of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource language. For more information, see <a href="https://docs.microsoft.com/nc-libloaderapi-enumreslangprocw.md">EnumResLangProcW</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for language-specific resources in .mui files associated with the LN file specified by <i>hModule</i>. Alternately, if <i>LangId</i> is nonzero, the only .mui file searched will be the one matching the specified <i>LangId</i>. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_LN</b> flag, despite the name of the flag. See the Remarks section below for sequence of search.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI_SYSTEM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Restricts the .mui files search to system-installed MUI languages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the .mui file. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files are included in the search. If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceLanguagesExW">
    <summary>Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends <see cref="EnumResourceLanguages" /> by allowing more control over the enumeration.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file. If this is a specific .mui file, only that file is searched for resources.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">
      <para>The type of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more</para>
      <para>information, see the Remarks section below.</para>
    </param>
    <param name="lpName">The name of the resource for which the language is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource language. For more information, see <a href="https://docs.microsoft.com/nc-libloaderapi-enumreslangprocw.md">EnumResLangProcW</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for language-specific resources in .mui files associated with the LN file specified by <i>hModule</i>. Alternately, if <i>LangId</i> is nonzero, the only .mui file searched will be the one matching the specified <i>LangId</i>. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_LN</b> flag, despite the name of the flag. See the Remarks section below for sequence of search.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI_SYSTEM</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Restricts the .mui files search to system-installed MUI languages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the .mui file. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files are included in the search. If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNames">
    <summary>Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for <i>hModule</i> to specify an .mui file, in which case only that file is searched for resources.</summary>
    <param name="hModule">
      <para>A handle to a module to be searched. Starting with Windows Vista, if this is an LN file, then appropriate .mui files (if any exist) are included in the search.</para>
      <para>If this parameter is <b>NULL</b>, that is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/win32/menurc/resource-types">Resource Types</a>. For more information, see the <a href="https://docs.microsoft.com/#remarks">Remarks</a> section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name or ID. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">ENUMRESNAMEPROC</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <returns>The return value is <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesA">
    <summary>Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for <i>hModule</i> to specify an .mui file, in which case only that file is searched for resources.</summary>
    <param name="hModule">
      <para>A handle to a module to be searched. Starting with Windows Vista, if this is an LN file, then appropriate .mui files (if any exist) are included in the search.</para>
      <para>If this parameter is <b>NULL</b>, that is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/win32/menurc/resource-types">Resource Types</a>. For more information, see the <a href="https://docs.microsoft.com/#remarks">Remarks</a> section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name or ID. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">ENUMRESNAMEPROC</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <returns>The return value is <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesEx">
    <summary>Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://msdn.microsoft.com/8d27f79a-8165-4565-a975-f25b2344efdc">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">EnumResNameProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to search. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resources in .mui files associated with the LN file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the specified .mui file will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each name that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>The function <b>TRUE</b> if successful, or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesExA">
    <summary>Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://msdn.microsoft.com/8d27f79a-8165-4565-a975-f25b2344efdc">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">EnumResNameProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to search. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resources in .mui files associated with the LN file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the specified .mui file will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each name that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>The function <b>TRUE</b> if successful, or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesExW">
    <summary>Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://msdn.microsoft.com/8d27f79a-8165-4565-a975-f25b2344efdc">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">EnumResNameProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to search. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resources in .mui files associated with the LN file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the specified .mui file will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each name that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>The function <b>TRUE</b> if successful, or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesEx">
    <summary>Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://msdn.microsoft.com/8d27f79a-8165-4565-a975-f25b2344efdc">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">EnumResNameProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to search. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resources in .mui files associated with the LN file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the specified .mui file will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each name that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>The function <b>TRUE</b> if successful, or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesExA">
    <summary>Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://msdn.microsoft.com/8d27f79a-8165-4565-a975-f25b2344efdc">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">EnumResNameProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to search. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resources in .mui files associated with the LN file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the specified .mui file will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each name that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>The function <b>TRUE</b> if successful, or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesExW">
    <summary>Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.</summary>
    <param name="hModule">
      <para>The handle to a module to search. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files are included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://msdn.microsoft.com/8d27f79a-8165-4565-a975-f25b2344efdc">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameproca">EnumResNameProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <param name="dwFlags">
      <para>The type of file to search. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resources in .mui files associated with the LN file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the specified .mui file will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches the file specified by <i>hModule</i>, regardless of whether the file is an LN file, another type of LN file, or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each name that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The localization language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>The function <b>TRUE</b> if successful, or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNames">
    <summary>Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for <i>hModule</i> to specify an .mui file, in which case only that file is searched for resources.</summary>
    <param name="hModule">
      <para>A handle to a module to be searched. Starting with Windows Vista, if this is an LN file, then appropriate .mui files (if any exist) are included in the search.</para>
      <para>If this parameter is <b>NULL</b>, that is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/win32/menurc/resource-types">Resource Types</a>. For more information, see the <a href="https://docs.microsoft.com/#remarks">Remarks</a> section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name or ID. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameprocw">ENUMRESNAMEPROC</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <returns>The return value is <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceNamesW">
    <summary>Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for <i>hModule</i> to specify an .mui file, in which case only that file is searched for resources.</summary>
    <param name="hModule">
      <para>A handle to a module to be searched. Starting with Windows Vista, if this is an LN file, then appropriate .mui files (if any exist) are included in the search.</para>
      <para>If this parameter is <b>NULL</b>, that is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpType">The type of the resource for which the name is being enumerated. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is an integer value representing a predefined resource type. For a list of predefined resource types, see <a href="https://docs.microsoft.com//windows/win32/menurc/resource-types">Resource Types</a>. For more information, see the <a href="https://docs.microsoft.com/#remarks">Remarks</a> section below.</param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name or ID. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumresnameprocw">ENUMRESNAMEPROC</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
    <returns>The return value is <b>TRUE</b> if the function succeeds or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceTypesEx">
    <summary>
      <para>Enumerates resource types associated with a specified binary module. The search can include both a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> file (LN file) and its associated .mui files. Alternately, it can be limited to a single binary module of any type, or to the .mui files associated with a single LN file. The search can also be limited to a single associated .mui file that contains resources for a specific language.</para>
      <para>For each resource type found, <b>EnumResourceTypesEx</b> calls an application-defined callback function <i>lpEnumFunc</i>, passing the resource type it finds, as well as the various other parameters that were passed to <b>EnumResourceTypesEx</b>.</para>
    </summary>
    <param name="hModule">
      <para>The handle to a module to be searched. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files can be included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource type. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumrestypeproca">EnumResTypeProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resource types in one of the .mui files associated with the file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the .mui file of the language as specified by <i>LangId</i> will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches only the file specified by <i>hModule</i>, regardless of whether the file is an LN file or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each type that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if successful or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceTypesExA">
    <summary>
      <para>Enumerates resource types associated with a specified binary module. The search can include both a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> file (LN file) and its associated .mui files. Alternately, it can be limited to a single binary module of any type, or to the .mui files associated with a single LN file. The search can also be limited to a single associated .mui file that contains resources for a specific language.</para>
      <para>For each resource type found, <b>EnumResourceTypesEx</b> calls an application-defined callback function <i>lpEnumFunc</i>, passing the resource type it finds, as well as the various other parameters that were passed to <b>EnumResourceTypesEx</b>.</para>
    </summary>
    <param name="hModule">
      <para>The handle to a module to be searched. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files can be included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource type. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumrestypeproca">EnumResTypeProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resource types in one of the .mui files associated with the file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the .mui file of the language as specified by <i>LangId</i> will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches only the file specified by <i>hModule</i>, regardless of whether the file is an LN file or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each type that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if successful or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceTypesExW">
    <summary>
      <para>Enumerates resource types associated with a specified binary module. The search can include both a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> file (LN file) and its associated .mui files. Alternately, it can be limited to a single binary module of any type, or to the .mui files associated with a single LN file. The search can also be limited to a single associated .mui file that contains resources for a specific language.</para>
      <para>For each resource type found, <b>EnumResourceTypesEx</b> calls an application-defined callback function <i>lpEnumFunc</i>, passing the resource type it finds, as well as the various other parameters that were passed to <b>EnumResourceTypesEx</b>.</para>
    </summary>
    <param name="hModule">
      <para>The handle to a module to be searched. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files can be included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource type. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumrestypeproca">EnumResTypeProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resource types in one of the .mui files associated with the file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the .mui file of the language as specified by <i>LangId</i> will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches only the file specified by <i>hModule</i>, regardless of whether the file is an LN file or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each type that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if successful or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceTypesEx">
    <summary>
      <para>Enumerates resource types associated with a specified binary module. The search can include both a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> file (LN file) and its associated .mui files. Alternately, it can be limited to a single binary module of any type, or to the .mui files associated with a single LN file. The search can also be limited to a single associated .mui file that contains resources for a specific language.</para>
      <para>For each resource type found, <b>EnumResourceTypesEx</b> calls an application-defined callback function <i>lpEnumFunc</i>, passing the resource type it finds, as well as the various other parameters that were passed to <b>EnumResourceTypesEx</b>.</para>
    </summary>
    <param name="hModule">
      <para>The handle to a module to be searched. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files can be included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource type. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumrestypeproca">EnumResTypeProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resource types in one of the .mui files associated with the file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the .mui file of the language as specified by <i>LangId</i> will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches only the file specified by <i>hModule</i>, regardless of whether the file is an LN file or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each type that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if successful or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceTypesExA">
    <summary>
      <para>Enumerates resource types associated with a specified binary module. The search can include both a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> file (LN file) and its associated .mui files. Alternately, it can be limited to a single binary module of any type, or to the .mui files associated with a single LN file. The search can also be limited to a single associated .mui file that contains resources for a specific language.</para>
      <para>For each resource type found, <b>EnumResourceTypesEx</b> calls an application-defined callback function <i>lpEnumFunc</i>, passing the resource type it finds, as well as the various other parameters that were passed to <b>EnumResourceTypesEx</b>.</para>
    </summary>
    <param name="hModule">
      <para>The handle to a module to be searched. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files can be included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource type. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumrestypeproca">EnumResTypeProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resource types in one of the .mui files associated with the file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the .mui file of the language as specified by <i>LangId</i> will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches only the file specified by <i>hModule</i>, regardless of whether the file is an LN file or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each type that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if successful or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumResourceTypesExW">
    <summary>
      <para>Enumerates resource types associated with a specified binary module. The search can include both a <a href="https://docs.microsoft.com//windows/desktop/Intl/mui-resource-management">language-neutral Portable Executable</a> file (LN file) and its associated .mui files. Alternately, it can be limited to a single binary module of any type, or to the .mui files associated with a single LN file. The search can also be limited to a single associated .mui file that contains resources for a specific language.</para>
      <para>For each resource type found, <b>EnumResourceTypesEx</b> calls an application-defined callback function <i>lpEnumFunc</i>, passing the resource type it finds, as well as the various other parameters that were passed to <b>EnumResourceTypesEx</b>.</para>
    </summary>
    <param name="hModule">
      <para>The handle to a module to be searched. Typically this is an LN file, and if flag <b>RESOURCE_ENUM_MUI</b> is set, then appropriate .mui files can be included in the search. Alternately, this can be a handle to an .mui file or other LN file.</para>
      <para>If this parameter is <b>NULL</b>, it is equivalent to passing in a handle to the module used to create the current process.</para>
    </param>
    <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource type. For more information, see <a href="https://docs.microsoft.com//windows/win32/api/libloaderapi/nc-libloaderapi-enumrestypeproca">EnumResTypeProc</a>.</param>
    <param name="lParam">An application-defined value passed to the callback function.</param>
    <param name="dwFlags">
      <para>The type of file to be searched. The following values are supported. Note that if <i>dwFlags</i> is zero, then the <b>RESOURCE_ENUM_LN</b> and <b>RESOURCE_ENUM_MUI</b> flags are assumed to be specified.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_MUI</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Search for resource types in one of the .mui files associated with the file specified by <i>hModule</i> and with the current language preferences, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). Alternately, if <i>LangId</i> is nonzero, then only the .mui file of the language as specified by <i>LangId</i> will be searched. Typically this flag should be used only if <i>hModule</i> references an LN file. If <i>hModule</i> references an .mui file, then that file is actually covered by the <b>RESOURCE_ENUM_LN</b> flag, despite the name of the flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_LN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Searches only the file specified by <i>hModule</i>, regardless of whether the file is an LN file or an .mui file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_ENUM_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Performs extra validation on the resource section and its reference in the PE header while doing the enumeration to ensure that resources are properly formatted. The validation sets a maximum limit of 260 characters for each type that is enumerated.</description>
        </listheader>
      </list>
    </param>
    <param name="LangId">The language used to filter the search in the MUI module. This parameter is used only when the <b>RESOURCE_ENUM_MUI</b> flag is set in <i>dwFlags</i>. If zero is specified, then all .mui files that match current language preferences are included in the search, following the usual Resource Loader strategy (see <a href="https://docs.microsoft.com//windows/desktop/Intl/user-interface-language-management">User Interface Language Management</a>). If a nonzero <i>LangId</i> is specified, then the only .mui file searched will be the one matching the specified <i>LangId</i>.</param>
    <returns>Returns <b>TRUE</b> if successful or <b>FALSE</b> if the function does not find a resource of the type specified, or if the function fails for another reason. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.FindResourceEx">
    <summary>Determines the location of the resource with the specified type, name, and language in the specified module.</summary>
    <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is <b>NULL</b>, the function searches the module used to create the current process.</param>
    <param name="lpType">The resource type. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the given resource type. For standard resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpName">The name of the resource. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="wLanguage">
      <para>The language of the resource. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the <see cref="LoadResource" /> function.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindResourceExW">
    <summary>Determines the location of the resource with the specified type, name, and language in the specified module.</summary>
    <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is <b>NULL</b>, the function searches the module used to create the current process.</param>
    <param name="lpType">The resource type. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the given resource type. For standard resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more information, see the Remarks section below.</param>
    <param name="lpName">The name of the resource. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="wLanguage">
      <para>The language of the resource. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the <see cref="LoadResource" /> function.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindResource">
    <summary>
      <para>Determines the location of a resource with the specified type and name in the specified module.</para>
      <para>To specify a language, use the <see cref="FindResourceEx" /> function.</para>
    </summary>
    <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is <b>NULL</b>, the function searches the module used to create the current process.</param>
    <param name="lpName">The name of the resource. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpType">
      <para>The resource type. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the given</para>
      <para>resource type. For standard resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more information, see the Remarks section below.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the <see cref="LoadResource" /> function.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindResourceW">
    <summary>
      <para>Determines the location of a resource with the specified type and name in the specified module.</para>
      <para>To specify a language, use the <see cref="FindResourceEx" /> function.</para>
    </summary>
    <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is <b>NULL</b>, the function searches the module used to create the current process.</param>
    <param name="lpName">The name of the resource. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below.</param>
    <param name="lpType">
      <para>The resource type. Alternately, rather than a pointer, this parameter can be <see cref="MAKEINTRESOURCE" />(ID), where ID is the integer identifier of the given</para>
      <para>resource type. For standard resource types, see <a href="https://docs.microsoft.com//windows/desktop/menurc/resource-types">Resource Types</a>. For more information, see the Remarks section below.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the <see cref="LoadResource" /> function.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindStringOrdinal">
    <summary>Locates a Unicode string (wide characters) in another Unicode string for a non-linguistic comparison.</summary>
    <param name="dwFindStringOrdinalFlags">
      <para>Flags specifying details of the find operation. These flags are mutually exclusive, with FIND_FROMSTART being the default. The application can specify just one of the find flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FIND_FROMSTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Search the string, starting with the first character of the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FIND_FROMEND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Search the string in the reverse direction, starting with the last character of the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FIND_STARTSWITH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Test to find out if the value specified by <i>lpStringValue</i> is the first value in the source string indicated by <i>lpStringSource</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FIND_ENDSWITH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Test to find out if the value specified by <i>lpStringValue</i> is the last value in the source string indicated by <i>lpStringSource</i>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpStringSource">Pointer to the source string, in which the function searches for the string specified by <i>lpStringValue</i>.</param>
    <param name="cchSource">Size, in characters excluding the terminating null character, of the string indicated by <i>lpStringSource</i>. The application must normally specify a positive number, or 0. The application can specify -1 if the source string is null-terminated and the function should calculate the size automatically.</param>
    <param name="lpStringValue">Pointer to the search string for which the function searches in the source string.</param>
    <param name="cchValue">Size, in characters excluding the terminating null character, of the string indicated by <i>lpStringValue</i>. The application must normally specify a positive number, or 0. The application can specify -1 if the string is null-terminated and the function should calculate the size automatically.</param>
    <param name="bIgnoreCase">
      <b>TRUE</b> if the function is to perform a case-insensitive comparison, and <b>FALSE</b> otherwise. The comparison is not a linguistic operation and is not appropriate for all locales and languages. Its behavior is similar to that for English.</param>
    <returns>
      <para>Returns a 0-based index into the source string indicated by <i>lpStringSource</i> if successful. If the function succeeds, the found string is the same size as the value of <i>lpStringValue</i>. A return value of 0 indicates that the function found a match at the beginning of the source string.</para>
      <para>The function returns -1 if it does not succeed or if it does not find the search string. To get extended error information, the application can call <see cref="GetLastError" />, which can return one of the following error codes:</para>
      <list type="bullet">
        <item>
          <description>ERROR_INVALID_FLAGS. The values supplied for flags were not valid.</description>
        </item>
        <item>
          <description>ERROR_INVALID_PARAMETER. Any of the parameter values was invalid.</description>
        </item>
        <item>
          <description>ERROR_SUCCESS. The action completed successfully but yielded no results.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.FreeLibrary">
    <summary>Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid.</summary>
    <param name="hLibModule">A handle to the loaded library module. The<see cref="LoadLibrary" />, <see cref="LoadLibraryEx" />,<br /><see cref="GetModuleHandle" />, or <see cref="GetModuleHandleEx" /> function returns this handle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.FreeLibraryAndExitThread">
    <summary>Decrements the reference count of a loaded dynamic-link library (DLL) by one, then calls<see cref="ExitThread" /> to terminate the calling thread. The function does not return.</summary>
    <param name="hLibModule">
      <para>A handle to the DLL module whose reference count the function decrements. The<see cref="LoadLibrary" /> or<see cref="GetModuleHandleEx" /> function returns this handle.</para>
      <para>Do not call this function with a handle returned by either the <b>GetModuleHandleEx</b> function (with the GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT flag) or the <see cref="GetModuleHandle" /> function, as they do not maintain a reference count for the module.</para>
    </param>
    <param name="dwExitCode">The exit code for the calling thread.</param>
  </member>
  <member name="Windows.GetModuleFileName">
    <summary>
      <para>Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.</para>
      <para>To locate the file for a module that was loaded by another process, use the<see cref="GetModuleFileNameEx" /> function.</para>
    </summary>
    <param name="hModule">
      <para>A handle to the loaded module whose path is being requested. If this parameter is <b>NULL</b>,<b>GetModuleFileName</b> retrieves the path of the executable file of the current process.</para>
      <para>The <b>GetModuleFileName</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="lpFilename">
      <para>A pointer to a buffer that receives the fully qualified path of the module. If the length of the path is less than the size that the <i>nSize</i> parameter specifies, the function succeeds and the path is returned as a null-terminated string.</para>
      <para>If the length of the path exceeds the size that the <i>nSize</i> parameter specifies, the function succeeds and the string is truncated to <i>nSize</i> characters including the terminating null character.</para>
      <para>
        <b>Windows XP:  </b>The string is truncated to <i>nSize</i> characters and is not null-terminated.</para>
      <para>The string returned will use the same format that was specified when the module was loaded. Therefore, the path can be a long or short file name, and can use the prefix <code>\\?\</code>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File</a>.</para>
    </param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in <b>TCHARs</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the length of the string that is copied to the buffer, in characters, not including the terminating null character. If the buffer is too small to hold the module name, the string is truncated to <i>nSize</i> characters including the terminating null character, the function returns <i>nSize</i>, and the function sets the last error to <b>ERROR_INSUFFICIENT_BUFFER</b>.</para>
      <para>
        <b>Windows XP:  </b>If the buffer is too small to hold the module name, the function returns <i>nSize</i>. The last error code remains <b>ERROR_SUCCESS</b>. If <i>nSize</i> is zero, the return value is zero and the last error code is <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameA">
    <summary>
      <para>Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.</para>
      <para>To locate the file for a module that was loaded by another process, use the<see cref="GetModuleFileNameEx" /> function.</para>
    </summary>
    <param name="hModule">
      <para>A handle to the loaded module whose path is being requested. If this parameter is <b>NULL</b>,<b>GetModuleFileName</b> retrieves the path of the executable file of the current process.</para>
      <para>The <b>GetModuleFileName</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="lpFilename">
      <para>A pointer to a buffer that receives the fully qualified path of the module. If the length of the path is less than the size that the <i>nSize</i> parameter specifies, the function succeeds and the path is returned as a null-terminated string.</para>
      <para>If the length of the path exceeds the size that the <i>nSize</i> parameter specifies, the function succeeds and the string is truncated to <i>nSize</i> characters including the terminating null character.</para>
      <para>
        <b>Windows XP:  </b>The string is truncated to <i>nSize</i> characters and is not null-terminated.</para>
      <para>The string returned will use the same format that was specified when the module was loaded. Therefore, the path can be a long or short file name, and can use the prefix <code>\\?\</code>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File</a>.</para>
    </param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in <b>TCHARs</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the length of the string that is copied to the buffer, in characters, not including the terminating null character. If the buffer is too small to hold the module name, the string is truncated to <i>nSize</i> characters including the terminating null character, the function returns <i>nSize</i>, and the function sets the last error to <b>ERROR_INSUFFICIENT_BUFFER</b>.</para>
      <para>
        <b>Windows XP:  </b>If the buffer is too small to hold the module name, the function returns <i>nSize</i>. The last error code remains <b>ERROR_SUCCESS</b>. If <i>nSize</i> is zero, the return value is zero and the last error code is <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameW">
    <summary>
      <para>Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.</para>
      <para>To locate the file for a module that was loaded by another process, use the<see cref="GetModuleFileNameEx" /> function.</para>
    </summary>
    <param name="hModule">
      <para>A handle to the loaded module whose path is being requested. If this parameter is <b>NULL</b>,<b>GetModuleFileName</b> retrieves the path of the executable file of the current process.</para>
      <para>The <b>GetModuleFileName</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="lpFilename">
      <para>A pointer to a buffer that receives the fully qualified path of the module. If the length of the path is less than the size that the <i>nSize</i> parameter specifies, the function succeeds and the path is returned as a null-terminated string.</para>
      <para>If the length of the path exceeds the size that the <i>nSize</i> parameter specifies, the function succeeds and the string is truncated to <i>nSize</i> characters including the terminating null character.</para>
      <para>
        <b>Windows XP:  </b>The string is truncated to <i>nSize</i> characters and is not null-terminated.</para>
      <para>The string returned will use the same format that was specified when the module was loaded. Therefore, the path can be a long or short file name, and can use the prefix <code>\\?\</code>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File</a>.</para>
    </param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in <b>TCHARs</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the length of the string that is copied to the buffer, in characters, not including the terminating null character. If the buffer is too small to hold the module name, the string is truncated to <i>nSize</i> characters including the terminating null character, the function returns <i>nSize</i>, and the function sets the last error to <b>ERROR_INSUFFICIENT_BUFFER</b>.</para>
      <para>
        <b>Windows XP:  </b>If the buffer is too small to hold the module name, the function returns <i>nSize</i>. The last error code remains <b>ERROR_SUCCESS</b>. If <i>nSize</i> is zero, the return value is zero and the last error code is <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileName">
    <summary>
      <para>Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.</para>
      <para>To locate the file for a module that was loaded by another process, use the<see cref="GetModuleFileNameEx" /> function.</para>
    </summary>
    <param name="hModule">
      <para>A handle to the loaded module whose path is being requested. If this parameter is <b>NULL</b>,<b>GetModuleFileName</b> retrieves the path of the executable file of the current process.</para>
      <para>The <b>GetModuleFileName</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="lpFilename">
      <para>A pointer to a buffer that receives the fully qualified path of the module. If the length of the path is less than the size that the <i>nSize</i> parameter specifies, the function succeeds and the path is returned as a null-terminated string.</para>
      <para>If the length of the path exceeds the size that the <i>nSize</i> parameter specifies, the function succeeds and the string is truncated to <i>nSize</i> characters including the terminating null character.</para>
      <para>
        <b>Windows XP:  </b>The string is truncated to <i>nSize</i> characters and is not null-terminated.</para>
      <para>The string returned will use the same format that was specified when the module was loaded. Therefore, the path can be a long or short file name, and can use the prefix "\?". For more information, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File</a>.</para>
    </param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in <b>TCHARs</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the length of the string that is copied to the buffer, in characters, not including the terminating null character. If the buffer is too small to hold the module name, the string is truncated to <i>nSize</i> characters including the terminating null character, the function returns <i>nSize</i>, and the function sets the last error to <b>ERROR_INSUFFICIENT_BUFFER</b>.</para>
      <para>
        <b>Windows XP:</b>If the buffer is too small to hold the module name, the function returns <i>nSize</i> and the last error code is not modified. If <i>nSize</i> is zero, the return value is zero and the last error code is not modified.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameA">
    <summary>
      <para>Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.</para>
      <para>To locate the file for a module that was loaded by another process, use the<see cref="GetModuleFileNameEx" /> function.</para>
    </summary>
    <param name="hModule">
      <para>A handle to the loaded module whose path is being requested. If this parameter is <b>NULL</b>,<b>GetModuleFileName</b> retrieves the path of the executable file of the current process.</para>
      <para>The <b>GetModuleFileName</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="lpFilename">
      <para>A pointer to a buffer that receives the fully qualified path of the module. If the length of the path is less than the size that the <i>nSize</i> parameter specifies, the function succeeds and the path is returned as a null-terminated string.</para>
      <para>If the length of the path exceeds the size that the <i>nSize</i> parameter specifies, the function succeeds and the string is truncated to <i>nSize</i> characters including the terminating null character.</para>
      <para>
        <b>Windows XP:  </b>The string is truncated to <i>nSize</i> characters and is not null-terminated.</para>
      <para>The string returned will use the same format that was specified when the module was loaded. Therefore, the path can be a long or short file name, and can use the prefix "\?". For more information, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File</a>.</para>
    </param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in <b>TCHARs</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the length of the string that is copied to the buffer, in characters, not including the terminating null character. If the buffer is too small to hold the module name, the string is truncated to <i>nSize</i> characters including the terminating null character, the function returns <i>nSize</i>, and the function sets the last error to <b>ERROR_INSUFFICIENT_BUFFER</b>.</para>
      <para>
        <b>Windows XP:</b>If the buffer is too small to hold the module name, the function returns <i>nSize</i> and the last error code is not modified. If <i>nSize</i> is zero, the return value is zero and the last error code is not modified.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameW">
    <summary>
      <para>Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.</para>
      <para>To locate the file for a module that was loaded by another process, use the<see cref="GetModuleFileNameEx" /> function.</para>
    </summary>
    <param name="hModule">
      <para>A handle to the loaded module whose path is being requested. If this parameter is <b>NULL</b>,<b>GetModuleFileName</b> retrieves the path of the executable file of the current process.</para>
      <para>The <b>GetModuleFileName</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="lpFilename">
      <para>A pointer to a buffer that receives the fully qualified path of the module. If the length of the path is less than the size that the <i>nSize</i> parameter specifies, the function succeeds and the path is returned as a null-terminated string.</para>
      <para>If the length of the path exceeds the size that the <i>nSize</i> parameter specifies, the function succeeds and the string is truncated to <i>nSize</i> characters including the terminating null character.</para>
      <para>
        <b>Windows XP:  </b>The string is truncated to <i>nSize</i> characters and is not null-terminated.</para>
      <para>The string returned will use the same format that was specified when the module was loaded. Therefore, the path can be a long or short file name, and can use the prefix "\?". For more information, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File</a>.</para>
    </param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in <b>TCHARs</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the length of the string that is copied to the buffer, in characters, not including the terminating null character. If the buffer is too small to hold the module name, the string is truncated to <i>nSize</i> characters including the terminating null character, the function returns <i>nSize</i>, and the function sets the last error to <b>ERROR_INSUFFICIENT_BUFFER</b>.</para>
      <para>
        <b>Windows XP:</b>If the buffer is too small to hold the module name, the function returns <i>nSize</i> and the last error code is not modified. If <i>nSize</i> is zero, the return value is zero and the last error code is not modified.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandle">
    <summary>
      <para>Retrieves a module handle for the specified module. The module must have been loaded by the calling process.</para>
      <para>To avoid the race conditions described in the Remarks section, use the<see cref="GetModuleHandleEx" /> function.</para>
    </summary>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL,<b>GetModuleHandle</b> returns a handle to the file used to create the calling process (.exe file).</para>
      <para>The <b>GetModuleHandle</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleA">
    <summary>
      <para>Retrieves a module handle for the specified module. The module must have been loaded by the calling process.</para>
      <para>To avoid the race conditions described in the Remarks section, use the<see cref="GetModuleHandleEx" /> function.</para>
    </summary>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL,<b>GetModuleHandle</b> returns a handle to the file used to create the calling process (.exe file).</para>
      <para>The <b>GetModuleHandle</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleW">
    <summary>
      <para>Retrieves a module handle for the specified module. The module must have been loaded by the calling process.</para>
      <para>To avoid the race conditions described in the Remarks section, use the<see cref="GetModuleHandleEx" /> function.</para>
    </summary>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL,<b>GetModuleHandle</b> returns a handle to the file used to create the calling process (.exe file).</para>
      <para>The <b>GetModuleHandle</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleEx">
    <summary>Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.</summary>
    <param name="dwFlags">
      <para>This parameter can be zero or one or more of the following values. If the module's reference count is incremented, the caller must use the <see cref="FreeLibrary" /> function to decrement the reference count when the module handle is no longer needed.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h4>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h4>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h4>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file), or an address in the module (if <i>dwFlags</i> is GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS).</para>
      <para>For a module name, if the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL, the function returns a handle to the file used to create the calling process (.exe file).</para>
    </param>
    <param name="phModule">
      <para>A handle to the specified module. If the function fails, this parameter is NULL.</para>
      <para>The <b>GetModuleHandleEx</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, see<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleExA">
    <summary>Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.</summary>
    <param name="dwFlags">
      <para>This parameter can be zero or one or more of the following values. If the module's reference count is incremented, the caller must use the <see cref="FreeLibrary" /> function to decrement the reference count when the module handle is no longer needed.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h4>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h4>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h4>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file), or an address in the module (if <i>dwFlags</i> is GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS).</para>
      <para>For a module name, if the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL, the function returns a handle to the file used to create the calling process (.exe file).</para>
    </param>
    <param name="phModule">
      <para>A handle to the specified module. If the function fails, this parameter is NULL.</para>
      <para>The <b>GetModuleHandleEx</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, see<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleExW">
    <summary>Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.</summary>
    <param name="dwFlags">
      <para>This parameter can be zero or one or more of the following values. If the module's reference count is incremented, the caller must use the <see cref="FreeLibrary" /> function to decrement the reference count when the module handle is no longer needed.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h4>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h4>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h4>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file), or an address in the module (if <i>dwFlags</i> is GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS).</para>
      <para>For a module name, if the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL, the function returns a handle to the file used to create the calling process (.exe file).</para>
    </param>
    <param name="phModule">
      <para>A handle to the specified module. If the function fails, this parameter is NULL.</para>
      <para>The <b>GetModuleHandleEx</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, see<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleEx">
    <summary>Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.</summary>
    <param name="dwFlags">
      <para>This parameter can be zero or one or more of the following values. If the module's reference count is incremented, the caller must use the <see cref="FreeLibrary" /> function to decrement the reference count when the module handle is no longer needed.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h4>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h4>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h4>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file), or an address in the module (if <i>dwFlags</i> is GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS).</para>
      <para>For a module name, if the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL, the function returns a handle to the file used to create the calling process (.exe file).</para>
    </param>
    <param name="phModule">
      <para>A handle to the specified module. If the function fails, this parameter is NULL.</para>
      <para>The <b>GetModuleHandleEx</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h5>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h5>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h5>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, see<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleExA">
    <summary>Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.</summary>
    <param name="dwFlags">
      <para>This parameter can be zero or one or more of the following values. If the module's reference count is incremented, the caller must use the <see cref="FreeLibrary" /> function to decrement the reference count when the module handle is no longer needed.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h4>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h4>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h4>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file), or an address in the module (if <i>dwFlags</i> is GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS).</para>
      <para>For a module name, if the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL, the function returns a handle to the file used to create the calling process (.exe file).</para>
    </param>
    <param name="phModule">
      <para>A handle to the specified module. If the function fails, this parameter is NULL.</para>
      <para>The <b>GetModuleHandleEx</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h5>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h5>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h5>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, see<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleExW">
    <summary>Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.</summary>
    <param name="dwFlags">
      <para>This parameter can be zero or one or more of the following values. If the module's reference count is incremented, the caller must use the <see cref="FreeLibrary" /> function to decrement the reference count when the module handle is no longer needed.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h4>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h4>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h4>GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h4>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file), or an address in the module (if <i>dwFlags</i> is GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS).</para>
      <para>For a module name, if the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL, the function returns a handle to the file used to create the calling process (.exe file).</para>
    </param>
    <param name="phModule">
      <para>A handle to the specified module. If the function fails, this parameter is NULL.</para>
      <para>The <b>GetModuleHandleEx</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)</h5>
      <para>The <i>lpModuleName</i> parameter is an address in the module.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_PIN (0x00000001)</h5>
      <para>The module stays loaded until the process is terminated, no matter how many times<see cref="FreeLibrary" /> is called.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT.</para>
      <h5>- dwFlags.GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT (0x00000002)</h5>
      <para>The reference count for the module is not incremented. This option is equivalent to the behavior of<see cref="GetModuleHandle" />. Do not pass the retrieved module handle to the <see cref="FreeLibrary" /> function; doing so can cause the DLL to be unmapped prematurely. For more information, see Remarks.</para>
      <para>This option cannot be used with GET_MODULE_HANDLE_EX_FLAG_PIN.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, see<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandle">
    <summary>
      <para>Retrieves a module handle for the specified module. The module must have been loaded by the calling process.</para>
      <para>To avoid the race conditions described in the Remarks section, use the<see cref="GetModuleHandleEx" /> function.</para>
    </summary>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL,<b>GetModuleHandle</b> returns a handle to the file used to create the calling process (.exe file).</para>
      <para>The <b>GetModuleHandle</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleA">
    <summary>
      <para>Retrieves a module handle for the specified module. The module must have been loaded by the calling process.</para>
      <para>To avoid the race conditions described in the Remarks section, use the<see cref="GetModuleHandleEx" /> function.</para>
    </summary>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL,<b>GetModuleHandle</b> returns a handle to the file used to create the calling process (.exe file).</para>
      <para>The <b>GetModuleHandle</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleHandleW">
    <summary>
      <para>Retrieves a module handle for the specified module. The module must have been loaded by the calling process.</para>
      <para>To avoid the race conditions described in the Remarks section, use the<see cref="GetModuleHandleEx" /> function.</para>
    </summary>
    <param name="lpModuleName">
      <para>The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
      <para>If this parameter is NULL,<b>GetModuleHandle</b> returns a handle to the file used to create the calling process (.exe file).</para>
      <para>The <b>GetModuleHandle</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcAddress">
    <summary>Retrieves the address of an exported function (also known as a procedure) or variable from the specified dynamic-link library (DLL).</summary>
    <param name="hModule">
      <para>A handle to the DLL module that contains the function or variable. The<see cref="LoadLibrary" />, <see cref="LoadLibraryEx" />, <see cref="LoadPackagedLibrary" />, or<see cref="GetModuleHandle" /> function returns this handle.</para>
      <para>The <b>GetProcAddress</b> function does not retrieve addresses from modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="lpProcName">The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is the address of the exported function or variable.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadLibrary">
    <summary>
      <para>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</para>
      <para>For additional load options, use the<see cref="LoadLibraryEx" /> function.</para>
    </summary>
    <param name="lpLibFileName">
      <para>The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). If the specified module is an executable module, static imports are not loaded; instead, the module is loaded as if by<see cref="LoadLibraryEx" />with the <code>DONT_RESOLVE_DLL_REFERENCES</code> flag.</para>
      <para>The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.def) file.</para>
      <para>If the string specifies a full path, the function searches only that path for the module.</para>
      <para>If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks.</para>
      <para>If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File or Directory</a>.</para>
      <para>If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension ".DLL" to the module name. To prevent the function from appending ".DLL" to the module name, include a trailing point character (.) in the module name string.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadLibraryA">
    <summary>
      <para>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</para>
      <para>For additional load options, use the<see cref="LoadLibraryEx" /> function.</para>
    </summary>
    <param name="lpLibFileName">
      <para>The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). If the specified module is an executable module, static imports are not loaded; instead, the module is loaded as if by<see cref="LoadLibraryEx" />with the <code>DONT_RESOLVE_DLL_REFERENCES</code> flag.</para>
      <para>The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.def) file.</para>
      <para>If the string specifies a full path, the function searches only that path for the module.</para>
      <para>If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks.</para>
      <para>If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File or Directory</a>.</para>
      <para>If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension ".DLL" to the module name. To prevent the function from appending ".DLL" to the module name, include a trailing point character (.) in the module name string.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadLibraryW">
    <summary>
      <para>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</para>
      <para>For additional load options, use the<see cref="LoadLibraryEx" /> function.</para>
    </summary>
    <param name="lpLibFileName">
      <para>The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). If the specified module is an executable module, static imports are not loaded; instead, the module is loaded as if by<see cref="LoadLibraryEx" />with the <code>DONT_RESOLVE_DLL_REFERENCES</code> flag.</para>
      <para>The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.def) file.</para>
      <para>If the string specifies a full path, the function searches only that path for the module.</para>
      <para>If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks.</para>
      <para>If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File or Directory</a>.</para>
      <para>If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension ".DLL" to the module name. To prevent the function from appending ".DLL" to the module name, include a trailing point character (.) in the module name string.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadLibrary">
    <summary>
      <para>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</para>
      <para>For additional load options, use the<see cref="LoadLibraryEx" /> function.</para>
    </summary>
    <param name="lpLibFileName">
      <para>The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). If the specified module is an executable module, static imports are not loaded; instead, the module is loaded as if by<see cref="LoadLibraryEx" />with the <code>DONT_RESOLVE_DLL_REFERENCES</code> flag.</para>
      <para>The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.def) file.</para>
      <para>If the string specifies a full path, the function searches only that path for the module.</para>
      <para>If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks.</para>
      <para>If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File or Directory</a>.</para>
      <para>If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension ".DLL" to the module name. To prevent the function from appending ".DLL" to the module name, include a trailing point character (.) in the module name string.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadLibraryA">
    <summary>
      <para>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</para>
      <para>For additional load options, use the<see cref="LoadLibraryEx" /> function.</para>
    </summary>
    <param name="lpLibFileName">
      <para>The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). If the specified module is an executable module, static imports are not loaded; instead, the module is loaded as if by<see cref="LoadLibraryEx" />with the <code>DONT_RESOLVE_DLL_REFERENCES</code> flag.</para>
      <para>The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.def) file.</para>
      <para>If the string specifies a full path, the function searches only that path for the module.</para>
      <para>If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks.</para>
      <para>If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File or Directory</a>.</para>
      <para>If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension ".DLL" to the module name. To prevent the function from appending ".DLL" to the module name, include a trailing point character (.) in the module name string.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadLibraryW">
    <summary>
      <para>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</para>
      <para>For additional load options, use the<see cref="LoadLibraryEx" /> function.</para>
    </summary>
    <param name="lpLibFileName">
      <para>The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). If the specified module is an executable module, static imports are not loaded; instead, the module is loaded as if by<see cref="LoadLibraryEx" />with the <code>DONT_RESOLVE_DLL_REFERENCES</code> flag.</para>
      <para>The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the <b>LIBRARY</b> keyword in the module-definition (.def) file.</para>
      <para>If the string specifies a full path, the function searches only that path for the module.</para>
      <para>If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks.</para>
      <para>If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see<a href="https://docs.microsoft.com//windows/desktop/FileIO/naming-a-file">Naming a File or Directory</a>.</para>
      <para>If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension ".DLL" to the module name. To prevent the function from appending ".DLL" to the module name, include a trailing point character (.) in the module name string.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the module.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadResource">
    <summary>Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.</summary>
    <param name="hModule">A handle to the module whose executable file contains the resource. If <i>hModule</i> is <b>NULL</b>, the system loads the resource from the module that was used to create the current process.</param>
    <param name="hResInfo">A handle to the resource to be loaded. This handle is returned by the <see cref="FindResource" /> or <see cref="FindResourceEx" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the data associated with the resource.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LockResource">
    <summary>Retrieves a pointer to the specified resource in memory.</summary>
    <param name="hResData">A handle to the resource to be accessed. The <see cref="LoadResource function" /> returns this handle. Note that this parameter is listed as an <b>HGLOBAL</b> variable only for backward compatibility. Do not pass any value as a parameter other than a successful return value from the <b>LoadResource</b> function.</param>
    <returns>If the loaded resource is available, the return value is a pointer to the first byte of the resource; otherwise, it is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RemoveDllDirectory">
    <summary>Removes a directory that was added to the process DLL search path by using<see cref="AddDllDirectory" />.</summary>
    <param name="Cookie">The cookie returned by <see cref="AddDllDirectory" /> when the directory was added to the search path.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDefaultDllDirectories">
    <summary>Specifies a default set of directories to search when the calling process loads a DLL. This search path is used when <see cref="LoadLibraryEx" /> is called with no<b>LOAD_LIBRARY_SEARCH</b> flags.</summary>
    <param name="DirectoryFlags">
      <para>The directories to search. This parameter can be any combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOAD_LIBRARY_SEARCH_APPLICATION_DIR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If this value is used, the application's installation directory is searched.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOAD_LIBRARY_SEARCH_DEFAULT_DIRS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>This value is a combination of <b>LOAD_LIBRARY_SEARCH_APPLICATION_DIR</b>, <b>LOAD_LIBRARY_SEARCH_SYSTEM32</b>, and <b>LOAD_LIBRARY_SEARCH_USER_DIRS</b>.<para>This value represents the recommended maximum number of directories an application should include in its DLL search path.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOAD_LIBRARY_SEARCH_SYSTEM32</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If this value is used, %windows%\system32 is searched.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOAD_LIBRARY_SEARCH_USER_DIRS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If this value is used, any path explicitly added using the <see cref="AddDllDirectory" /> or <see cref="SetDllDirectory" /> function is searched. If more than one directory has been added, the order in which those directories are searched is unspecified.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SizeofResource">
    <summary>Retrieves the size, in bytes, of the specified resource.</summary>
    <param name="hModule">A handle to the module whose executable file contains the resource. Default is the module used to create the current process.</param>
    <param name="hResInfo">A handle to the resource. This handle must be created by using the <see cref="FindResource" /> or <see cref="FindResourceEx" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of bytes in the resource.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
</doc>