<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IWbemObjectSinkEx.Indicate">
    <summary>
      <para>The
<b>Indicate</b> method is called by a source to provide a notification. Typically, WMI calls the client implementation of this interface after the client executes one of the asynchronous methods of
<see cref="IWbemServices" />. In other cases, various types of providers call an implementation exported by WMI to deliver events. Therefore, client code may have to implement this interface in some cases, and use a different component's implementation in other cases.</para>
      <para>Use this interface and method in conjunction with the asynchronous methods of the
<see cref="IWbemServices" /> interface.</para>
      <para>Clients and providers must implement this interface to receive notifications or to execute the asynchronous methods of
<see cref="IWbemServices" />. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
    </summary>
    <param name="lObjectCount">
      <para>Number of objects in the following array of pointers.</para>
    </param>
    <param name="apObjArray">
      <para>Array of pointers to
<see cref="IWbemClassObject" /> interfaces. The array memory itself is read-only, and is owned by the caller of the method. Because this is an in parameter, the implementation has the option of calling <see cref="IWbemClassObject.AddRef" /> on any object pointer in the array and holding it before returning if the objects will be used after the method has returned, in accordance with COM rules. If the objects are only used for the duration of the
<b>Indicate</b> call, then you do not need to call <b>AddRef</b> on each object pointer.</para>
    </param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
    </returns>
    <remarks>
      <para>When implementing an event subscription sink (<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> or <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemeventsink">IWbemEventSink</a>), do  not call into WMI from within the <b>Indicate</b>  method on the sink object.  For example, calling <see cref="IWbemServices.CancelAsyncCall" />  from within an implementation of <b>Indicate</b> can interfere with the WMI state. To cancel an event subscription, set a flag and call <b>IWbemServices.CancelAsyncCall</b> from another thread or object. For implementations that are not related to an event sink, such as object, enum, and query retrievals, you can call back into WMI.</para>
      <para>Sink implementations should process the event notification within 100 MSEC because the WMI thread that delivers the event notification cannot do other work until the sink object has completed processing. If the notification requires a large amount of processing, the sink can use an internal queue for another thread to handle the processing.</para>
      <para>When an event provider calls
<b>Indicate</b> to provide an event, the call can fail with <b>WBEM_E_SERVER_TOO_BUSY</b>. The provider can choose to respond to this message by re-firing the event.</para>
      <para>
        <b>Note</b>  Because the callback to the sink might not be returned at the same authentication level as the client requires, it is recommended that you use semisynchronous instead of asynchronous communication.  For more information, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</seealso>
    <seealso cref="IWbemObjectSink.SetStatus" />
    <seealso cref="IWbemObjectSinkEx" />
    <seealso cref="IWbemServices.ExecQueryAsync" />
  </member>
  <member name="IWbemObjectSinkEx.SetStatus">
    <summary>
      <para>The
<b>IWbemObjectSink.SetStatus</b> method is called by sources  to indicate the end of a notification sequence, or to send other status codes to the sink. The
<see cref="IWbemObjectSink.Indicate" /> method may or may not have been called before the call to
<b>SetStatus</b>.</para>
      <para>Typically, a client implements the
<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> interface, and executes
<see cref="IWbemServices" /> methods that return their results using the
<b>IWbemObjectSink</b> interface. During this operation, WMI calls
<see cref="Indicate" /> as many times as required, followed by a final call to
<b>SetStatus</b>, and in many cases, <see cref="Release" />.</para>
    </summary>
    <param name="lFlags">
      <para>Bitmask of status information. The status of the operation can be obtained by examining the <i>hResult</i> parameter.</para>
      <h4>WBEM_STATUS_COMPLETE</h4>
      <para>The operation has completed.</para>
      <h4>WBEM_STATUS_PROGRESS</h4>
      <para>The operation is still in progress.</para>
      <h4>WBEM_STATUS_REQUIREMENTS</h4>
      <para>Used in activating post-filtering.</para>
    </param>
    <param name="hResult">
      <para>This parameter is set to the <b>HRESULT</b> of the asynchronous operation or notification. This is either an error code, if an error occurred, or the amount of progress that has been made on an asynchronous call.</para>
    </param>
    <param name="strParam">
      <para>Receives a pointer to a read-only <b>BSTR</b>, if the original asynchronous operation returns a string. For example, when using
<see cref="PutInstanceAsync" />,
<b>SetStatus</b> is called with this parameter set to the object path of the newly created instance.</para>
    </param>
    <param name="pObjParam">
      <para>In cases where a complex error or status object is returned, this contains a pointer to the error object. If the object is required after
<b>SetStatus</b> returns, the called object must use the <see cref="AddRef" /> method on the pointer before the called object returns.</para>
    </param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
    </returns>
    <remarks>
      <para>When implementing an event subscription sink (<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> or <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemeventsink">IWbemEventSink</a>), do  not call into WMI from within the <b>SetStatus</b>  method on the sink object.  For example, calling <see cref="IWbemServices.CancelAsyncCall" />  from within an implementation of <b>SetStatus</b> can interfere with the WMI state. To cancel an event subscription, set a flag and call <b>IWbemServices.CancelAsyncCall</b> from another thread or object. For implementations that are not related to an event sink, such as object, enum, and query retrievals, you can call back into WMI.</para>
      <para>Sink implementations should process the event notification within 100 MSEC because the WMI thread that delivers the event notification cannot do other work until the sink object has completed processing. If the notification requires a large amount of processing, the sink can use an internal queue for another thread to handle the processing. For implementations that are not related to an event sink, such as object, enum, and query retrievals, you can call back into WMI.</para>
      <para>To receive intermediate status updates through the client's implementation of <b>SetStatus</b>, you must specify <b>WBEM_FLAG_SENT_STATUS</b> in your call to a provider/service method. The exact status can be determined by examining the HIWORD and LOWORD values of <i>hResult</i> separately. The LOWORD (<i>hResult</i>) value contains the amount of progress that has been made so far and the HIWORD (<i>hResult</i>) value contains the total.</para>
      <para>If you do not specify <b>WBEM_FLAG_SEND_STATUS</b> when calling your provider or service method, you are guaranteed to receive one and only one call to
<b>SetStatus</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</seealso>
    <seealso cref="IWbemObjectSink.Indicate" />
    <seealso cref="IWbemObjectSinkEx" />
    <seealso cref="IWbemServices.ExecQueryAsync" />
    <seealso cref="WBEM_STATUS_TYPE" />
  </member>
  <member name="IWbemObjectSinkEx.PromptUser">
    <summary>
      <para>TBD</para>
    </summary>
    <param name="strMessage"></param>
    <param name="uPromptType"></param>
    <param name="puReturned"></param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IWbemObjectSinkEx" />
  </member>
  <member name="IWbemObjectSinkEx.WriteError">
    <summary>
      <para>TBD</para>
    </summary>
    <param name="pObjError"></param>
    <param name="puReturned"></param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IWbemObjectSinkEx" />
  </member>
  <member name="IWbemObjectSinkEx.WriteMessage">
    <summary>
      <para>TBD</para>
    </summary>
    <param name="uChannel"></param>
    <param name="strMessage"></param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IWbemObjectSinkEx" />
  </member>
  <member name="IWbemObjectSinkEx.WriteProgress">
    <summary>
      <para>TBD</para>
    </summary>
    <param name="strActivity"></param>
    <param name="strCurrentOperation"></param>
    <param name="strStatusDescription"></param>
    <param name="uPercentComplete"></param>
    <param name="uSecondsRemaining"></param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IWbemObjectSinkEx" />
  </member>
  <member name="IWbemObjectSinkEx.WriteStreamParameter">
    <summary>
      <para>TBD</para>
    </summary>
    <param name="strName"></param>
    <param name="vtValue"></param>
    <param name="ulType"></param>
    <param name="ulFlags"></param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IWbemObjectSinkEx" />
  </member>
  <member name="IWbemObjectSinkEx">
    <summary>
      <para>Creates a sink interface that can receive all types of notifications within the WMI programming model. Clients must implement this interface to receive both the results of the
<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-an-asynchronous-call-with-c--">asynchronous methods</a> of
<see cref="IWbemServices" />, and specific types of event notifications. Providers use, but do not implement this interface to provide events and objects to WMI.</para>
    </summary>
  </member>
</doc>