<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IEnumWbemClassObject.Next">
    <summary>
      <para>Use the <b>IEnumWbemClassObject.Next</b> method to
get one or more objects starting at the current position in an enumeration. This method advances the current
position in the enumeration by <i>uCount</i> objects, so that subsequent calls return the
subsequent objects.</para>
    </summary>
    <param name="lTimeout">
      <para>Specifies the maximum amount of time in milliseconds that the call blocks before returning. If you use the
constant <b>WBEM_INFINITE</b> (0xFFFFFFFF), the call blocks until objects are available. If
you use the value 0 (<b>WBEM_NO_WAIT</b>), the call returns immediately, whether any objects
are available or not.</para>
    </param>
    <param name="uCount">
      <para>Number of requested objects.</para>
    </param>
    <param name="apObjects">
      <para>Pointer to enough storage to hold the number of
<see cref="IWbemClassObject" /> interface pointers specified by
<i>uCount</i>. This storage must be supplied by the caller. This parameter cannot be
<b>NULL</b>. The caller must call <b>Release</b> on each of the received
interface pointers when they are no longer needed.</para>
    </param>
    <param name="puReturned">
      <para>Pointer to a <b>ULONG</b> that receives the number of objects returned. This number can
be less than the number requested in <i>uCount</i>. This pointer cannot be
<b>NULL</b>.</para>
      <para>
        <b>Note</b>  The <b>Next</b> method returns
<b>WBEM_S_FALSE</b> when you have reached the end of the enumeration, even if objects have
been returned successfully. The <b>WBEM_S_NO_ERROR</b> value returns only when the number of
objects returned matches the number requested in <i>uCount</i>. The
<b>WBEM_S_TIMEDOUT</b> value is returned when the number of objects returned is less than
the number requested but you are not at the end of the enumeration. Therefore, you should use loop termination
logic that examines the <i>puReturned</i> value to ensure that you have reached the end of
the enumeration.</para>
    </param>
    <returns>
      <para>The <b>Next</b> method returns an <b>HRESULT</b> indicating
the status of the method call. The following list lists the value contained within an
<b>HRESULT</b>.</para>
    </returns>
    <remarks>
      <para>You may see COM-specific error codes returned if network problems cause you to lose the remote connection to Windows Management. On error, you can call the COM function <see cref="GetErrorInfo" /> to obtain more error information.</para>
      <para>If more than one object is requested, and if the number of requested objects is returned, the function returns <b>WBEM_S_NO_ERROR</b>. If less than the requested number of objects is available, and if the enumeration has completed, those objects are returned and the function returns <b>WBEM_S_FALSE</b>.</para>
      <para>If the enumeration has not completed, the call waits for objects to be available up to the specified time-out. If the enumeration times out before the objects are available, the function returns <b>WBEM_S_TIMEDOUT</b>.</para>
      <para>
        <b>Note</b>  Because the call-back to the sink might not be returned at the same authentication level as the client requires, it is recommended that you use semisynchronous instead of asynchronous communication.  For more information, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>Examples</h4>
      <para>For an extended discussion and example of making queries in C++ and WMI, see Making <a href="https://www.codeproject.com/articles/10539/making-wmi-queries-in-c">WMI Queries In C++</a> on CodeProject.</para>
      <para>In the following code, more than one object is requested:</para>
      <code>HRESULT ProcessEnum( IEnumWbemClassObject*    pEnum )
{
    HRESULT    hRes = WBEM_S_NO_ERROR;

    // Final Next will return WBEM_S_FALSE
    while ( WBEM_S_NO_ERROR == hRes )
    {
        ULONG            uReturned;
        IWbemClassObject*    apObj[10];

        hRes = pEnum-&gt;Next( WBEM_INFINITE, 10, apObj, &amp;amp;amp;amp;amp;amp;uReturned );

        if ( SUCCEEDED( hRes ) )
        {
            // Do something with the objects.
            //ProcessObjects( uReturned,  apObj );

            for ( ULONG n = 0; n &lt; uReturned; n++ )
            {
                apObj[n]-&gt;Release();
            }

        }    // If Enum succeeded...
    }    // While Enum is returning objects...

    return hRes;
}
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/WmiSdk/enumerating-wmi">Enumerating WMI</seealso>
    <seealso cref="IEnumWbemClassObject" />
  </member>
  <member name="IEnumWbemClassObject.NextAsync">
    <summary>
      <para>Use the <b>NextAsync</b> method when a controlled asynchronous retrieval of objects to a sink is required. Normal asynchronous retrieval, such as a call to
<see cref="IWbemServices.ExecQueryAsync" />, results in uncontrolled delivery of objects to the caller's implementation of
<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This method is helpful for cases where a component controls object delivery.</para>
    </summary>
    <param name="uCount">
      <para>Number of objects being requested.</para>
    </param>
    <param name="pSink">
      <para>Sink to receive the objects. The sink must be implemented by the caller. As each batch of objects is requested, they are delivered to the <i>pSink</i> parameter of the
<see cref="Indicate" /> method followed by a final call to the <i>pSink</i> parameter of the <see cref="SetStatus" /> method. If the sink is going to be used to deliver objects, this method returns <b>WBEM_S_NO_ERROR</b>, even if the number of objects to be delivered is less than requested. However, if there are no more objects remaining, then the <i>pSink</i> parameter is ignored (no calls to the <i>pSink</i> parameter of <b>SetStatus</b> are made). Instead, this method returns <b>WBEM_S_FALSE</b>.</para>
    </param>
    <returns>
      <para>The
<b>NextAsync</b> method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
    </returns>
    <remarks>
      <para>A call to the COM function <see cref="GetErrorInfo" /> provides more information about the error. COM-specific error codes may also be returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <para>This call returns immediately and delivery to the sink occurs in the background. If multiple calls are made to this method from one or more threads, they are logically queued and the order of calls and object delivery is preserved. Multiple calls made to this method from one or more threads block do not return until all the sink objects related to previous calls to this method have been serviced. A call to
<see cref="Reset" /> does not affect delivery of objects currently in progress as a result of previous calls. The
<b>Reset</b> method only causes new calls to start at the beginning of the object sequence.</para>
      <para>If the number of requested objects is immediately available, the function returns <b>WBEM_S_NO_ERROR</b>. If less than the number of requested objects are available, the available objects are returned and <b>WBEM_S_NO_ERROR</b> are returned. The remainder of the objects are delivered by the user-supplied sink.</para>
      <para>As the objects become available, the caller's implementation of
<see cref="IWbemObjectSink.Indicate" /> is called zero or more times to deliver the objects. This is followed by a call to
<see cref="IWbemObjectSink.SetStatus" /> with a value of <b>WBEM_S_NO_ERROR</b> if <i>uCount</i> items are returned.</para>
      <para>If fewer objects are available than the number requested, <see cref="Indicate" /> is called for those objects that are available. <see cref="SetStatus" /> is then called with a value of <b>WBEM_S_FALSE</b>, or the error code if an error occurred.</para>
      <para>If the requested number of objects is delivered, the final object is followed by a call to <see cref="SetStatus" /> with a status code of <b>WBEM_S_NO_ERROR</b>. If the enumeration completes before the requested number of objects can be delivered, the <b>SetStatus</b> method has a status code of <b>WBEM_S_FALSE</b>.</para>
      <para>If there are no available objects, <see cref="Indicate" /> is not called. However, a final call to <see cref="SetStatus" /> always occurs to indicate the status of the entire operation.</para>
      <para>Because the callback might not be returned at the same authentication level as the client requires, it is recommended that you use semisynchronous instead of asynchronous communication. If you require asynchronous communication, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <para>For more information about using methods semisynchronously, see <see cref="IEnumWbemClassObject.Next" /> and <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
    </remarks>
  </member>
  <member name="IEnumWbemClassObject.Reset">
    <summary>
      <para>The
<b>IEnumWbemClassObject.Reset</b> method resets an enumeration sequence back to the beginning. Because CIM objects are dynamic, calling this method does not necessarily return the same list of objects that you obtained previously.
<b>Note</b>  This method fails if the enumerator was originally created with the <b>WBEM_FLAG_FORWARD_ONLY</b> option.</para>
    </summary>
    <returns>
      <para>The
<b>Reset</b> method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
    </returns>
    <remarks>
      <para>The COM-specific error codes may also be returned if the remote connection to the Windows Management is lost due to network problems.</para>
      <para>You may see COM-specific error codes returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <para>If <b>WBEM_S_NO_ERROR</b> is not returned, you can call the COM function <b>GetErrorInfo</b> to get  more information about the error.</para>
    </remarks>
  </member>
  <member name="IEnumWbemClassObject.Skip">
    <summary>
      <para>You can use the
<b>IEnumWbemClassObject.Skip</b> method to move the current position in an enumeration ahead by a specified number of objects. Also, this affects subsequent calls to
<see cref="NextAsync" />, but it does not affect pending deliveries begun with
<b>NextAsync</b>.</para>
    </summary>
    <param name="lTimeout">
      <para>Maximum amount of time in milliseconds that the call to
<b>Skip</b> blocks before returning. If you use the constant <b>WBEM_INFINITE</b> (0xFFFFFFFF), the call blocks until the operation succeeds. If
<b>Skip</b> cannot complete the operation before the <i>lTimeout</i> value expires, the call returns <b>WBEM_S_TIMEDOUT</b>.</para>
    </param>
    <param name="nCount">
      <para>Number of objects to skip. If this parameter is greater than the number of objects left to enumerate, then this call skips to the end of the enumeration and <b>WBEM_S_FALSE</b> is returned.</para>
    </param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
    </returns>
    <remarks>
      <para>COM-specific error codes may also be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </remarks>
  </member>
  <member name="IEnumWbemClassObject">
    <summary>
      <para>The
<b>IEnumWbemClassObject</b> interface is used to enumerate <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/gloss-c">Common Information Model</a> (CIM) objects and is similar to a standard COM enumerator.</para>
      <para>An object of type
<b>IEnumWbemClassObject</b> is received from calls to the following methods:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="IWbemServices.ExecQuery" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IWbemServices.CreateInstanceEnum" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IWbemServices.CreateClassEnum" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IWbemServices.ExecNotificationQuery" />
          </description>
        </item>
      </list>CIM objects are retrieved from an enumeration as objects of type
<see cref="IWbemClassObject" /> by calling the
<see cref="Next" /> method. You can reset an enumeration back to the beginning by calling the
<see cref="Reset" /> method.
</summary>
    <remarks>
      <para>
        <b>IEnumWbemClassObject</b> is the object returned from a WMI query, and is used to enumerate through the returned values. For more information on how to use this class, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/querying-wmi">Querying WMI</a> and <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/enumerating-wmi">Enumerating WMI</a>.</para>
      <h4>Examples</h4>
      <para>The following C++ code sample describes how to retrieve an <b>IEnumWbemClassObject</b>.</para>
      <code>void ExecQuerySync(IWbemServices *pSvc)
{
    // Query for all users and groups.

    BSTR Language = SysAllocString(L"WQL");
    BSTR Query = SysAllocString(L"SELECT * FROM __Namespace");

    // Initialize the IEnumWbemClassObject pointer.
    IEnumWbemClassObject *pEnum = 0;

    // Issue the query.
    HRESULT hRes = pSvc-&gt;ExecQuery(
        Language,
        Query,
        WBEM_FLAG_FORWARD_ONLY,         // Flags
        0,                              // Context
        &amp;amp;amp;amp;amp;amp;pEnum
        );

    SysFreeString(Query);
    SysFreeString(Language);

    if (hRes != 0)
    {
        printf("Error\n");
        return;
    }

    ULONG uTotal = 0;

    // Retrieve the objects in the result set.
    for (;;)
    {
        IWbemClassObject *pObj = 0;
        ULONG uReturned = 0;

        hRes = pEnum-&gt;Next(
            0,                  // Time out
            1,                  // One object
            &amp;amp;amp;amp;amp;amp;pObj,
            &amp;amp;amp;amp;amp;amp;uReturned
            );

        uTotal += uReturned;

        if (uReturned == 0)
            break;

        // Use the object.

        // ...

        // Release it.
        // ===========

        pObj-&gt;Release();    // Release objects not owned.
    }

    // All done.
    pEnum-&gt;Release();
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/WmiSdk/com-api-for-wmi">COM API for
WMI</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/WmiSdk/enumerating-wmi">Enumerating WMI</seealso>
  </member>
</doc>