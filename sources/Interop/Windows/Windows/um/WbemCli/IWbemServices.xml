<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IWbemServices.CancelAsyncCall">
    <summary>The<b>IWbemServices.CancelAsyncCall</b> method cancels any currently pending asynchronous calls based on the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> pointer, which was originally passed to the asynchronous method. The outstanding<b>IWbemObjectSink</b> pointer can be released prior to the call or after the call returns. The<b>CancelAsyncCall</b> method is not operational from within a sink and is not supported by method providers. This means only the client end of the call is canceled. The implementing provider is not notified that the call was canceled and runs to completion. You should consider this before canceling methods that take a long time to complete, such as the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/vdswmi/defrag-method-in-class-win32-volume">Defrag</a> and <a href="https://docs.microsoft.com//previous-versions/windows/desktop/vdswmi/format-method-in-class-win32-volume">Format</a> methods in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa394515(v=vs.85)">Win32_Volume</a> class.</summary>
    <param name="pSink">Pointer to the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> implementation provided by the client to any of the asynchronous methods of<see cref="IWbemServices" />.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes can also be returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <div>
        <b>Note</b>  If <see cref="SetStatus" /> has not been called on the application's sink by the time WMI processes <b>CancelAsyncCall</b>, WMI calls <b>SetStatus</b> on that sink with <b>WBEM_E_CALL_CANCELLED</b> as the value for the <i>hResult</i> parameter.</div>Timing, and the nature of an asynchronous operation, can affect whether WMI is able to cancel the operation. Only lengthy queries are likely to be successfully canceled before they have completed. Faster operations, such as asynchronous deletions or modifications, typically complete before WMI can process a <b>CancelAsyncCall</b> call. So while <b>CancelAsyncCall</b> attempts to cancel the current operation, sometimes all that can be done is to release the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> pointer.<div><b>Note</b>  It is possible to make numerous asynchronous calls using the same object sink. In this case, the <b>CancelAsyncCall</b> method cancels all asynchronous calls sharing this object sink. It is strongly recommended that you create one instance of an object sink for each outstanding asynchronous call.</div></returns>
  </member>
  <member name="IWbemServices.CreateClassEnum">
    <summary>
      <para>The<b>IWbemServices.CreateClassEnum</b> method returns an enumerator for all classes that satisfy selection criteria. The caller must use the returned enumerator to retrieve the class definitions, calling<see cref="IEnumWbemClassObject.Next" /> to obtain each class or blocks of classes. It finishes by calling <see cref="IEnumWbemClassObject.Release" />.</para>
      <div>
        <b>Note</b>  It is not an error for the returned enumerator to have 0 (zero) elements.</div>
    </summary>
    <param name="strSuperclass">If not <b>NULL</b> or blank, specifies a parent class name. Only classes that are subclasses of this class are returned in the enumerator. If it is <b>NULL</b> or blank, and <i>lFlags</i> is WBEM_FLAG_SHALLOW, only the top-level classes are returned (that is, classes that have no parent class). If it is <b>NULL</b> or blank and <i>lFlags</i> is <b>WBEM_FLAG_DEEP</b>, all classes within the namespace are returned.</param>
    <param name="lFlags">
      <para>The following flags affect the behavior of this method. The suggested value for this parameter is WBEM_FLAG_RETURN_IMMEDIATELY and WBEM_FLAG_FORWARD_ONLY for best performance.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI retrieves the amended qualifiers stored in the localized namespace of the current connection's locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_DEEP</h4>
      <para>This flag forces the enumeration to include all subclasses in the hierarchy, but not this class.</para>
      <h4>WBEM_FLAG_SHALLOW</h4>
      <para>This flag forces the enumeration to include only pure instances of this class, excluding all instances of subclasses that supply properties not found in this class.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag causes a semisynchronous call. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>WBEM_FLAG_FORWARD_ONLY</h4>
      <para>This flag causes a forward-only enumerator to be returned. Typically, forward-only enumerators are faster and use less memory than conventional enumerators, but they do not allow calls to<see cref="Clone" /> or<see cref="Reset" />.</para>
      <h4>WBEM_FLAG_BIDIRECTIONAL</h4>
      <para>This flag causes WMI to retain pointers to objects of the enumeration until the client releases the enumerator. Because object pointers are not released immediately, this method may fail with an <b>HRESULT</b> of <b>WBEM_E_OUT_OF_MEMORY</b> if the client attempts to enumerate a large number of objects. This flag is implied by default if you set the <i>lFlags</i> parameter to 0 (zero).</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that can be used by the provider that is providing the requested classes. The values in the context object must be specified in the documentation for the provider. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="ppEnum">Receives the pointer to the enumerator. The returned object has a positive reference count. The caller must call <see cref="Release" /> on the pointer when it is no longer required.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of a method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also can be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.CreateClassEnumAsync">
    <summary>
      <para>The<b>IWbemServices.CreateClassEnumAsync</b> method returns an enumeration of all classes that the class provider supports. The class provider creates each class definition from scratch and only returns subclasses of the requested class. As an asynchronous method,<b>CreateClassEnumAsync</b> returns a status message immediately and then updates the sink passed through the <i>pResponseHandler</i> parameter—if necessary.</para>
      <para>When a call succeeds, WMI calls <see cref="AddRef" /> on the pointer <i>pResponseHandler</i>, returns immediately, and then asynchronously calls <i>pResponseHandler</i>– &gt;<see cref="Indicate" /> from another thread with class definitions until the query is satisfied.</para>
    </summary>
    <param name="strSuperclass">If not <b>NULL</b> or blank, this parameter specifies a parent class name. Only classes that are subclasses of this class are returned in the enumerator. If <b>NULL</b> or blank, and <i>lFlags</i> is <b>WBEM_FLAG_SHALLOW</b>, only top-level classes—those that have no parent class—are returned. If it is <b>NULL</b> or blank and <i>lFlags</i> is <b>WBEM_FLAG_DEEP</b>, all classes within the namespace are returned.</param>
    <param name="lFlags">
      <para>One or more of the following values are valid.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, Windows Management Instrumentation (WMI) retrieves the amended qualifiers stored in the localized namespace of the current connection locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_BIDIRECTIONAL</h4>
      <para>This flag causes WMI to retain pointers to objects of the enumeration until the client releases the enumerator.</para>
      <h4>WBEM_FLAG_DEEP</h4>
      <para>This flag forces the enumeration to include this and all subclasses in the hierarchy.</para>
      <h4>WBEM_FLAG_SHALLOW</h4>
      <para>This flag forces the enumeration to include only pure instances of this class, excluding all instances of subclasses that supply properties not found in this class.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>This flag registers a request in WMI to receive intermediate status reports through the client implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change behavior.</para>
      <div>
        <b>Note</b>  If <i>strSuperclass</i> is <b>NULL</b> or blank and <b>WBEM_FLAG_DEEP</b> is specified, all classes are returned.</div>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that can be used by the provider that returns the requested classes. The values in the context object must be specified in the documentation for the provider. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">Pointer to the caller implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the objects as they become available by using the<see cref="IWbemObjectSink.Indicate" /> method. When no objects are available, the<see cref="IWbemObjectSink.SetStatus" /> method is called by WMI. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If WBEM_S_NO_ERROR is returned, then the user<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. WMI only calls <b>AddRef</b> on the pointer when <b>WBEM_S_NO_ERROR</b> returns. When an error code returns, the reference count is the same as no entry. For a detailed explanation of this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>This method returns an <b>HRESULT</b> that indicates the status of the method call. On failure, you can obtain available information from the COM function <see cref="GetErrorInfo" />. COM-specific error codes can be returned if network problems cause you to lose the remote connection to WMI. Note that if<b>CreateClassEnumAsync</b> returns WBEM_S_NO_ERROR, WMI waits for a result from the<b>SetStatus</b> method of the response handler. WMI waits indefinitely on a local connection or until a remote connection time-out occurs. The following list lists the value contained within an <b>HRESULT</b>.</returns>
  </member>
  <member name="IWbemServices.CreateInstanceEnum">
    <summary>The<b>IWbemServices.CreateInstanceEnum</b> method creates an enumerator that returns the instances of a specified class according to user-specified selection criteria. This method supports simple WQL queries; more complex queries can be processed using the<see cref="IWbemServices.ExecQuery" /> method.</summary>
    <param name="strFilter">Valid <b>BSTR</b> containing the name of the class for which instances are desired. This parameter cannot be <b>NULL</b>.</param>
    <param name="lFlags">
      <para>The following flags affect the behavior of this method. The suggested value for this parameter is <b>WBEM_FLAG_RETURN_IMMEDIATELY</b> and <b>WBEM_FLAG_FORWARD_ONLY</b> for best performance.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI retrieves the amended qualifiers stored in the localized namespace of the current connection's locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_DEEP</h4>
      <para>This flag forces the enumeration to include this and all subclasses in the hierarchy.</para>
      <h4>WBEM_FLAG_SHALLOW</h4>
      <para>This flag forces the enumeration to include only pure instances of this class, excluding all instances of subclasses which supply properties not found in this class.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag causes this to be a semisynchronous call. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>WBEM_FLAG_FORWARD_ONLY</h4>
      <para>This flag causes a forward-only enumerator to be returned. Forward-only enumerators are generally much faster and use less memory than conventional enumerators but do not allow calls to<see cref="Clone" /> or<see cref="Reset" />.</para>
      <h4>WBEM_FLAG_BIDIRECTIONAL</h4>
      <para>This flag causes Windows Management to retain pointers to objects of the enumeration until the client releases the enumerator. Because object pointers are not released immediately, this method may fail with a <i>hResult</i> of <b>WBEM_E_OUT_OF_MEMORY</b> if the client attempts to enumerate a large number of objects. This flag is implied by default if you set the <i>lFlags</i> parameter to 0 (zero).</para>
      <h4>WBEM_FLAG_DIRECT_READ</h4>
      <para>This flag causes direct access to the provider for the class specified without any regard to its parent class or subclasses.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider that is providing the requested instances. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="ppEnum">Receives the pointer to the enumerator, which has a positive reference count. The caller must call <b>IUnknown.Release</b> on the pointer after it is no longer required.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.CreateInstanceEnumAsync">
    <summary>The<b>IWbemServices.CreateInstanceEnumAsync</b> method creates an enumerator that asynchronously returns the instances of a specified class according to user-specified selection criteria. This method supports simple WMI Query Language (WQL) queries. More complex queries can be processed using the<see cref="IWbemServices.ExecQueryAsync" /> method.</summary>
    <param name="strFilter">Valid <b>BSTR</b> containing the name of the class for which instances are desired. This parameter cannot be <b>NULL</b>.</param>
    <param name="lFlags">
      <para>This parameter can be one of the following values.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, Windows Management Instrumentation (WMI) retrieves the amended qualifiers stored in the localized namespace of the current connection's locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_DEEP</h4>
      <para>This flag forces the enumeration to include instances of this and all subclasses in the hierarchy.</para>
      <h4>WBEM_FLAG_SHALLOW</h4>
      <para>This flag forces the enumeration to include only pure instances of this class, excluding all instances of subclasses, which supply properties not found in this class.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>This flag registers with Windows Management a request to receive intermediate status reports through the clients implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change behavior.</para>
      <h4>WBEM_FLAG_BIDIRECTIONAL</h4>
      <para>This flag causes Windows Management to retain pointers to objects of the enumeration until the client releases the enumerator.</para>
      <h4>WBEM_FLAG_DIRECT_READ</h4>
      <para>This flag causes direct access to the provider for the class specified without any regard to its parent class or subclasses.</para>
    </param>
    <param name="pCtx">Typically NULL. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider that is returning the requested instances. The values in the context object must be specified in the documentation for the provider in question. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">Pointer to the caller's implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the objects as they become available. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation will be called to indicate the result of the operation. Windows Management only calls <see cref="AddRef" /> on the pointer in cases where <b>WBEM_S_NO_ERROR</b> returns. In cases where an error code returns, the reference count is the same as on entry. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain more information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <para>An instance provider can report success or failure with either the return code from<b>CreateInstanceEnumAsync</b>, or through a call to<see cref="SetStatus" /> made through <i>pResponseHandler</i>. If you choose to call<b>SetStatus</b>, the return code sent through <i>pResponseHandler</i> takes precedence.</para>
      <para>If<b>CreateInstanceEnumAsync</b> returns <b>WBEM_S_NO_ERROR</b>, WMI waits for a result from the<see cref="SetStatus" /> method of the response handler. WMI waits indefinitely on a local connection, or until a remote connection time-out occurs.</para>
    </returns>
  </member>
  <member name="IWbemServices.DeleteClass">
    <summary>
      <para>The<b>IWbemServices.DeleteClass</b> method deletes the specified class from the current namespace. If a dynamic instance provider is associated with the class, the provider is unregistered, and it is no longer called for by that class. Any classes that derive from the deleted class are also deleted, and their associated providers are unregistered. All outstanding static instances of the specified class and its subclasses are also deleted when the class is deleted.</para>
      <para>If a dynamic class provider provides the class, the success of the deletion depends on whether the provider supports class deletion.</para>
      <div>
        <b>Note</b>  System classes cannot be deleted.</div>
    </summary>
    <param name="strClass">Name of the class targeted for deletion.</param>
    <param name="lFlags">
      <para>One of the following values can be set.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag causes this to be a semisynchronous call. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>WBEM_FLAG_OWNER_UPDATE</h4>
      <para>Indicates that the caller is a push provider.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider deleting the class. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="ppCallResult">If <b>NULL</b>, this parameter is not used. If <i>ppCallResult</i> is specified, it must be set to point to <b>NULL</b> on entry. If the <i>lFlags</i> parameter contains <b>WBEM_FLAG_RETURN_IMMEDIATELY</b>, this call returns immediately with <b>WBEM_S_NO_ERROR</b>. The <i>ppCallResult</i> parameter receives a pointer to a new<see cref="IWbemCallResult" /> object, which can then be polled to obtain the result using the<see cref="GetCallStatus" /> method.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes may also be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.DeleteClassAsync">
    <summary>The<b>IWbemServices.DeleteClassAsync</b> method deletes the specified class from the current namespace. This method is identical to<see cref="IWbemServices.DeleteClass" /> except that the call returns immediately. Confirmation or failure is asynchronously reported to the specified object sink using the<see cref="IWbemObjectSink.SetStatus" /> method after the operation is complete.</summary>
    <param name="strClass">Name of the class targeted for deletion.</param>
    <param name="lFlags">
      <para>One or more of the following values are valid.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>This flag registers with Windows Management a request to receive intermediate status reports through the client's implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting, for this flag to change behavior.</para>
      <h4>WBEM_FLAG_OWNER_UPDATE</h4>
      <para>Push providers must specify this flag when calling<b>DeleteClassAsync</b> to indicate that this class has changed.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider deleting the class. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">Pointer to an implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> implemented by the caller. This handler receives the status of the deletion request when it becomes available through the<see cref="IWbemObjectSink.SetStatus" /> method. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. Windows Management only calls <b>AddRef</b> on the pointer in cases where <b>WBEM_S_NO_ERROR</b> returns. In cases where an error code returns, the reference count is the same as on entry. For a detailed explanation of this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>All other return codes are provided to the object sink specified by the <i>pReponseHandler</i> parameter through the<b>SetStatus</b> method. Error conditions, such as when the class does not exist or the user does not have permission to delete classes, are reported to the handler. They are not reported in the return code of this method.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.DeleteInstance">
    <summary>The<b>IWbemServices.DeleteInstance</b> method deletes an instance of an existing class in the current namespace.</summary>
    <param name="strObjectPath">Valid <b>BSTR</b> containing the object path to the instance to be deleted.</param>
    <param name="lFlags">
      <para>One of the following values are valid.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag causes this to be a semisynchronous call. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
    </param>
    <param name="pCtx">Typically NULL. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider that is deleting the instance. The values in the context object must be specified in the documentation for the provider in question.</param>
    <param name="ppCallResult">If NULL, this parameter is not used. If <i>ppCallResult</i> is specified, it must be set to point to <b>NULL</b> on entry. If the <i>lFlags</i> parameter contains <b>WBEM_FLAG_RETURN_IMMEDIATELY</b>, this call returns immediately with <b>WBEM_S_NO_ERROR</b>. The <i>ppCallResult</i> parameter receives a pointer to a new<see cref="IWbemCallResult" /> object, which can then be polled to obtain the result using the<see cref="GetCallStatus" /> method.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.DeleteInstanceAsync">
    <summary>The<b>IWbemServices.DeleteInstanceAsync</b> method asynchronously deletes an instance of an existing class in the current namespace. The confirmation or failure of the operation is reported through the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> interface implemented by the caller.</summary>
    <param name="strObjectPath">Valid <b>BSTR</b> that contains the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/describing-an-instance-object-path">object path</a> of the object to be deleted.</param>
    <param name="lFlags">
      <b>WBEM_FLAG_SEND_STATUS</b> registers with Windows Management a request to receive intermediate status reports through the client's implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting, for this flag to change behavior. Note that the <b>WBEM_FLAG_USE_AMENDED_QUALIFIERS</b> flag cannot be used here.</param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider that is deleting the instance. The values in the context object must be specified in the documentation for the provider in question.</param>
    <param name="pResponseHandler">Pointer to the caller's implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the status of the delete operation as it becomes available through the<see cref="SetStatus" /> method. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. Windows Management only calls <see cref="AddRef" /> on the pointer in cases where <b>WBEM_S_NO_ERROR</b> returns. In cases where an error code returns, the reference count is the same as on entry. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>If<b>DeleteInstanceAsync</b> returns <b>WBEM_S_NO_ERROR</b>, WMI waits for a result from the<b>SetStatus</b> method of the response handler. WMI waits indefinitely on a local connection, or until a remote connection time-out occurs.</para>
      <para>Other error conditions are reported asynchronously to the object sink supplied by the <i>pResponseHandler</i> parameter.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <div>
        <b>Note</b>  Clients that call <b>DeleteInstanceAsync</b> must always expect the results of the call to be reported using their <see cref="IWbemObjectSink.Indicate" /> method.</div>
      <div>
        <b>Note</b>  When the instance pointed to by <i>strObjectPath</i> belongs to a class that is a member of a class hierarchy, the success of <b>DeleteInstanceAsync</b> depends on the topmost non-abstract provider. For a detailed explanation of the dependencies involved that determine the success of this operation, see Remarks in <see cref="IWbemServices.DeleteInstance" />.</div>
    </returns>
  </member>
  <member name="IWbemServices.ExecMethod">
    <summary>
      <para>The<b>IWbemServices.ExecMethod</b> method executes a method exported by a CIM object. The method call is forwarded to the appropriate provider where it executes. Information and status are returned to the caller, which blocks until the call is complete.</para>
      <para>Methods are not directly implemented by Windows Management, but are exported by method providers. For any given CIM class, the available methods and their parameters must be specified in the documentation for the provider in question.</para>
      <para>For more information about executing methods, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
    </summary>
    <param name="strObjectPath">Valid <b>BSTR</b> containing the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/describing-a-class-object-path">object path</a> of the object for which the method is executed.</param>
    <param name="strMethodName">Name of the method for the object.</param>
    <param name="lFlags">This parameter can be set to 0 to make this a synchronous call. To make this a semisynchronous call, set <i>lFlags</i> to <b>WBEM_FLAG_RETURN_IMMEDIATELY</b>, provide a valid pointer for the <i>ppCallResult</i> parameter, and this call returns immediately. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <param name="pCtx">Typically <b>NULL</b>; otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider executing the method. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pInParams">May be <b>NULL</b> if no in-parameters are required to execute the method. Otherwise, this points to an<see cref="IWbemClassObject" /> that contains the properties acting as inbound parameters for the method execution. The contents of the object are method-specific, and are part of the specification for the provider in question. For more information about constructing input parameters, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/creating-parameters-objects-in-c--">Creating Parameters Objects in C++</a>.</param>
    <param name="ppOutParams">If not <b>NULL</b>, receives a pointer to the outbound parameters and return values for the method execution. The contents of this object are method-specific, and are part of the specification for the provider in question. The caller must call <see cref="Release" /> on the returned object when it is no longer required.</param>
    <param name="ppCallResult">If <b>NULL</b>, this is not used. If <i>ppCallResult</i> is specified, it must be set to point to <b>NULL</b> on entry. In this case, the call returns immediately with <b>WBEM_S_NO_ERROR</b>. The <i>ppCallResult</i> parameter receives a pointer to a new<see cref="IWbemCallResult" /> object, which must be polled to obtain the result of the method execution using the<see cref="GetCallStatus" /> method. The out parameters for the call are available by calling<see cref="IWbemCallResult.GetResultObject" />.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.ExecMethodAsync">
    <summary>
      <para>The<b>IWbemServices.ExecMethodAsync</b> method asynchronously executes a method exported by a CIM object. The call immediately returns to the client while the inbound parameters are forwarded to the appropriate provider where it executes. Information and status are returned to the caller through the supplied object sink.</para>
      <para>Methods are not directly implemented by Windows Management, but are exported by method providers. For any given CIM class, the available methods and their parameters are part of the documentation for the provider in question.</para>
    </summary>
    <param name="strObjectPath">Valid <b>BSTR</b> containing the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/describing-a-class-object-path">object path</a> of the object for which the method is to be executed. You can invoke a static method using either a class name or an object path to an instance. The method provider can parse the object path parameter to determine the class and instance that contain the method definition.</param>
    <param name="strMethodName">Name of the method for the object.</param>
    <param name="lFlags">
      <b>WBEM_FLAG_SEND_STATUS</b> registers with Windows Management a request to receive intermediate status reports through the clients implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change behavior. Note that the <b>WBEM_FLAG_USE_AMENDED_QUALIFIERS</b> flag cannot be used here.</param>
    <param name="pCtx">Typically <b>NULL</b>; otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider executing the method. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pInParams">Can be <b>NULL</b> if no inbound parameters are required to execute the method. Otherwise, this points to an<see cref="IWbemClassObject" /> object that contains the properties acting as inbound parameters for the method execution. The contents of the object are method-specific, and are part of the specification for the provider in question. However, the most common object is an instance of the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/--parameters">__Parameters</a> system class. For each input parameter to the method to be called, there is one non-system property. Method providers ignore the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/standard-wmi-qualifiers">ID</a> qualifiers attached to each parameter in the method, which are typically used only by browsers and similar applications.</param>
    <param name="pResponseHandler">Cannot be <b>NULL</b>. The object sink receives the result of the method call. The outbound parameters are sent to<see cref="IWbemObjectSink.Indicate" />. The most common returned object is an instance of the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/--parameters">__Parameters</a> system class. For more information about return codes, see the Remarks section. When implementing a method provider, you should call<b>Indicate</b> to return output parameter information before calling<see cref="IWbemObjectSink.SetStatus" /> to report the final status.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>Other errors are reported asynchronously to the object sink supplied in the <i>pReponseHandler</i> parameter.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to WMI.</para>
    </returns>
  </member>
  <member name="IWbemServices.ExecNotificationQuery">
    <summary>The<b>IWbemServices.ExecNotificationQuery</b> method executes a query to receive events. The call returns immediately, and the user can poll the returned enumerator for events as they arrive. Releasing the returned enumerator cancels the query.</summary>
    <param name="strQueryLanguage">Valid <b>BSTR</b> that contains one of the query languages supported by Windows Management. This cannot be <b>NULL</b>. Currently, only the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/querying-with-wql">WMI Query Language</a> (WQL) is supported.</param>
    <param name="strQuery">Valid <b>BSTR</b> that contains the text of the event-related query. This cannot be <b>NULL</b>. For more information on building WMI query strings, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/querying-with-wql">Querying with WQL</a> and the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/wql-sql-for-wmi">WQL</a> reference.</param>
    <param name="lFlags">
      <para>This parameter must be set to both <b>WBEM_FLAG_RETURN_IMMEDIATELY</b> and <b>WBEM_FLAG_FORWARD_ONLY</b> or the call fails.</para>
      <h4>WBEM_FLAG_FORWARD_ONLY</h4>
      <para>This flag causes a forward-only enumerator to be returned. Forward-only enumerators are generally much faster and use less memory than conventional enumerators but do not allow calls to<see cref="Clone" /> or<see cref="Reset" />.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>The user must specify this flag or the call fails. This is because events are received continuously, which means the user must poll the returned enumerator. Blocking this call indefinitely while waiting for a possible event blocks the thread for an indefinite amount of time. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that can be used by the provider that provides the requested events. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="ppEnum">If no error occurs, this parameter receives the enumerator that allows the caller to retrieve the instances in the result set of the query. The caller periodically calls<see cref="IEnumWbemClassObject.Next" /> to see if any events are available. Notice that, in this usage,<see cref="Reset" /> does not move the enumerator back to the beginning of the event sequence; it has no effect. The parameter can continue to receive events until <see cref="Release" /> is called on the returned enumerator.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also can be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.ExecNotificationQueryAsync">
    <summary>The<b>IWbemServices.ExecNotificationQueryAsync</b> method performs the same task as<see cref="IWbemServices.ExecNotificationQuery" /> except that events are supplied to the specified response handler until<see cref="CancelAsyncCall" /> is called to stop the event notification.</summary>
    <param name="strQueryLanguage">Valid <b>BSTR</b> that contains one of the query languages supported by Windows Management. This must be "WQL".</param>
    <param name="strQuery">Valid <b>BSTR</b> that contains the text of the event-related query. This cannot be <b>NULL</b>. For more information on building WMI query strings, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/querying-with-wql">Querying with WQL</a> and the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/wql-sql-for-wmi">WQL</a> reference.</param>
    <param name="lFlags">
      <para>This parameter can be the following value.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>This flag registers with Windows Management a request to receive intermediate status reports through the client's implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change behavior.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider that is returning the requested events. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">Pointer to the caller's implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the objects in the query result set as they become available. To cease receiving events, the caller must call<see cref="IWbemServices.CancelAsyncCall" /> using the same pointer value for <i>pResponseHandler</i>. As events become available, the supplied<see cref="IWbemObjectSink.Indicate" /> implementation is called to deliver the event objects. The<see cref="IWbemObjectSink.SetStatus" /> method is not called at any time, because there is no final or terminating condition. The call executes indefinitely until canceled. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. Windows Management only calls <see cref="AddRef" /> on the pointer in cases where <b>WBEM_S_NO_ERROR</b> returns. In cases where an error code returns, the reference count is the same as on entry. For a detailed explanation of this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>Other error codes are returned to the object sink specified by the <i>pResponseHandler</i> parameter.</para>
      <para>COM-specific error codes also can be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.ExecQuery">
    <summary>
      <para>The<b>IWbemServices.ExecQuery</b> method executes a query to retrieve objects.</para>
      <para>For the valid types of queries that can be performed, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/querying-with-wql">Querying with WQL</a>.</para>
    </summary>
    <param name="strQueryLanguage">Valid <b>BSTR</b> that contains one of the query languages supported by Windows Management. This must be "WQL", the acronym for WMI Query Language.</param>
    <param name="strQuery">Valid <b>BSTR</b> that contains the text of the query. This parameter cannot be <b>NULL</b>. For more information on building WMI query strings, see <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/querying-with-wql">Querying with WQL</a> and the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/wql-sql-for-wmi">WQL</a> reference.</param>
    <param name="lFlags">
      <para>The following flags affect the behavior of this method. The suggested value for this parameter is <b>WBEM_FLAG_RETURN_IMMEDIATELY</b> and <b>WBEM_FLAG_FORWARD_ONLY</b> for best performance.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI retrieves the amended qualifiers stored in the localized namespace of the current connection's locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_FORWARD_ONLY</h4>
      <para>This flag causes a forward-only enumerator to be returned. Forward-only enumerators are generally much faster and use less memory than conventional enumerators but do not allow calls to<see cref="Clone" /> or<see cref="Reset" />.</para>
      <h4>WBEM_FLAG_BIDIRECTIONAL</h4>
      <para>This flag causes Windows Management to retain pointers to objects of the enumeration until the client releases the enumerator.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag causes this to be a semisynchronous call. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>WBEM_FLAG_ENSURE_LOCATABLE</h4>
      <para>This flag ensures that any returned objects have enough information in them so that the system properties, such as <b>__PATH</b>, <b>__RELPATH</b>, and <b>__SERVER</b>, are non-NULL.</para>
      <h4>WBEM_FLAG_PROTOTYPE</h4>
      <para>This flag is used for prototyping. It does not execute the query and instead returns an object that looks like a typical result object.</para>
      <h4>WBEM_FLAG_DIRECT_READ</h4>
      <para>This flag causes direct access to the provider for the class specified without any regard to its parent class or subclasses.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that can be used by the provider that is providing the requested classes or instances. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="ppEnum">If no error occurs, this receives the enumerator that allows the caller to retrieve the instances in the result set of the query. It is not an error for the query to have a result set with 0 instances. This is determined only by attempting to iterate through the instances. This object returns with a positive reference count. The caller must call <see cref="Release" /> when the object is no longer required.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also can be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.ExecQueryAsync">
    <summary>The <b>IWbemServices.ExecQueryAsync</b> method executes a query to retrieve objects asynchronously.</summary>
    <param name="strQueryLanguage">Valid <b>BSTR</b> that contains one of the query languages that Windows Management Instrumentation (WMI) supports. This must be "WQL".</param>
    <param name="strQuery">
      <para>Valid <b>BSTR</b> that contains the text of the query. This cannot be<b>NULL</b>. When you implement an instance provider, your provider can refuse the query because it is too complex. When a provider determines that a query is too complex, WMI can retry the provider with a simple query, or choose to retrieve and enumerate the superset of the query instances.</para>
      <para>For more information on building WMI query strings, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/querying-with-wql">Querying with WQL</a> and the<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/wql-sql-for-wmi">WQL</a> reference.</para>
    </param>
    <param name="lFlags">
      <para>This parameter can be one of the following values.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI retrieves the amended qualifiers stored in the localized namespace of the current connection's locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_BIDIRECTIONAL</h4>
      <para>This flag causes WMI to retain pointers to objects of the enumeration until the client releases the enumerator.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>This flag registers a request with WMI to receive intermediate status reports through the client's implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change.</para>
      <h4>WBEM_FLAG_ENSURE_LOCATABLE</h4>
      <para>This flag ensures that returned objects have enough information in them so that the system properties, such as <b>__PATH</b>, <b>__RELPATH</b>, and <b>__SERVER</b>, are non-<b>NULL</b>.</para>
      <h4>WBEM_FLAG_PROTOTYPE</h4>
      <para>This flag is used for prototyping. It does not execute the query, but returns an object that looks like a typical result object.</para>
      <h4>WBEM_FLAG_DIRECT_READ</h4>
      <para>This flag causes direct access to the provider for the class specified without regard to its parent class or subclasses.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that the provider can use to return the requested classes or instances. The values in the context object must be specified in the documentation for the provider. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">
      <para>Pointer to the caller's implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the objects in the query result set as they become available. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. Windows Management Instrumentation (WMI) calls<see cref="IWbemObjectSink.Indicate" /> with the objects any number of times, followed by a single call to <see cref="IWbemObjectSink.SetStatus" /> to indicate the final status.</para>
      <para>WMI only calls <see cref="AddRef" /> to the pointer when <b>WBEM_S_NO_ERROR</b> returns. When an error code returns, the reference count is the same as on entry. For a detailed explanation of asynchronous calling methods, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
    </param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>When there is a failure, you can obtain information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>Other error codes are returned to the object sink specified by the <i>pResponseHandler</i> parameter.</para>
      <para>COM-specific error codes might be returned if network problems cause you to lose the remote connection to WMI.</para>
      <para>When finished, an instance provider can report success or failure with either the return code from<b>ExecQueryAsync</b> or through a call to<see cref="SetStatus" /> made through <i>pResponseHandler</i>. If you choose to call<b>SetStatus</b>, the return code sent through <i>pResponseHandler</i> takes precedence.</para>
    </returns>
  </member>
  <member name="IWbemServices.GetObject">
    <summary>The<b>IWbemServices.GetObject</b> method retrieves a class or instance. This method only retrieves objects from the namespace associated with the current<see cref="IWbemServices" /> object.</summary>
    <param name="strObjectPath">Path of the object to retrieve. If this is <b>NULL</b>, an empty object is returned that can become a new class. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/creating-a-class">Creating a Class</a>.</param>
    <param name="lFlags">
      <para>The following flags affect the behavior of this method.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI retrieves the amended qualifiers stored in the localized namespace of the current connection's locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_RETURN_WBEM_COMPLETE</h4>
      <para>This flag makes this a synchronous call.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag makes this a semisynchronous call. You must provide a valid pointer for the <i>ppCallResult</i> parameter. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>WBEM_FLAG_DIRECT_READ</h4>
      <para>This flag causes direct access to the provider for the class specified without any regard to its parent class or subclasses.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider that is producing the requested class or instance. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="ppObject">If not <b>NULL</b>, this receives the object, if it is found. The returned object has a positive reference count. The caller must use <b>Release</b> when the object is no longer needed. In all cases of error, this parameter is set to point to <b>NULL</b>.</param>
    <param name="ppCallResult">If <b>NULL</b>, this parameter is not used. If the <i>lFlags</i> parameter contains <b>WBEM_FLAG_RETURN_IMMEDIATELY</b>, this call returns immediately with <b>WBEM_S_NO_ERROR</b>. The <i>ppCallResult</i> parameter receives a pointer to a new<see cref="IWbemCallResult" /> object, which can then be polled to obtain the result using the<see cref="GetCallStatus" /> method. The caller can call<see cref="IWbemCallResult.GetResultObject" /> to retrieve the object when it becomes available.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.GetObjectAsync">
    <summary>
      <para>The<b>IWbemServices.GetObjectAsync</b> method retrieves an object, either a class definition or instance, based on its path. This is similar to<see cref="IWbemServices.GetObject" /> except that the call returns immediately, and the object is provided to the supplied object sink.</para>
      <para>Currently, this method retrieves objects only from the namespace associated with the<see cref="IWbemServices" /> pointer.</para>
    </summary>
    <param name="strObjectPath">
      <para>Path of the object to retrieve. For an instance provider, <i>StrObjectPath</i> can be in the following format:</para>
      <list type="bullet">
        <item>
          <description>Namespace:Class.Key = "Value"</description>
        </item>
        <item>
          <description>Namespace:Class = "Value"</description>
        </item>
        <item>
          <description>Namespace:Class.Key = "Value", Key2 = "Value2"</description>
        </item>
      </list>Specifying the namespace before the class is optional. Object paths without namespaces refer to instances in the current namespace. If necessary, you can substitute the single-quotation mark character (') for the double-quotation mark character (") to delimit the start and end of string property types.<para>If this is <b>NULL</b>, an empty object, which can become a new class, is returned. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/creating-a-class">Creating a Class</a>.</para></param>
    <param name="lFlags">
      <para>The following flags affect the behavior of this method.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI retrieves the amended qualifiers stored in the localized namespace of the current connection's locale. If not set, only the qualifiers stored in the immediate namespace are retrieved.</para>
      <h4>WBEM_FLAG_DIRECT_READ</h4>
      <para>This flag causes direct access to the provider for the class specified without any regard to its parent class or subclasses.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>Registers a request to receive intermediate status reports through the client's implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change behavior.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that can be used by the provider that produces the requested class or instance. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">Pointer to the caller's implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the requested object when it becomes available through the<see cref="IWbemObjectSink.Indicate" /> method. The <i>pObjParam</i> parameter contains the object. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. Windows Management only calls AddRef to the pointer in cases where <b>WBEM_S_NO_ERROR</b> returns. In cases where an error code returns, the reference count is the same as on entry. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> that indicates the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" /><b>GetErrorInfo</b>.</para>
      <para>COM-specific error codes can also be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.OpenNamespace">
    <summary>The<b>IWbemServices.OpenNamespace</b> method provides the caller with a new<see cref="IWbemServices" /> pointer that has the specified child namespace as its operating context. All operations through the new pointer, such as class or instance creation, only affect that namespace. The namespace must be a child namespace of the current object through which this method is called.</summary>
    <param name="strNamespace">Path to the target namespace. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/creating-hierarchies-within-wmi">Creating Hierarchies within WMI</a>. This namespace can only be relative to the current namespace associated with the<see cref="IWbemServices" /> interface pointer. This parameter cannot be an absolute path or <b>NULL</b>.</param>
    <param name="lFlags">This parameter can be set to 0 to make this a synchronous call. To make this a semisynchronous call, set <i>lFlags</i> to <b>WBEM_FLAG_RETURN_IMMEDIATELY</b>, provide a valid pointer for the <i>ppResult</i> parameter, and this call will return immediately. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <param name="pCtx">Reserved. This parameter must be <b>NULL</b>.</param>
    <param name="ppWorkingNamespace">Receives the object that represents the new namespace context. The returned pointer has a positive reference count. The caller must call <b>Release</b> on this pointer when it is no longer needed. This pointer is set to <b>NULL</b> when there are errors. If this parameter is specified, then <i>ppResult</i> must be <b>NULL</b>.</param>
    <param name="ppResult">
      <para>Typically <b>NULL</b>. If not <b>NULL</b>, then <i>ppWorkingNamespace</i> must be <b>NULL</b>. In this case, the parameter receives a pointer to a new<see cref="IWbemCallResult" /> object. If the <i>lFlags</i> parameter is set to <b>WBEM_FLAG_RETURN_IMMEDIATELY</b> this call returns immediately. Then the caller can periodically poll the<see cref="IWbemCallResult.GetResultServices" /> method until the pointer for the requested namespace becomes available. This parameter is set to point to <b>NULL</b> when there is an error and a new object is not returned.</para>
      <div>
        <b>Note</b>  It is important to note that when you use this parameter, you must set <i>ppResult</i> to point to <b>NULL</b> before calling the method. This is a COM rule.</div>
    </param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes may also be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.PutClass">
    <summary>
      <para>The<b>IWbemServices.PutClass</b> method creates a new class or updates an existing one. The class specified by the <i>pObject</i> parameter must have been correctly initialized with all of the required property values.</para>
      <para>The user may not create classes with names that begin or end with an underscore (_). This is reserved for system classes.</para>
    </summary>
    <param name="pObject">Must point to a valid class definition. The reference count is not changed.</param>
    <param name="lFlags">
      <para>The following flags affect the behavior of this method.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI does not store any qualifiers with the amended flavor. If this flag is not set, it is assumed that this object is not localized, and all qualifiers are stored with this instance.</para>
      <h4>WBEM_FLAG_CREATE_OR_UPDATE</h4>
      <para>This flag causes the class to be created if it does not exist, or overwritten if it exists already.</para>
      <h4>WBEM_FLAG_UPDATE_ONLY</h4>
      <para>This flag causes this call to update. The class must exist for the call to be successful.</para>
      <h4>WBEM_FLAG_CREATE_ONLY</h4>
      <para>This flag is used for creation only. The call fails if the class already exists.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag causes this to be a semisynchronous call. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>WBEM_FLAG_OWNER_UPDATE</h4>
      <para>Push providers must specify this flag when calling<b>PutClass</b>, to indicate that this class has changed.</para>
      <h4>WBEM_FLAG_UPDATE_COMPATIBLE</h4>
      <para>This flag allows a class to be updated if there are no derived classes and there are no instances for that class. It also allows updates in all cases if the change is just to nonimportant qualifiers (for example, the <b>Description</b> qualifier). This is the default behavior for this call and is used for compatibility with previous versions of Windows Management. If the class has instances or changes are to important qualifiers, the update fails.</para>
      <h4>WBEM_FLAG_UPDATE_SAFE_MODE</h4>
      <para>This flag allows updates of classes even if there are child classes as long as the change does not cause any conflicts with child classes. An example of an update this flag would allow would be to add a new property to the base class that was not previously mentioned in any of the child classes. If the class has instances, the update fails.</para>
      <h4>WBEM_FLAG_UPDATE_FORCE_MODE</h4>
      <para>This flag forces updates of classes when conflicting child classes exist. An example of an update this flag would force would be if a class qualifier were defined in a child class, and the base class tried to add the same qualifier which conflicted with the existing one. In force mode, this conflict would be resolved by deleting the conflicting qualifier in the child class.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object required by the dynamic class provider that is producing the class instances. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="ppCallResult">If <b>NULL</b>, this parameter is not used. If the <i>lFlags</i> parameter contains <b>WBEM_FLAG_RETURN_IMMEDIATELY</b>, this call returns immediately with <b>WBEM_S_NO_ERROR</b>. The <i>ppCallResult</i> parameter receives a pointer to a new<see cref="IWbemCallResult" /> object, which can then be polled to obtain the result using the<see cref="IWbemCallResult.GetCallStatus" /> method.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>On failure, you can obtain any available information from the COM function <see cref="GetErrorInfo" />.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <div>
        <b>Note</b>  Unpredictable behavior will result if you change class definitions while they are in use by clients or providers. The <b>IWbemServices.PutClass</b> method should only be used to create or update a class when there are no clients or providers currently using the class.</div>
    </returns>
  </member>
  <member name="IWbemServices.PutClassAsync">
    <summary>The <b>IWbemServices.PutClassAsync</b> method creates a new class, or updates an existing one. The class specified by the <i>pObject</i>parameter must be correctly initialized with all of the required property values. The call immediately returns. Success or failure is supplied to the object sink specified by the <i>pResponseHandler</i>parameter.</summary>
    <param name="pObject">Pointer to the object containing the class definition.</param>
    <param name="lFlags">
      <para>One or more of the following values are valid.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI does not store any qualifiers with the <b>amended</b> flavor. If this flag is not set, it is assumed that this object is not localized, and all qualifiers are stored with this instance.</para>
      <h4>WBEM_FLAG_CREATE_OR_UPDATE</h4>
      <para>This flag causes this class to be created if it does not exist or be overwritten if it exists already.</para>
      <h4>WBEM_FLAG_UPDATE_ONLY</h4>
      <para>Updates an existing class.</para>
      <h4>WBEM_FLAG_CREATE_ONLY</h4>
      <para>This flag is for class creation only. The call fails if the class already exists.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>This flag registers with Windows Management a request to receive intermediate status reports through the client's implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change behavior.</para>
      <h4>WBEM_FLAG_OWNER_UPDATE</h4>
      <para>Push providers must specify this flag when calling<b>PutClassAsync</b> to indicate that this class has changed.</para>
      <h4>WBEM_FLAG_UPDATE_COMPATIBLE</h4>
      <para>This flag allows a class to be updated if there are no derived classes and there are no instances for that class. It also allows updates in all cases if the change is just to non-important qualifiers (for example, the <b>Description</b> qualifier). This is the default behavior for this call and is used for compatibility with previous versions of Windows Management. If the class has instances or changes are to important qualifiers, the update fails.</para>
      <h4>WBEM_FLAG_UPDATE_SAFE_MODE</h4>
      <para>This flag allows updates of classes even if there are child classes, as long as the change does not cause any conflicts with child classes. An example of an update this flag would allow would be to add a new property to the base class that was not previously mentioned in any of the child classes. If the class has instances, the update fails.</para>
      <h4>WBEM_FLAG_UPDATE_FORCE_MODE</h4>
      <para>This flag forces updates of classes when conflicting child classes exist. An example of an update this flag would force would be if a class qualifier were defined in a child class, and the base class tried to add the same qualifier which conflicted with the existing one. In force mode, this conflict would be resolved by deleting the conflicting qualifier in the child class.</para>
    </param>
    <param name="pCtx">Typically <b>NULL</b>. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object that may be used by the provider that is receiving the requested class. The values in the context object must be specified in the documentation for the provider in question. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">Pointer to the caller's implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the status of the<b>Put</b> request when the status becomes available using the<see cref="SetStatus" /> method. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. Windows Management only calls <b>AddRef</b> to the pointer in cases where <b>WBEM_S_NO_ERROR</b> returns. In cases where an error code returns, the reference count is the same as on entry. For a detailed explanation of this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>Other status or error codes are reported to the object sink specified by the <i>pReponseHandler</i> parameter.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <para>Note that if<see cref="PutInstanceAsync" /> returns <b>WBEM_S_NO_ERROR</b>, WMI waits for a result from the<b>SetStatus</b> method of the response handler. WMI waits indefinitely on a local connection or until a remote connection time-out occurs.</para>
      <para>Because returning <b>WBEM_E_FAILED</b> causes other providers to not have a chance to create the class, it should only be returned when the class provider has failed in a way that might later succeed.</para>
      <div>
        <b>Note</b>  Unpredictable behavior will result if you change class definitions while they are in use by clients or providers. The <see cref="IWbemServices.PutClass" /> method should only be used to create or update a class when there are no clients or providers currently using the class.</div>
    </returns>
  </member>
  <member name="IWbemServices.PutInstance">
    <summary>The<b>IWbemServices.PutInstance</b> method creates or updates an instance of an existing class. The instance is written to the WMI repository.</summary>
    <param name="pInst">Pointer to the instance to be written. The caller cannot make assumptions about the reference count at the completion of this call.</param>
    <param name="lFlags">
      <para>One or more of the following values can be set.</para>
      <h4>WBEM_FLAG_CREATE_OR_UPDATE</h4>
      <para>This flag causes the instance to be created if it does not exist or overwritten if it exists already.</para>
      <h4>WBEM_FLAG_UPDATE_ONLY</h4>
      <para>This flag causes this call to update. The instance must exist for the call to be successful.</para>
      <h4>WBEM_FLAG_CREATE_ONLY</h4>
      <para>This flag is used for creation only. The call fails if the instance already exists.</para>
      <h4>WBEM_FLAG_RETURN_IMMEDIATELY</h4>
      <para>This flag causes this to be a semisynchronous call. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI does not store any qualifiers with the <b>Amended</b> flavor. If this flag is not set, it is assumed that this object is not localized, and all qualifiers are stored with this instance.</para>
    </param>
    <param name="pCtx">
      <para>Typically <b>NULL</b>, indicating that every property in the instance is to be updated. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object containing more information about the instance. The data in the context object must be documented by the provider responsible for the instance. A non-<b>NULL</b><b>IWbemContext</b> object can indicate whether support exists for partial-instance updates.</para>
      <para>For more information about how to support full and partial-instance updates, see<see cref="IWbemServices.PutInstanceAsync" />. For more information about requesting a full or partial-instance update operation, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/modifying-an-instance-property">Modifying an Instance Property</a>.</para>
    </param>
    <param name="ppCallResult">If <b>NULL</b>, this parameter is not used. If the <i>lFlags</i> parameter contains <b>WBEM_FLAG_RETURN_IMMEDIATELY</b>, this call returns immediately with <b>WBEM_S_NO_ERROR</b>. The <i>ppCallResult</i> parameter then receives a pointer to a new<see cref="IWbemCallResult" /> object, which can be polled with<see cref="IWbemCallResult.GetCallStatus" /> to obtain the result.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.PutInstanceAsync">
    <summary>The <b>IWbemServices.PutInstanceAsync</b>method asynchronously creates or updates an instance of an existing class. Update confirmation or error reporting is provided through the <a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a> interface implemented by the caller.</summary>
    <param name="pInst">Pointer to the instance to be written to the WMI repository. The caller cannot make assumptions about the reference count at the completion of this call.</param>
    <param name="lFlags">
      <para>Specifies whether the caller wants the instance created if the instance does not currently exist.</para>
      <para>When implementing an instance provider, you can choose to support a limited number of the flags in<i>lFlags</i> by returning <b>WBEM_E_PROVIDER_NOT_CAPABLE</b>.</para>
      <para>This property can have one or more of the following values.</para>
      <h4>WBEM_FLAG_CREATE_OR_UPDATE</h4>
      <para>This flag causes this instance to be created if it does not exist or be overwritten if it exists already.</para>
      <h4>WBEM_FLAG_UPDATE_ONLY</h4>
      <para>Updates an existing instance.</para>
      <h4>WBEM_FLAG_CREATE_ONLY</h4>
      <para>This flag is for instance creation only. The call fails if the class already exists.</para>
      <h4>WBEM_FLAG_SEND_STATUS</h4>
      <para>This flag registers with Windows Management a request to receive intermediate status reports through the clients implementation of<see cref="IWbemObjectSink.SetStatus" />. Provider implementation must support intermediate status reporting for this flag to change behavior.</para>
      <h4>WBEM_FLAG_USE_AMENDED_QUALIFIERS</h4>
      <para>If this flag is set, WMI does not store any qualifiers with the<b>Amended</b> flavor. If this flag is not set, it is assumed that this object is not localized, and all qualifiers are stored with this instance.</para>
    </param>
    <param name="pCtx">Pointer describing if the client is requesting a partial-instance update or full-instance update. A partial-instance update modifies a subset of the properties of the instance. In contrast, a full-instance update modifies all of the properties. If <b>NULL</b>, this parameter indicates that the caller application is requesting a full-instance update. Otherwise, this is a pointer to an<see cref="IWbemContext" /> object required by the dynamic class provider that is producing the class instances. For more information about this parameter, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/making-calls-to-wmi">Making Calls to WMI</a>.</param>
    <param name="pResponseHandler">Pointer to the caller's implementation of<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/iwbemobjectsink">IWbemObjectSink</a>. This handler receives the status of this call when it becomes available using the<see cref="IWbemObjectSink.SetStatus" /> method. If any error code is returned, then the supplied<b>IWbemObjectSink</b> pointer is not used. If <b>WBEM_S_NO_ERROR</b> is returned, then the user's<b>IWbemObjectSink</b> implementation is called to indicate the result of the operation. Windows Management only calls <b>AddRef</b> on the pointer in cases where <b>WBEM_S_NO_ERROR</b> returns. In cases where an error code returns, the reference count is the same as on entry. For more information about how to make asynchronous calls, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/calling-a-method">Calling a Method</a>.</param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>Note that if<b>PutInstanceAsync</b> returns <b>WBEM_S_NO_ERROR</b>, WMI waits for a result from the<b>SetStatus</b> method of the response handler. WMI waits indefinitely on a local connection or until a remote connection time-out occurs.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
    </returns>
  </member>
  <member name="IWbemServices.QueryObjectSink">
    <summary>The <b>IWbemServices.QueryObjectSink</b> method allows the caller to obtain a notification handler that is exported by Windows Management. This allows the caller to write notifications and events directly to Windows Management. The caller should only write extrinsic events to Windows Management. For more information, see<a href="https://docs.microsoft.com//windows/desktop/WmiSdk/determining-the-type-of-event-to-receive">Determining the Type of Event to Receive</a>.</summary>
    <param name="lFlags">Reserved. This parameter must be 0.</param>
    <param name="ppResponseHandler">
      <para>Receives the interface pointer to the notification handler. This is set to point to <b>NULL</b> when there is an error. The returned pointer has a positive reference count, and the caller must call <b>IWbemServices.Release</b> on the pointer when it is no longer needed. A <b>NULL</b> value can be returned if no notification handler is available. This is not an error.</para>
      <div>
        <b>Note</b>  The value of the <i>ppResponseHandler</i> parameter cannot be <b>NULL</b> when it is passed to this method.</div>
    </param>
    <returns>
      <para>This method returns an <b>HRESULT</b> indicating the status of the method call. The following list lists the value contained within an <b>HRESULT</b>.</para>
      <para>COM-specific error codes also may be returned if network problems cause you to lose the remote connection to Windows Management.</para>
      <div>
        <b>Note</b>  Firing events using <b>QueryObjectSink</b> is permitted by default for Administrators only. Extending the permission to other users requires giving them <b>WBEM_FULL_WRITE</b> permission.</div>
    </returns>
  </member>
  <member name="IWbemServices">
    <summary>
      <para>The <b>IWbemServices</b> interface is used by clients and providers to access WMI services. The interface is implemented by WMI and WMI providers, and is the primary WMI interface.</para>
      <code> IWbemClassObject *pObj = NULL; // The pWbemSvc pointer is of type IWbemServices* // BSTR is not compatible with wchar_t, need to allocate. BSTR path = SysAllocString(L"path"); pWbemSvc-&gt;GetObject(path, 0, 0, &amp;pObj, 0); SysFreeString(path);</code>
    </summary>
  </member>
</doc>