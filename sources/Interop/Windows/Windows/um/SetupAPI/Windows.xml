<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.SetupDiAskForOEMDisk">
    <summary>
      <para>The <b>SetupDiAskForOEMDisk</b> function displays a dialog that asks the user for the path of an OEM installation disk.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local computer. This set contains a device information element that represents the device that is being installed.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiAskForOEMDisk</b> associates the driver with the device that is being installed. If this parameter is <b>NULL</b>, <b>SetupDiAskForOEMDisk</b> associates the driver with the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful and the <b>DriverPath</b> field of the SP_DEVINSTALLPARAMS structure is updated to reflect the new path. If the user cancels the dialog, the function returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_CANCELLED.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiAskForOEMDisk</b> allows the user to browse local and network drives for OEM installation files. However, <b>SetupDiAskForOEMDisk</b> is primarily designed to obtain the path of an OEM driver on a local computer before selecting and installing the driver for a device on that computer.</para>
      <para>Although this function will not fail if the device information set if for a remote computer, the result is of limited use because the device information set cannot subsequently be used with DIF_<i>Xxx</i> installation requests or <b>SetupDi</b><i>Xxx</i> functions that do not support operations on a remote computer.</para>
      <para>In particular, the device information set cannot be used as input with a DIF_SELECTDEVICE installation request to select a driver for a device, followed by a DIF_INSTALLDEVICE installation request to install a device on a remote computer.</para>
    </remarks>
    <seealso cref="SetupDiSelectOEMDrv" />
  </member>
  <member name="Windows.SetupDiBuildClassInfoList">
    <summary>
      <para>The <b>SetupDiBuildClassInfoList</b> function returns a list of setup class GUIDs that identify the classes that are installed on a local computer.</para>
    </summary>
    <param name="Flags">
      <para>Flags used to control exclusion of classes from the list. If no flags are specified, all setup classes are included in the list. Can be a combination of the following values:</para>
      <h4>DIBCI_NOINSTALLCLASS</h4>
      <para>Exclude a class if it has the <b>NoInstallClass</b> value entry in its registry key.</para>
      <h4>DIBCI_NODISPLAYCLASS</h4>
      <para>Exclude a class if it has the <b>NoDisplayClass</b> value entry in its registry key.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to a GUID-typed array that receives a list of setup class GUIDs. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the array that is pointed to by the <i>ClassGuildList</i> parameter. If <i>ClassGuidList</i> is <b>NULL</b>, <i>ClassGuidSize</i> must be zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the number of GUIDs that are returned (if the number is less than or equal to the size, in GUIDs, of the array that is pointed to by the <i>ClassGuidList</i> parameter).</para>
      <para>If this number is greater than the size of the <i>ClassGuidList</i> array, it indicates how large the <i>ClassGuidList</i> array must be in order to contain all the class GUIDs.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To retrieve the number of classes that are installed on a local computer, call <b>SetupDiBuildClassInfoList</b> with <i>ClassGuidList</i> set to <b>NULL</b> and <i>ClassGuidSize</i> set to zero. In response to such a call, the function returns the number of classes in <b>*</b><i>RequiredSize</i>.</para>
      <para>
        <b>SetupDiBuildClassInfoList</b> does not return a class GUID for a class if the <b>NoUseClass</b> value entry exists in the registry key of the class.</para>
      <para>To retrieve the list of setup class GUIDs installed on a remote system use <see cref="SetupDiBuildClassInfoListEx" />.</para>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoListEx" />
    <seealso cref="SetupDiGetClassDescription" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiBuildClassInfoListEx">
    <summary>
      <para>The <b>SetupDiBuildClassInfoListEx</b> function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.</para>
    </summary>
    <param name="Flags">
      <para>Flags used to control exclusion of classes from the list. If no flags are specified, all setup classes are included in the list. Can be a combination of the following values:</para>
      <h4>DIBCI_NOINSTALLCLASS</h4>
      <para>Exclude a class if it has the <b>NoInstallClass</b> value entry in its registry key.</para>
      <h4>DIBCI_NODISPLAYCLASS</h4>
      <para>Exclude a class if it has the <b>NoDisplayClass</b> value entry in its registry key.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to a buffer that receives a list of setup class GUIDs.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>Supplies the number of GUIDs in the <i>ClassGuildList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs returned. If this number is greater than the size of the <i>ClassGuidList</i>, the number indicates how large the <i>ClassGuidList</i> array must be in order to contain the list.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote computer from which to retrieve installed setup classes. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, this function builds a list of classes installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiBuildClassInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
  </member>
  <member name="Windows.SetupDiBuildClassInfoListExA">
    <summary>
      <para>The <b>SetupDiBuildClassInfoListEx</b> function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.</para>
    </summary>
    <param name="Flags">
      <para>Flags used to control exclusion of classes from the list. If no flags are specified, all setup classes are included in the list. Can be a combination of the following values:</para>
      <h4>DIBCI_NOINSTALLCLASS</h4>
      <para>Exclude a class if it has the <b>NoInstallClass</b> value entry in its registry key.</para>
      <h4>DIBCI_NODISPLAYCLASS</h4>
      <para>Exclude a class if it has the <b>NoDisplayClass</b> value entry in its registry key.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to a buffer that receives a list of setup class GUIDs.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>Supplies the number of GUIDs in the <i>ClassGuildList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs returned. If this number is greater than the size of the <i>ClassGuidList</i>, the number indicates how large the <i>ClassGuidList</i> array must be in order to contain the list.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote computer from which to retrieve installed setup classes. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, this function builds a list of classes installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiBuildClassInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
  </member>
  <member name="Windows.SetupDiBuildClassInfoListEx">
    <summary>
      <para>The <b>SetupDiBuildClassInfoListEx</b> function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.</para>
    </summary>
    <param name="Flags">
      <para>Flags used to control exclusion of classes from the list. If no flags are specified, all setup classes are included in the list. Can be a combination of the following values:</para>
      <h4>DIBCI_NOINSTALLCLASS</h4>
      <para>Exclude a class if it has the <b>NoInstallClass</b> value entry in its registry key.</para>
      <h4>DIBCI_NODISPLAYCLASS</h4>
      <para>Exclude a class if it has the <b>NoDisplayClass</b> value entry in its registry key.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to a buffer that receives a list of setup class GUIDs.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>Supplies the number of GUIDs in the <i>ClassGuildList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs returned. If this number is greater than the size of the <i>ClassGuidList</i>, the number indicates how large the <i>ClassGuidList</i> array must be in order to contain the list.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote computer from which to retrieve installed setup classes. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, this function builds a list of classes installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
      <h5>- Flags.DIBCI_NODISPLAYCLASS</h5>
      <para>Exclude a class if it has the <b>NoDisplayClass</b> value entry in its registry key.</para>
      <h5>- Flags.DIBCI_NOINSTALLCLASS</h5>
      <para>Exclude a class if it has the <b>NoInstallClass</b> value entry in its registry key.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiBuildClassInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
  </member>
  <member name="Windows.SetupDiBuildClassInfoListExW">
    <summary>
      <para>The <b>SetupDiBuildClassInfoListEx</b> function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.</para>
    </summary>
    <param name="Flags">
      <para>Flags used to control exclusion of classes from the list. If no flags are specified, all setup classes are included in the list. Can be a combination of the following values:</para>
      <h4>DIBCI_NOINSTALLCLASS</h4>
      <para>Exclude a class if it has the <b>NoInstallClass</b> value entry in its registry key.</para>
      <h4>DIBCI_NODISPLAYCLASS</h4>
      <para>Exclude a class if it has the <b>NoDisplayClass</b> value entry in its registry key.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to a buffer that receives a list of setup class GUIDs.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>Supplies the number of GUIDs in the <i>ClassGuildList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs returned. If this number is greater than the size of the <i>ClassGuidList</i>, the number indicates how large the <i>ClassGuidList</i> array must be in order to contain the list.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote computer from which to retrieve installed setup classes. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, this function builds a list of classes installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
      <h5>- Flags.DIBCI_NODISPLAYCLASS</h5>
      <para>Exclude a class if it has the <b>NoDisplayClass</b> value entry in its registry key.</para>
      <h5>- Flags.DIBCI_NOINSTALLCLASS</h5>
      <para>Exclude a class if it has the <b>NoInstallClass</b> value entry in its registry key.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiBuildClassInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
  </member>
  <member name="Windows.SetupDiBuildDriverInfoList">
    <summary>
      <para>The <b>SetupDiBuildDriverInfoList</b> function builds a list of drivers that is associated with a specific device or with the global class driver list for a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to contain the driver list, either globally for all device information elements or specifically for a single device information element. The device information set must not contain remote device information elements.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure for the device information element in <i>DeviceInfoSet</i> that represents the device for which to build a driver list. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, the list is associated with the specified device. If this parameter is <b>NULL</b>, the list is associated with the global class driver list for <i>DeviceInfoSet</i>.</para>
      <para>If the class of this device is updated because of building a compatible driver list, <i>DeviceInfoData.</i><b>ClassGuid</b> is updated upon return.</para>
    </param>
    <param name="DriverType">
      <para>The type of driver list to build. Must be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SPDIT_CLASSDRIVER</b>
          </description>
          <description>
            <para>Build a list of class drivers. If <i>DeviceInfoData</i> is <b>NULL</b>, this driver list type must be specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SPDIT_COMPATDRIVER</b>
          </description>
          <description>
            <para>Build a list of compatible drivers. <i>DeviceInfoData</i> must not be <b>NULL</b> if this driver list type is specified.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The device information set should be for a local computer because <b>SetupDiBuildDriverInfoList</b> searches for drivers only on a local computer. If the device information set is for a remote computer, the function returns <b>TRUE</b> but does not actually update the existing driver list for the device information set or, if supplied, the driver list for the device information element.</para>
      <para>The caller can set <b>Flags</b> in the <see cref="SP_DEVINSTALL_PARAMS" /> that are associated with the device information set or with a specific device (<i>DeviceInfoData</i>) to control how the list is built. For example, the caller can set the <b>DI_FLAGSEX_ALLOWEXCLUDEDDRVS</b> flag to include drivers that are marked Exclude From Select.</para>
      <para>A driver is "Exclude From Select" if either it is marked <b>ExcludeFromSelect</b> in the INF file or it is a driver for a device whose whole setup class is marked <b>NoInstallClass</b> or <b>NoUseClass</b> in the class installer INF file. Drivers for PnP devices are typically "Exclude From Select"; PnP devices should not be manually installed. To build a list of driver files for a PnP device a caller of <b>SetupDiBuildDriverInfoList</b> must set this flag.</para>
      <para>The <b>DriverPath</b> in the <see cref="SP_DEVINSTALL_PARAMS" /> contains either a path of a directory that contain INF files or a path of a specific INF file. If <b>DI_ENUMSINGLEINF</b> is set, <b>DriverPath</b> contains a path of a single INF file. If <b>DriverPath</b> is <b>NULL</b>, this function builds the driver list from the default INF file location, %SystemRoot%\inf.</para>
      <para>After this function has built the specified driver list, the caller can enumerate the elements of the list by calling <see cref="SetupDiEnumDriverInfo" />.</para>
      <para>If the driver list is associated with a device instance (that is, <i>DeviceInfoData</i> is specified), the resulting list is composed of drivers that have the same class as the device instance with which they are associated. If this is a global class driver list (that is, <i>DriverType</i> is <b>SPDIT_CLASSDRIVER</b> and <i>DeviceInfoData</i> is not specified), the class that is used when building the list is the class associated with the device information set. If the device information set has no associated class, drivers of all classes are used when building the list.</para>
      <para>Another thread can terminate the building of a driver list by a call to <see cref="SetupDiCancelDriverInfoSearch" />.</para>
      <para>The <i>DeviceInfoSet</i> must only contain elements on the local computer. This function only searches for local drivers.</para>
    </remarks>
    <seealso cref="SetupDiCancelDriverInfoSearch" />
    <seealso cref="SetupDiDestroyDriverInfoList" />
    <seealso cref="SetupDiEnumDriverInfo" />
  </member>
  <member name="Windows.SetupDiCallClassInstaller">
    <summary>
      <para>The <b>SetupDiCallClassInstaller</b> function calls the appropriate class installer, and any registered co-installers, with the specified installation request (DIF code).</para>
    </summary>
    <param name="InstallFunction">
      <para>The device installation request (DIF request) to pass to the co-installers and class installer. DIF codes have the format <b>DIF_<i>XXX</i></b> and are defined in Setupapi.h. See <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">Device Installation Function Codes</a> for more information.</para>
      <para>
        <b>Note</b>  For certain DIF requests, the caller must be a member of the Administrators group. For such DIF requests, this requirement is listed on the reference page for the associated default handler.</para>
    </param>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local computer. This set contains a device installation element which represents the device for which to perform the specified installation function.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in the <i>DeviceInfoSet</i> that represents the device for which to perform the specified installation function. This parameter is optional and can be set to <b>NULL</b>. If this parameter is specified, <b>SetupDiCallClassInstaller</b> performs the specified function on the <i>DeviceInfoData</i> element. If <i>DeviceInfoData</i> is <b>NULL</b>, <b>SetupDiCallClassInstaller</b> calls the installers for the setup class that is associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
      <para>When GetLastError returns <b>ERROR_IN_WOW64</b>, this means that the calling application is a 32-bit application attempting to execute in a 64-bit environment, which is not allowed.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiCallClassInstaller</b> calls the class installer and any co-installers that are registered for a device or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a>. This function loads the installers if they are not yet loaded. The function also calls the default handler for the DIF request, if there is a default handler and if the installers return a status indicating that the default handler should be called.</para>
      <para>
        <a href="https://docs.microsoft.com//windows-hardware/drivers/">Device installation applications</a> call this function with a variety of <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">device installation function codes</a> (DIF codes). The function ensures that all the appropriate installers and default handlers are called, in the correct order, for a given DIF request. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">Handling DIF Codes</a>.</para>
      <para>After <b>SetupDiCallClassInstaller</b> returns <b>TRUE</b>, the device installation application must call <see cref="SetupDiGetDeviceInstallParams" /> to obtain an <see cref="SP_DEVINSTALL_PARAMS" /> structure. If the structure's <b>DI_NEEDREBOOT</b> or <b>DI_NEEDRESTART</b> flag is set, the caller must prompt the user to restart the system. For example, the caller can do this by calling <see cref="SetupPromptReboot" />.</para>
      <para>However, be aware that a device installation application should request a system restart one time at most. Therefore, any device installation application that creates multiple calls to <b>SetupDiCallClassInstaller</b> and <see cref="SetupDiGetDeviceInstallParams" /> should save the <b>DI_NEEDREBOOT</b> and <b>DI_NEEDRESTART</b> flags after each call. However, it should prompt the user only after the last call returns.</para>
      <para>In response to a DIF code supplied by <b>SetupDiCallClassInstaller</b>, class installers and co-installers might perform operations that require the system to be restarted. In such situations, the installer or co-installer should do the following:</para>
      <list type="number">
        <item>
          <description>
            <para>Call <see cref="SetupDiGetDeviceInstallParams" /> to obtain the <see cref="SP_DEVINSTALL_PARAMS" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Set the <b>DI_NEEDREBOOT</b> or <b>DI_NEEDRESTART</b> flag in the structure's <i>Flags</i> member.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Call <see cref="SetupDiSetDeviceInstallParams" />, supplying the updated <see cref="SP_DEVINSTALL_PARAMS" /> structure, to save the revised <i>Flags</i> member.</para>
          </description>
        </item>
      </list>
      <para>After <b>SetupDiCallClassInstaller</b> returns, the device installation application that called it should call <see cref="SetupDiGetDeviceInstallParams" />, check the flags, and request a restart if necessary.</para>
      <para>The device information set specified by <i>DeviceInfoSet</i> must only contain elements for devices on the local computer.</para>
      <para>For information about the design and operation of co-installers, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/writing-a-co-installer">Writing a Co-installer</a>.</para>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
  </member>
  <member name="Windows.SetupDiCancelDriverInfoSearch">
    <summary>
      <para>The <b>SetupDiCancelDriverInfoSearch</b> function cancels a driver list search that is currently in progress in a different thread.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which a driver list is being built.</para>
    </param>
    <returns>
      <para>If a driver list search is underway for the specified device information set when this function is called, the search is terminated. <b>SetupDiCancelDriverInfoSearch</b> returns <b>TRUE</b> when the termination is confirmed. Otherwise, it returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_INVALID_HANDLE.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiCancelDriverInfoSearch</b> is a synchronous call. Therefore, it does not return until the driver search thread responds to the termination request.</para>
    </remarks>
    <seealso cref="SetupDiBuildDriverInfoList" />
  </member>
  <member name="Windows.SetupDiChangeState">
    <summary>
      <para>The <b>SetupDiChangeState</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-propertychange">DIF_PROPERTYCHANGE</a> installation request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local computer. This set contains a device information element that represents the device whose state is to be changed.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This is an IN-OUT parameter because <i>DeviceInfoData.</i><b>DevInst</b> might be updated with a new handle value upon return.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiChangeState</b> changes the state of an installed device.</para>
      <para>The caller of <b>SetupDiChangeState</b> must be a member of the Administrators group.</para>
      <para>
        <b>Note</b>  Only a class installer should call <b>SetupDiChangeState</b> and only in those situations where the class installer must perform property change operations after <b>SetupDiChangeState</b> completes the default property change operation. In such situations, the class installer must directly call <b>SetupDiChangeState</b> when the installer processes a DIF_PROPERTYCHANGE request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>Callers of <b>SetupDiChangeState</b> must specify a DICS_<i>XXX</i> flag in the <see cref="SP_PROPCHANGE_PARAMS" /> for the device element that indicates the type of state change to perform on the device. Callers of this function must set the appropriate fields in the SP_PROPCHANGE_PARAMS and call <see cref="SetupDiSetClassInstallParams" /> before calling this function.</para>
      <para>If you specify the DICS_FLAG_CONFIGSPECIFIC flag in the SP_PROPCHANGE_PARAMS then you must fill in the <b>HwProfile</b> field. A value of zero for <b>HwProfile</b> indicates the current profile.</para>
      <para>To enable/disable a device in the current hardware profile, set the DICS_FLAG_CONFIGSPECIFIC flag in the SP_PROPCHANGE_PARAMS. To enable/disable a device globally, such as in both the docked and undocked hardware profiles, set the DICS_FLAG_GLOBAL flag.</para>
      <para>This function does the following:</para>
      <para>Callers of this function should not specify DICS_STOP or DICS_START in the SP_PROPCHANGE_PARAMS. Use DICS_PROPCHANGE to stop and restart a device to cause changes in the device's configuration to take effect.</para>
      <para>If DI_DONOTCALLCONFIGMG is set for a device, you should not call <b>SetupDiChangeState</b> for the device but should instead set the DI_NEEDREBOOT flag.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-propertychange">DIF_PROPERTYCHANGE</seealso>
    <seealso cref="SP_PROPCHANGE_PARAMS" />
    <seealso cref="SetupDiCallClassInstaller" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromName">
    <summary>
      <para>The <b>SetupDiClassGuidsFromName</b> function retrieves the GUID(s) associated with the specified class name. This list is built based on the classes currently installed on the system.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUID.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>Supplies a pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassGuidsFromNameEx</b> to retrieve the class GUIDs for a class on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromNameA">
    <summary>
      <para>The <b>SetupDiClassGuidsFromName</b> function retrieves the GUID(s) associated with the specified class name. This list is built based on the classes currently installed on the system.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUID.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>Supplies a pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassGuidsFromNameEx</b> to retrieve the class GUIDs for a class on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromNameEx">
    <summary>
      <para>The <b>SetupDiClassGuidsFromNameEx</b> function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUIDs.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system from which to retrieve the GUIDs. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Class names are not guaranteed to be unique; only GUIDs are unique. Therefore, one class name can return more than one GUID.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromNameExA">
    <summary>
      <para>The <b>SetupDiClassGuidsFromNameEx</b> function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUIDs.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system from which to retrieve the GUIDs. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Class names are not guaranteed to be unique; only GUIDs are unique. Therefore, one class name can return more than one GUID.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromNameEx">
    <summary>
      <para>The <b>SetupDiClassGuidsFromNameEx</b> function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUIDs.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system from which to retrieve the GUIDs. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Class names are not guaranteed to be unique; only GUIDs are unique. Therefore, one class name can return more than one GUID.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromNameExW">
    <summary>
      <para>The <b>SetupDiClassGuidsFromNameEx</b> function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUIDs.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system from which to retrieve the GUIDs. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Class names are not guaranteed to be unique; only GUIDs are unique. Therefore, one class name can return more than one GUID.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromName">
    <summary>
      <para>The <b>SetupDiClassGuidsFromName</b> function retrieves the GUID(s) associated with the specified class name. This list is built based on the classes currently installed on the system.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUID.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>Supplies a pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassGuidsFromNameEx</b> to retrieve the class GUIDs for a class on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassGuidsFromNameW">
    <summary>
      <para>The <b>SetupDiClassGuidsFromName</b> function retrieves the GUID(s) associated with the specified class name. This list is built based on the classes currently installed on the system.</para>
    </summary>
    <param name="ClassName">
      <para>The name of the class for which to retrieve the class GUID.</para>
    </param>
    <param name="ClassGuidList">
      <para>A pointer to an array to receive the list of GUIDs associated with the specified class name.</para>
    </param>
    <param name="ClassGuidListSize">
      <para>The number of GUIDs in the <i>ClassGuidList</i> array.</para>
    </param>
    <param name="RequiredSize">
      <para>Supplies a pointer to a variable that receives the number of GUIDs associated with the class name. If this number is greater than the size of the <i>ClassGuidList</i> buffer, the number indicates how large the array must be in order to store all the GUIDs.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassGuidsFromNameEx</b> to retrieve the class GUIDs for a class on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassGuidsFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuid">
    <summary>
      <para>The <b>SetupDiClassNameFromGuid</b> function retrieves the class name associated with a class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the class GUID for the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives the NULL-terminated string that contains the name of the class that is specified by the pointer in the <i>ClassGuid</i> parameter.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum size, in characters, of a NULL-terminated class name is MAX_CLASS_NAME_LEN. For more information about the class name size, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of characters that are required to store the requested NULL-terminated class name. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassNameFromGuidEx</b> to retrieve the name for a class on a remote computer.</para>
      <para>
        <b>SetupDiClassNameFromGuid</b> does not enforce a restriction on the length of the class name that it can return. This function returns the required size for a NULL-terminated class name even if it is greater than MAX_CLASS_NAME_LEN. However, MAX_CLASS_NAME_LEN is the maximum length of a valid NULL-terminated class name. A caller should never need a buffer that is larger than MAX_CLASS_NAME_LEN. For more information about class names, see the description of the <b>Class</b> entry of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuid as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuidA">
    <summary>
      <para>The <b>SetupDiClassNameFromGuid</b> function retrieves the class name associated with a class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the class GUID for the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives the NULL-terminated string that contains the name of the class that is specified by the pointer in the <i>ClassGuid</i> parameter.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum size, in characters, of a NULL-terminated class name is MAX_CLASS_NAME_LEN. For more information about the class name size, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of characters that are required to store the requested NULL-terminated class name. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassNameFromGuidEx</b> to retrieve the name for a class on a remote computer.</para>
      <para>
        <b>SetupDiClassNameFromGuid</b> does not enforce a restriction on the length of the class name that it can return. This function returns the required size for a NULL-terminated class name even if it is greater than MAX_CLASS_NAME_LEN. However, MAX_CLASS_NAME_LEN is the maximum length of a valid NULL-terminated class name. A caller should never need a buffer that is larger than MAX_CLASS_NAME_LEN. For more information about class names, see the description of the <b>Class</b> entry of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuid as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuidEx">
    <summary>
      <para>The <b>SetupDiClassNameFromGuidEx</b> function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>The class GUID of the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a string buffer that receives the NULL-terminated name of the class for the specified GUID.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the <i>ClassName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>The number of characters required to store the class name (including a terminating null). <i>RequiredSize</i> is always less than MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system on which the class is installed. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuidEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuidExA">
    <summary>
      <para>The <b>SetupDiClassNameFromGuidEx</b> function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>The class GUID of the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a string buffer that receives the NULL-terminated name of the class for the specified GUID.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the <i>ClassName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>The number of characters required to store the class name (including a terminating null). <i>RequiredSize</i> is always less than MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system on which the class is installed. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuidEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuidEx">
    <summary>
      <para>The <b>SetupDiClassNameFromGuidEx</b> function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>The class GUID of the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a string buffer that receives the NULL-terminated name of the class for the specified GUID.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the <i>ClassName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>The number of characters required to store the class name (including a terminating null). <i>RequiredSize</i> is always less than MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system on which the class is installed. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuidEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuidExW">
    <summary>
      <para>The <b>SetupDiClassNameFromGuidEx</b> function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>The class GUID of the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a string buffer that receives the NULL-terminated name of the class for the specified GUID.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the <i>ClassName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>The number of characters required to store the class name (including a terminating null). <i>RequiredSize</i> is always less than MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system on which the class is installed. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the local system name is used.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuidEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromNameEx" />
    <seealso cref="SetupDiClassNameFromGuid" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuid">
    <summary>
      <para>The <b>SetupDiClassNameFromGuid</b> function retrieves the class name associated with a class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the class GUID for the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives the NULL-terminated string that contains the name of the class that is specified by the pointer in the <i>ClassGuid</i> parameter.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum size, in characters, of a NULL-terminated class name is MAX_CLASS_NAME_LEN. For more information about the class name size, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of characters that are required to store the requested NULL-terminated class name. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassNameFromGuidEx</b> to retrieve the name for a class on a remote computer.</para>
      <para>
        <b>SetupDiClassNameFromGuid</b> does not enforce a restriction on the length of the class name that it can return. This function returns the required size for a NULL-terminated class name even if it is greater than MAX_CLASS_NAME_LEN. However, MAX_CLASS_NAME_LEN is the maximum length of a valid NULL-terminated class name. A caller should never need a buffer that is larger than MAX_CLASS_NAME_LEN. For more information about class names, see the description of the <b>Class</b> entry of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuid as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiClassNameFromGuidW">
    <summary>
      <para>The <b>SetupDiClassNameFromGuid</b> function retrieves the class name associated with a class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the class GUID for the class name to retrieve.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives the NULL-terminated string that contains the name of the class that is specified by the pointer in the <i>ClassGuid</i> parameter.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum size, in characters, of a NULL-terminated class name is MAX_CLASS_NAME_LEN. For more information about the class name size, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of characters that are required to store the requested NULL-terminated class name. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiClassNameFromGuidEx</b> to retrieve the name for a class on a remote computer.</para>
      <para>
        <b>SetupDiClassNameFromGuid</b> does not enforce a restriction on the length of the class name that it can return. This function returns the required size for a NULL-terminated class name even if it is greater than MAX_CLASS_NAME_LEN. However, MAX_CLASS_NAME_LEN is the maximum length of a valid NULL-terminated class name. A caller should never need a buffer that is larger than MAX_CLASS_NAME_LEN. For more information about class names, see the description of the <b>Class</b> entry of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiClassNameFromGuid as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuidEx" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInfo - SetupDiCreateDeviceInfoA">
    <summary>
      <para>The <b>SetupDiCreateDeviceInfo</b> function creates a new device information element and adds it as a new member to the specified device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local computer.</para>
    </param>
    <param name="DeviceName">
      <para>A pointer to a NULL-terminated string that supplies either a full <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> (for example, "Root*PNP0500\0000") or a root-enumerated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-ids">device ID</a> without the enumerator prefix and instance identifier suffix (for example, "*PNP0500"). The root-enumerated device identifier can be used only if the DICD_GENERATE_ID flag is specified in the <i>CreationFlags</i> parameter.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> GUID for the device. If the device setup class of the device is not known, set *<i>ClassGuid</i> to a GUID_NULL structure.</para>
    </param>
    <param name="DeviceDescription">
      <para>A pointer to a NULL-terminated string that supplies the text description of the device. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to use for any user interface that is related to installing the device. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="CreationFlags">
      <para>A variable of type DWORD that controls how the device information element is created. Can be a combination of the following values:</para>
      <h4>DICD_GENERATE_ID</h4>
      <para>If this flag is specified, <i>DeviceName</i> contains only a Root-enumerated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-ids">device ID</a> and the system uses that ID to generate a full <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> for the new device information element.</para>
      <para>Call <b>SetupDiGetDeviceInstanceId</b> to retrieve the device instance ID that was generated for this device information element.</para>
      <h4>DICD_INHERIT_CLASSDRVS</h4>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a <see cref="SP_DEVINFO_DATA" /> structure that receives the new device information element. This pointer is optional and can be <b>NULL</b>. If the structure is supplied, the caller must set the <b>cbSize</b> member of this structure to <b>sizeof(</b>SP_DEVINFO_DATA<b>)</b> before calling the function. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>If this device instance is being added to a set that has an associated class, the device class must be the same or the call fails. In this case, a call to <see cref="GetLastError" /> returns ERROR_CLASS_MISMATCH.</para>
      <para>If the specified device instance is the same as an existing device instance key in the registry, the call fails. In this case, a call to <see cref="GetLastError" /> returns ERROR_DEVINST_ALREADY_EXISTS. This occurs only if the DICD_GENERATE_ID flag is not set.</para>
      <para>If the new device information element was successfully created but the caller-supplied <i>DeviceInfoData</i> buffer is invalid, the function returns <b>FALSE</b>. In this case, a call to <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. However, the device information element will have been added as a new member of the set already.</para>
      <para>The <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiDeleteDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInfo" />
    <seealso cref="SetupDiOpenDeviceInfo" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInfoList">
    <summary>
      <para>The <b>SetupDiCreateDeviceInfoList</b> function creates an empty <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> and optionally associates the set with a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> and a top-level window.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the <b>GUID</b> of the device setup class to associate with the newly created device information set. If this parameter is specified, only devices of this class can be included in this device information set. If this parameter is set to <b>NULL</b>, the device information set is not associated with a specific device setup class.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to use for any user interface that is related to non-device-specific actions (such as a select-device dialog box that uses the global class driver list). This handle is optional and can be <b>NULL</b>. If a specific top-level window is not required, set <i>hwndParent</i> to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns a handle to an empty device information set if it is successful. Otherwise, it returns <b>INVALID_HANDLE_VALUE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must delete the returned device information set when it is no longer needed by calling <b>SetupDiDestroyDeviceInfoList</b>.</para>
      <para>To create a device information list for a remote computer use <see cref="SetupDiCreateDeviceInfoListEx" />.</para>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoListEx" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiGetClassDevs" />
    <seealso cref="SetupDiGetDeviceInfoListClass" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInfoListEx">
    <summary>
      <para>The <b>SetupDiCreateDeviceInfoList</b> function creates an empty <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> on a remote or a local computer and optionally associates the set with a device setup class .</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the device setup class to associate with the newly created device information set. If this parameter is specified, only devices of this class can be included in this device information set. If this parameter is set to <b>NULL</b>, the device information set is not associated with a specific device setup class.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to use for any user interface that is related to non-device-specific actions (such as a select-device dialog box that uses the global class driver list). This handle is optional and can be <b>NULL</b>. If a specific top-level window is not required, set <i>hwndParent</i> to <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a computer on a network. If a name is specified, only devices on that computer can be created and opened in this device information set. If this parameter is set to <b>NULL</b>, the device information set is for devices on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns a handle to an empty device information set if it is successful. Otherwise, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>If the device information set is for devices on a remote computer (<i>MachineName</i> is not <b>NULL</b>), all subsequent operations on this set or any of its elements must use routines that support device information sets with remote elements. The <b>SetupDi</b><i>Xxx</i> routines that do not provide this support, such as <see cref="SetupDiCallClassInstaller" />, have a statement to that effect in their reference page.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInfoListExA">
    <summary>
      <para>The <b>SetupDiCreateDeviceInfoList</b> function creates an empty <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> on a remote or a local computer and optionally associates the set with a device setup class .</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the device setup class to associate with the newly created device information set. If this parameter is specified, only devices of this class can be included in this device information set. If this parameter is set to <b>NULL</b>, the device information set is not associated with a specific device setup class.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to use for any user interface that is related to non-device-specific actions (such as a select-device dialog box that uses the global class driver list). This handle is optional and can be <b>NULL</b>. If a specific top-level window is not required, set <i>hwndParent</i> to <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a computer on a network. If a name is specified, only devices on that computer can be created and opened in this device information set. If this parameter is set to <b>NULL</b>, the device information set is for devices on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns a handle to an empty device information set if it is successful. Otherwise, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>If the device information set is for devices on a remote computer (<i>MachineName</i> is not <b>NULL</b>), all subsequent operations on this set or any of its elements must use routines that support device information sets with remote elements. The <b>SetupDi</b><i>Xxx</i> routines that do not provide this support, such as <see cref="SetupDiCallClassInstaller" />, have a statement to that effect in their reference page.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInfoListEx">
    <summary>
      <para>The <b>SetupDiCreateDeviceInfoList</b> function creates an empty <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> on a remote or a local computer and optionally associates the set with a device setup class .</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the device setup class to associate with the newly created device information set. If this parameter is specified, only devices of this class can be included in this device information set. If this parameter is set to <b>NULL</b>, the device information set is not associated with a specific device setup class.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to use for any user interface that is related to non-device-specific actions (such as a select-device dialog box that uses the global class driver list). This handle is optional and can be <b>NULL</b>. If a specific top-level window is not required, set <i>hwndParent</i> to <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a computer on a network. If a name is specified, only devices on that computer can be created and opened in this device information set. If this parameter is set to <b>NULL</b>, the device information set is for devices on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns a handle to an empty device information set if it is successful. Otherwise, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>If the device information set is for devices on a remote computer (<i>MachineName</i> is not <b>NULL</b>), all subsequent operations on this set or any of its elements must use routines that support device information sets with remote elements. The <b>SetupDi</b><i>Xxx</i> routines that do not provide this support, such as <see cref="SetupDiCallClassInstaller" />, have a statement to that effect in their reference page.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInfoListExW">
    <summary>
      <para>The <b>SetupDiCreateDeviceInfoList</b> function creates an empty <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> on a remote or a local computer and optionally associates the set with a device setup class .</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the device setup class to associate with the newly created device information set. If this parameter is specified, only devices of this class can be included in this device information set. If this parameter is set to <b>NULL</b>, the device information set is not associated with a specific device setup class.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to use for any user interface that is related to non-device-specific actions (such as a select-device dialog box that uses the global class driver list). This handle is optional and can be <b>NULL</b>. If a specific top-level window is not required, set <i>hwndParent</i> to <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a computer on a network. If a name is specified, only devices on that computer can be created and opened in this device information set. If this parameter is set to <b>NULL</b>, the device information set is for devices on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns a handle to an empty device information set if it is successful. Otherwise, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>If the device information set is for devices on a remote computer (<i>MachineName</i> is not <b>NULL</b>), all subsequent operations on this set or any of its elements must use routines that support device information sets with remote elements. The <b>SetupDi</b><i>Xxx</i> routines that do not provide this support, such as <see cref="SetupDiCallClassInstaller" />, have a statement to that effect in their reference page.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInfoListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInfo - SetupDiCreateDeviceInfoW">
    <summary>
      <para>The <b>SetupDiCreateDeviceInfo</b> function creates a new device information element and adds it as a new member to the specified device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local computer.</para>
    </param>
    <param name="DeviceName">
      <para>A pointer to a NULL-terminated string that supplies either a full <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> (for example, "Root*PNP0500\0000") or a root-enumerated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-ids">device ID</a> without the enumerator prefix and instance identifier suffix (for example, "*PNP0500"). The root-enumerated device identifier can be used only if the DICD_GENERATE_ID flag is specified in the <i>CreationFlags</i> parameter.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> GUID for the device. If the device setup class of the device is not known, set *<i>ClassGuid</i> to a GUID_NULL structure.</para>
    </param>
    <param name="DeviceDescription">
      <para>A pointer to a NULL-terminated string that supplies the text description of the device. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to use for any user interface that is related to installing the device. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="CreationFlags">
      <para>A variable of type DWORD that controls how the device information element is created. Can be a combination of the following values:</para>
      <h4>DICD_GENERATE_ID</h4>
      <para>If this flag is specified, <i>DeviceName</i> contains only a Root-enumerated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-ids">device ID</a> and the system uses that ID to generate a full <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> for the new device information element.</para>
      <para>Call <b>SetupDiGetDeviceInstanceId</b> to retrieve the device instance ID that was generated for this device information element.</para>
      <h4>DICD_INHERIT_CLASSDRVS</h4>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a <see cref="SP_DEVINFO_DATA" /> structure that receives the new device information element. This pointer is optional and can be <b>NULL</b>. If the structure is supplied, the caller must set the <b>cbSize</b> member of this structure to <b>sizeof(</b>SP_DEVINFO_DATA<b>)</b> before calling the function. For more information, see the following <b>Remarks</b> section.</para>
      <h5>- CreationFlags.DICD_GENERATE_ID</h5>
      <para>If this flag is specified, <i>DeviceName</i> contains only a Root-enumerated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-ids">device ID</a> and the system uses that ID to generate a full <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> for the new device information element.</para>
      <para>Call <b>SetupDiGetDeviceInstanceId</b> to retrieve the device instance ID that was generated for this device information element.</para>
      <h5>- CreationFlags.DICD_INHERIT_CLASSDRVS</h5>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>If this device instance is being added to a set that has an associated class, the device class must be the same or the call fails. In this case, a call to <see cref="GetLastError" /> returns ERROR_CLASS_MISMATCH.</para>
      <para>If the specified device instance is the same as an existing device instance key in the registry, the call fails. In this case, a call to <see cref="GetLastError" /> returns ERROR_DEVINST_ALREADY_EXISTS. This occurs only if the DICD_GENERATE_ID flag is not set.</para>
      <para>If the new device information element was successfully created but the caller-supplied <i>DeviceInfoData</i> buffer is invalid, the function returns <b>FALSE</b>. In this case, a call to <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. However, the device information element will have been added as a new member of the set already.</para>
      <para>The <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiDeleteDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInfo" />
    <seealso cref="SetupDiOpenDeviceInfo" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInterface - SetupDiCreateDeviceInterfaceA">
    <summary>
      <para>The <b>SetupDiCreateDeviceInterface</b> function registers a device interface on a local system or a remote system.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. This set contains a device information element that represents the device for which to register an interface. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="InterfaceClassGuid">
      <para>A pointer to a class GUID that specifies the interface class for the new interface.</para>
    </param>
    <param name="ReferenceString">
      <para>A pointer to a NULL-terminated string that supplies a reference string. This pointer is optional and can be <b>NULL</b>. Reference strings are used only by a few bus drivers that use device interfaces as placeholders for software devices that are created on demand.</para>
    </param>
    <param name="CreationFlags">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to a caller-initialized <see cref="SP_DEVICE_INTERFACE_DATA" /> structure to receive information about the new device interface. This pointer is optional and can be <b>NULL</b>. If the structure is supplied, the caller must set the <b>cbSize</b> member of this structure to <b>sizeof(</b>SP_DEVICE_INTERFACE_DATA<b>)</b> before calling this function. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiCreateDeviceInterface</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, it returns <b>FALSE</b> and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>
        <b>SetupDiCreateDeviceInterface</b> registers an interface for a device. If a device has more than one interface, call this function once for each interface being registered.</para>
      <para>If this function successfully registers an interface for the device that corresponds to the specified device information element, it also adds the interface to the interface list that is associated with the device information element in the specified device information set.</para>
      <para>Before a registered interface can be used by applications and other system components the interface must be enabled by the driver for the device.</para>
      <para>This function creates a registry key for the new device interface. Callers of this function can access nonvolatile storage under this key using <see cref="SetupDiOpenDeviceInterfaceRegKey" />.</para>
      <para>If <b>SetupDiCreateDeviceInterface</b> successfully creates a new device interface, but the caller-supplied buffer in the <i>DeviceInterfaceData</i> parameter is invalid, this function will return <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INVALID_USER_BUFFER. However, the function does create and register the new device interface.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInterface as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiOpenDeviceInterfaceRegKey" />
    <seealso cref="SetupDiRemoveDeviceInterface" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInterfaceRegKey - SetupDiCreateDeviceInterfaceRegKeyA">
    <summary>
      <para>The <b>SetupDiCreateDeviceInterfaceRegKey</b> function creates a registry key for storing information about a device interface and returns a handle to the key.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the interface for which to create a registry key. The device information set must not contain remote elements.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the device interface in <i>DeviceInfoSet</i>. This pointer is possibly returned by <see cref="SetupDiCreateDeviceInterface" />.</para>
    </param>
    <param name="Reserved">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="samDesired">
      <para>The registry security access that the caller requests for the key that is being created. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</para>
    </param>
    <param name="InfHandle">
      <para>The handle to an open INF file that contains a <i>DDInstall</i> section to be executed for the newly-created key. This parameter is optional and can be <b>NULL</b>. If this parameter is not <b>NULL</b>, <i>InfSectionName</i> must be specified as well.</para>
    </param>
    <param name="InfSectionName">
      <para>A pointer to the name of an INF <i>DDInstall</i> section in the INF file that is specified by <i>InfHandle</i>. This section is executed for the newly created key. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <i>InfHandle</i> must be specified as well.</para>
    </param>
    <returns>
      <para>If <b>SetupDiCreateDeviceInterfaceRegKey</b> succeeds, the function returns a handle to the requested registry key in which interface information can be stored and retrieved. If <b>SetupDiCreateDeviceInterfaceRegKey</b> fails, the function returns INVALID_HANDLE_VALUE. Call <see cref="GetLastError" /> to get extended error information.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>If the requested key for the device interface already exists, <b>SetupDiCreateDeviceInterfaceRegKey</b> returns a handle to that key; otherwise, <b>SetupDiCreateDeviceInterfaceRegKey</b> creates a new nonvolatile registry key for the specified device interface. Callers of this function can store private configuration data for the device interface in this key. The driver for the device can access this key using <b>Io</b><i>Xxx</i> routines.</para>
      <para>Close the handle returned from this function by calling <see cref="RegCloseKey" />.</para>
      <para>For installations that use layout files (specified by the <b>LayoutFile</b> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>), the layout file must be opened by a call to <b>SetupOpenAppendInfFile</b> (described in Windows SDK documentation) before <b>SetupDiCreateDeviceInterfaceRegKey</b> is called.</para>
      <para>The device information set specified by <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInterfaceRegKey as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInterface" />
    <seealso cref="SetupDiDeleteDeviceInterfaceRegKey" />
    <seealso cref="SetupDiOpenDeviceInterfaceRegKey" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInterfaceRegKey - SetupDiCreateDeviceInterfaceRegKeyW">
    <summary>
      <para>The <b>SetupDiCreateDeviceInterfaceRegKey</b> function creates a registry key for storing information about a device interface and returns a handle to the key.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the interface for which to create a registry key. The device information set must not contain remote elements.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the device interface in <i>DeviceInfoSet</i>. This pointer is possibly returned by <see cref="SetupDiCreateDeviceInterface" />.</para>
    </param>
    <param name="Reserved">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="samDesired">
      <para>The registry security access that the caller requests for the key that is being created. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</para>
    </param>
    <param name="InfHandle">
      <para>The handle to an open INF file that contains a <i>DDInstall</i> section to be executed for the newly-created key. This parameter is optional and can be <b>NULL</b>. If this parameter is not <b>NULL</b>, <i>InfSectionName</i> must be specified as well.</para>
    </param>
    <param name="InfSectionName">
      <para>A pointer to the name of an INF <i>DDInstall</i> section in the INF file that is specified by <i>InfHandle</i>. This section is executed for the newly created key. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <i>InfHandle</i> must be specified as well.</para>
    </param>
    <returns>
      <para>If <b>SetupDiCreateDeviceInterfaceRegKey</b> succeeds, the function returns a handle to the requested registry key in which interface information can be stored and retrieved. If <b>SetupDiCreateDeviceInterfaceRegKey</b> fails, the function returns INVALID_HANDLE_VALUE. Call <see cref="GetLastError" /> to get extended error information.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>If the requested key for the device interface already exists, <b>SetupDiCreateDeviceInterfaceRegKey</b> returns a handle to that key; otherwise, <b>SetupDiCreateDeviceInterfaceRegKey</b> creates a new nonvolatile registry key for the specified device interface. Callers of this function can store private configuration data for the device interface in this key. The driver for the device can access this key using <b>Io</b><i>Xxx</i> routines.</para>
      <para>Close the handle returned from this function by calling <see cref="RegCloseKey" />.</para>
      <para>For installations that use layout files (specified by the <b>LayoutFile</b> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>), the layout file must be opened by a call to <b>SetupOpenAppendInfFile</b> (described in Windows SDK documentation) before <b>SetupDiCreateDeviceInterfaceRegKey</b> is called.</para>
      <para>The device information set specified by <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInterfaceRegKey as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInterface" />
    <seealso cref="SetupDiDeleteDeviceInterfaceRegKey" />
    <seealso cref="SetupDiOpenDeviceInterfaceRegKey" />
  </member>
  <member name="Windows.SetupDiCreateDeviceInterface - SetupDiCreateDeviceInterfaceW">
    <summary>
      <para>The <b>SetupDiCreateDeviceInterface</b> function registers a device interface on a local system or a remote system.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. This set contains a device information element that represents the device for which to register an interface. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="InterfaceClassGuid">
      <para>A pointer to a class GUID that specifies the interface class for the new interface.</para>
    </param>
    <param name="ReferenceString">
      <para>A pointer to a NULL-terminated string that supplies a reference string. This pointer is optional and can be <b>NULL</b>. Reference strings are used only by a few bus drivers that use device interfaces as placeholders for software devices that are created on demand.</para>
    </param>
    <param name="CreationFlags">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to a caller-initialized <see cref="SP_DEVICE_INTERFACE_DATA" /> structure to receive information about the new device interface. This pointer is optional and can be <b>NULL</b>. If the structure is supplied, the caller must set the <b>cbSize</b> member of this structure to <b>sizeof(</b>SP_DEVICE_INTERFACE_DATA<b>)</b> before calling this function. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiCreateDeviceInterface</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, it returns <b>FALSE</b> and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>
        <b>SetupDiCreateDeviceInterface</b> registers an interface for a device. If a device has more than one interface, call this function once for each interface being registered.</para>
      <para>If this function successfully registers an interface for the device that corresponds to the specified device information element, it also adds the interface to the interface list that is associated with the device information element in the specified device information set.</para>
      <para>Before a registered interface can be used by applications and other system components the interface must be enabled by the driver for the device.</para>
      <para>This function creates a registry key for the new device interface. Callers of this function can access nonvolatile storage under this key using <see cref="SetupDiOpenDeviceInterfaceRegKey" />.</para>
      <para>If <b>SetupDiCreateDeviceInterface</b> successfully creates a new device interface, but the caller-supplied buffer in the <i>DeviceInterfaceData</i> parameter is invalid, this function will return <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INVALID_USER_BUFFER. However, the function does create and register the new device interface.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDeviceInterface as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiOpenDeviceInterfaceRegKey" />
    <seealso cref="SetupDiRemoveDeviceInterface" />
  </member>
  <member name="Windows.SetupDiCreateDevRegKey - SetupDiCreateDevRegKeyA">
    <summary>
      <para>The <b>SetupDiCreateDevRegKey</b> function creates a registry key for device-specific configuration information and returns a handle to the key.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to create a registry key.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="Scope">
      <para>The scope of the registry key to be created. The scope determines where the information is stored. The key created can be global or hardware profile-specific. Can be one of the following values:</para>
      <h4>DICS_FLAG_GLOBAL</h4>
      <para>Create a key to store global configuration information. This information is not specific to a particular hardware profile. On NT-based operating systems this creates a key that is rooted at <b>HKEY_LOCAL_MACHINE</b>. The exact key opened depends on the value of the <i>KeyType</i> parameter.</para>
      <h4>DICS_FLAG_CONFIGSPECIFIC</h4>
      <para>Create a key to store hardware profile-specific configuration information. This key is rooted at one of the hardware-profile specific branches, instead of <b>HKEY_LOCAL_MACHINE</b>.</para>
    </param>
    <param name="HwProfile">
      <para>The hardware profile for which to create a key if <i>HwProfileFlags</i> is set to SPDICS_FLAG_CONFIGSPECIFIC. If <i>HwProfile</i> is 0, the key for the current hardware profile is created. If <i>HwProfileFlags</i> is SPDICS_FLAG_GLOBAL, <i>HwProfile</i> is ignored.</para>
    </param>
    <param name="KeyType">
      <para>The type of registry storage key to create. Can be one of the following values:</para>
      <h4>DIREG_DEV</h4>
      <para>Create a <a href="https://docs.microsoft.com//windows-hardware/drivers/">hardware key</a> for the device.</para>
      <h4>DIREG_DRV</h4>
      <para>Create a <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a> for the device.</para>
    </param>
    <param name="InfHandle">
      <para>The handle to an open INF file that contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> to be executed for the newly created key. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <i>InfSectionName</i> must be specified as well.</para>
    </param>
    <param name="InfSectionName">
      <para>The name of an INF <i>DDInstall</i> section in the INF file specified by <i>InfHandle</i>. This section is executed for the newly created key. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <i>InfHandle</i> must be specified as well.</para>
    </param>
    <returns>
      <para>If <b>SetupDiCreateDevRegKey</b> succeeds, the function returns a handle to the specified registry key in which device-specific configuration data can be stored and retrieved. If <b>SetupDiCreateDevRegKey</b> fails, the function returns INVALID_HANDLE_VALUE. Call <see cref="GetLastError" /> to get extended error information.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiCreateDevRegKey</b> must be a member of the Administrators group.</para>
      <para>Close the handle returned from <b>SetupDiCreateDevRegKey</b> by calling <see cref="RegCloseKey" />.</para>
      <para>If the specified key already exists, <b>SetupDiCreateDevRegKey</b> returns a handle to that key. Otherwise, <b>SetupDiCreateDevRegKey</b> creates the specified key and returns a handle to the new key. For Windows Server 2003 and later versions of Windows, the key handle has KEY_READ and KEY_WRITE access only. For previous Windows versions, this handle has KEY_ALL_ACCESS access.</para>
      <para>The specified device instance must be registered before <b>SetupDiCreateDevRegKey</b> is called. Note, however, that the operating system automatically registers PnP device instances. For information about how to register non-PnP device instances, see <see cref="SetupDiRegisterDeviceInfo" />.</para>
      <para>For installations that use layout files (specified by the <b>LayoutFile</b> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>), the layout file must be opened by a call to <b>SetupOpenAppendInfFile</b> (described in the Microsoft Windows SDK documentation) before <b>SetupDiCreateDevRegKey</b> is called.</para>
      <para>If the supplied device information set contains device information elements for a remote system, and <i>InfHandle</i> and <i>InfSectionName</i> are also specified, the create request will fail, and a subsequent call to <see cref="GetLastError" /> will return ERROR_REMOTE_REQUEST_UNSUPPORTED.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDevRegKey as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiGetHwProfileList" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiRegisterDeviceInfo" />
  </member>
  <member name="Windows.SetupDiCreateDevRegKey - SetupDiCreateDevRegKeyW">
    <summary>
      <para>The <b>SetupDiCreateDevRegKey</b> function creates a registry key for device-specific configuration information and returns a handle to the key.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to create a registry key.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="Scope">
      <para>The scope of the registry key to be created. The scope determines where the information is stored. The key created can be global or hardware profile-specific. Can be one of the following values:</para>
      <h4>DICS_FLAG_GLOBAL</h4>
      <para>Create a key to store global configuration information. This information is not specific to a particular hardware profile. On NT-based operating systems this creates a key that is rooted at <b>HKEY_LOCAL_MACHINE</b>. The exact key opened depends on the value of the <i>KeyType</i> parameter.</para>
      <h4>DICS_FLAG_CONFIGSPECIFIC</h4>
      <para>Create a key to store hardware profile-specific configuration information. This key is rooted at one of the hardware-profile specific branches, instead of <b>HKEY_LOCAL_MACHINE</b>.</para>
    </param>
    <param name="HwProfile">
      <para>The hardware profile for which to create a key if <i>HwProfileFlags</i> is set to SPDICS_FLAG_CONFIGSPECIFIC. If <i>HwProfile</i> is 0, the key for the current hardware profile is created. If <i>HwProfileFlags</i> is SPDICS_FLAG_GLOBAL, <i>HwProfile</i> is ignored.</para>
    </param>
    <param name="KeyType">
      <para>The type of registry storage key to create. Can be one of the following values:</para>
      <h4>DIREG_DEV</h4>
      <para>Create a <a href="https://docs.microsoft.com//windows-hardware/drivers/">hardware key</a> for the device.</para>
      <h4>DIREG_DRV</h4>
      <para>Create a <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a> for the device.</para>
    </param>
    <param name="InfHandle">
      <para>The handle to an open INF file that contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> to be executed for the newly created key. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <i>InfSectionName</i> must be specified as well.</para>
    </param>
    <param name="InfSectionName">
      <para>The name of an INF <i>DDInstall</i> section in the INF file specified by <i>InfHandle</i>. This section is executed for the newly created key. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <i>InfHandle</i> must be specified as well.</para>
      <h5>- KeyType.DIREG_DEV</h5>
      <para>Create a <a href="https://docs.microsoft.com//windows-hardware/drivers/">hardware key</a> for the device.</para>
      <h5>- KeyType.DIREG_DRV</h5>
      <para>Create a <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a> for the device.</para>
      <h5>- Scope.DICS_FLAG_CONFIGSPECIFIC</h5>
      <para>Create a key to store hardware profile-specific configuration information. This key is rooted at one of the hardware-profile specific branches, instead of <b>HKEY_LOCAL_MACHINE</b>.</para>
      <h5>- Scope.DICS_FLAG_GLOBAL</h5>
      <para>Create a key to store global configuration information. This information is not specific to a particular hardware profile. On NT-based operating systems this creates a key that is rooted at <b>HKEY_LOCAL_MACHINE</b>. The exact key opened depends on the value of the <i>KeyType</i> parameter.</para>
    </param>
    <returns>
      <para>If <b>SetupDiCreateDevRegKey</b> succeeds, the function returns a handle to the specified registry key in which device-specific configuration data can be stored and retrieved. If <b>SetupDiCreateDevRegKey</b> fails, the function returns INVALID_HANDLE_VALUE. Call <see cref="GetLastError" /> to get extended error information.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiCreateDevRegKey</b> must be a member of the Administrators group.</para>
      <para>Close the handle returned from <b>SetupDiCreateDevRegKey</b> by calling <see cref="RegCloseKey" />.</para>
      <para>If the specified key already exists, <b>SetupDiCreateDevRegKey</b> returns a handle to that key. Otherwise, <b>SetupDiCreateDevRegKey</b> creates the specified key and returns a handle to the new key. For Windows Server 2003 and later versions of Windows, the key handle has KEY_READ and KEY_WRITE access only. For previous Windows versions, this handle has KEY_ALL_ACCESS access.</para>
      <para>The specified device instance must be registered before <b>SetupDiCreateDevRegKey</b> is called. Note, however, that the operating system automatically registers PnP device instances. For information about how to register non-PnP device instances, see <see cref="SetupDiRegisterDeviceInfo" />.</para>
      <para>For installations that use layout files (specified by the <b>LayoutFile</b> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-version-section">INF Version section</a>), the layout file must be opened by a call to <b>SetupOpenAppendInfFile</b> (described in the Microsoft Windows SDK documentation) before <b>SetupDiCreateDevRegKey</b> is called.</para>
      <para>If the supplied device information set contains device information elements for a remote system, and <i>InfHandle</i> and <i>InfSectionName</i> are also specified, the create request will fail, and a subsequent call to <see cref="GetLastError" /> will return ERROR_REMOTE_REQUEST_UNSUPPORTED.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiCreateDevRegKey as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiGetHwProfileList" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiRegisterDeviceInfo" />
  </member>
  <member name="Windows.SetupDiDeleteDeviceInfo">
    <summary>
      <para>The <b>SetupDiDeleteDeviceInfo</b> function deletes a device information element from a device information set. This function does not delete the actual device.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device information element to delete.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that represents the device information element in <i>DeviceInfoSet </i> to delete.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the specified device information element is in use (for example, by a wizard page), the function fails. In this case, a call to <see cref="GetLastError" /> returns ERROR_DEVINFO_DATA_LOCKED. This happens if a handle to a wizard page is retrieved with a call to <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupdigetwizardpage">SetupDiGetWizardPage</a> with this device information element specified and the DIWP_FLAG_USE_DEVINFO_DATA flag set. To delete this device information element, you must first close the wizard's HPROPSHEETPAGE handle.</para>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInfo" />
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/setupdigetwizardpage">SetupDiGetWizardPage</seealso>
    <seealso cref="SetupDiOpenDeviceInfo" />
  </member>
  <member name="Windows.SetupDiDeleteDeviceInterfaceData">
    <summary>
      <para>The <b>SetupDiDeleteDeviceInterfaceData</b> function deletes a device interface from a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the interface to delete. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the interface in <i>DeviceInfoSet</i> to delete. This structure is typically returned by <see cref="SetupDiEnumDeviceInterfaces" />.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiDeleteDeviceInterfaceData</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, it returns <b>FALSE</b> and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiDeleteDeviceInterfaceData</b> deletes a device interface element from a device information set. This function has no effect on the device interface or the underlying device.</para>
    </remarks>
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
    <seealso cref="SetupDiOpenDeviceInterface" />
    <seealso cref="SetupDiRemoveDeviceInterface" />
  </member>
  <member name="Windows.SetupDiDeleteDeviceInterfaceRegKey">
    <summary>
      <para>The <b>SetupDiDeleteDeviceInterfaceRegKey</b> function deletes the registry subkey that is used by applications and drivers to store interface-specific information.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the interface for which to delete interface-specific information in the registry. The device information set must not contain remote elements.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the device interface in <i>DeviceInfoSet</i>. This pointer is possibly returned by <see cref="SetupDiCreateDeviceInterface" /> or <see cref="SetupDiEnumDeviceInterfaces" />.</para>
    </param>
    <param name="Reserved">
      <para>Reserved. Must be zero.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiDeleteDeviceInterfaceRegKey</b> returns <b>TRUE</b> if it is successful; otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>
        <b>SetupDiDeleteDeviceInterfaceRegKey</b> deletes the subkey used by drivers and applications to store information about the device interface instance. This subkey was created by <see cref="SetupDiCreateDeviceInterfaceRegKey" /> or by the driver's call to an associated <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/_kernel/#io-manager-routines">I/O manager routine</a>. <b>SetupDiDeleteDeviceInterfaceRegKey</b> does not affect the main registry key for the device interface instance nor any other subkeys that may have been created.</para>
      <para>The <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInterface" />
    <seealso cref="SetupDiCreateDeviceInterfaceRegKey" />
  </member>
  <member name="Windows.SetupDiDeleteDevRegKey">
    <summary>
      <para>The <b>SetupDiDeleteDevRegKey</b> function deletes specified user-accessible registry keys that are associated with a device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to delete registry keys. The device information set must not contain remote elements.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="Scope">
      <para>The scope of the registry key to delete. The scope indicates where the information is located. The key can be global or hardware profile-specific. Can be one of the following values:</para>
      <h4>DICS_FLAG_GLOBAL</h4>
      <para>Delete the key that stores global configuration information.</para>
      <h4>DICS_FLAG_CONFIGSPECIFIC</h4>
      <para>Delete the key that stores hardware profile-specific configuration information.</para>
    </param>
    <param name="HwProfile">
      <para>If <i>Scope</i> is set to DICS_FLAG_CONFIGSPECIFIC, the <i>HwProfile</i> parameter specifies the hardware profile for which to delete the registry key. If <i>HwProfile</i> is 0, the key for the current hardware profile is deleted. If <i>HwProfile</i> is 0xFFFFFFFF, the registry key for all hardware profiles is deleted.</para>
    </param>
    <param name="KeyType">
      <para>The type of registry storage key to delete. Can be one of the following values:</para>
      <h4>DIREG_DEV</h4>
      <para>Delete the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">hardware key</a>.</para>
      <h4>DIREG_DRV</h4>
      <para>Delete the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a>.</para>
      <h4>DIREG_BOTH</h4>
      <para>Delete both the hardware and software keys for the device.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>The <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
    </remarks>
    <seealso cref="SetupDiCreateDevRegKey" />
    <seealso cref="SetupDiGetHwProfileList" />
  </member>
  <member name="Windows.SetupDiDestroyClassImageList">
    <summary>
      <para>The <b>SetupDiDestroyClassImageList</b> function destroys a class image list that was built by a call to <see cref="SetupDiGetClassImageList" /> or <see cref="SetupDiGetClassImageListEx" />.</para>
    </summary>
    <param name="ClassImageListData">
      <para>A pointer to an <see cref="SP_CLASSIMAGELIST_DATA" /> structure that contains the class image list to destroy.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="SetupDiGetClassImageList" />
    <seealso cref="SetupDiGetClassImageListEx" />
  </member>
  <member name="Windows.SetupDiDestroyDeviceInfoList">
    <summary>
      <para>The <b>SetupDiDestroyDeviceInfoList</b> function deletes a device information set and frees all associated memory.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to delete.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiDestroyDriverInfoList">
    <summary>
      <para>The <b>SetupDiDestroyDriverInfoList</b> function deletes a driver list.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the driver list to delete.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be set to <b>NULL</b>. If this parameter is specified, <b>SetupDiDestroyDriverInfoList</b> deletes the driver list for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiDestroyDriverInfoList</b> deletes the global class driver list that is associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverType">
      <para>The type of driver list to delete, which must be one of the following values:</para>
      <h4>SPDIT_CLASSDRIVER</h4>
      <para>Delete a list of class drivers. If <i>DeviceInfoData</i> is <b>NULL</b>, this driver list type must be specified.</para>
      <h4>SPDIT_COMPATDRIVER</h4>
      <para>Delete a list of compatible drivers for the specified device. <i>DeviceInfoData</i> must be specified if this driver list type is specified.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the currently selected driver is a member of the list being deleted, the selection is reset.</para>
      <para>If a class driver list is being deleted, the DI_FLAGSEX_DIDINFOLIST and DI_DIDCLASS flags are reset for the corresponding device information set or device information element. The DI_MULTMFGS flags is also reset.</para>
      <para>If a compatible driver list is being destroyed, the DI_FLAGSEX_DIDCOMPATINFO and DI_DIDCOMPAT flags are reset for the corresponding device information element.</para>
    </remarks>
    <seealso cref="SetupDiBuildDriverInfoList" />
  </member>
  <member name="Windows.SetupDiDrawMiniIcon">
    <summary>
      <para>The <b>SetupDiDrawMiniIcon</b> function draws the specified mini-icon at the location requested.</para>
    </summary>
    <param name="hdc">
      <para>The handle to the device context in which the mini-icon will be drawn.</para>
    </param>
    <param name="rc">
      <para>The rectangle in the specified device context handle to draw the mini-icon in.</para>
    </param>
    <param name="MiniIconIndex">
      <para>The index of the mini-icon, as retrieved from <see cref="SetupDiLoadClassIcon" /> or <see cref="SetupDiGetClassBitmapIndex" />. The following predefined indexes for devices can be used:</para>
      <list type="table">
        <listheader>
          <description>        Class</description>
          <description>Index</description>
        </listheader>
        <item>
          <description>
            <para>Computer/System</para>
          </description>
          <description>
            <para>0</para>
          </description>
        </item>
        <item>
          <description>
            <para>Display/Monitor</para>
          </description>
          <description>
            <para>2</para>
          </description>
        </item>
        <item>
          <description>
            <para>Network Adapter</para>
          </description>
          <description>
            <para>3</para>
          </description>
        </item>
        <item>
          <description>
            <para>Mouse</para>
          </description>
          <description>
            <para>5</para>
          </description>
        </item>
        <item>
          <description>
            <para>Keyboard</para>
          </description>
          <description>
            <para>6</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sound</para>
          </description>
          <description>
            <para>8</para>
          </description>
        </item>
        <item>
          <description>
            <para>FDC/HDC</para>
          </description>
          <description>
            <para>9</para>
          </description>
        </item>
        <item>
          <description>
            <para>Ports</para>
          </description>
          <description>
            <para>10</para>
          </description>
        </item>
        <item>
          <description>
            <para>Printer</para>
          </description>
          <description>
            <para>14</para>
          </description>
        </item>
        <item>
          <description>
            <para>Network Transport</para>
          </description>
          <description>
            <para>15</para>
          </description>
        </item>
        <item>
          <description>
            <para>Network Client</para>
          </description>
          <description>
            <para>16</para>
          </description>
        </item>
        <item>
          <description>
            <para>Network Service</para>
          </description>
          <description>
            <para>17</para>
          </description>
        </item>
        <item>
          <description>
            <para>Unknown</para>
          </description>
          <description>
            <para>18</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Flags">
      <para>These flags control the drawing operation. The LOWORD contains the actual flags defined as follows:</para>
      <h4>DMI_MASK</h4>
      <para>Draw the mini-icon's mask into HDC.</para>
      <h4>DMI_BKCOLOR</h4>
      <para>Use the system color index specified in the HIWORD of <i>Flags</i> as the background color. If this flag is not set, COLOR_WINDOW is used.</para>
      <h4>DMI_USERECT</h4>
      <para>If set, <b>SetupDiDrawMiniIcon</b> uses the supplied rectangle and stretches the icon to fit.</para>
    </param>
    <returns>
      <para>This function returns the offset from the left side of <i>rc</i> where the string should start. If the draw operation fails, the function returns zero.</para>
    </returns>
    <remarks>
      <para>By default, the icon is centered vertically and forced against the left side of the specified rectangle.</para>
      <para>
        <b>SetupDiDrawMiniIcon</b> draws the 16-bit version of the icon that is specified by the <i>MiniIconIndex </i> parameter. Instead of <b>SetupDiDrawMiniIcon</b>, you should use <see cref="SetupDiLoadClassIcon" /> together with <b>DrawIcon</b> or <b>DrawIconEx</b> to draw the 32-bit version of the icon. The following is an example of how to use <b>DrawIconEx</b> to display an icon:</para>
      <code>HICON hIcon;

if (SetupDiLoadClassIcon(&amp;amp;amp;amp;amp;amp;GUID_DEVCLASS_USB, &amp;amp;amp;amp;amp;amp;hIcon, NULL)) {
    DrawIconEx(hDC, 0, 0, hIcon, GetSystemMetrics(SM_CXSMICON),GetSystemMetrics(SM_CYSMICON), 0, NULL, DI_NORMAL);
DestroyIcon(hIcon);
}
</code>
      <para>For more information about <see cref="DrawIcon" /> or <see cref="DrawIconEx" />, refer to the Microsoft Windows Software Development Kit (SDK) for Windows 7 and .NET Framework 4.0 documentation.</para>
    </remarks>
    <seealso cref="SetupDiGetClassBitmapIndex" />
    <seealso cref="SetupDiLoadClassIcon" />
  </member>
  <member name="Windows.SetupDiEnumDeviceInfo">
    <summary>
      <para>The <b>SetupDiEnumDeviceInfo</b> function returns a <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to return an <see cref="SP_DEVINFO_DATA" /> structure that represents a device information element.</para>
    </param>
    <param name="MemberIndex">
      <para>A zero-based index of the device information element to retrieve.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure to receive information about an enumerated device information element. The caller must set <i>DeviceInfoData</i>.<b>cbSize</b> to <code>sizeof(SP_DEVINFO_DATA)</code>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Repeated calls to this function return a device information element for a different device. This function can be called repeatedly to get information about all devices in the device information set.</para>
      <para>To enumerate device information elements, an installer should initially call <b>SetupDiEnumDeviceInfo</b> with the <i>MemberIndex</i> parameter set to 0. The installer should then increment <i>MemberIndex</i> and call <b>SetupDiEnumDeviceInfo</b> until there are no more values (the function fails and a call to <see cref="GetLastError" /> returns <b>ERROR_NO_MORE_ITEMS</b>).</para>
      <para>Call <see cref="SetupDiEnumDeviceInterfaces" /> to get a context structure for a device <i>interface</i> element (versus a device <i>information</i> element).</para>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiDeleteDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiOpenDeviceInfo" />
  </member>
  <member name="Windows.SetupDiEnumDeviceInterfaces">
    <summary>
      <para>The <b>SetupDiEnumDeviceInterfaces</b> function enumerates the device interfaces that are contained in a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device interfaces for which to return information. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiEnumDeviceInterfaces</b> constrains the enumeration to the interfaces that are supported by the specified device. If this parameter is <b>NULL</b>, repeated calls to <b>SetupDiEnumDeviceInterfaces</b> return information about the interfaces that are associated with all the device information elements in <i>DeviceInfoSet</i>. This pointer is typically returned by <see cref="SetupDiEnumDeviceInfo" />.</para>
    </param>
    <param name="InterfaceClassGuid">
      <para>A pointer to a GUID that specifies the device interface class for the requested interface.</para>
    </param>
    <param name="MemberIndex">
      <para>A zero-based index into the list of interfaces in the device information set. The caller should call this function first with <i>MemberIndex</i> set to zero to obtain the first interface. Then, repeatedly increment <i>MemberIndex</i> and retrieve an interface until this function fails and <see cref="GetLastError" /> returns ERROR_NO_MORE_ITEMS.</para>
      <para>If <i>DeviceInfoData</i> specifies a particular device, the <i>MemberIndex</i> is relative to only the interfaces exposed by that device.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to a caller-allocated buffer that contains, on successful return, a completed <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that identifies an interface that meets the search parameters. The caller must set <i>DeviceInterfaceData</i>.<b>cbSize</b> to <b>sizeof</b>(SP_DEVICE_INTERFACE_DATA) before calling this function.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiEnumDeviceInterfaces</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, <b>FALSE</b> is returned and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Repeated calls to this function return an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure for a different device interface. This function can be called repeatedly to get information about interfaces in a device information set that are associated with a particular device information element or that are associated with all device information elements.</para>
      <para>
        <i>DeviceInterfaceData</i> points to a structure that identifies a requested device interface. To get detailed information about an interface, call <see cref="SetupDiGetDeviceInterfaceDetail" />. The detailed information includes the name of the device interface that can be passed to a Win32 function such as <see cref="CreateFile" /> (described in Microsoft Windows SDK documentation) to get a handle to the interface.</para>
      <para>See <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">Overview of Device Interface Classes</a> for more info.</para>
    </remarks>
    <seealso cref="SetupDiEnumDeviceInfo" />
    <seealso cref="SetupDiGetClassDevs" />
    <seealso cref="SetupDiGetDeviceInterfaceDetail" />
  </member>
  <member name="Windows.SetupDiEnumDriverInfo - SetupDiEnumDriverInfoA">
    <summary>
      <para>The <b>SetupDiEnumDriverInfo</b> function enumerates the members of a driver list.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the driver list to enumerate.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiEnumDriverInfo</b> enumerates a driver list for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiEnumDriverInfo</b> enumerates the global class driver list that is associated with <i>DeviceInfoSet</i> (this list is of type SPDIT_CLASSDRIVER).</para>
    </param>
    <param name="DriverType">
      <para>The type of driver list to enumerate, which must be one of the following values:</para>
      <h4>SPDIT_CLASSDRIVER</h4>
      <para>Enumerate a class driver list. This driver list type must be specified if <i>DeviceInfoData</i> is not specified.</para>
      <h4>SPDIT_COMPATDRIVER</h4>
      <para>Enumerate a list of compatible drivers for the specified device. This driver list type can be specified only if <i>DeviceInfoData</i> is also specified.</para>
    </param>
    <param name="MemberIndex">
      <para>The zero-based index of the driver information member to retrieve.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to a caller-initialized <see cref="SP_DRVINFO_DATA" /> structure that receives information about the enumerated driver. The caller must set <i>DriverInfoData.</i><b>cbSize</b> to <b>sizeof(</b>SP_DRVINFO_DATA<b>)</b> before calling <b>SetupDiEnumDriverInfo</b>. If the <b>cbSize</b> member is not properly set, <b>SetupDiEnumDriverInfo</b> will return <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To enumerate driver information set members, an installer should first call <b>SetupDiEnumDriverInfo</b> with the <i>MemberIndex</i> parameter set to 0. It should then increment <i>MemberIndex</i> and call <b>SetupDiEnumDriverInfo</b> until there are no more values. When there are no more values, the function fails and a call to <see cref="GetLastError" /> returns ERROR_NO_MORE_ITEMS.</para>
      <para>If you do not properly initialize the <b>cbSize</b> member of the SP_DRVINFO_DATA structure that is supplied by the pointer <i>DriverInfoData</i>, the function will fail and log the error ERROR_INVALID_USER_BUFFER.</para>
      <para>To build a list of drivers associated with a specific device or with the global class driver list for a device information set first use <see cref="SetupDiBuildDriverInfoList" /> then pass that list to <b>SetupDiEnumDriverInfo</b>.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiEnumDriverInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildDriverInfoList" />
  </member>
  <member name="Windows.SetupDiEnumDriverInfo - SetupDiEnumDriverInfoW">
    <summary>
      <para>The <b>SetupDiEnumDriverInfo</b> function enumerates the members of a driver list.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the driver list to enumerate.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiEnumDriverInfo</b> enumerates a driver list for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiEnumDriverInfo</b> enumerates the global class driver list that is associated with <i>DeviceInfoSet</i> (this list is of type SPDIT_CLASSDRIVER).</para>
    </param>
    <param name="DriverType">
      <para>The type of driver list to enumerate, which must be one of the following values:</para>
      <h4>SPDIT_CLASSDRIVER</h4>
      <para>Enumerate a class driver list. This driver list type must be specified if <i>DeviceInfoData</i> is not specified.</para>
      <h4>SPDIT_COMPATDRIVER</h4>
      <para>Enumerate a list of compatible drivers for the specified device. This driver list type can be specified only if <i>DeviceInfoData</i> is also specified.</para>
    </param>
    <param name="MemberIndex">
      <para>The zero-based index of the driver information member to retrieve.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to a caller-initialized <see cref="SP_DRVINFO_DATA" /> structure that receives information about the enumerated driver. The caller must set <i>DriverInfoData.</i><b>cbSize</b> to <b>sizeof(</b>SP_DRVINFO_DATA<b>)</b> before calling <b>SetupDiEnumDriverInfo</b>. If the <b>cbSize</b> member is not properly set, <b>SetupDiEnumDriverInfo</b> will return <b>FALSE</b>.</para>
      <h5>- DriverType.SPDIT_CLASSDRIVER</h5>
      <para>Enumerate a class driver list. This driver list type must be specified if <i>DeviceInfoData</i> is not specified.</para>
      <h5>- DriverType.SPDIT_COMPATDRIVER</h5>
      <para>Enumerate a list of compatible drivers for the specified device. This driver list type can be specified only if <i>DeviceInfoData</i> is also specified.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To enumerate driver information set members, an installer should first call <b>SetupDiEnumDriverInfo</b> with the <i>MemberIndex</i> parameter set to 0. It should then increment <i>MemberIndex</i> and call <b>SetupDiEnumDriverInfo</b> until there are no more values. When there are no more values, the function fails and a call to <see cref="GetLastError" /> returns ERROR_NO_MORE_ITEMS.</para>
      <para>If you do not properly initialize the <b>cbSize</b> member of the SP_DRVINFO_DATA structure that is supplied by the pointer <i>DriverInfoData</i>, the function will fail and log the error ERROR_INVALID_USER_BUFFER.</para>
      <para>To build a list of drivers associated with a specific device or with the global class driver list for a device information set first use <see cref="SetupDiBuildDriverInfoList" /> then pass that list to <b>SetupDiEnumDriverInfo</b>.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiEnumDriverInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildDriverInfoList" />
  </member>
  <member name="Windows.SetupDiGetActualModelsSection">
    <summary>
      <para>The <b>SetupDiGetActualModelsSection</b> function retrieves the appropriate decorated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-models-section">INF Models section</a> to use when installing a device from a device INF file.</para>
    </summary>
    <param name="Context">
      <para>A pointer to an INF file context that specifies a <i>manufacturer-identifier</i> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-manufacturer-section">INF Manufacturer section</a> of an INF file. The <i>manufacturer-identifier</i> entry specifies an INF <i>Models</i> section name and optionally specifies <i>TargetOSVersion</i> decorations for the <i>Models</i> section name. For information about INF files and an INF file context, see the Platform SDK topics on <a href="https://docs.microsoft.com//windows/win32/setupapi/using-inf-files">using INF files</a> and the <see cref="INFCONTEXT structure" />.</para>
    </param>
    <param name="AlternatePlatformInfo">
      <para>A pointer to an <see cref="SP_ALTPLATFORM_INFO" /> structure that supplies information about a Windows version and processor architecture. The <b>cbSize</b> member of this structure must be set to <b>sizeof(</b>SP_ALTPLATFORM_INFO_V2<b>)</b>. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="InfSectionWithExt">
      <para>A pointer to a buffer that receives a string that contains the decorated INF <i>Models</i> section name and a NULL terminator. If <i>AlternatePlatformInfo</i> is not supplied, the decorated INF <i>Models</i> section name applies to the current platform; otherwise the name applies to the specified alternative platform. This parameter is optional and can be set to <b>NULL</b>. If this parameter is <b>NULL</b>, the function returns <b>TRUE</b> and sets <i>RequiredSize</i> to the size, in characters, that is required to return the decorated <i>Models</i> section name and a terminating NULL character.</para>
    </param>
    <param name="InfSectionWithExtSize">
      <para>The size, in characters, of the <i>DecoratedModelsSection </i> buffer. If <i>DecoratedModelsSection</i> is <b>NULL</b>, this parameter must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-type variable that receives the size, in characters, of the <i>DecoratedModelsSection</i> buffer that is required to retrieve the decorated <i>Models</i> section name and a terminating NULL character. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for internal system use. This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetActualModelsSection</b> returns <b>TRUE</b> if the operation succeeds. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetActualModelsSection</b> determines which <i>TargetOSVersion</i> fields in the <i>manufacturer-identifier</i> entry (supplied by <i>Context</i>) apply to the current platform, if <i>AlternatePlatformInfo</i> is not supplied, or to an alternative platform, if alternative platform information is supplied. <b>SetupDiGetActualModelsSection</b> selects the most appropriate platform based on all the <i>TargetOSVersion</i> fields, appends the <i>TargetOSVersion</i> string to the INF <i>Models</i> section name, and returns the decorated INF <i>Models</i> section name to the caller. In a <i>manufacturer-identifier</i> entry, the operating system major version is specified by the <i>OSMajorVersion</i> field and the operating system minor version is specified by the <i>OSMinorVersion</i> field.</para>
      <para>For information about retrieving an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> for a device, see <see cref="SetupDiGetActualSectionToInstall" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetActualModelsSection as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall Section</seealso>
    <seealso cref="SP_ALTPLATFORM_INFO" />
    <seealso cref="SetupDiGetActualSectionToInstall" />
  </member>
  <member name="Windows.SetupDiGetActualModelsSectionA">
    <summary>
      <para>The <b>SetupDiGetActualModelsSection</b> function retrieves the appropriate decorated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-models-section">INF Models section</a> to use when installing a device from a device INF file.</para>
    </summary>
    <param name="Context">
      <para>A pointer to an INF file context that specifies a <i>manufacturer-identifier</i> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-manufacturer-section">INF Manufacturer section</a> of an INF file. The <i>manufacturer-identifier</i> entry specifies an INF <i>Models</i> section name and optionally specifies <i>TargetOSVersion</i> decorations for the <i>Models</i> section name. For information about INF files and an INF file context, see the Platform SDK topics on <a href="https://docs.microsoft.com//windows/win32/setupapi/using-inf-files">using INF files</a> and the <see cref="INFCONTEXT structure" />.</para>
    </param>
    <param name="AlternatePlatformInfo">
      <para>A pointer to an <see cref="SP_ALTPLATFORM_INFO" /> structure that supplies information about a Windows version and processor architecture. The <b>cbSize</b> member of this structure must be set to <b>sizeof(</b>SP_ALTPLATFORM_INFO_V2<b>)</b>. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="InfSectionWithExt">
      <para>A pointer to a buffer that receives a string that contains the decorated INF <i>Models</i> section name and a NULL terminator. If <i>AlternatePlatformInfo</i> is not supplied, the decorated INF <i>Models</i> section name applies to the current platform; otherwise the name applies to the specified alternative platform. This parameter is optional and can be set to <b>NULL</b>. If this parameter is <b>NULL</b>, the function returns <b>TRUE</b> and sets <i>RequiredSize</i> to the size, in characters, that is required to return the decorated <i>Models</i> section name and a terminating NULL character.</para>
    </param>
    <param name="InfSectionWithExtSize">
      <para>The size, in characters, of the <i>DecoratedModelsSection </i> buffer. If <i>DecoratedModelsSection</i> is <b>NULL</b>, this parameter must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-type variable that receives the size, in characters, of the <i>DecoratedModelsSection</i> buffer that is required to retrieve the decorated <i>Models</i> section name and a terminating NULL character. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for internal system use. This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetActualModelsSection</b> returns <b>TRUE</b> if the operation succeeds. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetActualModelsSection</b> determines which <i>TargetOSVersion</i> fields in the <i>manufacturer-identifier</i> entry (supplied by <i>Context</i>) apply to the current platform, if <i>AlternatePlatformInfo</i> is not supplied, or to an alternative platform, if alternative platform information is supplied. <b>SetupDiGetActualModelsSection</b> selects the most appropriate platform based on all the <i>TargetOSVersion</i> fields, appends the <i>TargetOSVersion</i> string to the INF <i>Models</i> section name, and returns the decorated INF <i>Models</i> section name to the caller. In a <i>manufacturer-identifier</i> entry, the operating system major version is specified by the <i>OSMajorVersion</i> field and the operating system minor version is specified by the <i>OSMinorVersion</i> field.</para>
      <para>For information about retrieving an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> for a device, see <see cref="SetupDiGetActualSectionToInstall" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetActualModelsSection as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall Section</seealso>
    <seealso cref="SP_ALTPLATFORM_INFO" />
    <seealso cref="SetupDiGetActualSectionToInstall" />
  </member>
  <member name="Windows.SetupDiGetActualModelsSection">
    <summary>
      <para>The <b>SetupDiGetActualModelsSection</b> function retrieves the appropriate decorated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-models-section">INF Models section</a> to use when installing a device from a device INF file.</para>
    </summary>
    <param name="Context">
      <para>A pointer to an INF file context that specifies a <i>manufacturer-identifier</i> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-manufacturer-section">INF Manufacturer section</a> of an INF file. The <i>manufacturer-identifier</i> entry specifies an INF <i>Models</i> section name and optionally specifies <i>TargetOSVersion</i> decorations for the <i>Models</i> section name. For information about INF files and an INF file context, see the Platform SDK topics on <a href="https://docs.microsoft.com//windows/win32/setupapi/using-inf-files">using INF files</a> and the <see cref="INFCONTEXT structure" />.</para>
    </param>
    <param name="AlternatePlatformInfo">
      <para>A pointer to an <see cref="SP_ALTPLATFORM_INFO" /> structure that supplies information about a Windows version and processor architecture. The <b>cbSize</b> member of this structure must be set to <b>sizeof(</b>SP_ALTPLATFORM_INFO_V2<b>)</b>. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="InfSectionWithExt">
      <para>A pointer to a buffer that receives a string that contains the decorated INF <i>Models</i> section name and a NULL terminator. If <i>AlternatePlatformInfo</i> is not supplied, the decorated INF <i>Models</i> section name applies to the current platform; otherwise the name applies to the specified alternative platform. This parameter is optional and can be set to <b>NULL</b>. If this parameter is <b>NULL</b>, the function returns <b>TRUE</b> and sets <i>RequiredSize</i> to the size, in characters, that is required to return the decorated <i>Models</i> section name and a terminating NULL character.</para>
    </param>
    <param name="InfSectionWithExtSize">
      <para>The size, in characters, of the <i>DecoratedModelsSection </i> buffer. If <i>DecoratedModelsSection</i> is <b>NULL</b>, this parameter must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-type variable that receives the size, in characters, of the <i>DecoratedModelsSection</i> buffer that is required to retrieve the decorated <i>Models</i> section name and a terminating NULL character. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for internal system use. This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetActualModelsSection</b> returns <b>TRUE</b> if the operation succeeds. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetActualModelsSection</b> determines which <i>TargetOSVersion</i> fields in the <i>manufacturer-identifier</i> entry (supplied by <i>Context</i>) apply to the current platform, if <i>AlternatePlatformInfo</i> is not supplied, or to an alternative platform, if alternative platform information is supplied. <b>SetupDiGetActualModelsSection</b> selects the most appropriate platform based on all the <i>TargetOSVersion</i> fields, appends the <i>TargetOSVersion</i> string to the INF <i>Models</i> section name, and returns the decorated INF <i>Models</i> section name to the caller. In a <i>manufacturer-identifier</i> entry, the operating system major version is specified by the <i>OSMajorVersion</i> field and the operating system minor version is specified by the <i>OSMinorVersion</i> field.</para>
      <para>For information about retrieving an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> for a device, see <see cref="SetupDiGetActualSectionToInstall" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetActualModelsSection as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall Section</seealso>
    <seealso cref="SP_ALTPLATFORM_INFO" />
    <seealso cref="SetupDiGetActualSectionToInstall" />
  </member>
  <member name="Windows.SetupDiGetActualModelsSectionW">
    <summary>
      <para>The <b>SetupDiGetActualModelsSection</b> function retrieves the appropriate decorated <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-models-section">INF Models section</a> to use when installing a device from a device INF file.</para>
    </summary>
    <param name="Context">
      <para>A pointer to an INF file context that specifies a <i>manufacturer-identifier</i> entry in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-manufacturer-section">INF Manufacturer section</a> of an INF file. The <i>manufacturer-identifier</i> entry specifies an INF <i>Models</i> section name and optionally specifies <i>TargetOSVersion</i> decorations for the <i>Models</i> section name. For information about INF files and an INF file context, see the Platform SDK topics on <a href="https://docs.microsoft.com//windows/win32/setupapi/using-inf-files">using INF files</a> and the <see cref="INFCONTEXT structure" />.</para>
    </param>
    <param name="AlternatePlatformInfo">
      <para>A pointer to an <see cref="SP_ALTPLATFORM_INFO" /> structure that supplies information about a Windows version and processor architecture. The <b>cbSize</b> member of this structure must be set to <b>sizeof(</b>SP_ALTPLATFORM_INFO_V2<b>)</b>. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="InfSectionWithExt">
      <para>A pointer to a buffer that receives a string that contains the decorated INF <i>Models</i> section name and a NULL terminator. If <i>AlternatePlatformInfo</i> is not supplied, the decorated INF <i>Models</i> section name applies to the current platform; otherwise the name applies to the specified alternative platform. This parameter is optional and can be set to <b>NULL</b>. If this parameter is <b>NULL</b>, the function returns <b>TRUE</b> and sets <i>RequiredSize</i> to the size, in characters, that is required to return the decorated <i>Models</i> section name and a terminating NULL character.</para>
    </param>
    <param name="InfSectionWithExtSize">
      <para>The size, in characters, of the <i>DecoratedModelsSection </i> buffer. If <i>DecoratedModelsSection</i> is <b>NULL</b>, this parameter must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-type variable that receives the size, in characters, of the <i>DecoratedModelsSection</i> buffer that is required to retrieve the decorated <i>Models</i> section name and a terminating NULL character. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for internal system use. This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetActualModelsSection</b> returns <b>TRUE</b> if the operation succeeds. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetActualModelsSection</b> determines which <i>TargetOSVersion</i> fields in the <i>manufacturer-identifier</i> entry (supplied by <i>Context</i>) apply to the current platform, if <i>AlternatePlatformInfo</i> is not supplied, or to an alternative platform, if alternative platform information is supplied. <b>SetupDiGetActualModelsSection</b> selects the most appropriate platform based on all the <i>TargetOSVersion</i> fields, appends the <i>TargetOSVersion</i> string to the INF <i>Models</i> section name, and returns the decorated INF <i>Models</i> section name to the caller. In a <i>manufacturer-identifier</i> entry, the operating system major version is specified by the <i>OSMajorVersion</i> field and the operating system minor version is specified by the <i>OSMinorVersion</i> field.</para>
      <para>For information about retrieving an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> for a device, see <see cref="SetupDiGetActualSectionToInstall" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetActualModelsSection as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall Section</seealso>
    <seealso cref="SP_ALTPLATFORM_INFO" />
    <seealso cref="SetupDiGetActualSectionToInstall" />
  </member>
  <member name="Windows.SetupDiGetActualSectionToInstall - SetupDiGetActualSectionToInstallA">
    <summary>
      <para>The <b>SetupDiGetActualSectionToInstall</b> function retrieves the appropriate <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> to use when installing a device from a device INF file on a local computer.</para>
    </summary>
    <param name="InfHandle">
      <para>The handle to the INF file that contains the <i>DDInstall</i> section.</para>
    </param>
    <param name="InfSectionName">
      <para>A pointer to the <i>DDInstall</i> section name (as specified in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-models-section">INF Models section</a>). The maximum length of the section name, in characters, is 254.</para>
    </param>
    <param name="InfSectionWithExt">
      <para>A pointer to a character buffer to receive the <i>DDInstall</i> section name, its platform extension, and a NULL terminator. This is the decorated section name that should be used for installation. If this parameter is <b>NULL</b>, <i>InfSectionWithExtSize</i> must be zero. If this parameter is <b>NULL</b>, the function returns <b>TRUE</b> and sets <i>RequiredSize</i> to the size, in characters, that is required to return the <i>DDInstall</i> section name, its platform extension, and a terminating NULL character.</para>
    </param>
    <param name="InfSectionWithExtSize">
      <para>The size, in characters, of the <i>InfSectionWithExt</i> buffer. If <i>InfSectionWithExt</i> is <b>NULL</b>, this parameter must be zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to the variable that receives the size, in characters, that is required to return the <i>DDInstall</i> section name, the platform extension, and a terminating NULL character.</para>
    </param>
    <param name="Extension">
      <para>A pointer to a variable that receives a pointer to the '.' character that marks the start of the extension in the <i>InfSectionWithExt</i> buffer. If the <i>InfSectionWithExt</i> buffer is not supplied or is too small, this parameter is not set. Set this parameter to <b>NULL</b> if a pointer to the extension is not required.</para>
    </param>
    <returns>
      <para>If the function is successful, it returns <b>TRUE</b>. If the function fails, it returns <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function supports the extensions to <i>DDInstall</i> section names that are used to specify OS-specific and architecture-specific installation behaviors for a device. For information about these extensions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/creating-inf-files-for-multiple-platforms-and-operating-systems">Creating INF Files for Multiple Platforms and Operating Systems</a>. <b>SetupDiGetActualSectionToInstall</b> searches for a <i>DDInstall</i> section name that matches the local computer in the manner described below.</para>
      <para>The function first searches in the specified INF file for a decorated install section name that matches the specified name and has an extension that matches the operating system and processor architecture of the local computer. If, for example, you specify a section name of <b>InstallSec</b>, the function searches for one of the following decorated names, depending on the processor architecture of the local computer:</para>
      <list type="bullet">
        <item>
          <description>
            <para>For a computer that is based on the x86 processor architecture, the function searches for the decorated name <b>InstallSec.ntx86</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>For a computer that is based on the x64 processor architecture, the function searches for the decorated name <b>InstallSec.ntamd64</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>For a computer that is based on the Itanium processor architecture, the function searches for the decorated name <b>InstallSec.ntia64</b>.</para>
          </description>
        </item>
      </list>
      <para>If the function finds a match for the name, operating system, and processor architecture, it terminates the search and returns the corresponding decorated name. If the function does not find such a match, the function searches for a section whose name is <b>InstallSec.NT</b>. If the function finds a match for <b>InstallSec.NT</b>, it terminates the search and returns this name. If the function does not find a match for either of the above searches, it returns <b>InstallSec</b>, but does not verify that the INF file contains an install section whose name is <b>InstallSec</b>.</para>
      <para>The <i>DDInstall</i> section name is used as the base for <b>Hardware</b> and <b>Services</b> section names. For example, if the <i>DDInstall</i> section name that is found is <b>InstallSec.NTX86</b>, the <b>Services</b> section name must be named <b>InstallSec.NTX86.Services</b>.</para>
      <para>The original <i>DDInstall</i> section name that is specified in the driver node is written to the driver's registry key's <b>InfSection</b> value entry. The extension that was found is stored in the key as the REG_SZ value <b>InfSectionExt</b>. For example:</para>
      <code>InfSection       : REG_SZ :    "InstallSec"
InfSectionExt    : REG_SZ :    ".NTX86"
</code>
      <para>If a driver is not selected for the specified device information element, a null driver is installed. Upon return, the flags in the device's <see cref="SP_DEVINSTALL_PARAMS" /> structure indicate whether the system should be restarted or rebooted to cause the device to start.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetActualSectionToInstall as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall Section</seealso>
    <seealso cref="SetupDiGetActualSectionToInstallEx" />
    <seealso cref="SetupDiInstallDevice" />
  </member>
  <member name="Windows.SetupDiGetActualSectionToInstall - SetupDiGetActualSectionToInstallW">
    <summary>
      <para>The <b>SetupDiGetActualSectionToInstall</b> function retrieves the appropriate <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> to use when installing a device from a device INF file on a local computer.</para>
    </summary>
    <param name="InfHandle">
      <para>The handle to the INF file that contains the <i>DDInstall</i> section.</para>
    </param>
    <param name="InfSectionName">
      <para>A pointer to the <i>DDInstall</i> section name (as specified in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-models-section">INF Models section</a>). The maximum length of the section name, in characters, is 254.</para>
    </param>
    <param name="InfSectionWithExt">
      <para>A pointer to a character buffer to receive the <i>DDInstall</i> section name, its platform extension, and a NULL terminator. This is the decorated section name that should be used for installation. If this parameter is <b>NULL</b>, <i>InfSectionWithExtSize</i> must be zero. If this parameter is <b>NULL</b>, the function returns <b>TRUE</b> and sets <i>RequiredSize</i> to the size, in characters, that is required to return the <i>DDInstall</i> section name, its platform extension, and a terminating NULL character.</para>
    </param>
    <param name="InfSectionWithExtSize">
      <para>The size, in characters, of the <i>InfSectionWithExt</i> buffer. If <i>InfSectionWithExt</i> is <b>NULL</b>, this parameter must be zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to the variable that receives the size, in characters, that is required to return the <i>DDInstall</i> section name, the platform extension, and a terminating NULL character.</para>
    </param>
    <param name="Extension">
      <para>A pointer to a variable that receives a pointer to the '.' character that marks the start of the extension in the <i>InfSectionWithExt</i> buffer. If the <i>InfSectionWithExt</i> buffer is not supplied or is too small, this parameter is not set. Set this parameter to <b>NULL</b> if a pointer to the extension is not required.</para>
    </param>
    <returns>
      <para>If the function is successful, it returns <b>TRUE</b>. If the function fails, it returns <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function supports the extensions to <i>DDInstall</i> section names that are used to specify OS-specific and architecture-specific installation behaviors for a device. For information about these extensions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/creating-inf-files-for-multiple-platforms-and-operating-systems">Creating INF Files for Multiple Platforms and Operating Systems</a>. <b>SetupDiGetActualSectionToInstall</b> searches for a <i>DDInstall</i> section name that matches the local computer in the manner described below.</para>
      <para>The function first searches in the specified INF file for a decorated install section name that matches the specified name and has an extension that matches the operating system and processor architecture of the local computer. If, for example, you specify a section name of <b>InstallSec</b>, the function searches for one of the following decorated names, depending on the processor architecture of the local computer:</para>
      <list type="bullet">
        <item>
          <description>
            <para>For a computer that is based on the x86 processor architecture, the function searches for the decorated name <b>InstallSec.ntx86</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>For a computer that is based on the x64 processor architecture, the function searches for the decorated name <b>InstallSec.ntamd64</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>For a computer that is based on the Itanium processor architecture, the function searches for the decorated name <b>InstallSec.ntia64</b>.</para>
          </description>
        </item>
      </list>
      <para>If the function finds a match for the name, operating system, and processor architecture, it terminates the search and returns the corresponding decorated name. If the function does not find such a match, the function searches for a section whose name is <b>InstallSec.NT</b>. If the function finds a match for <b>InstallSec.NT</b>, it terminates the search and returns this name. If the function does not find a match for either of the above searches, it returns <b>InstallSec</b>, but does not verify that the INF file contains an install section whose name is <b>InstallSec</b>.</para>
      <para>The <i>DDInstall</i> section name is used as the base for <b>Hardware</b> and <b>Services</b> section names. For example, if the <i>DDInstall</i> section name that is found is <b>InstallSec.NTX86</b>, the <b>Services</b> section name must be named <b>InstallSec.NTX86.Services</b>.</para>
      <para>The original <i>DDInstall</i> section name that is specified in the driver node is written to the driver's registry key's <b>InfSection</b> value entry. The extension that was found is stored in the key as the REG_SZ value <b>InfSectionExt</b>. For example:</para>
      <code>InfSection       : REG_SZ :    "InstallSec"
InfSectionExt    : REG_SZ :    ".NTX86"
</code>
      <para>If a driver is not selected for the specified device information element, a null driver is installed. Upon return, the flags in the device's <see cref="SP_DEVINSTALL_PARAMS" /> structure indicate whether the system should be restarted or rebooted to cause the device to start.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetActualSectionToInstall as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall Section</seealso>
    <seealso cref="SetupDiGetActualSectionToInstallEx" />
    <seealso cref="SetupDiInstallDevice" />
  </member>
  <member name="Windows.SetupDiGetClassBitmapIndex">
    <summary>
      <para>The <b>SetupDiGetClassBitmapIndex</b> function retrieves the index of the mini-icon supplied for the specified class.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> for which to retrieve the mini-icon. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MiniIconIndex">
      <para>A pointer to a variable of type INT that receives the index of the mini-icon for the specified device setup class. If the <i>ClassGuid</i> parameter is <b>NULL</b> or if there is no mini-icon for the specified class, <b>SetupDiGetClassBitmapIndex</b> returns the index of the mini-icon for the Unknown device setup class.</para>
    </param>
    <returns>
      <para>If there is a min-icon for the specified device setup class, <b>SetupDiGetClassBitmapIndex</b> returns <b>TRUE</b>. Otherwise, this function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If the <i>ClassGuid</i> parameter is <b>NULL</b>, or if there is no mini-icon for the specified class, the function returns <b>FALSE</b> and <see cref="GetLastError" /> returns ERROR_NO_DEVICE_ICON.</para>
    </returns>
    <remarks>
      <para>For a list of the device setup class mini-icons and their corresponding indexes, see <see cref="SetupDiDrawMiniIcon" />.</para>
    </remarks>
    <seealso cref="SetupDiDrawMiniIcon" />
    <seealso cref="SetupDiLoadClassIcon" />
  </member>
  <member name="Windows.SetupDiGetClassDescription">
    <summary>
      <para>The <b>SetupDiGetClassDescription</b> function retrieves the class description associated with the specified setup class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>The GUID of the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the <i>ClassDescription</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to variable of type DWORD that receives the size, in characters, that is required to store the class description (including a NULL terminator). <i>RequiredSize</i> is always less than LINE_LEN. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiGetClassDescriptionEx</b> to retrieve the description of a setup class installed on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescription as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDescriptionA">
    <summary>
      <para>The <b>SetupDiGetClassDescription</b> function retrieves the class description associated with the specified setup class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>The GUID of the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the <i>ClassDescription</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to variable of type DWORD that receives the size, in characters, that is required to store the class description (including a NULL terminator). <i>RequiredSize</i> is always less than LINE_LEN. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiGetClassDescriptionEx</b> to retrieve the description of a setup class installed on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescription as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDescriptionEx">
    <summary>
      <para>The <b>SetupDiGetClassDescriptionEx</b> function retrieves the description of a setup class installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassDescription</i> parameter. The maximum length, in characters, of a NULL-terminated class description is LINE_LEN. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, that is required to store the requested NULL-terminated class description. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that supplies the name of a remote computer on which the setup class resides. This pointer is optional and can be <b>NULL</b>. If the class is installed on a local computer, set the pointer to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for system use. A caller of this function must set this parameter to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If there is a friendly name in the registry key for the class, this routine returns the friendly name. Otherwise, this routine returns the class name.</para>
      <para>
        <b>SetupDiGetClassDescriptionEx</b> does not enforce a restriction on the length of the class description that it can return. This function returns the required size for a NULL-terminated class description even if it is greater than LINE_LEN. However, LINE_LEN is the maximum length of a valid NULL-terminated class description. A caller should never need a buffer that is larger than LINE_LEN.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescriptionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiBuildClassInfoListEx" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDescriptionExA">
    <summary>
      <para>The <b>SetupDiGetClassDescriptionEx</b> function retrieves the description of a setup class installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassDescription</i> parameter. The maximum length, in characters, of a NULL-terminated class description is LINE_LEN. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, that is required to store the requested NULL-terminated class description. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that supplies the name of a remote computer on which the setup class resides. This pointer is optional and can be <b>NULL</b>. If the class is installed on a local computer, set the pointer to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for system use. A caller of this function must set this parameter to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If there is a friendly name in the registry key for the class, this routine returns the friendly name. Otherwise, this routine returns the class name.</para>
      <para>
        <b>SetupDiGetClassDescriptionEx</b> does not enforce a restriction on the length of the class description that it can return. This function returns the required size for a NULL-terminated class description even if it is greater than LINE_LEN. However, LINE_LEN is the maximum length of a valid NULL-terminated class description. A caller should never need a buffer that is larger than LINE_LEN.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescriptionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiBuildClassInfoListEx" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDescriptionEx">
    <summary>
      <para>The <b>SetupDiGetClassDescriptionEx</b> function retrieves the description of a setup class installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassDescription</i> parameter. The maximum length, in characters, of a NULL-terminated class description is LINE_LEN. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, that is required to store the requested NULL-terminated class description. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that supplies the name of a remote computer on which the setup class resides. This pointer is optional and can be <b>NULL</b>. If the class is installed on a local computer, set the pointer to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for system use. A caller of this function must set this parameter to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If there is a friendly name in the registry key for the class, this routine returns the friendly name. Otherwise, this routine returns the class name.</para>
      <para>
        <b>SetupDiGetClassDescriptionEx</b> does not enforce a restriction on the length of the class description that it can return. This function returns the required size for a NULL-terminated class description even if it is greater than LINE_LEN. However, LINE_LEN is the maximum length of a valid NULL-terminated class description. A caller should never need a buffer that is larger than LINE_LEN.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescriptionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiBuildClassInfoListEx" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDescriptionExW">
    <summary>
      <para>The <b>SetupDiGetClassDescriptionEx</b> function retrieves the description of a setup class installed on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassDescription</i> parameter. The maximum length, in characters, of a NULL-terminated class description is LINE_LEN. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, that is required to store the requested NULL-terminated class description. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that supplies the name of a remote computer on which the setup class resides. This pointer is optional and can be <b>NULL</b>. If the class is installed on a local computer, set the pointer to <b>NULL</b>.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for system use. A caller of this function must set this parameter to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If there is a friendly name in the registry key for the class, this routine returns the friendly name. Otherwise, this routine returns the class name.</para>
      <para>
        <b>SetupDiGetClassDescriptionEx</b> does not enforce a restriction on the length of the class description that it can return. This function returns the required size for a NULL-terminated class description even if it is greater than LINE_LEN. However, LINE_LEN is the maximum length of a valid NULL-terminated class description. A caller should never need a buffer that is larger than LINE_LEN.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescriptionEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiBuildClassInfoListEx" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDescription">
    <summary>
      <para>The <b>SetupDiGetClassDescription</b> function retrieves the class description associated with the specified setup class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>The GUID of the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the <i>ClassDescription</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to variable of type DWORD that receives the size, in characters, that is required to store the class description (including a NULL terminator). <i>RequiredSize</i> is always less than LINE_LEN. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiGetClassDescriptionEx</b> to retrieve the description of a setup class installed on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescription as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDescriptionW">
    <summary>
      <para>The <b>SetupDiGetClassDescription</b> function retrieves the class description associated with the specified setup class GUID.</para>
    </summary>
    <param name="ClassGuid">
      <para>The GUID of the setup class whose description is to be retrieved.</para>
    </param>
    <param name="ClassDescription">
      <para>A pointer to a character buffer that receives the class description.</para>
    </param>
    <param name="ClassDescriptionSize">
      <para>The size, in characters, of the <i>ClassDescription</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to variable of type DWORD that receives the size, in characters, that is required to store the class description (including a NULL terminator). <i>RequiredSize</i> is always less than LINE_LEN. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <b>SetupDiGetClassDescriptionEx</b> to retrieve the description of a setup class installed on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDescription as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiGetClassDescriptionEx" />
    <seealso cref="SetupDiGetINFClass" />
  </member>
  <member name="Windows.SetupDiGetClassDevPropertySheets - SetupDiGetClassDevPropertySheetsA">
    <summary>
      <para>The <b>SetupDiGetClassDevPropertySheets</b> function retrieves handles to the property sheets of a device information element or of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> of a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to return property sheet handles. If <i>DeviceInfoData</i> does not specify a device information element in the device information set, the device information set must have an associated device setup class.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in DeviceInfoSet.</para>
      <para>This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetClassDevPropertySheets</b> retrieves the property sheets handles that are associated with the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetClassDevPropertySheets</b> retrieves the property sheets handles that are associated with the device setup class specified in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="PropertySheetHeader">
      <para>A pointer to a PROPERTYSHEETHEADER structure. See the <b>Remarks</b> section for information about the caller-supplied array of property sheet handles that is associated with this structure.</para>
      <para>For more documentation on this structure and property sheets in general, see the Microsoft Windows SDK.</para>
    </param>
    <param name="PropertySheetHeaderPageListSize">
      <para>The maximum number of handles that the caller-supplied array of property sheet handles can hold.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of property sheets that are associated with the specified device information element or the device setup class of the specified device information set. The pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertySheetType">
      <para>A flag that indicates one of the following types of property sheets.</para>
      <list type="table">
        <listheader>
          <description>Property sheet type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>DIGCDP_FLAG_ADVANCED</para>
          </description>
          <description>
            <para>Advanced property sheets.</para>
          </description>
        </item>
        <item>
          <description>
            <para>DIGCDP_FLAG_BASIC</para>
          </description>
          <description>
            <para>Basic property sheets. Supported only in Microsoft Windows 95 and Windows 98. Do not use in Windows 2000 and later versions of Windows.</para>
          </description>
        </item>
        <item>
          <description>
            <para>DIGCDP_FLAG_REMOTE_ADVANCED</para>
          </description>
          <description>
            <para>Advanced property sheets on a remote computer.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if successful. Otherwise, the function returns <b>FALSE</b>. Call <see cref="GetLastError" /> to obtain the error code.</para>
    </returns>
    <remarks>
      <para>A PROPERTYSHEETHEADER structure contains two members that are associated with a caller-supplied array that the function uses to return the handles of property sheets. The <b>phpages</b> member is a pointer to a caller-supplied array of property sheet handles, and the input value of the <b>nPages</b> member specifies the number of handles that are already contained in the handle array. The function adds property sheet handles to the handle array beginning with the array element whose array index is the input value of <b>nPages</b>. The function adds handles to the array in consecutive order until either the array is full or the handles of all the requested property sheet pages have been added to the array. The maximum number of property sheet handles that the function can return is equal to (<i>PropertySheetHeaderPageListSize</i> - (input value of <b>nPages</b>)).</para>
      <para>If the handle array is large enough to hold the handles of all the requested property sheet pages, the function:</para>
      <list type="bullet">
        <item>
          <description>
            <para>Adds the handles to the handle array.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <b>nPages</b> to the total number of handles in the array.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <i>RequiredSize</i> to the number of handles that it returns.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Returns <b>TRUE</b>.</para>
          </description>
        </item>
      </list>
      <para>If the handle array is not large enough to hold the handles of all the specified property sheet pages, the function:</para>
      <list type="bullet">
        <item>
          <description>
            <para>Adds as many handles as the array can hold.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <b>nPages</b> to <i>PropertySheetHeaderPageListSize</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <i>RequiredSize</i> to the total number of requested property sheet pages. The number of handles that are not returned by the function is equal to (<i>RequiredSize</i> - <i>PropertySheetHeaderPageListSize</i> - (input value of <b>nPages</b>)).</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets the error code to ERROR_INSUFFICIENT_BUFFER.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Returns <b>FALSE</b>.</para>
          </description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevPropertySheets as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
  </member>
  <member name="Windows.SetupDiGetClassDevPropertySheets - SetupDiGetClassDevPropertySheetsW">
    <summary>
      <para>The <b>SetupDiGetClassDevPropertySheets</b> function retrieves handles to the property sheets of a device information element or of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> of a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to return property sheet handles. If <i>DeviceInfoData</i> does not specify a device information element in the device information set, the device information set must have an associated device setup class.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in DeviceInfoSet.</para>
      <para>This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetClassDevPropertySheets</b> retrieves the property sheets handles that are associated with the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetClassDevPropertySheets</b> retrieves the property sheets handles that are associated with the device setup class specified in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="PropertySheetHeader">
      <para>A pointer to a PROPERTYSHEETHEADER structure. See the <b>Remarks</b> section for information about the caller-supplied array of property sheet handles that is associated with this structure.</para>
      <para>For more documentation on this structure and property sheets in general, see the Microsoft Windows SDK.</para>
    </param>
    <param name="PropertySheetHeaderPageListSize">
      <para>The maximum number of handles that the caller-supplied array of property sheet handles can hold.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of property sheets that are associated with the specified device information element or the device setup class of the specified device information set. The pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertySheetType">
      <para>A flag that indicates one of the following types of property sheets.</para>
      <list type="table">
        <listheader>
          <description>Property sheet type</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>DIGCDP_FLAG_ADVANCED</para>
          </description>
          <description>
            <para>Advanced property sheets.</para>
          </description>
        </item>
        <item>
          <description>
            <para>DIGCDP_FLAG_BASIC</para>
          </description>
          <description>
            <para>Basic property sheets. Supported only in Microsoft Windows 95 and Windows 98. Do not use in Windows 2000 and later versions of Windows.</para>
          </description>
        </item>
        <item>
          <description>
            <para>DIGCDP_FLAG_REMOTE_ADVANCED</para>
          </description>
          <description>
            <para>Advanced property sheets on a remote computer.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if successful. Otherwise, the function returns <b>FALSE</b>. Call <see cref="GetLastError" /> to obtain the error code.</para>
    </returns>
    <remarks>
      <para>A PROPERTYSHEETHEADER structure contains two members that are associated with a caller-supplied array that the function uses to return the handles of property sheets. The <b>phpages</b> member is a pointer to a caller-supplied array of property sheet handles, and the input value of the <b>nPages</b> member specifies the number of handles that are already contained in the handle array. The function adds property sheet handles to the handle array beginning with the array element whose array index is the input value of <b>nPages</b>. The function adds handles to the array in consecutive order until either the array is full or the handles of all the requested property sheet pages have been added to the array. The maximum number of property sheet handles that the function can return is equal to (<i>PropertySheetHeaderPageListSize</i> - (input value of <b>nPages</b>)).</para>
      <para>If the handle array is large enough to hold the handles of all the requested property sheet pages, the function:</para>
      <list type="bullet">
        <item>
          <description>
            <para>Adds the handles to the handle array.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <b>nPages</b> to the total number of handles in the array.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <i>RequiredSize</i> to the number of handles that it returns.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Returns <b>TRUE</b>.</para>
          </description>
        </item>
      </list>
      <para>If the handle array is not large enough to hold the handles of all the specified property sheet pages, the function:</para>
      <list type="bullet">
        <item>
          <description>
            <para>Adds as many handles as the array can hold.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <b>nPages</b> to <i>PropertySheetHeaderPageListSize</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets <i>RequiredSize</i> to the total number of requested property sheet pages. The number of handles that are not returned by the function is equal to (<i>RequiredSize</i> - <i>PropertySheetHeaderPageListSize</i> - (input value of <b>nPages</b>)).</para>
          </description>
        </item>
        <item>
          <description>
            <para>Sets the error code to ERROR_INSUFFICIENT_BUFFER.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Returns <b>FALSE</b>.</para>
          </description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevPropertySheets as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
  </member>
  <member name="Windows.SetupDiGetClassDevs">
    <summary>
      <para>The <b>SetupDiGetClassDevs</b> function returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains requested device information elements for a local computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>. This pointer is optional and can be <b>NULL</b>. For more information about how to set <i>ClassGuid</i>, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="Enumerator">
      <para>A pointer to a NULL-terminated string that specifies:</para>
      <list type="bullet">
        <item>
          <description>
            <para>An identifier (ID) of a Plug and Play (PnP) <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>. This ID can either be the value's globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP value. Other examples of symbolic names for PnP values include "USB," "PCMCIA," and "SCSI".</para>
          </description>
        </item>
        <item>
          <description>
            <para>A PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set in the Flags parameter.</para>
          </description>
        </item>
      </list>
      <para>This pointer is optional and can be <b>NULL</b>. If an <i>enumeration</i> value is not used to select devices, set <i>Enumerator</i> to <b>NULL</b></para>
      <para>For more information about how to set the <i>Enumerator</i> value, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to be used for a user interface that is associated with installing a device instance in the device information set. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>A variable of type DWORD that specifies control options that filter the device information elements that are added to the device information set. This parameter can be a bitwise OR of zero or more of the following flags. For more information about combining these flags, see the following <b>Remarks</b> section.</para>
      <h4>DIGCF_ALLCLASSES</h4>
      <para>Return a list of installed devices for all device setup classes or all device interface classes.</para>
      <h4>DIGCF_DEVICEINTERFACE</h4>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h4>DIGCF_DEFAULT</h4>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h4>DIGCF_PRESENT</h4>
      <para>Return only devices that are currently present in a system.</para>
      <h4>DIGCF_PROFILE</h4>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetClassDevs</b> returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains all installed devices that matched the supplied parameters. If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiGetClassDevs</b> must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>Call <see cref="SetupDiGetClassDevsEx" /> to retrieve the devices for a class on a remote computer.</para>
      <h3>Device Setup Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices for all device setup classes or only for a specified device setup class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices for all device setup classes, set the DIGCF_ALLCLASSES flag, and set the <i>ClassGuid</i> parameter to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific device setup class, do not set DIGCF_ALLCLASSES, and use <i>ClassGuid</i> to supply the GUID of the device setup class.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options in combination with one another to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>, use the <i>Enumerator</i> parameter to supply the GUID or symbolic name of the enumerator<i>. </i>If <i>Enumerator</i> is <b>NULL</b>, <b>SetupDiGetClassDevs</b> returns devices for all PnP enumerators.</para>
          </description>
        </item>
      </list>
      <h3>Device Interface Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices that support any device interface class or only devices that support a specified device interface class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices that support a device interface of any class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds to the device information element a device interface list that contains all the device interfaces that the device supports.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that support a device interface of a specified class, set the DIGCF_DEVICEINTERFACE flag and use the <i>ClassGuid</i> parameter to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds a device interface of the specified class to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns only devices that support the system default interface for device interface classes:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only the device that supports the system default interface, if one is set, for a specified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_DEFAULT flag, and use <i>ClassGuid</i> to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return a device that supports a system default interface for an unspecified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, set the DIGCF_DEFAULT flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>You can also use the following options in combination with the other options to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only a specific device, set the DIGCF_DEVICEINTERFACE flag and use the <i>Enumerator</i> parameter to supply the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> of the device<i>. </i>To include all possible devices, set <i>Enumerator</i> to <b>NULL</b>.</para>
          </description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>The following are some examples of how to use the <b>SetupDiGetClassDevs</b> function.</para>
      <para>
        <b>Example 1: </b>Build a list of all devices in the system, including devices that are not currently present.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES);
</code>
      <para>
        <b>Example 2: </b> Build a list of all devices that are present in the system.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES | DIGCF_PRESENT);
</code>
      <para>
        <b>Example 3: </b> Build a list of all devices that are present in the system that are from the network adapter <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVCLASS_NET, NULL, NULL, DIGCF_PRESENT);
</code>
      <para>
        <b>Example 4: </b> Build a list of all devices that are present in the system that have enabled an interface from the storage volume <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVINTERFACE_VOLUME, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
</code>
      <para>
        <b>Example 5: </b> Build a list of all devices that are present in the system but do not belong to any known <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a> (Windows Vista and later versions of Windows).</para>
      <para>
        <b>Note</b>  You cannot set the <i>ClassGuid</i> parameter to GUID_DEVCLASS_UNKNOWN to detect devices with an unknown setup class. Instead, you must follow this example.</para>
      <code>DeviceInfoSet = SetupDiGetClassDevs(
                                    NULL,
                                    NULL,
                                    NULL,
                                    DIGCF_ALLCLASSES | DIGCF_PRESENT);

ZeroMemory(&amp;amp;amp;amp;amp;amp;DeviceInfoData, sizeof(SP_DEVINFO_DATA));
DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
DeviceIndex = 0;

while (SetupDiEnumDeviceInfo(
                             DeviceInfoSet,
                             DeviceIndex,
                             &amp;amp;amp;amp;amp;amp;DeviceInfoData)) {
    DeviceIndex++;

    if (!SetupDiGetDeviceProperty(
                                  DeviceInfoSet,
                                  &amp;amp;amp;amp;amp;amp;DeviceInfoData,
                                  &amp;amp;amp;amp;amp;amp;DEVPKEY_Device_Class,
                                  &amp;amp;amp;amp;amp;amp;PropType,
                                  (PBYTE)&amp;amp;amp;amp;amp;amp;DevGuid,
                                  sizeof(GUID),
                                  &amp;amp;amp;amp;amp;amp;Size,
                                  0) || PropType != DEVPROP_TYPE_GUID) {

        Error = GetLastError();

        if (Error == ERROR_NOT_FOUND) {
            \\
            \\ This device has an unknown device setup class.
            \\
            }
        }
    }

if (DeviceInfoSet) {
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
    }
</code>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevs as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">Device Information Set</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">Device Instance IDs</seealso>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevsEx" />
  </member>
  <member name="Windows.SetupDiGetClassDevsA">
    <summary>
      <para>The <b>SetupDiGetClassDevs</b> function returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains requested device information elements for a local computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>. This pointer is optional and can be <b>NULL</b>. For more information about how to set <i>ClassGuid</i>, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="Enumerator">
      <para>A pointer to a NULL-terminated string that specifies:</para>
      <list type="bullet">
        <item>
          <description>
            <para>An identifier (ID) of a Plug and Play (PnP) <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>. This ID can either be the value's globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP value. Other examples of symbolic names for PnP values include "USB," "PCMCIA," and "SCSI".</para>
          </description>
        </item>
        <item>
          <description>
            <para>A PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set in the Flags parameter.</para>
          </description>
        </item>
      </list>
      <para>This pointer is optional and can be <b>NULL</b>. If an <i>enumeration</i> value is not used to select devices, set <i>Enumerator</i> to <b>NULL</b></para>
      <para>For more information about how to set the <i>Enumerator</i> value, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to be used for a user interface that is associated with installing a device instance in the device information set. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>A variable of type DWORD that specifies control options that filter the device information elements that are added to the device information set. This parameter can be a bitwise OR of zero or more of the following flags. For more information about combining these flags, see the following <b>Remarks</b> section.</para>
      <h4>DIGCF_ALLCLASSES</h4>
      <para>Return a list of installed devices for all device setup classes or all device interface classes.</para>
      <h4>DIGCF_DEVICEINTERFACE</h4>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h4>DIGCF_DEFAULT</h4>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h4>DIGCF_PRESENT</h4>
      <para>Return only devices that are currently present in a system.</para>
      <h4>DIGCF_PROFILE</h4>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetClassDevs</b> returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains all installed devices that matched the supplied parameters. If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiGetClassDevs</b> must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>Call <see cref="SetupDiGetClassDevsEx" /> to retrieve the devices for a class on a remote computer.</para>
      <h3>Device Setup Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices for all device setup classes or only for a specified device setup class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices for all device setup classes, set the DIGCF_ALLCLASSES flag, and set the <i>ClassGuid</i> parameter to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific device setup class, do not set DIGCF_ALLCLASSES, and use <i>ClassGuid</i> to supply the GUID of the device setup class.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options in combination with one another to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>, use the <i>Enumerator</i> parameter to supply the GUID or symbolic name of the enumerator<i>. </i>If <i>Enumerator</i> is <b>NULL</b>, <b>SetupDiGetClassDevs</b> returns devices for all PnP enumerators.</para>
          </description>
        </item>
      </list>
      <h3>Device Interface Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices that support any device interface class or only devices that support a specified device interface class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices that support a device interface of any class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds to the device information element a device interface list that contains all the device interfaces that the device supports.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that support a device interface of a specified class, set the DIGCF_DEVICEINTERFACE flag and use the <i>ClassGuid</i> parameter to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds a device interface of the specified class to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns only devices that support the system default interface for device interface classes:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only the device that supports the system default interface, if one is set, for a specified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_DEFAULT flag, and use <i>ClassGuid</i> to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return a device that supports a system default interface for an unspecified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, set the DIGCF_DEFAULT flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>You can also use the following options in combination with the other options to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only a specific device, set the DIGCF_DEVICEINTERFACE flag and use the <i>Enumerator</i> parameter to supply the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> of the device<i>. </i>To include all possible devices, set <i>Enumerator</i> to <b>NULL</b>.</para>
          </description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>The following are some examples of how to use the <b>SetupDiGetClassDevs</b> function.</para>
      <para>
        <b>Example 1: </b>Build a list of all devices in the system, including devices that are not currently present.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES);
</code>
      <para>
        <b>Example 2: </b> Build a list of all devices that are present in the system.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES | DIGCF_PRESENT);
</code>
      <para>
        <b>Example 3: </b> Build a list of all devices that are present in the system that are from the network adapter <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVCLASS_NET, NULL, NULL, DIGCF_PRESENT);
</code>
      <para>
        <b>Example 4: </b> Build a list of all devices that are present in the system that have enabled an interface from the storage volume <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVINTERFACE_VOLUME, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
</code>
      <para>
        <b>Example 5: </b> Build a list of all devices that are present in the system but do not belong to any known <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a> (Windows Vista and later versions of Windows).</para>
      <para>
        <b>Note</b>  You cannot set the <i>ClassGuid</i> parameter to GUID_DEVCLASS_UNKNOWN to detect devices with an unknown setup class. Instead, you must follow this example.</para>
      <code>DeviceInfoSet = SetupDiGetClassDevs(
                                    NULL,
                                    NULL,
                                    NULL,
                                    DIGCF_ALLCLASSES | DIGCF_PRESENT);

ZeroMemory(&amp;amp;amp;amp;amp;amp;DeviceInfoData, sizeof(SP_DEVINFO_DATA));
DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
DeviceIndex = 0;

while (SetupDiEnumDeviceInfo(
                             DeviceInfoSet,
                             DeviceIndex,
                             &amp;amp;amp;amp;amp;amp;DeviceInfoData)) {
    DeviceIndex++;

    if (!SetupDiGetDeviceProperty(
                                  DeviceInfoSet,
                                  &amp;amp;amp;amp;amp;amp;DeviceInfoData,
                                  &amp;amp;amp;amp;amp;amp;DEVPKEY_Device_Class,
                                  &amp;amp;amp;amp;amp;amp;PropType,
                                  (PBYTE)&amp;amp;amp;amp;amp;amp;DevGuid,
                                  sizeof(GUID),
                                  &amp;amp;amp;amp;amp;amp;Size,
                                  0) || PropType != DEVPROP_TYPE_GUID) {

        Error = GetLastError();

        if (Error == ERROR_NOT_FOUND) {
            \\
            \\ This device has an unknown device setup class.
            \\
            }
        }
    }

if (DeviceInfoSet) {
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
    }
</code>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevs as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">Device Information Set</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">Device Instance IDs</seealso>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevsEx" />
  </member>
  <member name="Windows.SetupDiGetClassDevsEx - SetupDiGetClassDevsExA">
    <summary>
      <para>The <b>SetupDiGetClassDevsEx</b> function returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains requested device information elements for a local or a remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>. This pointer is optional and can be <b>NULL</b>. If a GUID value is not used to select devices, set <i>ClassGuid</i> to <b>NULL</b>. For more information about how to use <i>ClassGuid</i>, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="Enumerator">
      <para>A pointer to a NULL-terminated string that specifies:</para>
      <list type="bullet">
        <item>
          <description>
            <para>An identifier (ID) of a Plug and Play (PnP) <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>. This ID can either be the enumerator's globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP enumerator. Other examples of symbolic names for PnP enumerators include "USB", "PCMCIA", and "SCSI".</para>
          </description>
        </item>
        <item>
          <description>
            <para>A PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance IDs</a>. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set in the Flags parameter.</para>
          </description>
        </item>
      </list>
      <para>This pointer is optional and can be <b>NULL</b>. If an <i>Enumerator</i> value is not used to select devices, set <i>Enumerator</i> to <b>NULL</b></para>
      <para>For more information about how to set the <i>Enumerator</i> value, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to be used for a user interface that is associated with installing a device instance in the device information set. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>A variable of type DWORD that specifies control options that filter the device information elements that are added to the device information set. This parameter can be a bitwise OR of one or more of the following flags. For more information about combining these control options, see the following <b>Remarks</b> section.</para>
      <h4>DIGCF_ALLCLASSES</h4>
      <para>Return a list of installed devices for the specified device setup classes or device interface classes.</para>
      <h4>DIGCF_DEVICEINTERFACE</h4>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h4>DIGCF_DEFAULT</h4>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h4>DIGCF_PRESENT</h4>
      <para>Return only devices that are currently present.</para>
      <h4>DIGCF_PROFILE</h4>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <param name="DeviceInfoSet">
      <para>The handle to an existing <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to which <b>SetupDiGetClassDevsEx</b> adds the requested device information elements. This parameter is optional and can be set to <b>NULL</b>. For more information about using this parameter, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a constant string that contains the name of a remote computer on which the devices reside. A value of <b>NULL</b> for <i>MachineName</i> specifies that the device is installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for internal use. This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetClassDevsEx</b> returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains all installed devices that matched the supplied parameters. If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiGetClassDevsEx</b> must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>If <i>DeviceInfoSet</i> is <b>NULL</b>, <b>SetupDiGetClassDevsEx</b> creates a new device information set that contains the retrieved device information elements and returns a handle to the new device information set. If the caller requests that the function retrieve devices for a device setup class that is supplied by the <i>ClassGuid </i> parameter, the function sets the device setup class of the new device information set to the supplied class GUID.</para>
      <para>If <i>DeviceInfoSet</i> is not set to <b>NULL</b>, the function adds the retrieved device information elements to the device information set that is associated with the supplied handle, and returns the supplied handle. If <i>ClassGuid</i> supplies a device setup class, the device setup class of the supplied device information set must be set to the supplied class GUID.</para>
      <h3>Device Setup Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns devices for all device setup classes or only for a specified device setup class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices for all device setup classes, set the DIGCF_ALLCLASSES flag and set the <i>ClassGuid</i> parameter to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific device setup class, do not set DIGCF_ALLCLASSES and use <i>ClassGuid</i> to supply the GUID of the device setup class.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to further restrict which devices are returned.</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices for a specific PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a> only, use the <i>Enumerator</i> parameter to supply the GUID or symbolic name of the enumerator<i>. </i>If <i>Enumerator</i> is <b>NULL</b>, <b>SetupDiGetClassDevsEx</b> returns devices for all PnP enumerators.</para>
          </description>
        </item>
      </list>
      <h3>Device Interface Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns devices that support any device interface class or only devices that support a specified device interface class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices that support a device interface of any class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device, and then adds to the device information element a device interface list that contains all the device interfaces that the device supports.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that support a device interface of a specified class, set the DIGCF_DEVICEINTERFACE flag and use the <i>ClassGuid</i> parameter to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device, and then adds a device interface of the specified class to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns only devices that support the system default interface for device interface classes:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only the device that supports the system default interface, if one is set, for a specified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_DEFAULT flag, and use <i>ClassGuid</i> to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device, and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return a device that supports a system default interface for an unspecified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, set the DIGCF_DEFAULT flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device, and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>You can also use the following options in combination with the other options to further restrict which devices are returned.</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only a specific device, set the DIGCF_DEVICEINTERFACE flag and use the <i>Enumerator</i> parameter to supply the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> of the device<i>. </i>To include all possible devices, set <i>Enumerator</i> to <b>NULL</b>.</para>
          </description>
        </item>
      </list>
      <h3>Retrieving Devices in a Device Setup Class That Support a Device Interface Class</h3>
      <para>An installer can use <b>SetupDiGetClassDevsEx</b> to retrieve a list of devices of a particular device setup class that support a device interface of a specified device interface class. For example, to retrieve a list of all devices on a local computer that support a device interface in the "mounted device" interface class and that are members of the "Volume" device setup class, an installer should perform the following operations:</para>
      <list type="number">
        <item>
          <description>
            <para>Call <see cref="SetupDiCreateDeviceInfoList" /> to create an empty device information set for the "Volume" device setup class. Set <i>ClassGuid</i> to a pointer to the class GUID for the "Volume" device setup class and set <i>hwndParent</i> as appropriate. In response to such a call, the function will return a handle to type HDEVINFO to the device information set.</para>
          </description>
        </item>
        <item>
          <description>Call <b>SetupDiGetClassDevsEx</b> with the following settings:<list type="bullet"><item><description>Set <i>ClassGuid</i> to a pointer to the class GUID of the "mounted device" device interface class.</description></item><item><description>Set <i>Flags</i> to DIGCF_DEVICEINTERFACE.</description></item><item><description>Set <i>DeviceInfoSet</i> to the HDEVINFO handle obtained in step (1).</description></item><item><description>Set <i>hwndParent</i> as appropriate and the remaining parameters to <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
      <para>In an operation of this type, <b>SetupDiGetClassDevsEx</b> returns a device if the device setup class of the device is the same as the supplied device information set and if the device supports a device interface whose class is the same as the specified device interface class.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">Device Information Set</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">Device Instance IDs</seealso>
    <seealso cref="SetupDiCreateDeviceInfoListEx" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiGetClassDevsEx">
    <summary>
      <para>The <b>SetupDiGetClassDevsEx</b> function returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains requested device information elements for a local or a remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>. This pointer is optional and can be <b>NULL</b>. If a GUID value is not used to select devices, set <i>ClassGuid</i> to <b>NULL</b>. For more information about how to use <i>ClassGuid</i>, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="Enumerator">
      <para>A pointer to a NULL-terminated string that specifies:</para>
      <list type="bullet">
        <item>
          <description>
            <para>An identifier (ID) of a Plug and Play (PnP) <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>. This ID can either be the enumerator's globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP enumerator. Other examples of symbolic names for PnP enumerators include "USB", "PCMCIA", and "SCSI".</para>
          </description>
        </item>
        <item>
          <description>
            <para>A PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance IDs</a>. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set in the Flags parameter.</para>
          </description>
        </item>
      </list>
      <para>This pointer is optional and can be <b>NULL</b>. If an <i>Enumerator</i> value is not used to select devices, set <i>Enumerator</i> to <b>NULL</b></para>
      <para>For more information about how to set the <i>Enumerator</i> value, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to be used for a user interface that is associated with installing a device instance in the device information set. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>A variable of type DWORD that specifies control options that filter the device information elements that are added to the device information set. This parameter can be a bitwise OR of one or more of the following flags. For more information about combining these control options, see the following <b>Remarks</b> section.</para>
      <h4>DIGCF_ALLCLASSES</h4>
      <para>Return a list of installed devices for the specified device setup classes or device interface classes.</para>
      <h4>DIGCF_DEVICEINTERFACE</h4>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h4>DIGCF_DEFAULT</h4>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h4>DIGCF_PRESENT</h4>
      <para>Return only devices that are currently present.</para>
      <h4>DIGCF_PROFILE</h4>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <param name="DeviceInfoSet">
      <para>The handle to an existing <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to which <b>SetupDiGetClassDevsEx</b> adds the requested device information elements. This parameter is optional and can be set to <b>NULL</b>. For more information about using this parameter, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a constant string that contains the name of a remote computer on which the devices reside. A value of <b>NULL</b> for <i>MachineName</i> specifies that the device is installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for internal use. This parameter must be set to <b>NULL</b>.</para>
      <h5>- Flags.DIGCF_ALLCLASSES</h5>
      <para>Return a list of installed devices for the specified device setup classes or device interface classes.</para>
      <h5>- Flags.DIGCF_DEFAULT</h5>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h5>- Flags.DIGCF_DEVICEINTERFACE</h5>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h5>- Flags.DIGCF_PRESENT</h5>
      <para>Return only devices that are currently present.</para>
      <h5>- Flags.DIGCF_PROFILE</h5>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetClassDevsEx</b> returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains all installed devices that matched the supplied parameters. If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiGetClassDevsEx</b> must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>If <i>DeviceInfoSet</i> is <b>NULL</b>, <b>SetupDiGetClassDevsEx</b> creates a new device information set that contains the retrieved device information elements and returns a handle to the new device information set. If the caller requests that the function retrieve devices for a device setup class that is supplied by the <i>ClassGuid </i> parameter, the function sets the device setup class of the new device information set to the supplied class GUID.</para>
      <para>If <i>DeviceInfoSet</i> is not set to <b>NULL</b>, the function adds the retrieved device information elements to the device information set that is associated with the supplied handle, and returns the supplied handle. If <i>ClassGuid</i> supplies a device setup class, the device setup class of the supplied device information set must be set to the supplied class GUID.</para>
      <h3>Device Setup Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns devices for all device setup classes or only for a specified device setup class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices for all device setup classes, set the DIGCF_ALLCLASSES flag and set the <i>ClassGuid</i> parameter to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific device setup class, do not set DIGCF_ALLCLASSES and use <i>ClassGuid</i> to supply the GUID of the device setup class.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to further restrict which devices are returned.</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices for a specific PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a> only, use the <i>Enumerator</i> parameter to supply the GUID or symbolic name of the enumerator<i>. </i>If <i>Enumerator</i> is <b>NULL</b>, <b>SetupDiGetClassDevsEx</b> returns devices for all PnP enumerators.</para>
          </description>
        </item>
      </list>
      <h3>Device Interface Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns devices that support any device interface class or only devices that support a specified device interface class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices that support a device interface of any class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device, and then adds to the device information element a device interface list that contains all the device interfaces that the device supports.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that support a device interface of a specified class, set the DIGCF_DEVICEINTERFACE flag and use the <i>ClassGuid</i> parameter to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device, and then adds a device interface of the specified class to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns only devices that support the system default interface for device interface classes:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only the device that supports the system default interface, if one is set, for a specified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_DEFAULT flag, and use <i>ClassGuid</i> to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device, and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return a device that supports a system default interface for an unspecified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, set the DIGCF_DEFAULT flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device, and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>You can also use the following options in combination with the other options to further restrict which devices are returned.</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only a specific device, set the DIGCF_DEVICEINTERFACE flag and use the <i>Enumerator</i> parameter to supply the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> of the device<i>. </i>To include all possible devices, set <i>Enumerator</i> to <b>NULL</b>.</para>
          </description>
        </item>
      </list>
      <h3>Retrieving Devices in a Device Setup Class That Support a Device Interface Class</h3>
      <para>An installer can use <b>SetupDiGetClassDevsEx</b> to retrieve a list of devices of a particular device setup class that support a device interface of a specified device interface class. For example, to retrieve a list of all devices on a local computer that support a device interface in the "mounted device" interface class and that are members of the "Volume" device setup class, an installer should perform the following operations:</para>
      <list type="number">
        <item>
          <description>
            <para>Call <see cref="SetupDiCreateDeviceInfoList" /> to create an empty device information set for the "Volume" device setup class. Set <i>ClassGuid</i> to a pointer to the class GUID for the "Volume" device setup class and set <i>hwndParent</i> as appropriate. In response to such a call, the function will return a handle to type HDEVINFO to the device information set.</para>
          </description>
        </item>
        <item>
          <description>Call <b>SetupDiGetClassDevsEx</b> with the following settings:<list type="bullet"><item><description>Set <i>ClassGuid</i> to a pointer to the class GUID of the "mounted device" device interface class.</description></item><item><description>Set <i>Flags</i> to DIGCF_DEVICEINTERFACE.</description></item><item><description>Set <i>DeviceInfoSet</i> to the HDEVINFO handle obtained in step (1).</description></item><item><description>Set <i>hwndParent</i> as appropriate and the remaining parameters to <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
      <para>In an operation of this type, <b>SetupDiGetClassDevsEx</b> returns a device if the device setup class of the device is the same as the supplied device information set and if the device supports a device interface whose class is the same as the specified device interface class.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">Device Information Set</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">Device Instance IDs</seealso>
    <seealso cref="SetupDiCreateDeviceInfoListEx" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiGetClassDevsExW">
    <summary>
      <para>The <b>SetupDiGetClassDevsEx</b> function returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains requested device information elements for a local or a remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>. This pointer is optional and can be <b>NULL</b>. If a GUID value is not used to select devices, set <i>ClassGuid</i> to <b>NULL</b>. For more information about how to use <i>ClassGuid</i>, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="Enumerator">
      <para>A pointer to a NULL-terminated string that specifies:</para>
      <list type="bullet">
        <item>
          <description>
            <para>An identifier (ID) of a Plug and Play (PnP) <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>. This ID can either be the enumerator's globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP enumerator. Other examples of symbolic names for PnP enumerators include "USB", "PCMCIA", and "SCSI".</para>
          </description>
        </item>
        <item>
          <description>
            <para>A PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance IDs</a>. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set in the Flags parameter.</para>
          </description>
        </item>
      </list>
      <para>This pointer is optional and can be <b>NULL</b>. If an <i>Enumerator</i> value is not used to select devices, set <i>Enumerator</i> to <b>NULL</b></para>
      <para>For more information about how to set the <i>Enumerator</i> value, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to be used for a user interface that is associated with installing a device instance in the device information set. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>A variable of type DWORD that specifies control options that filter the device information elements that are added to the device information set. This parameter can be a bitwise OR of one or more of the following flags. For more information about combining these control options, see the following <b>Remarks</b> section.</para>
      <h4>DIGCF_ALLCLASSES</h4>
      <para>Return a list of installed devices for the specified device setup classes or device interface classes.</para>
      <h4>DIGCF_DEVICEINTERFACE</h4>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h4>DIGCF_DEFAULT</h4>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h4>DIGCF_PRESENT</h4>
      <para>Return only devices that are currently present.</para>
      <h4>DIGCF_PROFILE</h4>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <param name="DeviceInfoSet">
      <para>The handle to an existing <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to which <b>SetupDiGetClassDevsEx</b> adds the requested device information elements. This parameter is optional and can be set to <b>NULL</b>. For more information about using this parameter, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a constant string that contains the name of a remote computer on which the devices reside. A value of <b>NULL</b> for <i>MachineName</i> specifies that the device is installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for internal use. This parameter must be set to <b>NULL</b>.</para>
      <h5>- Flags.DIGCF_ALLCLASSES</h5>
      <para>Return a list of installed devices for the specified device setup classes or device interface classes.</para>
      <h5>- Flags.DIGCF_DEFAULT</h5>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h5>- Flags.DIGCF_DEVICEINTERFACE</h5>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h5>- Flags.DIGCF_PRESENT</h5>
      <para>Return only devices that are currently present.</para>
      <h5>- Flags.DIGCF_PROFILE</h5>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetClassDevsEx</b> returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains all installed devices that matched the supplied parameters. If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiGetClassDevsEx</b> must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>If <i>DeviceInfoSet</i> is <b>NULL</b>, <b>SetupDiGetClassDevsEx</b> creates a new device information set that contains the retrieved device information elements and returns a handle to the new device information set. If the caller requests that the function retrieve devices for a device setup class that is supplied by the <i>ClassGuid </i> parameter, the function sets the device setup class of the new device information set to the supplied class GUID.</para>
      <para>If <i>DeviceInfoSet</i> is not set to <b>NULL</b>, the function adds the retrieved device information elements to the device information set that is associated with the supplied handle, and returns the supplied handle. If <i>ClassGuid</i> supplies a device setup class, the device setup class of the supplied device information set must be set to the supplied class GUID.</para>
      <h3>Device Setup Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns devices for all device setup classes or only for a specified device setup class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices for all device setup classes, set the DIGCF_ALLCLASSES flag and set the <i>ClassGuid</i> parameter to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific device setup class, do not set DIGCF_ALLCLASSES and use <i>ClassGuid</i> to supply the GUID of the device setup class.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to further restrict which devices are returned.</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices for a specific PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a> only, use the <i>Enumerator</i> parameter to supply the GUID or symbolic name of the enumerator<i>. </i>If <i>Enumerator</i> is <b>NULL</b>, <b>SetupDiGetClassDevsEx</b> returns devices for all PnP enumerators.</para>
          </description>
        </item>
      </list>
      <h3>Device Interface Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns devices that support any device interface class or only devices that support a specified device interface class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices that support a device interface of any class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device, and then adds to the device information element a device interface list that contains all the device interfaces that the device supports.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that support a device interface of a specified class, set the DIGCF_DEVICEINTERFACE flag and use the <i>ClassGuid</i> parameter to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device, and then adds a device interface of the specified class to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to control whether <b>SetupDiGetClassDevsEx</b> returns only devices that support the system default interface for device interface classes:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only the device that supports the system default interface, if one is set, for a specified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_DEFAULT flag, and use <i>ClassGuid</i> to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device, and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return a device that supports a system default interface for an unspecified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, set the DIGCF_DEFAULT flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device, and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>You can also use the following options in combination with the other options to further restrict which devices are returned.</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only a specific device, set the DIGCF_DEVICEINTERFACE flag and use the <i>Enumerator</i> parameter to supply the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> of the device<i>. </i>To include all possible devices, set <i>Enumerator</i> to <b>NULL</b>.</para>
          </description>
        </item>
      </list>
      <h3>Retrieving Devices in a Device Setup Class That Support a Device Interface Class</h3>
      <para>An installer can use <b>SetupDiGetClassDevsEx</b> to retrieve a list of devices of a particular device setup class that support a device interface of a specified device interface class. For example, to retrieve a list of all devices on a local computer that support a device interface in the "mounted device" interface class and that are members of the "Volume" device setup class, an installer should perform the following operations:</para>
      <list type="number">
        <item>
          <description>
            <para>Call <see cref="SetupDiCreateDeviceInfoList" /> to create an empty device information set for the "Volume" device setup class. Set <i>ClassGuid</i> to a pointer to the class GUID for the "Volume" device setup class and set <i>hwndParent</i> as appropriate. In response to such a call, the function will return a handle to type HDEVINFO to the device information set.</para>
          </description>
        </item>
        <item>
          <description>Call <b>SetupDiGetClassDevsEx</b> with the following settings:<list type="bullet"><item><description>Set <i>ClassGuid</i> to a pointer to the class GUID of the "mounted device" device interface class.</description></item><item><description>Set <i>Flags</i> to DIGCF_DEVICEINTERFACE.</description></item><item><description>Set <i>DeviceInfoSet</i> to the HDEVINFO handle obtained in step (1).</description></item><item><description>Set <i>hwndParent</i> as appropriate and the remaining parameters to <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
      <para>In an operation of this type, <b>SetupDiGetClassDevsEx</b> returns a device if the device setup class of the device is the same as the supplied device information set and if the device supports a device interface whose class is the same as the specified device interface class.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">Device Information Set</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">Device Instance IDs</seealso>
    <seealso cref="SetupDiCreateDeviceInfoListEx" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiGetClassDevs">
    <summary>
      <para>The <b>SetupDiGetClassDevs</b> function returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains requested device information elements for a local computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>. This pointer is optional and can be <b>NULL</b>. For more information about how to set <i>ClassGuid</i>, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="Enumerator">
      <para>A pointer to a NULL-terminated string that specifies:</para>
      <list type="bullet">
        <item>
          <description>
            <para>An identifier (ID) of a Plug and Play (PnP) <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>. This ID can either be the value's globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP value. Other examples of symbolic names for PnP values include "USB," "PCMCIA," and "SCSI".</para>
          </description>
        </item>
        <item>
          <description>
            <para>A PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set in the Flags parameter.</para>
          </description>
        </item>
      </list>
      <para>This pointer is optional and can be <b>NULL</b>. If an <i>enumeration</i> value is not used to select devices, set <i>Enumerator</i> to <b>NULL</b></para>
      <para>For more information about how to set the <i>Enumerator</i> value, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to be used for a user interface that is associated with installing a device instance in the device information set. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>A variable of type DWORD that specifies control options that filter the device information elements that are added to the device information set. This parameter can be a bitwise OR of zero or more of the following flags. For more information about combining these flags, see the following <b>Remarks</b> section.</para>
      <h4>DIGCF_ALLCLASSES</h4>
      <para>Return a list of installed devices for all device setup classes or all device interface classes.</para>
      <h4>DIGCF_DEVICEINTERFACE</h4>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h4>DIGCF_DEFAULT</h4>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h4>DIGCF_PRESENT</h4>
      <para>Return only devices that are currently present in a system.</para>
      <h4>DIGCF_PROFILE</h4>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetClassDevs</b> returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains all installed devices that matched the supplied parameters. If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiGetClassDevs</b> must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>Call <see cref="SetupDiGetClassDevsEx" /> to retrieve the devices for a class on a remote computer.</para>
      <h3>Device Setup Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices for all device setup classes or only for a specified device setup class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices for all device setup classes, set the DIGCF_ALLCLASSES flag, and set the <i>ClassGuid</i> parameter to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific device setup class, do not set DIGCF_ALLCLASSES, and use <i>ClassGuid</i> to supply the GUID of the device setup class.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options in combination with one another to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>, use the <i>Enumerator</i> parameter to supply the GUID or symbolic name of the enumerator<i>. </i>If <i>Enumerator</i> is <b>NULL</b>, <b>SetupDiGetClassDevs</b> returns devices for all PnP enumerators.</para>
          </description>
        </item>
      </list>
      <h3>Device Interface Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices that support any device interface class or only devices that support a specified device interface class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices that support a device interface of any class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds to the device information element a device interface list that contains all the device interfaces that the device supports.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that support a device interface of a specified class, set the DIGCF_DEVICEINTERFACE flag and use the <i>ClassGuid</i> parameter to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds a device interface of the specified class to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns only devices that support the system default interface for device interface classes:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only the device that supports the system default interface, if one is set, for a specified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_DEFAULT flag, and use <i>ClassGuid</i> to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return a device that supports a system default interface for an unspecified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, set the DIGCF_DEFAULT flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>You can also use the following options in combination with the other options to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only a specific device, set the DIGCF_DEVICEINTERFACE flag and use the <i>Enumerator</i> parameter to supply the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> of the device<i>. </i>To include all possible devices, set <i>Enumerator</i> to <b>NULL</b>.</para>
          </description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>The following are some examples of how to use the <b>SetupDiGetClassDevs</b> function.</para>
      <para>
        <b>Example 1: </b>Build a list of all devices in the system, including devices that are not currently present.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES);
</code>
      <para>
        <b>Example 2: </b> Build a list of all devices that are present in the system.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES | DIGCF_PRESENT);
</code>
      <para>
        <b>Example 3: </b> Build a list of all devices that are present in the system that are from the network adapter <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVCLASS_NET, NULL, NULL, DIGCF_PRESENT);
</code>
      <para>
        <b>Example 4: </b> Build a list of all devices that are present in the system that have enabled an interface from the storage volume <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVINTERFACE_VOLUME, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
</code>
      <para>
        <b>Example 5: </b> Build a list of all devices that are present in the system but do not belong to any known <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a> (Windows Vista and later versions of Windows).</para>
      <para>
        <b>Note</b>  You cannot set the <i>ClassGuid</i> parameter to GUID_DEVCLASS_UNKNOWN to detect devices with an unknown setup class. Instead, you must follow this example.</para>
      <code>DeviceInfoSet = SetupDiGetClassDevs(
                                    NULL,
                                    NULL,
                                    NULL,
                                    DIGCF_ALLCLASSES | DIGCF_PRESENT);

ZeroMemory(&amp;amp;amp;amp;amp;amp;DeviceInfoData, sizeof(SP_DEVINFO_DATA));
DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
DeviceIndex = 0;

while (SetupDiEnumDeviceInfo(
                             DeviceInfoSet,
                             DeviceIndex,
                             &amp;amp;amp;amp;amp;amp;DeviceInfoData)) {
    DeviceIndex++;

    if (!SetupDiGetDeviceProperty(
                                  DeviceInfoSet,
                                  &amp;amp;amp;amp;amp;amp;DeviceInfoData,
                                  &amp;amp;amp;amp;amp;amp;DEVPKEY_Device_Class,
                                  &amp;amp;amp;amp;amp;amp;PropType,
                                  (PBYTE)&amp;amp;amp;amp;amp;amp;DevGuid,
                                  sizeof(GUID),
                                  &amp;amp;amp;amp;amp;amp;Size,
                                  0) || PropType != DEVPROP_TYPE_GUID) {

        Error = GetLastError();

        if (Error == ERROR_NOT_FOUND) {
            \\
            \\ This device has an unknown device setup class.
            \\
            }
        }
    }

if (DeviceInfoSet) {
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
    }
</code>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevs as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">Device Information Set</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">Device Instance IDs</seealso>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevsEx" />
  </member>
  <member name="Windows.SetupDiGetClassDevsW">
    <summary>
      <para>The <b>SetupDiGetClassDevs</b> function returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains requested device information elements for a local computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>. This pointer is optional and can be <b>NULL</b>. For more information about how to set <i>ClassGuid</i>, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="Enumerator">
      <para>A pointer to a NULL-terminated string that specifies:</para>
      <list type="bullet">
        <item>
          <description>
            <para>An identifier (ID) of a Plug and Play (PnP) <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>. This ID can either be the value's globally unique identifier (GUID) or symbolic name. For example, "PCI" can be used to specify the PCI PnP value. Other examples of symbolic names for PnP values include "USB," "PCMCIA," and "SCSI".</para>
          </description>
        </item>
        <item>
          <description>
            <para>A PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>. When specifying a PnP device instance ID, DIGCF_DEVICEINTERFACE must be set in the Flags parameter.</para>
          </description>
        </item>
      </list>
      <para>This pointer is optional and can be <b>NULL</b>. If an <i>enumeration</i> value is not used to select devices, set <i>Enumerator</i> to <b>NULL</b></para>
      <para>For more information about how to set the <i>Enumerator</i> value, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="hwndParent">
      <para>A handle to the top-level window to be used for a user interface that is associated with installing a device instance in the device information set. This handle is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>A variable of type DWORD that specifies control options that filter the device information elements that are added to the device information set. This parameter can be a bitwise OR of zero or more of the following flags. For more information about combining these flags, see the following <b>Remarks</b> section.</para>
      <h4>DIGCF_ALLCLASSES</h4>
      <para>Return a list of installed devices for all device setup classes or all device interface classes.</para>
      <h4>DIGCF_DEVICEINTERFACE</h4>
      <para>Return devices that support device interfaces for the specified device interface classes. This flag must be set in the <i>Flags</i> parameter if the <i>Enumerator</i> parameter specifies a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a>.</para>
      <h4>DIGCF_DEFAULT</h4>
      <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
      <h4>DIGCF_PRESENT</h4>
      <para>Return only devices that are currently present in a system.</para>
      <h4>DIGCF_PROFILE</h4>
      <para>Return only devices that are a part of the current hardware profile.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetClassDevs</b> returns a handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains all installed devices that matched the supplied parameters. If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiGetClassDevs</b> must delete the returned device information set when it is no longer needed by calling <see cref="SetupDiDestroyDeviceInfoList" />.</para>
      <para>Call <see cref="SetupDiGetClassDevsEx" /> to retrieve the devices for a class on a remote computer.</para>
      <h3>Device Setup Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices for all device setup classes or only for a specified device setup class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices for all device setup classes, set the DIGCF_ALLCLASSES flag, and set the <i>ClassGuid</i> parameter to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific device setup class, do not set DIGCF_ALLCLASSES, and use <i>ClassGuid</i> to supply the GUID of the device setup class.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options in combination with one another to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return devices only for a specific PnP <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>, use the <i>Enumerator</i> parameter to supply the GUID or symbolic name of the enumerator<i>. </i>If <i>Enumerator</i> is <b>NULL</b>, <b>SetupDiGetClassDevs</b> returns devices for all PnP enumerators.</para>
          </description>
        </item>
      </list>
      <h3>Device Interface Class Control Options</h3>
      <para>Use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns devices that support any device interface class or only devices that support a specified device interface class:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return devices that support a device interface of any class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds to the device information element a device interface list that contains all the device interfaces that the device supports.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that support a device interface of a specified class, set the DIGCF_DEVICEINTERFACE flag and use the <i>ClassGuid</i> parameter to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds a device interface of the specified class to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>In addition, you can use the following filtering options to control whether <b>SetupDiGetClassDevs</b> returns only devices that support the system default interface for device interface classes:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only the device that supports the system default interface, if one is set, for a specified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_DEFAULT flag, and use <i>ClassGuid</i> to supply the class GUID of the device interface class. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return a device that supports a system default interface for an unspecified device interface class, set the DIGCF_DEVICEINTERFACE flag, set the DIGCF_ALLCLASSES flag, set the DIGCF_DEFAULT flag, and set <i>ClassGuid</i> to <b>NULL</b>. The function adds to the device information set a device information element that represents such a device and then adds the system default interface to the device interface list for that device information element.</para>
          </description>
        </item>
      </list>
      <para>You can also use the following options in combination with the other options to further restrict which devices are returned:</para>
      <list type="bullet">
        <item>
          <description>
            <para>To return only devices that are present in the system, set the DIGCF_PRESENT flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only devices that are part of the current hardware profile, set the DIGCF_PROFILE flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>To return only a specific device, set the DIGCF_DEVICEINTERFACE flag and use the <i>Enumerator</i> parameter to supply the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> of the device<i>. </i>To include all possible devices, set <i>Enumerator</i> to <b>NULL</b>.</para>
          </description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>The following are some examples of how to use the <b>SetupDiGetClassDevs</b> function.</para>
      <para>
        <b>Example 1: </b>Build a list of all devices in the system, including devices that are not currently present.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES);
</code>
      <para>
        <b>Example 2: </b> Build a list of all devices that are present in the system.</para>
      <code>Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES | DIGCF_PRESENT);
</code>
      <para>
        <b>Example 3: </b> Build a list of all devices that are present in the system that are from the network adapter <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVCLASS_NET, NULL, NULL, DIGCF_PRESENT);
</code>
      <para>
        <b>Example 4: </b> Build a list of all devices that are present in the system that have enabled an interface from the storage volume <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
      <code>Handle = SetupDiGetClassDevs(&amp;amp;amp;amp;amp;amp;GUID_DEVINTERFACE_VOLUME, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
</code>
      <para>
        <b>Example 5: </b> Build a list of all devices that are present in the system but do not belong to any known <a href="https://docs.microsoft.com//windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">device setup class</a> (Windows Vista and later versions of Windows).</para>
      <para>
        <b>Note</b>  You cannot set the <i>ClassGuid</i> parameter to GUID_DEVCLASS_UNKNOWN to detect devices with an unknown setup class. Instead, you must follow this example.</para>
      <code>DeviceInfoSet = SetupDiGetClassDevs(
                                    NULL,
                                    NULL,
                                    NULL,
                                    DIGCF_ALLCLASSES | DIGCF_PRESENT);

ZeroMemory(&amp;amp;amp;amp;amp;amp;DeviceInfoData, sizeof(SP_DEVINFO_DATA));
DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
DeviceIndex = 0;

while (SetupDiEnumDeviceInfo(
                             DeviceInfoSet,
                             DeviceIndex,
                             &amp;amp;amp;amp;amp;amp;DeviceInfoData)) {
    DeviceIndex++;

    if (!SetupDiGetDeviceProperty(
                                  DeviceInfoSet,
                                  &amp;amp;amp;amp;amp;amp;DeviceInfoData,
                                  &amp;amp;amp;amp;amp;amp;DEVPKEY_Device_Class,
                                  &amp;amp;amp;amp;amp;amp;PropType,
                                  (PBYTE)&amp;amp;amp;amp;amp;amp;DevGuid,
                                  sizeof(GUID),
                                  &amp;amp;amp;amp;amp;amp;Size,
                                  0) || PropType != DEVPROP_TYPE_GUID) {

        Error = GetLastError();

        if (Error == ERROR_NOT_FOUND) {
            \\
            \\ This device has an unknown device setup class.
            \\
            }
        }
    }

if (DeviceInfoSet) {
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
    }
</code>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassDevs as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">Device Information Set</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">Device Instance IDs</seealso>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiDestroyDeviceInfoList" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevsEx" />
  </member>
  <member name="Windows.SetupDiGetClassImageIndex">
    <summary>
      <para>The <b>SetupDiGetClassImageIndex</b> function retrieves the index within the class image list of a specified class.</para>
    </summary>
    <param name="ClassImageListData">
      <para>A pointer to an <see cref="SP_CLASSIMAGELIST_DATA" /> structure that describes a class image list that includes the image for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> that is specified by the <i>ClassGuid</i> parameter.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the device setup class for which to retrieve the index of the class image in the specified class image list.</para>
    </param>
    <param name="ImageIndex">
      <para>A pointer to an INT-typed variable that receives the index of the specified class image in the class image list.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the specified device setup class is not included in the specified class image list, <b>SetupDiGetClassImageIndex</b> returns the image index for the Unknown device setup class in the <i>ImageIndex</i> parameter.</para>
    </remarks>
    <seealso cref="SetupDiGetClassImageList" />
    <seealso cref="SetupDiGetClassImageListEx" />
  </member>
  <member name="Windows.SetupDiGetClassImageList">
    <summary>
      <para>The <b>SetupDiGetClassImageList</b> function builds an image list that contains bitmaps for every installed class and returns the list in a data structure.</para>
    </summary>
    <param name="ClassImageListData">
      <para>A pointer to an <see cref="SP_CLASSIMAGELIST_DATA" /> structure to receive information regarding the class image list, including a handle to the image list. The <b>cbSize</b> field of this structure must be initialized with the size of the structure, in bytes, before calling this function or it will fail.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The image list built by this function should be destroyed by calling <see cref="SetupDiDestroyClassImageList" />.</para>
      <para>Call <see cref="SetupDiGetClassImageListEx" /> to retrieve the image list for classes installed on a remote computer.</para>
    </remarks>
    <seealso cref="SetupDiDestroyClassImageList" />
    <seealso cref="SetupDiGetClassImageListEx" />
  </member>
  <member name="Windows.SetupDiGetClassImageListEx - SetupDiGetClassImageListExA">
    <summary>
      <para>The <b>SetupDiGetClassImageListEx</b> function builds an image list of bitmaps for every class installed on a local or remote system.</para>
    </summary>
    <param name="ClassImageListData">
      <para>A pointer to an <see cref="SP_CLASSIMAGELIST_DATA" /> structure to receive information regarding the class image list, including a handle to the image list. The <b>cbSize</b> field of this structure must be initialized with the size of the structure, in bytes, before calling this function or it will fail.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to NULL-terminated string that supplies the name of a remote system for whose classes <b>SetupDiGetClassImageListEx must build</b> the bitmap. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, <b>SetupDiGetClassImageListEx</b> builds the list for the local system.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The image list built by this function should be destroyed by calling <see cref="SetupDiDestroyClassImageList" />.</para>
      <para>
        <b>Note</b>    Class-specific icons on a remote computer can only be displayed if the class is also present on the local computer. Thus, if the remote computer has class <i>X</i>, but class <i>X</i> is not installed locally, then the generic (unknown) icon will be returned.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassImageListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiDestroyClassImageList" />
    <seealso cref="SetupDiGetClassImageList" />
  </member>
  <member name="Windows.SetupDiGetClassImageListEx - SetupDiGetClassImageListExW">
    <summary>
      <para>The <b>SetupDiGetClassImageListEx</b> function builds an image list of bitmaps for every class installed on a local or remote system.</para>
    </summary>
    <param name="ClassImageListData">
      <para>A pointer to an <see cref="SP_CLASSIMAGELIST_DATA" /> structure to receive information regarding the class image list, including a handle to the image list. The <b>cbSize</b> field of this structure must be initialized with the size of the structure, in bytes, before calling this function or it will fail.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to NULL-terminated string that supplies the name of a remote system for whose classes <b>SetupDiGetClassImageListEx must build</b> the bitmap. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, <b>SetupDiGetClassImageListEx</b> builds the list for the local system.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The image list built by this function should be destroyed by calling <see cref="SetupDiDestroyClassImageList" />.</para>
      <para>
        <b>Note</b>    Class-specific icons on a remote computer can only be displayed if the class is also present on the local computer. Thus, if the remote computer has class <i>X</i>, but class <i>X</i> is not installed locally, then the generic (unknown) icon will be returned.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassImageListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiDestroyClassImageList" />
    <seealso cref="SetupDiGetClassImageList" />
  </member>
  <member name="Windows.SetupDiGetClassInstallParams - SetupDiGetClassInstallParamsA">
    <summary>
      <para>The <b>SetupDiGetClassInstallParams</b> function retrieves class installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the class install parameters to retrieve.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specified a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetClassInstallParams</b> retrieves the class installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetClassInstallParams</b> retrieves the class install parameters for the global class driver list that is associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="ClassInstallParams">
      <para>A pointer to a buffer that contains an <see cref="SP_CLASSINSTALL_HEADER" /> structure. This structure must have its <b>cbSize</b> member set to <b>sizeof(</b>SP_CLASSINSTALL_HEADER<b>)</b> on input or the buffer is considered to be invalid. On output, the <b>InstallFunction</b> member is filled with the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">device installation function code</a> for the class installation parameters being retrieved. If the buffer is large enough, it also receives the class installation parameters structure specific to the function code. If <i>ClassInstallParams</i> is not specified, <i>ClassInstallParamsSize</i> must be 0.</para>
    </param>
    <param name="ClassInstallParamsSize">
      <para>The size, in bytes, of the <i>ClassInstallParams</i> buffer. If the buffer is supplied, it must be at least as large as <b>sizeof(</b>SP_CLASSINSTALL_HEADER<b>)</b>. If the buffer is not supplied, <i>ClassInstallParamsSize</i> must be 0<i>.</i></para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of bytes required to store the class install parameters. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The class install parameters are specific to a particular <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">device installation function code</a> that is stored in the <b>ClassInstallHeader</b> field located at the beginning of the <i>ClassInstallParams</i> buffer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiSetClassInstallParams" />
  </member>
  <member name="Windows.SetupDiGetClassInstallParams - SetupDiGetClassInstallParamsW">
    <summary>
      <para>The <b>SetupDiGetClassInstallParams</b> function retrieves class installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the class install parameters to retrieve.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specified a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetClassInstallParams</b> retrieves the class installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetClassInstallParams</b> retrieves the class install parameters for the global class driver list that is associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="ClassInstallParams">
      <para>A pointer to a buffer that contains an <see cref="SP_CLASSINSTALL_HEADER" /> structure. This structure must have its <b>cbSize</b> member set to <b>sizeof(</b>SP_CLASSINSTALL_HEADER<b>)</b> on input or the buffer is considered to be invalid. On output, the <b>InstallFunction</b> member is filled with the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">device installation function code</a> for the class installation parameters being retrieved. If the buffer is large enough, it also receives the class installation parameters structure specific to the function code. If <i>ClassInstallParams</i> is not specified, <i>ClassInstallParamsSize</i> must be 0.</para>
    </param>
    <param name="ClassInstallParamsSize">
      <para>The size, in bytes, of the <i>ClassInstallParams</i> buffer. If the buffer is supplied, it must be at least as large as <b>sizeof(</b>SP_CLASSINSTALL_HEADER<b>)</b>. If the buffer is not supplied, <i>ClassInstallParamsSize</i> must be 0<i>.</i></para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of bytes required to store the class install parameters. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The class install parameters are specific to a particular <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">device installation function code</a> that is stored in the <b>ClassInstallHeader</b> field located at the beginning of the <i>ClassInstallParams</i> buffer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiSetClassInstallParams" />
  </member>
  <member name="Windows.SetupDiGetClassPropertyEx">
    <summary>
      <para>The <b>SetupDiGetClassPropertyEx</b> function retrieves a class property for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a> on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that identifies the device setup class or device interface class for which to retrieve a device property for the device class. For information about specifying the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the requested device class property.</para>
    </param>
    <param name="PropertyType">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed variable that receives the property-data-type identifier of the requested device class property, where the property-data-type identifier is the bitwise OR between a base-data-type identifier and, if the base data type is modified, a property-data-type modifier.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the requested device class property. <b>SetupDiGetClassPropertyEx</b> retrieves the requested property value only if the buffer is large enough to hold all the property value data. The pointer can be <b>NULL</b>. If the pointer is set to <b>NULL</b> and <i>RequiredSize</i> is supplied, <b>SetupDiGetClassPropertyEx</b> returns the size of the device class property, in bytes, in *<i>RequiredSize</i>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer</i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives either the size, in bytes, of the device class property if the property is retrieved or the required buffer size if the buffer is not large enough. This pointer can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether the class is a device setup class or a device interface class:</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the UNC name, including the "\" prefix, of a computer. The pointer can be set to <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, <b>SetupDiGetClassPropertyEx</b> retrieves the requested device class property from the local computer.</para>
    </param>
    <param name="Reserved">
      <para>This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetClassPropertyEx</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device setup class that is specified by <i>ClassGuid</i> is not valid. This error can occur only if the DICLASSPROP_INSTALLER flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An unspecified parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The device interface reference string is not valid. This error can be returned if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_MACHINENAME</b>
            </para>
          </description>
          <description>
            <para>The computer name that is specified by <i>MachineName</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device interface class that is specified by <i>ClassGuid</i> does not exist. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The requested device property does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetClassPropertyEx</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiGetClassPropertyEx</b>.</para>
      <para>A caller of <b>SetupDiGetClassPropertyEx</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device class on a remote computer, call <see cref="SetupDiGetClassPropertyKeysEx" />.</para>
      <para>To retrieve a device class property on a local computer, call <see cref="SetupDiGetClassProperty" />.</para>
      <para>To set a device class property on a local computer, call <see cref="SetupDiSetClassProperty" /><b>,</b> and to set a device class property on a remote computer, call <see cref="SetupDiSetClassPropertyEx" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassProperty" />
    <seealso cref="SetupDiGetClassPropertyKeysEx" />
    <seealso cref="SetupDiSetClassProperty" />
    <seealso cref="SetupDiSetClassPropertyEx" />
  </member>
  <member name="Windows.SetupDiGetClassPropertyKeys">
    <summary>
      <para>The <b>SetupDiGetClassPropertyKeys</b> function retrieves an array of the device property keys that represent the device properties that are set for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that represents a device setup class or a device interface class. <b>SetupDiGetClassPropertyKeys</b> retrieves an array of the device property keys that represent device properties that are set for the specified class. For information about specifying the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKeyArray">
      <para>A pointer to a buffer that receives an array of <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a>-typed values, where each value is a device property key that represents a device property that is set for the device class. The pointer is optional and can be <b>NULL</b>. For more information, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyKeyCount">
      <para>The size, in DEVPROPKEY-typed values, of the <i>PropertyKeyArray</i> buffer. If <i>PropertyKeyArray</i> is set to <b>NULL</b>, <i>PropertyKeyCount</i> must be set to zero.</para>
    </param>
    <param name="RequiredPropertyKeyCount">
      <para>A pointer to a DWORD-typed variable that receives the number of requested property keys. The parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether to retrieve property keys for a device setup class or for a device interface class:</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetClassPropertyKeys</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>If the DICLASSPROP_INSTALLER flag is specified, this error code indicates that the device setup class that is specified by <i>ClassGuid</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The reference string for the device interface that is specified by <i>ClassGuild</i> is not valid. This error can be returned if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified data value is not valid. One possibility is that the <i>ClassGuid</i> value is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An unspecified parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyKeyArray</i> is <b>NULL</b>, and <i>PropertKeyCount</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>If the DICLASSPROP_INTERFACE flag is specified, this error code indicates that the device interface class that is specified by <i>ClassGuid</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The <i>PropertyKeyArray</i> buffer is not large enough to hold all the property keys, or an internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetClassPropertyKeys</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>A caller of <b>SetupDiGetClassPropertyKeys</b> must be a member of the Administrators group to retrieve device property keys for a device class.</para>
      <para>If the <i>PropertyKeyArray</i> buffer is not large enough to hold all the requested property keys, <b>SetupDiGetClassPropertyKeys</b> does not retrieve any property keys and returns ERROR_INSUFFICIENT_BUFFER. If the caller supplied a <i>RequiredPropertyKeyCount</i> pointer, <b>SetupDiGetClassPropertyKeys</b> sets the value of *<i>RequiredPropertyKeyCount</i> to the required size, in DEVPROPKEY-typed values, of the <i>PropertyKeyArray </i> buffer<i>.</i></para>
      <para>To retrieve a device class property on a local computer, call <see cref="SetupDiGetClassProperty" />. To set a device class property on a local computer, call <see cref="SetupDiSetClassProperty" />.</para>
      <para>To retrieve the property keys for a device setup class or device interface class on a remote computer, call <see cref="SetupDiGetClassPropertyKeysEx" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassProperty" />
    <seealso cref="SetupDiGetClassPropertyKeysEx" />
    <seealso cref="SetupDiSetClassProperty" />
  </member>
  <member name="Windows.SetupDiGetClassPropertyKeysEx">
    <summary>
      <para>The <b>SetupDiGetClassPropertyKeysEx</b> function retrieves an array of the device property keys that represent the device properties that are set for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a> on a local or a remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that represents a device setup class or a device interface class. <b>SetupDiGetClassPropertyKeysEx</b> retrieves an array of the device property keys that represent device properties that are set for the specified class. For information about specifying the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKeyArray">
      <para>A pointer to a buffer that receives an array of <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a>-typed values, where each value is a device property key that represents a device property that is set for the device setup class. The pointer is optional and can be <b>NULL</b>. For more information, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyKeyCount">
      <para>The size, in DEVPROPKEY-type values, of the <i>PropertyKeyArray</i> buffer. If <i>PropertyKeyArray</i> is set to <b>NULL</b>, <i>PropertyKeyCount</i> must be set to zero.</para>
    </param>
    <param name="RequiredPropertyKeyCount">
      <para>A pointer to a DWORD-typed variable that receives the number of requested property keys. The pointer is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether to retrieve class property keys for a device setup class or for a device interface class.</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the UNC name, including the "\" prefix, of a computer. The pointer can be <b>NULL</b>. If the pointer is <b>NULL</b>, <b>SetupDiGetClassPropertyKeysEx</b> retrieves the requested information from the local computer.</para>
    </param>
    <param name="Reserved">
      <para>This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetClassPropertyKeysEx</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>If the DICLASSPROP_INSTALLER flag is specified, this error code indicates that the device setup class that is specified by <i>ClassGuid</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The reference string for the device interface that is specified by <i>ClassGuild</i> is not valid. This error might be returned when the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified data value is not valid. One possibility is that the <i>ClassGuid</i> value is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An unspecified parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyKeyArray</i> is <b>NULL</b>, and <i>PropertKeyCount</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_MACHINENAME</b>
            </para>
          </description>
          <description>
            <para>The computer name that is specified by <i>MachineName</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>If the DICLASSPROP_INTERFACE flag is specified, this error code indicates that the device interface class that is specified by <i>ClassGuid</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The <i>PropertyKeyArray</i> buffer is not large enough to hold all the property keys, or an internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetClassPropertyKeysEx</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>A caller of <b>SetupDiGetClassPropertyKeysEx</b> must be a member of the Administrators group to retrieve device property keys for a device class.</para>
      <para>If the <i>PropertyKeyArray</i> buffer is not large enough to hold all the requested property keys, <b>SetupDiGetClassPropertyKeysEx</b> does not retrieve any property keys and returns ERROR_INSUFFICIENT_BUFFER. If the caller supplied a <i>RequiredPropertyKeyCount</i> pointer, <b>SetupDiGetClassPropertyKeysEx</b> sets the value of *<i>RequiredPropertyKeyCount</i> to the required size, in DEVPROPKEY-typed values, of the <i>PropertyKeyArray </i> buffer<i>.</i></para>
      <para>To retrieve a device class property on a remote computer, call <see cref="SetupDiGetClassPropertyEx" />, and to set a device class property on a remote computer, call <see cref="SetupDiSetClassPropertyEx" />.</para>
      <para>To retrieve the property keys for a device setup class or device interface class on a local computer, call <see cref="SetupDiGetClassPropertyKeys" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassPropertyEx" />
    <seealso cref="SetupDiGetClassPropertyKeys" />
    <seealso cref="SetupDiSetClassPropertyEx" />
  </member>
  <member name="Windows.SetupDiGetClassProperty">
    <summary>
      <para>The <b>SetupDiGetClassProperty</b> function retrieves a device property that is set for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that identifies the device setup class or device interface class for which to retrieve a device property that is set for the device class. For information about specifying the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the requested device class property.</para>
    </param>
    <param name="PropertyType">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed variable that receives the property-data-type identifier of the requested device class property, where the property-data-type identifier is the bitwise OR between a base-data-type identifier and, if the base data type is modified, a property-data-type modifier.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the requested device class property. <b>SetupDiGetClassProperty</b> retrieves the requested property value only if the buffer is large enough to hold all the property value data. The pointer can be <b>NULL</b>. If the pointer is set to <b>NULL</b> and <i>RequiredSize</i> is supplied, <b>SetupDiGetClassProperty</b> returns the size of the device class property, in bytes, in *<i>RequiredSize</i>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer</i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives either the size, in bytes, of the device class property if the device class property is retrieved or the required buffer size if the buffer is not large enough. This pointer can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether the class is a device setup class or a device interface class.</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetClassProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device setup class that is specified by <i>ClassGuid</i> is not valid. This error can occur only if the DICLASSPROP_INSTALLER flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An unspecified parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The device interface reference string is not valid. This error can be returned if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device interface class that is specified by <i>ClassGuid</i> does not exist. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The requested device property does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetClassProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiGetClassProperty</b>.</para>
      <para>A caller of <b>SetupDiGetClassProperty</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device class on a local computer, call <see cref="SetupDiGetClassPropertyKeys" />.</para>
      <para>To retrieve a device class property on a remote computer, call <see cref="SetupDiGetClassPropertyEx" />.</para>
      <para>To set a device class property on a local computer, call <see cref="SetupDiSetClassProperty" /><b>,</b> and to set a device class property on a remote computer, call <see cref="SetupDiSetClassPropertyEx" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassPropertyEx" />
    <seealso cref="SetupDiGetClassPropertyKeys" />
    <seealso cref="SetupDiSetClassProperty" />
    <seealso cref="SetupDiSetClassPropertyEx" />
  </member>
  <member name="Windows.SetupDiGetClassRegistryProperty - SetupDiGetClassRegistryPropertyA">
    <summary>
      <para>The <b>SetupDiGetClassRegistryProperty</b> function retrieves a property for a specified <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> from the registry.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID representing the device setup class for which a property is to be retrieved.</para>
    </param>
    <param name="Property">
      <para>A value that identifies the property to be retrieved. This must be one of the following values:</para>
      <h4>SPCRP_CHARACTERISTICS</h4>
      <para>The function returns flags indicating device characteristics for the class. For a list of characteristics flags, see the <i>DeviceCharacteristics</i> parameter to <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h4>SPCRP_DEVTYPE</h4>
      <para>The function returns a DWORD value that represents the device type for the class. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>.</para>
      <h4>SPCRP_EXCLUSIVE</h4>
      <para>The function returns a DWORD value indicating whether users can obtain exclusive access to devices for this class. The returned value is one if exclusive access is allowed, or zero otherwise.</para>
      <h4>SPCRP_LOWERFILTERS</h4>
      <para>(Windows Vista and later) The function returns a REG_MULTI_SZ list of the service names of the lower filter drivers that are installed for the device setup class.</para>
      <h4>SPCRP_SECURITY</h4>
      <para>The function returns the device's security descriptor as a SECURITY_DESCRIPTOR structure in self-relative format (described in the Microsoft Windows SDK documentation).</para>
      <h4>SPCRP_SECURITY_SDS</h4>
      <para>The function returns the device's security descriptor as a text string. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h4>SPCRP_UPPERFILTERS</h4>
      <para>(Windows Vista and later) The function returns a REG_MULTI_SZ list of the service names of the upper filter drivers that are installed for the device setup class.</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the property data type as one of the REG_-prefixed registry data types. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, <b>SetupDiGetClassRegistryProperty</b> does not return the data type.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the requested property.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the required size, in bytes, of the <i>PropertyBuffer </i> buffer. If the <i>PropertyBuffer</i> buffer is too small, and <i>RequiredSize</i> is not <b>NULL</b>, the function sets <i>RequiredSize</i> to the minimum buffer size that is required to receive the requested property.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system from which to retrieve the specified device class property. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the property is retrieved from the local system.</para>
    </param>
    <param name="Reserved">
      <para>Reserved, must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetClassRegistryProperty - SetupDiGetClassRegistryPropertyW">
    <summary>
      <para>The <b>SetupDiGetClassRegistryProperty</b> function retrieves a property for a specified <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> from the registry.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID representing the device setup class for which a property is to be retrieved.</para>
    </param>
    <param name="Property">
      <para>A value that identifies the property to be retrieved. This must be one of the following values:</para>
      <h4>SPCRP_CHARACTERISTICS</h4>
      <para>The function returns flags indicating device characteristics for the class. For a list of characteristics flags, see the <i>DeviceCharacteristics</i> parameter to <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h4>SPCRP_DEVTYPE</h4>
      <para>The function returns a DWORD value that represents the device type for the class. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>.</para>
      <h4>SPCRP_EXCLUSIVE</h4>
      <para>The function returns a DWORD value indicating whether users can obtain exclusive access to devices for this class. The returned value is one if exclusive access is allowed, or zero otherwise.</para>
      <h4>SPCRP_LOWERFILTERS</h4>
      <para>(Windows Vista and later) The function returns a REG_MULTI_SZ list of the service names of the lower filter drivers that are installed for the device setup class.</para>
      <h4>SPCRP_SECURITY</h4>
      <para>The function returns the device's security descriptor as a SECURITY_DESCRIPTOR structure in self-relative format (described in the Microsoft Windows SDK documentation).</para>
      <h4>SPCRP_SECURITY_SDS</h4>
      <para>The function returns the device's security descriptor as a text string. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h4>SPCRP_UPPERFILTERS</h4>
      <para>(Windows Vista and later) The function returns a REG_MULTI_SZ list of the service names of the upper filter drivers that are installed for the device setup class.</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the property data type as one of the REG_-prefixed registry data types. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, <b>SetupDiGetClassRegistryProperty</b> does not return the data type.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the requested property.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the required size, in bytes, of the <i>PropertyBuffer </i> buffer. If the <i>PropertyBuffer</i> buffer is too small, and <i>RequiredSize</i> is not <b>NULL</b>, the function sets <i>RequiredSize</i> to the minimum buffer size that is required to receive the requested property.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system from which to retrieve the specified device class property. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the property is retrieved from the local system.</para>
    </param>
    <param name="Reserved">
      <para>Reserved, must be <b>NULL</b>.</para>
      <h5>- Property.SPCRP_CHARACTERISTICS</h5>
      <para>The function returns flags indicating device characteristics for the class. For a list of characteristics flags, see the <i>DeviceCharacteristics</i> parameter to <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h5>- Property.SPCRP_DEVTYPE</h5>
      <para>The function returns a DWORD value that represents the device type for the class. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>.</para>
      <h5>- Property.SPCRP_EXCLUSIVE</h5>
      <para>The function returns a DWORD value indicating whether users can obtain exclusive access to devices for this class. The returned value is one if exclusive access is allowed, or zero otherwise.</para>
      <h5>- Property.SPCRP_LOWERFILTERS</h5>
      <para>(Windows Vista and later) The function returns a REG_MULTI_SZ list of the service names of the lower filter drivers that are installed for the device setup class.</para>
      <h5>- Property.SPCRP_SECURITY</h5>
      <para>The function returns the device's security descriptor as a SECURITY_DESCRIPTOR structure in self-relative format (described in the Microsoft Windows SDK documentation).</para>
      <h5>- Property.SPCRP_SECURITY_SDS</h5>
      <para>The function returns the device's security descriptor as a text string. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h5>- Property.SPCRP_UPPERFILTERS</h5>
      <para>(Windows Vista and later) The function returns a REG_MULTI_SZ list of the service names of the upper filter drivers that are installed for the device setup class.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetClassRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetCustomDeviceProperty">
    <summary>
      <para>The <b>SetupDiGetCustomDeviceProperty</b> function retrieves a specified custom device property from the registry.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a custom device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="CustomPropertyName">
      <para>A registry value name representing a custom property.</para>
    </param>
    <param name="Flags">
      <para>A flag value that indicates how the requested information should be returned. The flag can be zero or one of the following:</para>
      <h4>DICUSTOMDEVPROP_MERGE_MULTISZ</h4>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the data type of the retrieved property. The data type is specified as one of the REG_-prefixed constants that represents registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives requested property information.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the buffer size, in bytes, that is required to receive the requested information. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetCustomDeviceProperty</b> returns the required size, regardless of whether the <i>PropertyBuffer</i> buffer is large enough to receive the requested information.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetCustomDeviceProperty</b> returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If the <i>PropertyBuffer </i> buffer is not large enough to receive the requested information, <b>SetupDiGetCustomDeviceProperty</b> returns <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetCustomDeviceProperty</b> retrieves device properties that are associated with a single device instance or with all devices matching a certain hardware ID. (For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>).</para>
      <para>Vendors can set properties for a device instance by using <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-addreg-directive">INF AddReg directives</a> in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-hw-section">INF DDInstall.HW sections</a> and specifying the <b>HKR</b> registry root.</para>
      <para>Only the system can set properties for hardware IDs. The system supplies an "Icon" property for some hardware IDs.</para>
      <para>The function first checks to see if the specified property exists for the specified device instance. If so, the property's value is returned. If not, the function checks to see if the property exists for all devices matching the hardware ID of the specified device instance. If so, the property's value is returned. If DICUSTOMDEVPROP_MERGE_MULTISZ is set in <i>Flags</i>, the function returns the property values associated with both the device instance and the hardware ID, if they both exist.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetCustomDeviceProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetCustomDevicePropertyA">
    <summary>
      <para>The <b>SetupDiGetCustomDeviceProperty</b> function retrieves a specified custom device property from the registry.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a custom device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="CustomPropertyName">
      <para>A registry value name representing a custom property.</para>
    </param>
    <param name="Flags">
      <para>A flag value that indicates how the requested information should be returned. The flag can be zero or one of the following:</para>
      <h4>DICUSTOMDEVPROP_MERGE_MULTISZ</h4>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the data type of the retrieved property. The data type is specified as one of the REG_-prefixed constants that represents registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives requested property information.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the buffer size, in bytes, that is required to receive the requested information. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetCustomDeviceProperty</b> returns the required size, regardless of whether the <i>PropertyBuffer</i> buffer is large enough to receive the requested information.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetCustomDeviceProperty</b> returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If the <i>PropertyBuffer </i> buffer is not large enough to receive the requested information, <b>SetupDiGetCustomDeviceProperty</b> returns <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetCustomDeviceProperty</b> retrieves device properties that are associated with a single device instance or with all devices matching a certain hardware ID. (For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>).</para>
      <para>Vendors can set properties for a device instance by using <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-addreg-directive">INF AddReg directives</a> in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-hw-section">INF DDInstall.HW sections</a> and specifying the <b>HKR</b> registry root.</para>
      <para>Only the system can set properties for hardware IDs. The system supplies an "Icon" property for some hardware IDs.</para>
      <para>The function first checks to see if the specified property exists for the specified device instance. If so, the property's value is returned. If not, the function checks to see if the property exists for all devices matching the hardware ID of the specified device instance. If so, the property's value is returned. If DICUSTOMDEVPROP_MERGE_MULTISZ is set in <i>Flags</i>, the function returns the property values associated with both the device instance and the hardware ID, if they both exist.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetCustomDeviceProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetCustomDevicePropertyW">
    <summary>
      <para>The <b>SetupDiGetCustomDeviceProperty</b> function retrieves a specified custom device property from the registry.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a custom device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="CustomPropertyName">
      <para>A registry value name representing a custom property.</para>
    </param>
    <param name="Flags">
      <para>A flag value that indicates how the requested information should be returned. The flag can be zero or one of the following:</para>
      <h4>DICUSTOMDEVPROP_MERGE_MULTISZ</h4>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the data type of the retrieved property. The data type is specified as one of the REG_-prefixed constants that represents registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives requested property information.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the buffer size, in bytes, that is required to receive the requested information. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetCustomDeviceProperty</b> returns the required size, regardless of whether the <i>PropertyBuffer</i> buffer is large enough to receive the requested information.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetCustomDeviceProperty</b> returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If the <i>PropertyBuffer </i> buffer is not large enough to receive the requested information, <b>SetupDiGetCustomDeviceProperty</b> returns <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetCustomDeviceProperty</b> retrieves device properties that are associated with a single device instance or with all devices matching a certain hardware ID. (For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>).</para>
      <para>Vendors can set properties for a device instance by using <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-addreg-directive">INF AddReg directives</a> in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-hw-section">INF DDInstall.HW sections</a> and specifying the <b>HKR</b> registry root.</para>
      <para>Only the system can set properties for hardware IDs. The system supplies an "Icon" property for some hardware IDs.</para>
      <para>The function first checks to see if the specified property exists for the specified device instance. If so, the property's value is returned. If not, the function checks to see if the property exists for all devices matching the hardware ID of the specified device instance. If so, the property's value is returned. If DICUSTOMDEVPROP_MERGE_MULTISZ is set in <i>Flags</i>, the function returns the property values associated with both the device instance and the hardware ID, if they both exist.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetCustomDeviceProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetCustomDeviceProperty">
    <summary>
      <para>The <b>SetupDiGetCustomDeviceProperty</b> function retrieves a specified custom device property from the registry.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a custom device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="CustomPropertyName">
      <para>A registry value name representing a custom property.</para>
    </param>
    <param name="Flags">
      <para>A flag value that indicates how the requested information should be returned. The flag can be zero or one of the following:</para>
      <h4>DICUSTOMDEVPROP_MERGE_MULTISZ</h4>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the data type of the retrieved property. The data type is specified as one of the REG_-prefixed constants that represents registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives requested property information.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the buffer size, in bytes, that is required to receive the requested information. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetCustomDeviceProperty</b> returns the required size, regardless of whether the <i>PropertyBuffer</i> buffer is large enough to receive the requested information.</para>
      <h5>- Flags.DICUSTOMDEVPROP_MERGE_MULTISZ</h5>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetCustomDeviceProperty</b> returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If the <i>PropertyBuffer </i> buffer is not large enough to receive the requested information, <b>SetupDiGetCustomDeviceProperty</b> returns <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetCustomDeviceProperty</b> retrieves device properties that are associated with a single device instance or with all devices matching a certain hardware ID. (For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>).</para>
      <para>Vendors can set properties for a device instance by using <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-addreg-directive">INF AddReg directives</a> in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-hw-section">INF DDInstall.HW sections</a> and specifying the <b>HKR</b> registry root.</para>
      <para>Only the system can set properties for hardware IDs. The system supplies an "Icon" property for some hardware IDs.</para>
      <para>The function first checks to see if the specified property exists for the specified device instance. If so, the property's value is returned. If not, the function checks to see if the property exists for all devices matching the hardware ID of the specified device instance. If so, the property's value is returned. If DICUSTOMDEVPROP_MERGE_MULTISZ is set in <i>Flags</i>, the function returns the property values associated with both the device instance and the hardware ID, if they both exist.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetCustomDeviceProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetCustomDevicePropertyA">
    <summary>
      <para>The <b>SetupDiGetCustomDeviceProperty</b> function retrieves a specified custom device property from the registry.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a custom device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="CustomPropertyName">
      <para>A registry value name representing a custom property.</para>
    </param>
    <param name="Flags">
      <para>A flag value that indicates how the requested information should be returned. The flag can be zero or one of the following:</para>
      <h4>DICUSTOMDEVPROP_MERGE_MULTISZ</h4>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the data type of the retrieved property. The data type is specified as one of the REG_-prefixed constants that represents registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives requested property information.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the buffer size, in bytes, that is required to receive the requested information. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetCustomDeviceProperty</b> returns the required size, regardless of whether the <i>PropertyBuffer</i> buffer is large enough to receive the requested information.</para>
      <h5>- Flags.DICUSTOMDEVPROP_MERGE_MULTISZ</h5>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetCustomDeviceProperty</b> returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If the <i>PropertyBuffer </i> buffer is not large enough to receive the requested information, <b>SetupDiGetCustomDeviceProperty</b> returns <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetCustomDeviceProperty</b> retrieves device properties that are associated with a single device instance or with all devices matching a certain hardware ID. (For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>).</para>
      <para>Vendors can set properties for a device instance by using <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-addreg-directive">INF AddReg directives</a> in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-hw-section">INF DDInstall.HW sections</a> and specifying the <b>HKR</b> registry root.</para>
      <para>Only the system can set properties for hardware IDs. The system supplies an "Icon" property for some hardware IDs.</para>
      <para>The function first checks to see if the specified property exists for the specified device instance. If so, the property's value is returned. If not, the function checks to see if the property exists for all devices matching the hardware ID of the specified device instance. If so, the property's value is returned. If DICUSTOMDEVPROP_MERGE_MULTISZ is set in <i>Flags</i>, the function returns the property values associated with both the device instance and the hardware ID, if they both exist.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetCustomDeviceProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetCustomDevicePropertyW">
    <summary>
      <para>The <b>SetupDiGetCustomDeviceProperty</b> function retrieves a specified custom device property from the registry.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a custom device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="CustomPropertyName">
      <para>A registry value name representing a custom property.</para>
    </param>
    <param name="Flags">
      <para>A flag value that indicates how the requested information should be returned. The flag can be zero or one of the following:</para>
      <h4>DICUSTOMDEVPROP_MERGE_MULTISZ</h4>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable of type DWORD that receives the data type of the retrieved property. The data type is specified as one of the REG_-prefixed constants that represents registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives requested property information.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the buffer size, in bytes, that is required to receive the requested information. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetCustomDeviceProperty</b> returns the required size, regardless of whether the <i>PropertyBuffer</i> buffer is large enough to receive the requested information.</para>
      <h5>- Flags.DICUSTOMDEVPROP_MERGE_MULTISZ</h5>
      <para>If set, the function retrieves both device instance-specific property values and hardware ID-specific property values, concatenated as a REG_MULTI_SZ-typed string. (For more information, see the <b>Remarks</b> section on this reference page.)</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiGetCustomDeviceProperty</b> returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If the <i>PropertyBuffer </i> buffer is not large enough to receive the requested information, <b>SetupDiGetCustomDeviceProperty</b> returns <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetCustomDeviceProperty</b> retrieves device properties that are associated with a single device instance or with all devices matching a certain hardware ID. (For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>).</para>
      <para>Vendors can set properties for a device instance by using <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-addreg-directive">INF AddReg directives</a> in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-hw-section">INF DDInstall.HW sections</a> and specifying the <b>HKR</b> registry root.</para>
      <para>Only the system can set properties for hardware IDs. The system supplies an "Icon" property for some hardware IDs.</para>
      <para>The function first checks to see if the specified property exists for the specified device instance. If so, the property's value is returned. If not, the function checks to see if the property exists for all devices matching the hardware ID of the specified device instance. If so, the property's value is returned. If DICUSTOMDEVPROP_MERGE_MULTISZ is set in <i>Flags</i>, the function returns the property values associated with both the device instance and the hardware ID, if they both exist.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetCustomDeviceProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetDeviceInfoListClass">
    <summary>
      <para>The <b>SetupDiGetDeviceInfoListClass</b> function retrieves the GUID for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> associated with a device information set if the set has an associated class.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to query.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to variable of type GUID that receives the GUID for the associated class.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the specified device information set does not have an associated class because a class GUID was not specified when the set was created with <see cref="SetupDiCreateDeviceInfoList" />, the function fails. In this case, a call to <see cref="GetLastError" /> returns ERROR_NO_ASSOCIATED_CLASS.</para>
      <para>If a device information set is for a remote computer, use <see cref="SetupDiGetDeviceInfoListDetail" /> to get the associated remote computer handle and computer name.</para>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoList" />
    <seealso cref="SetupDiGetClassDevs" />
    <seealso cref="SetupDiGetDeviceInfoListDetail" />
  </member>
  <member name="Windows.SetupDiGetDeviceInfoListDetail - SetupDiGetDeviceInfoListDetailA">
    <summary>
      <para>The <b>SetupDiGetDeviceInfoListDetail</b> function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to retrieve information.</para>
    </param>
    <param name="DeviceInfoSetDetailData">
      <para>A pointer to a caller-initialized <see cref="SP_DEVINFO_LIST_DETAIL_DATA" /> structure that receives the device information set information. For more information about this structure, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the parameters are valid, <b>SetupDiGetDeviceInfoListDetail</b> sets values in the <i>DeviceInfoSetDetailData</i> structure (except for the <b>cbSize</b> field) and returns status NO_ERROR.</para>
      <para>A caller of <b>SetupDiGetDeviceInfoListDetail</b> must set <i>DeviceInfoSetDetailData.</i><b>cbSize</b> to <b>sizeof</b>(SP_DEVINFO_LIST_DETAIL_DATA) or the function will fail and the call to <see cref="GetLastError" /> will return ERROR_INVALID_USER_BUFFER.</para>
      <para>If <b>SetupDiGetDeviceInfoListDetail</b> completes successfully, <i>DeviceInfoSetDetailData.</i><b>ClassGuid</b> contains the class GUID associated with the device information set or a GUID_NULL structure.</para>
      <para>If <b>SetupDiGetDeviceInfoListDetail</b> completes successfully and the device information set is for a remote system, <i>DeviceInfoSetDetailData.</i><b>RemoteMachineHandle</b> contains the ConfigMgr32 system handle for accessing the remote system and <i>DeviceInfoSetDetailData.</i><b>RemoteMachineName</b> contains the name of the remote system. If there is a remote handle for the device information set, it must be used when calling <b>CM_</b><i>Xxx</i><b>_Ex</b> functions because the DevInst handles are relative to the remote handle.</para>
      <para>If the device information set is for the local computer, <i>DeviceInfoSetDetailData.</i><b>RemoteMachineHandle</b> is <b>NULL</b> and <i>DeviceInfoSetDetailData.</i><b>RemoteMachineName</b> is an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInfoListDetail as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoListEx" />
    <seealso cref="SetupDiGetClassDevsEx" />
    <seealso cref="SetupDiGetDeviceInfoListClass" />
  </member>
  <member name="Windows.SetupDiGetDeviceInfoListDetail - SetupDiGetDeviceInfoListDetailW">
    <summary>
      <para>The <b>SetupDiGetDeviceInfoListDetail</b> function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to retrieve information.</para>
    </param>
    <param name="DeviceInfoSetDetailData">
      <para>A pointer to a caller-initialized <see cref="SP_DEVINFO_LIST_DETAIL_DATA" /> structure that receives the device information set information. For more information about this structure, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the parameters are valid, <b>SetupDiGetDeviceInfoListDetail</b> sets values in the <i>DeviceInfoSetDetailData</i> structure (except for the <b>cbSize</b> field) and returns status NO_ERROR.</para>
      <para>A caller of <b>SetupDiGetDeviceInfoListDetail</b> must set <i>DeviceInfoSetDetailData.</i><b>cbSize</b> to <b>sizeof</b>(SP_DEVINFO_LIST_DETAIL_DATA) or the function will fail and the call to <see cref="GetLastError" /> will return ERROR_INVALID_USER_BUFFER.</para>
      <para>If <b>SetupDiGetDeviceInfoListDetail</b> completes successfully, <i>DeviceInfoSetDetailData.</i><b>ClassGuid</b> contains the class GUID associated with the device information set or a GUID_NULL structure.</para>
      <para>If <b>SetupDiGetDeviceInfoListDetail</b> completes successfully and the device information set is for a remote system, <i>DeviceInfoSetDetailData.</i><b>RemoteMachineHandle</b> contains the ConfigMgr32 system handle for accessing the remote system and <i>DeviceInfoSetDetailData.</i><b>RemoteMachineName</b> contains the name of the remote system. If there is a remote handle for the device information set, it must be used when calling <b>CM_</b><i>Xxx</i><b>_Ex</b> functions because the DevInst handles are relative to the remote handle.</para>
      <para>If the device information set is for the local computer, <i>DeviceInfoSetDetailData.</i><b>RemoteMachineHandle</b> is <b>NULL</b> and <i>DeviceInfoSetDetailData.</i><b>RemoteMachineName</b> is an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInfoListDetail as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInfoListEx" />
    <seealso cref="SetupDiGetClassDevsEx" />
    <seealso cref="SetupDiGetDeviceInfoListClass" />
  </member>
  <member name="Windows.SetupDiGetDeviceInstallParams - SetupDiGetDeviceInstallParamsA">
    <summary>
      <para>The <b>SetupDiGetDeviceInstallParams</b> function retrieves device installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device installation parameters to retrieve.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetDeviceInstallParams</b> retrieves the installation parameters for the specified device. If this parameter is <b>NULL</b>, the function retrieves the global device installation parameters that are associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DeviceInstallParams">
      <para>A pointer to an <see cref="SP_DEVINSTALL_PARAMS" /> structure that receives the device install parameters. <i>DeviceInstallParams</i>.<b>cbSize</b> must be set to the size, in bytes, of the structure before calling this function.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SP_DEVINSTALL_PARAMS" />
    <seealso cref="SetupDiSetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiGetDeviceInstallParams">
    <summary>
      <para>The <b>SetupDiGetDeviceInstallParams</b> function retrieves device installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device installation parameters to retrieve.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetDeviceInstallParams</b> retrieves the installation parameters for the specified device. If this parameter is <b>NULL</b>, the function retrieves the global device installation parameters that are associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DeviceInstallParams">
      <para>A pointer to an <see cref="SP_DEVINSTALL_PARAMS" /> structure that receives the device install parameters. <i>DeviceInstallParams</i>.<b>cbSize</b> must be set to the size, in bytes, of the structure before calling this function.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SP_DEVINSTALL_PARAMS" />
    <seealso cref="SetupDiSetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiGetDeviceInstallParamsW">
    <summary>
      <para>The <b>SetupDiGetDeviceInstallParams</b> function retrieves device installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device installation parameters to retrieve.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetDeviceInstallParams</b> retrieves the installation parameters for the specified device. If this parameter is <b>NULL</b>, the function retrieves the global device installation parameters that are associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DeviceInstallParams">
      <para>A pointer to an <see cref="SP_DEVINSTALL_PARAMS" /> structure that receives the device install parameters. <i>DeviceInstallParams</i>.<b>cbSize</b> must be set to the size, in bytes, of the structure before calling this function.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SP_DEVINSTALL_PARAMS" />
    <seealso cref="SetupDiSetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiGetDeviceInstanceId - SetupDiGetDeviceInstanceIdA">
    <summary>
      <para>The <b>SetupDiGetDeviceInstanceId</b> function retrieves the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> that is associated with a device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device information element that represents the device for which to retrieve a device instance ID.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DeviceInstanceId">
      <para>A pointer to the character buffer that will receive the NULL-terminated device instance ID for the specified device information element. For information about device instance IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
    </param>
    <param name="DeviceInstanceIdSize">
      <para>The size, in characters, of the <i>DeviceInstanceId</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to the variable that receives the number of characters required to store the device instance ID.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInstanceId as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiCreateDevRegKey" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiOpenDeviceInfo" />
  </member>
  <member name="Windows.SetupDiGetDeviceInstanceId - SetupDiGetDeviceInstanceIdW">
    <summary>
      <para>The <b>SetupDiGetDeviceInstanceId</b> function retrieves the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-instance-ids">device instance ID</a> that is associated with a device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device information element that represents the device for which to retrieve a device instance ID.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DeviceInstanceId">
      <para>A pointer to the character buffer that will receive the NULL-terminated device instance ID for the specified device information element. For information about device instance IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
    </param>
    <param name="DeviceInstanceIdSize">
      <para>The size, in characters, of the <i>DeviceInstanceId</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to the variable that receives the number of characters required to store the device instance ID.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInstanceId as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiCreateDevRegKey" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiOpenDevRegKey" />
    <seealso cref="SetupDiOpenDeviceInfo" />
  </member>
  <member name="Windows.SetupDiGetDeviceInterfaceAlias">
    <summary>
      <para>The <b>SetupDiGetDeviceInterfaceAlias</b> function returns an alias of a specified device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device interface for which to retrieve an alias. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the device interface in <i>DeviceInfoSet</i> for which to retrieve an alias. This pointer is typically returned by <see cref="SetupDiEnumDeviceInterfaces" />.</para>
    </param>
    <param name="AliasInterfaceClassGuid">
      <para>A pointer to a GUID that specifies the interface class of the alias to retrieve.</para>
    </param>
    <param name="AliasDeviceInterfaceData">
      <para>A pointer to a caller-allocated buffer that contains, on successful return, a completed <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that identifies the requested alias. The caller must set <i>AliasDeviceInterfaceData</i><b>.cbSize</b> to <b>sizeof</b>(SP_DEVICE_INTERFACE_DATA) before calling this function.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceInterfaceAlias</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, <b>FALSE</b> is returned and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>Possible errors returned by <see cref="GetLastError" /> are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Invalid <i>DeviceInfoSet</i> or invalid <i>DeviceInterfaceData</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_DEVICE</b>
            </para>
          </description>
          <description>
            <para>There is no alias of class <i>AliasInterfaceClassGuid</i> for the specified device interface.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>Invalid <i>AliasDeviceInterfaceData</i> buffer.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Device interfaces are considered aliases if they are of different interface classes but are supported by the same device and have identical reference strings.</para>
      <para>
        <b>SetupDiGetDeviceInterfaceAlias</b> can be used to locate a device that exposes more than one interface. For example, consider a disk that can be part of a fault-tolerant volume and can contain encrypted data. The function driver for the disk device could register a fault-tolerant-volume interface and an encrypted-volume interface. These interfaces are device interface aliases if the function driver registers them with identical reference strings and they refer to the same device. (The reference strings will likely be <b>NULL</b> and therefore are equal.)</para>
      <para>To locate such a multi-interface device, first locate all available devices that expose one of the interfaces, such as the fault-tolerant-volume interface, using <see cref="SetupDiGetClassDevs" /> and <see cref="SetupDiEnumDeviceInterfaces" />. Then, pass a device with the first interface (fault-tolerant-volume) to <b>SetupDiGetDeviceInterfaceAlias</b> and request an alias of the other interface class (encrypted-volume).</para>
      <para>If the requested alias exists but the caller-supplied <i>AliasDeviceInterfaceData</i> buffer is invalid, this function successfully adds the device interface element to <i>DevInfoSet</i> but returns <b>FALSE</b> for the return value. In this case, <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER.</para>
    </remarks>
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiGetDeviceInterfaceDetail - SetupDiGetDeviceInterfaceDetailA">
    <summary>
      <para>The <b>SetupDiGetDeviceInterfaceDetail</b> function returns details about a device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the interface for which to retrieve details. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the interface in <i>DeviceInfoSet</i> for which to retrieve details. A pointer of this type is typically returned by <see cref="SetupDiEnumDeviceInterfaces" />.</para>
    </param>
    <param name="DeviceInterfaceDetailData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DETAIL_DATA" /> structure to receive information about the specified interface. This parameter is optional and can be <b>NULL</b>. This parameter must be <b>NULL</b> if <i>DeviceInterfaceDetailSize</i> is zero. If this parameter is specified, the caller must set <i>DeviceInterfaceDetailData</i><b>.cbSize</b> to <b>sizeof</b>(SP_DEVICE_INTERFACE_DETAIL_DATA) before calling this function. The <b>cbSize</b> member always contains the size of the fixed part of the data structure, not a size reflecting the variable-length string at the end.</para>
    </param>
    <param name="DeviceInterfaceDetailDataSize">
      <para>The size of the <i>DeviceInterfaceDetailData</i> buffer. The buffer must be at least (<b>offsetof</b>(SP_DEVICE_INTERFACE_DETAIL_DATA, <b>DevicePath</b>) + <b>sizeof</b>(TCHAR)) bytes, to contain the fixed part of the structure and a single <b>NULL</b> to terminate an empty MULTI_SZ string.</para>
      <para>This parameter must be zero if <i>DeviceInterfaceDetailData</i> is <b>NULL</b>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the required size of the <i>DeviceInterfaceDetailData</i> buffer. This size includes the size of the fixed part of the structure plus the number of bytes required for the variable-length device path string. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a buffer that receives information about the device that supports the requested interface. The caller must set <i>DeviceInfoData</i><b>.cbSize</b> to <b>sizeof</b>(SP_DEVINFO_DATA). This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceInterfaceDetail</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, <b>FALSE</b> is returned and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Using this function to get details about an interface is typically a two-step process:</para>
      <list type="number">
        <item>
          <description>
            <para>Get the required buffer size. Call <b>SetupDiGetDeviceInterfaceDetail</b> with a <b>NULL</b><i>DeviceInterfaceDetailData</i> pointer, a <i>DeviceInterfaceDetailDataSize</i> of zero, and a valid <i>RequiredSize</i> variable. In response to such a call, this function returns the required buffer size at <i>RequiredSize</i> and fails with <see cref="GetLastError" /> returning ERROR_INSUFFICIENT_BUFFER.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Allocate an appropriately sized buffer and call the function again to get the interface details.</para>
          </description>
        </item>
      </list>
      <para>The interface detail returned by this function consists of a device path that can be passed to Win32 functions such as <see cref="CreateFile" />. Do not attempt to parse the device path symbolic name. The device path can be reused across system starts.</para>
      <para>
        <b>SetupDiGetDeviceInterfaceDetail</b> can be used to get just the <i>DeviceInfoData</i>. If the interface exists but <i>DeviceInterfaceDetailData</i> is <b>NULL</b>, this function fails, <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER, and the <i>DeviceInfoData</i> structure is filled with information about the device that exposes the interface.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInterfaceDetail as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiGetDeviceInterfaceDetail">
    <summary>
      <para>The <b>SetupDiGetDeviceInterfaceDetail</b> function returns details about a device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the interface for which to retrieve details. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the interface in <i>DeviceInfoSet</i> for which to retrieve details. A pointer of this type is typically returned by <see cref="SetupDiEnumDeviceInterfaces" />.</para>
    </param>
    <param name="DeviceInterfaceDetailData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DETAIL_DATA" /> structure to receive information about the specified interface. This parameter is optional and can be <b>NULL</b>. This parameter must be <b>NULL</b> if <i>DeviceInterfaceDetailSize</i> is zero. If this parameter is specified, the caller must set <i>DeviceInterfaceDetailData</i><b>.cbSize</b> to <b>sizeof</b>(SP_DEVICE_INTERFACE_DETAIL_DATA) before calling this function. The <b>cbSize</b> member always contains the size of the fixed part of the data structure, not a size reflecting the variable-length string at the end.</para>
    </param>
    <param name="DeviceInterfaceDetailDataSize">
      <para>The size of the <i>DeviceInterfaceDetailData</i> buffer. The buffer must be at least (<b>offsetof</b>(SP_DEVICE_INTERFACE_DETAIL_DATA, <b>DevicePath</b>) + <b>sizeof</b>(TCHAR)) bytes, to contain the fixed part of the structure and a single <b>NULL</b> to terminate an empty MULTI_SZ string.</para>
      <para>This parameter must be zero if <i>DeviceInterfaceDetailData</i> is <b>NULL</b>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the required size of the <i>DeviceInterfaceDetailData</i> buffer. This size includes the size of the fixed part of the structure plus the number of bytes required for the variable-length device path string. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a buffer that receives information about the device that supports the requested interface. The caller must set <i>DeviceInfoData</i><b>.cbSize</b> to <b>sizeof</b>(SP_DEVINFO_DATA). This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceInterfaceDetail</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, <b>FALSE</b> is returned and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Using this function to get details about an interface is typically a two-step process:</para>
      <list type="number">
        <item>
          <description>
            <para>Get the required buffer size. Call <b>SetupDiGetDeviceInterfaceDetail</b> with a <b>NULL</b><i>DeviceInterfaceDetailData</i> pointer, a <i>DeviceInterfaceDetailDataSize</i> of zero, and a valid <i>RequiredSize</i> variable. In response to such a call, this function returns the required buffer size at <i>RequiredSize</i> and fails with <see cref="GetLastError" /> returning ERROR_INSUFFICIENT_BUFFER.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Allocate an appropriately sized buffer and call the function again to get the interface details.</para>
          </description>
        </item>
      </list>
      <para>The interface detail returned by this function consists of a device path that can be passed to Win32 functions such as <see cref="CreateFile" />. Do not attempt to parse the device path symbolic name. The device path can be reused across system starts.</para>
      <para>
        <b>SetupDiGetDeviceInterfaceDetail</b> can be used to get just the <i>DeviceInfoData</i>. If the interface exists but <i>DeviceInterfaceDetailData</i> is <b>NULL</b>, this function fails, <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER, and the <i>DeviceInfoData</i> structure is filled with information about the device that exposes the interface.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInterfaceDetail as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiGetDeviceInterfaceDetailW">
    <summary>
      <para>The <b>SetupDiGetDeviceInterfaceDetail</b> function returns details about a device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the interface for which to retrieve details. This handle is typically returned by <see cref="SetupDiGetClassDevs" />.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the interface in <i>DeviceInfoSet</i> for which to retrieve details. A pointer of this type is typically returned by <see cref="SetupDiEnumDeviceInterfaces" />.</para>
    </param>
    <param name="DeviceInterfaceDetailData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DETAIL_DATA" /> structure to receive information about the specified interface. This parameter is optional and can be <b>NULL</b>. This parameter must be <b>NULL</b> if <i>DeviceInterfaceDetailSize</i> is zero. If this parameter is specified, the caller must set <i>DeviceInterfaceDetailData</i><b>.cbSize</b> to <b>sizeof</b>(SP_DEVICE_INTERFACE_DETAIL_DATA) before calling this function. The <b>cbSize</b> member always contains the size of the fixed part of the data structure, not a size reflecting the variable-length string at the end.</para>
    </param>
    <param name="DeviceInterfaceDetailDataSize">
      <para>The size of the <i>DeviceInterfaceDetailData</i> buffer. The buffer must be at least (<b>offsetof</b>(SP_DEVICE_INTERFACE_DETAIL_DATA, <b>DevicePath</b>) + <b>sizeof</b>(TCHAR)) bytes, to contain the fixed part of the structure and a single <b>NULL</b> to terminate an empty MULTI_SZ string.</para>
      <para>This parameter must be zero if <i>DeviceInterfaceDetailData</i> is <b>NULL</b>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the required size of the <i>DeviceInterfaceDetailData</i> buffer. This size includes the size of the fixed part of the structure plus the number of bytes required for the variable-length device path string. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a buffer that receives information about the device that supports the requested interface. The caller must set <i>DeviceInfoData</i><b>.cbSize</b> to <b>sizeof</b>(SP_DEVINFO_DATA). This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceInterfaceDetail</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, <b>FALSE</b> is returned and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Using this function to get details about an interface is typically a two-step process:</para>
      <list type="number">
        <item>
          <description>
            <para>Get the required buffer size. Call <b>SetupDiGetDeviceInterfaceDetail</b> with a <b>NULL</b><i>DeviceInterfaceDetailData</i> pointer, a <i>DeviceInterfaceDetailDataSize</i> of zero, and a valid <i>RequiredSize</i> variable. In response to such a call, this function returns the required buffer size at <i>RequiredSize</i> and fails with <see cref="GetLastError" /> returning ERROR_INSUFFICIENT_BUFFER.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Allocate an appropriately sized buffer and call the function again to get the interface details.</para>
          </description>
        </item>
      </list>
      <para>The interface detail returned by this function consists of a device path that can be passed to Win32 functions such as <see cref="CreateFile" />. Do not attempt to parse the device path symbolic name. The device path can be reused across system starts.</para>
      <para>
        <b>SetupDiGetDeviceInterfaceDetail</b> can be used to get just the <i>DeviceInfoData</i>. If the interface exists but <i>DeviceInterfaceDetailData</i> is <b>NULL</b>, this function fails, <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER, and the <i>DeviceInfoData</i> structure is filled with information about the device that exposes the interface.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceInterfaceDetail as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiGetDeviceInterfacePropertyKeys">
    <summary>
      <para>The <b>SetupDiGetDeviceInterfacePropertyKeys</b> function retrieves an array of device property keys that represent the device properties that are set for a device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. This device information set contains a device interface for which to retrieve an array of the device property keys that represent the device properties that are set for a device interface.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that represents the device interface for which to retrieve the requested array of device property keys.</para>
    </param>
    <param name="PropertyKeyArray">
      <para>A pointer to a buffer that receives an array of <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a>-typed values, where each value is a device property key for a device property that is set for the device interface. The pointer is optional and can be <b>NULL</b>. For more information, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyKeyCount">
      <para>The size, in DEVPROPKEY-typed elements, of the <i>PropertyKeyArray </i> buffer<i>. </i>If <i>PropertyKeyArray</i> is <b>NULL</b>, <i>PropertyKeyCount</i> must be set to zero.</para>
    </param>
    <param name="RequiredPropertyKeyCount">
      <para>A pointer to a DWORD-typed variable that receives the number of requested device property keys. The pointer is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter must be set to zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An internal data value is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A parameter is not valid. One possibility is that the device interface that is specified by <i>DevInterfaceData</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyKeyArray</i> is <b>NULL</b>, and <i>PropertKeyCount</i> is not zero. .</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVICE_INTERFACE</b>
            </para>
          </description>
          <description>
            <para>The device interface that is specified by <i>DeviceInterfaceData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The <i>PropertyKeyArray</i> buffer is not large enough to hold all the requested property keys.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetDeviceInterfacePropertyKeys</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>If the <i>PropertyKeyArray</i> buffer is not large enough to hold all the requested property keys, <b>SetupDiGetDeviceInterfacePropertyKeys</b> does not retrieve any property keys and returns ERROR_INSUFFICIENT_BUFFER. If the caller supplied a <i>RequiredPropertyKeyCount</i> pointer, <b>SetupDiGetDeviceInterfacePropertyKeys</b> sets the value of *<i>RequiredPropertyKeyCount</i> to the required size, in DEVPROPKEY-typed values, of the <i>PropertyKeyArray </i> buffer<i>.</i></para>
      <para>To retrieve a device interface property, call <see cref="SetupDiGetDeviceInterfaceProperty" /><b>,</b> and to set a device interface property, call <see cref="SetupDiSetDeviceInterfaceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDeviceInterfaceProperty" />
    <seealso cref="SetupDiSetDeviceInterfaceProperty" />
  </member>
  <member name="Windows.SetupDiGetDeviceInterfaceProperty">
    <summary>
      <para>The <b>SetupDiGetDeviceInterfaceProperty</b> function retrieves a device property that is set for a device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device interface for which to retrieve a device interface property.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that represents the device interface for which to retrieve a device interface property.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device interface property key of the device interface property to retrieve.</para>
    </param>
    <param name="PropertyType">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed variable that receives the property-data-type identifier of the requested device interface property. The property-data-type identifier is a bitwise OR between a base-data-type identifier and, if the base-data type is modified, a property-data-type modifier.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the requested device interface property. <b>SetupDiGetDeviceInterfaceProperty</b> retrieves the requested property only if the buffer is large enough to hold all the property value data. The pointer can be <b>NULL</b>. If the pointer is set to <b>NULL</b> and <i>RequiredSize</i> is supplied, <b>SetupDiGetDeviceInterfaceProperty</b> returns the size of the property, in bytes, in *<i>RequiredSize</i>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer</i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in bytes, of either the device interface property if the property is retrieved or the required buffer size, if the buffer is not large enough. This pointer can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter must be set to zero.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceInterfaceProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log. Other error codes can be set by the device installer functions that are called by this API.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A supplied parameter is not valid. One possibility is that the device interface that is specified by <i>DeviceInterfaceData</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVICE_INTERFACE</b>
            </para>
          </description>
          <description>
            <para>The device interface that is specified by <i>DeviceInterfaceData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The <i>PropertyBuffer</i> buffer is not large enough to hold the property value, or an internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The requested device property does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetDeviceInterfaceProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiGetDeviceInterfaceProperty</b>.</para>
      <para>A caller of <b>SetupDiGetDeviceInterfaceProperty</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device interface, call <see cref="SetupDiGetDeviceInterfacePropertyKeys" />.</para>
      <para>To set a device interface property, call <see cref="SetupDiSetDeviceInterfaceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDeviceInterfacePropertyKeys" />
    <seealso cref="SetupDiSetDeviceInterfaceProperty" />
  </member>
  <member name="Windows.SetupDiGetDevicePropertyKeys">
    <summary>
      <para>The <b>SetupDiGetDevicePropertyKeys</b> function retrieves an array of the device property keys that represent the device properties that are set for a device instance.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. This device information set contains the device instance for which this function retrieves an array of device property keys. The property keys represent the device properties that are set for the device instance.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that represents the device instance for which to retrieve the requested array of device property keys.</para>
    </param>
    <param name="PropertyKeyArray">
      <para>A pointer to a buffer that receives an array of <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a>-typed values, where each value is a device property key that represents a device property that is set for the device instance. The pointer is optional and can be <b>NULL</b>. For more information, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyKeyCount">
      <para>The size, in DEVPROPKEY-typed values, of the <i>PropertyKeyArray </i> buffer<i>. </i>If <i>PropertyKeyArray</i> is set to <b>NULL</b>, <i>PropertyKeyCount</i> must be set to zero.</para>
    </param>
    <param name="RequiredPropertyKeyCount">
      <para>A pointer to a DWORD-typed variable that receives the number of requested device property keys. The pointer is optional and can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter must be set to zero.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDevicePropertyKeys</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A supplied parameter is not valid. One possibility is that the device information element is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An internal data value is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyKeyArray</i> is <b>NULL</b> and <i>PropertKeyCount</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVINST</b>
            </para>
          </description>
          <description>
            <para>The device instance that is specified by <i>DevInfoData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The <i>PropertyKeyArray</i> buffer is too small to hold all the requested property keys.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetDevicePropertyKeys</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>If the <i>ProperKeyArray</i> buffer is not large enough to hold all the requested property keys, <b>SetupDiGetDevicePropertyKeys</b> does not retrieve any property keys and returns ERROR_INSUFFICIENT_BUFFER. If the caller supplied a <i>RequiredPropertyKeyCount</i> pointer, <b>SetupDiGetDevicePropertyKeys</b> sets the value of *<i>RequiredPropertyKeyCount</i> to the required size, in DEVPROPKEY-typed values, of the <i>PropertyKeyArray </i> buffer<i>.</i></para>
      <para>To retrieve a device instance property, call <see cref="SetupDiGetDeviceProperty" />, and to set a device instance property, call <see cref="SetupDiSetDeviceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDeviceProperty" />
    <seealso cref="SetupDiSetDeviceProperty" />
  </member>
  <member name="Windows.SetupDiGetDeviceProperty">
    <summary>
      <para>The <b>SetupDiGetDeviceProperty</b> function retrieves a device instance property.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device instance for which to retrieve a device instance property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to the <see cref="SP_DEVINFO_DATA" /> structure that represents the device instance for which to retrieve a device instance property.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the requested device instance property.</para>
    </param>
    <param name="PropertyType">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed variable that receives the property-data-type identifier of the requested device instance property, where the property-data-type identifier is the bitwise OR between a base-data-type identifier and, if the base-data type is modified, a property-data-type modifier.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the requested device instance property. <b>SetupDiGetDeviceProperty</b> retrieves the requested property only if the buffer is large enough to hold all the property value data. The pointer can be <b>NULL</b>. If the pointer is set to <b>NULL</b> and <i>RequiredSize</i> is supplied, <b>SetupDiGetDeviceProperty</b> returns the size of the property, in bytes, in *<i>RequiredSize</i>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer</i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in bytes, of either the device instance property if the property is retrieved or the required buffer size if the buffer is not large enough. This pointer can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter must be set to zero.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A supplied parameter is not valid. One possibility is that the device information element is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b> and <i>PropertBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVINST</b>
            </para>
          </description>
          <description>
            <para>The device instance that is specified by <i>DevInfoData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The <i>PropertyBuffer</i> buffer is too small to hold the requested property value, or an internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The requested device property does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetDeviceProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiGetDeviceProperty</b>.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device instance, call <see cref="SetupDiGetDevicePropertyKeys" />.</para>
      <para>To set a device instance property, call <see cref="SetupDiSetDeviceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDevicePropertyKeys" />
    <seealso cref="SetupDiSetDeviceProperty" />
  </member>
  <member name="Windows.SetupDiGetDevicePropertyW">
    <summary>
      <para>The <b>SetupDiGetDeviceProperty</b> function retrieves a device instance property.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device instance for which to retrieve a device instance property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to the <see cref="SP_DEVINFO_DATA" /> structure that represents the device instance for which to retrieve a device instance property.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the requested device instance property.</para>
    </param>
    <param name="PropertyType">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed variable that receives the property-data-type identifier of the requested device instance property, where the property-data-type identifier is the bitwise OR between a base-data-type identifier and, if the base-data type is modified, a property-data-type modifier.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the requested device instance property. <b>SetupDiGetDeviceProperty</b> retrieves the requested property only if the buffer is large enough to hold all the property value data. The pointer can be <b>NULL</b>. If the pointer is set to <b>NULL</b> and <i>RequiredSize</i> is supplied, <b>SetupDiGetDeviceProperty</b> returns the size of the property, in bytes, in *<i>RequiredSize</i>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer</i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in bytes, of either the device instance property if the property is retrieved or the required buffer size if the buffer is not large enough. This pointer can be set to <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter must be set to zero.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A supplied parameter is not valid. One possibility is that the device information element is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b> and <i>PropertBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVINST</b>
            </para>
          </description>
          <description>
            <para>The device instance that is specified by <i>DevInfoData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The <i>PropertyBuffer</i> buffer is too small to hold the requested property value, or an internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The requested device property does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetDeviceProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiGetDeviceProperty</b>.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device instance, call <see cref="SetupDiGetDevicePropertyKeys" />.</para>
      <para>To set a device instance property, call <see cref="SetupDiSetDeviceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDevicePropertyKeys" />
    <seealso cref="SetupDiSetDeviceProperty" />
  </member>
  <member name="Windows.SetupDiGetDeviceRegistryProperty - SetupDiGetDeviceRegistryPropertyA">
    <summary>
      <para>The <b>SetupDiGetDeviceRegistryProperty</b> function retrieves a specified Plug and Play device property.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a Plug and Play property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="Property">
      <para>One of the following values that specifies the property to be retrieved:</para>
      <h4>SPDRP_ADDRESS</h4>
      <para>The function retrieves the device's address.</para>
      <h4>SPDRP_BUSNUMBER</h4>
      <para>The function retrieves the device's bus number.</para>
      <h4>SPDRP_BUSTYPEGUID</h4>
      <para>The function retrieves the GUID for the device's bus type.</para>
      <h4>SPDRP_CAPABILITIES</h4>
      <para>The function retrieves a bitwise OR of the following CM_DEVCAP_<i>Xxx </i> flags in a DWORD. The device capabilities that are represented by these flags correspond to the device capabilities that are represented by the members of the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-_device_capabilities">DEVICE_CAPABILITIES</a> structure. The CM_DEVCAP_Xxx constants are defined in <i>Cfgmgr32.h.</i></para>
      <list type="table">
        <listheader>
          <description>CM_DEVCAP_Xxx flag</description>
          <description>Corresponding DEVICE_CAPABILITIES structure member</description>
        </listheader>
        <item>
          <description>
            <para>CM_DEVCAP_LOCKSUPPORTED</para>
          </description>
          <description>
            <b>LockSupported </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_EJECTSUPPORTED</para>
          </description>
          <description>
            <b>EjectSupported </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_REMOVABLE</para>
          </description>
          <description>
            <b>Removable </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_DOCKDEVICE</para>
          </description>
          <description>
            <b>DockDevice </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_UNIQUEID</para>
          </description>
          <description>
            <b>UniqueID </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_SILENTINSTALL</para>
          </description>
          <description>
            <b>SilentInstall </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_RAWDEVICEOK</para>
          </description>
          <description>
            <b>RawDeviceOK </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_SURPRISEREMOVALOK</para>
          </description>
          <description>
            <b>SurpriseRemovalOK </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_HARDWAREDISABLED</para>
          </description>
          <description>
            <b>HardwareDisabled </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_NONDYNAMIC</para>
          </description>
          <description>
            <b>NonDynamic</b>
          </description>
        </item>
      </list>
      <h4>SPDRP_CHARACTERISTICS</h4>
      <para>The function retrieves a bitwise OR of a device's characteristics flags in a DWORD. For a description of these flags, which are defined in <i>Wdm.h</i> and <i>Ntddk.h</i>, see the <i>DeviceCharacteristics</i> parameter of the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a> function.</para>
      <h4>SPDRP_CLASS</h4>
      <para>The function retrieves a REG_SZ string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> of a device.</para>
      <h4>SPDRP_CLASSGUID</h4>
      <para>The function retrieves a REG_SZ string that contains the GUID that represents the device setup class of a device.</para>
      <h4>SPDRP_COMPATIBLEIDS</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the list of compatible IDs for a device. For information about compatible IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
      <h4>SPDRP_CONFIGFLAGS</h4>
      <para>The function retrieves a bitwise OR of a device's configuration flags in a DWORD value. The configuration flags are represented by the CONFIGFLAG_<i>Xxx</i> bitmasks that are defined in <i>Regstr.h</i>.</para>
      <h4>SPDRP_DEVICE_POWER_DATA</h4>
      <para>(Windows XP and later) The function retrieves a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-cm_power_data_s">CM_POWER_DATA</a> structure that contains the device's power management information.</para>
      <h4>SPDRP_DEVICEDESC</h4>
      <para>The function retrieves a REG_SZ string that contains the description of a device.</para>
      <h4>SPDRP_DEVTYPE</h4>
      <para>The function retrieves a DWORD value that represents the device's type. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>.</para>
      <h4>SPDRP_DRIVER</h4>
      <para>The function retrieves a string that identifies the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a> (sometimes called the <a href="https://docs.microsoft.com//windows-hardware/drivers/">driver key</a>). For more information about driver keys, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/registry-trees-and-keys">Registry Trees and Keys for Devices and Drivers</a>.</para>
      <h4>SPDRP_ENUMERATOR_NAME</h4>
      <para>The function retrieves a REG_SZ string that contains the name of the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>.</para>
      <h4>SPDRP_EXCLUSIVE</h4>
      <para>The function retrieves a DWORD value that indicates whether a user can obtain exclusive use of the device. The returned value is one if exclusive use is allowed, or zero otherwise. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h4>SPDRP_FRIENDLYNAME</h4>
      <para>The function retrieves a REG_SZ string that contains the friendly name of a device.</para>
      <h4>SPDRP_HARDWAREID</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the list of hardware IDs for a device. For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
      <h4>SPDRP_INSTALL_STATE</h4>
      <para>(Windows XP and later) The function retrieves a DWORD value that indicates the installation state of a device. The installation state is represented by one of the CM_INSTALL_STATE_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>. The CM_INSTALL_STATE_<i>Xxx</i> values correspond to the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ne-wdm-_device_install_state">DEVICE_INSTALL_STATE</a> enumeration values.</para>
      <h4>SPDRP_LEGACYBUSTYPE</h4>
      <para>The function retrieves the device's legacy bus type as an INTERFACE_TYPE value (defined in <i>Wdm.h</i> and <i>Ntddk.h</i>).</para>
      <h4>SPDRP_LOCATION_INFORMATION</h4>
      <para>The function retrieves a REG_SZ string that contains the hardware location of a device.</para>
      <h4>SPDRP_LOCATION_PATHS</h4>
      <para>(Windows Server 2003 and later) The function retrieves a REG_MULTI_SZ string that represents the location of the device in the device tree.</para>
      <h4>SPDRP_LOWERFILTERS</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the names of a device's lower-filter drivers.</para>
      <h4>SPDRP_MFG</h4>
      <para>The function retrieves a REG_SZ string that contains the name of the device manufacturer.</para>
      <h4>SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</h4>
      <para>The function retrieves a REG_SZ string that contains the name that is associated with the device's PDO. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h4>SPDRP_REMOVAL_POLICY</h4>
      <para>(Windows XP and later) The function retrieves the device's current removal policy as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h4>SPDRP_REMOVAL_POLICY_HW_DEFAULT</h4>
      <para>(Windows XP and later) The function retrieves the device's hardware-specified default removal policy as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h4>SPDRP_REMOVAL_POLICY_OVERRIDE</h4>
      <para>(Windows XP and later) The function retrieves the device's override removal policy (if it exists) from the registry, as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h4>SPDRP_SECURITY</h4>
      <para>The function retrieves a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/ntifs/ns-ntifs-_security_descriptor">SECURITY_DESCRIPTOR</a> structure for a device.</para>
      <h4>SPDRP_SECURITY_SDS</h4>
      <para>The function retrieves a REG_SZ string that contains the device's security descriptor. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h4>SPDRP_SERVICE</h4>
      <para>The function retrieves a REG_SZ string that contains the service name for a device.</para>
      <h4>SPDRP_UI_NUMBER</h4>
      <para>The function retrieves a DWORD value set to the value of the <b>UINumber</b> member of the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-_device_capabilities">DEVICE_CAPABILITIES</a> structure.</para>
      <h4>SPDRP_UI_NUMBER_DESC_FORMAT</h4>
      <para>The function retrieves a format string (REG_SZ) used to display the <b>UINumber</b> value.</para>
      <h4>SPDRP_UPPERFILTERS</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the names of a device's upper filter drivers.</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable that receives the data type of the property that is being retrieved. This is one of the standard registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the property that is being retrieved. If this parameter is set to <b>NULL</b>, and <i>PropertyBufferSize</i> is also set to zero, the function returns the required size for the buffer in <i>RequiredSize</i>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the required size, in bytes, of the <i>PropertyBuffer</i> buffer that is required to hold the data for the requested property. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceRegistryProperty</b> returns <b>TRUE</b> if the call was successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />. <b>SetupDiGetDeviceRegistryProperty</b> returns the ERROR_INVALID_DATA error code if the requested property does not exist for a device or if the property data is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iogetdeviceproperty">IoGetDeviceProperty</seealso>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetDeviceRegistryProperty - SetupDiGetDeviceRegistryPropertyW">
    <summary>
      <para>The <b>SetupDiGetDeviceRegistryProperty</b> function retrieves a specified Plug and Play device property.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to retrieve a Plug and Play property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="Property">
      <para>One of the following values that specifies the property to be retrieved:</para>
      <h4>SPDRP_ADDRESS</h4>
      <para>The function retrieves the device's address.</para>
      <h4>SPDRP_BUSNUMBER</h4>
      <para>The function retrieves the device's bus number.</para>
      <h4>SPDRP_BUSTYPEGUID</h4>
      <para>The function retrieves the GUID for the device's bus type.</para>
      <h4>SPDRP_CAPABILITIES</h4>
      <para>The function retrieves a bitwise OR of the following CM_DEVCAP_<i>Xxx </i> flags in a DWORD. The device capabilities that are represented by these flags correspond to the device capabilities that are represented by the members of the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-_device_capabilities">DEVICE_CAPABILITIES</a> structure. The CM_DEVCAP_Xxx constants are defined in <i>Cfgmgr32.h.</i></para>
      <list type="table">
        <listheader>
          <description>CM_DEVCAP_Xxx flag</description>
          <description>Corresponding DEVICE_CAPABILITIES structure member</description>
        </listheader>
        <item>
          <description>
            <para>CM_DEVCAP_LOCKSUPPORTED</para>
          </description>
          <description>
            <b>LockSupported </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_EJECTSUPPORTED</para>
          </description>
          <description>
            <b>EjectSupported </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_REMOVABLE</para>
          </description>
          <description>
            <b>Removable </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_DOCKDEVICE</para>
          </description>
          <description>
            <b>DockDevice </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_UNIQUEID</para>
          </description>
          <description>
            <b>UniqueID </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_SILENTINSTALL</para>
          </description>
          <description>
            <b>SilentInstall </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_RAWDEVICEOK</para>
          </description>
          <description>
            <b>RawDeviceOK </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_SURPRISEREMOVALOK</para>
          </description>
          <description>
            <b>SurpriseRemovalOK </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_HARDWAREDISABLED</para>
          </description>
          <description>
            <b>HardwareDisabled </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_NONDYNAMIC</para>
          </description>
          <description>
            <b>NonDynamic</b>
          </description>
        </item>
      </list>
      <h4>SPDRP_CHARACTERISTICS</h4>
      <para>The function retrieves a bitwise OR of a device's characteristics flags in a DWORD. For a description of these flags, which are defined in <i>Wdm.h</i> and <i>Ntddk.h</i>, see the <i>DeviceCharacteristics</i> parameter of the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a> function.</para>
      <h4>SPDRP_CLASS</h4>
      <para>The function retrieves a REG_SZ string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> of a device.</para>
      <h4>SPDRP_CLASSGUID</h4>
      <para>The function retrieves a REG_SZ string that contains the GUID that represents the device setup class of a device.</para>
      <h4>SPDRP_COMPATIBLEIDS</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the list of compatible IDs for a device. For information about compatible IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
      <h4>SPDRP_CONFIGFLAGS</h4>
      <para>The function retrieves a bitwise OR of a device's configuration flags in a DWORD value. The configuration flags are represented by the CONFIGFLAG_<i>Xxx</i> bitmasks that are defined in <i>Regstr.h</i>.</para>
      <h4>SPDRP_DEVICE_POWER_DATA</h4>
      <para>(Windows XP and later) The function retrieves a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-cm_power_data_s">CM_POWER_DATA</a> structure that contains the device's power management information.</para>
      <h4>SPDRP_DEVICEDESC</h4>
      <para>The function retrieves a REG_SZ string that contains the description of a device.</para>
      <h4>SPDRP_DEVTYPE</h4>
      <para>The function retrieves a DWORD value that represents the device's type. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>.</para>
      <h4>SPDRP_DRIVER</h4>
      <para>The function retrieves a string that identifies the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a> (sometimes called the <a href="https://docs.microsoft.com//windows-hardware/drivers/">driver key</a>). For more information about driver keys, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/registry-trees-and-keys">Registry Trees and Keys for Devices and Drivers</a>.</para>
      <h4>SPDRP_ENUMERATOR_NAME</h4>
      <para>The function retrieves a REG_SZ string that contains the name of the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>.</para>
      <h4>SPDRP_EXCLUSIVE</h4>
      <para>The function retrieves a DWORD value that indicates whether a user can obtain exclusive use of the device. The returned value is one if exclusive use is allowed, or zero otherwise. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h4>SPDRP_FRIENDLYNAME</h4>
      <para>The function retrieves a REG_SZ string that contains the friendly name of a device.</para>
      <h4>SPDRP_HARDWAREID</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the list of hardware IDs for a device. For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
      <h4>SPDRP_INSTALL_STATE</h4>
      <para>(Windows XP and later) The function retrieves a DWORD value that indicates the installation state of a device. The installation state is represented by one of the CM_INSTALL_STATE_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>. The CM_INSTALL_STATE_<i>Xxx</i> values correspond to the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ne-wdm-_device_install_state">DEVICE_INSTALL_STATE</a> enumeration values.</para>
      <h4>SPDRP_LEGACYBUSTYPE</h4>
      <para>The function retrieves the device's legacy bus type as an INTERFACE_TYPE value (defined in <i>Wdm.h</i> and <i>Ntddk.h</i>).</para>
      <h4>SPDRP_LOCATION_INFORMATION</h4>
      <para>The function retrieves a REG_SZ string that contains the hardware location of a device.</para>
      <h4>SPDRP_LOCATION_PATHS</h4>
      <para>(Windows Server 2003 and later) The function retrieves a REG_MULTI_SZ string that represents the location of the device in the device tree.</para>
      <h4>SPDRP_LOWERFILTERS</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the names of a device's lower-filter drivers.</para>
      <h4>SPDRP_MFG</h4>
      <para>The function retrieves a REG_SZ string that contains the name of the device manufacturer.</para>
      <h4>SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</h4>
      <para>The function retrieves a REG_SZ string that contains the name that is associated with the device's PDO. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h4>SPDRP_REMOVAL_POLICY</h4>
      <para>(Windows XP and later) The function retrieves the device's current removal policy as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h4>SPDRP_REMOVAL_POLICY_HW_DEFAULT</h4>
      <para>(Windows XP and later) The function retrieves the device's hardware-specified default removal policy as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h4>SPDRP_REMOVAL_POLICY_OVERRIDE</h4>
      <para>(Windows XP and later) The function retrieves the device's override removal policy (if it exists) from the registry, as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h4>SPDRP_SECURITY</h4>
      <para>The function retrieves a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/ntifs/ns-ntifs-_security_descriptor">SECURITY_DESCRIPTOR</a> structure for a device.</para>
      <h4>SPDRP_SECURITY_SDS</h4>
      <para>The function retrieves a REG_SZ string that contains the device's security descriptor. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h4>SPDRP_SERVICE</h4>
      <para>The function retrieves a REG_SZ string that contains the service name for a device.</para>
      <h4>SPDRP_UI_NUMBER</h4>
      <para>The function retrieves a DWORD value set to the value of the <b>UINumber</b> member of the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-_device_capabilities">DEVICE_CAPABILITIES</a> structure.</para>
      <h4>SPDRP_UI_NUMBER_DESC_FORMAT</h4>
      <para>The function retrieves a format string (REG_SZ) used to display the <b>UINumber</b> value.</para>
      <h4>SPDRP_UPPERFILTERS</h4>
      <para>The function retrieves a REG_MULTI_SZ string that contains the names of a device's upper filter drivers.</para>
    </param>
    <param name="PropertyRegDataType">
      <para>A pointer to a variable that receives the data type of the property that is being retrieved. This is one of the standard registry data types. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that receives the property that is being retrieved. If this parameter is set to <b>NULL</b>, and <i>PropertyBufferSize</i> is also set to zero, the function returns the required size for the buffer in <i>RequiredSize</i>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the required size, in bytes, of the <i>PropertyBuffer</i> buffer that is required to hold the data for the requested property. This parameter is optional and can be <b>NULL</b>.</para>
      <h5>- Property.SPDRP_ADDRESS</h5>
      <para>The function retrieves the device's address.</para>
      <h5>- Property.SPDRP_BUSNUMBER</h5>
      <para>The function retrieves the device's bus number.</para>
      <h5>- Property.SPDRP_BUSTYPEGUID</h5>
      <para>The function retrieves the GUID for the device's bus type.</para>
      <h5>- Property.SPDRP_CAPABILITIES</h5>
      <para>The function retrieves a bitwise OR of the following CM_DEVCAP_<i>Xxx </i> flags in a DWORD. The device capabilities that are represented by these flags correspond to the device capabilities that are represented by the members of the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-_device_capabilities">DEVICE_CAPABILITIES</a> structure. The CM_DEVCAP_Xxx constants are defined in <i>Cfgmgr32.h.</i></para>
      <list type="table">
        <listheader>
          <description>CM_DEVCAP_Xxx flag</description>
          <description>Corresponding DEVICE_CAPABILITIES structure member</description>
        </listheader>
        <item>
          <description>
            <para>CM_DEVCAP_LOCKSUPPORTED</para>
          </description>
          <description>
            <b>LockSupported </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_EJECTSUPPORTED</para>
          </description>
          <description>
            <b>EjectSupported </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_REMOVABLE</para>
          </description>
          <description>
            <b>Removable </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_DOCKDEVICE</para>
          </description>
          <description>
            <b>DockDevice </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_UNIQUEID</para>
          </description>
          <description>
            <b>UniqueID </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_SILENTINSTALL</para>
          </description>
          <description>
            <b>SilentInstall </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_RAWDEVICEOK</para>
          </description>
          <description>
            <b>RawDeviceOK </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_SURPRISEREMOVALOK</para>
          </description>
          <description>
            <b>SurpriseRemovalOK </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_HARDWAREDISABLED</para>
          </description>
          <description>
            <b>HardwareDisabled </b>
          </description>
        </item>
        <item>
          <description>
            <para>CM_DEVCAP_NONDYNAMIC</para>
          </description>
          <description>
            <b>NonDynamic</b>
          </description>
        </item>
      </list>
      <h5>- Property.SPDRP_CHARACTERISTICS</h5>
      <para>The function retrieves a bitwise OR of a device's characteristics flags in a DWORD. For a description of these flags, which are defined in <i>Wdm.h</i> and <i>Ntddk.h</i>, see the <i>DeviceCharacteristics</i> parameter of the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a> function.</para>
      <h5>- Property.SPDRP_CLASS</h5>
      <para>The function retrieves a REG_SZ string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> of a device.</para>
      <h5>- Property.SPDRP_CLASSGUID</h5>
      <para>The function retrieves a REG_SZ string that contains the GUID that represents the device setup class of a device.</para>
      <h5>- Property.SPDRP_COMPATIBLEIDS</h5>
      <para>The function retrieves a REG_MULTI_SZ string that contains the list of compatible IDs for a device. For information about compatible IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
      <h5>- Property.SPDRP_CONFIGFLAGS</h5>
      <para>The function retrieves a bitwise OR of a device's configuration flags in a DWORD value. The configuration flags are represented by the CONFIGFLAG_<i>Xxx</i> bitmasks that are defined in <i>Regstr.h</i>.</para>
      <h5>- Property.SPDRP_DEVICEDESC</h5>
      <para>The function retrieves a REG_SZ string that contains the description of a device.</para>
      <h5>- Property.SPDRP_DEVICE_POWER_DATA</h5>
      <para>(Windows XP and later) The function retrieves a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-cm_power_data_s">CM_POWER_DATA</a> structure that contains the device's power management information.</para>
      <h5>- Property.SPDRP_DEVTYPE</h5>
      <para>The function retrieves a DWORD value that represents the device's type. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>.</para>
      <h5>- Property.SPDRP_DRIVER</h5>
      <para>The function retrieves a string that identifies the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a> (sometimes called the <a href="https://docs.microsoft.com//windows-hardware/drivers/">driver key</a>). For more information about driver keys, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/registry-trees-and-keys">Registry Trees and Keys for Devices and Drivers</a>.</para>
      <h5>- Property.SPDRP_ENUMERATOR_NAME</h5>
      <para>The function retrieves a REG_SZ string that contains the name of the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">enumerator</a>.</para>
      <h5>- Property.SPDRP_EXCLUSIVE</h5>
      <para>The function retrieves a DWORD value that indicates whether a user can obtain exclusive use of the device. The returned value is one if exclusive use is allowed, or zero otherwise. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h5>- Property.SPDRP_FRIENDLYNAME</h5>
      <para>The function retrieves a REG_SZ string that contains the friendly name of a device.</para>
      <h5>- Property.SPDRP_HARDWAREID</h5>
      <para>The function retrieves a REG_MULTI_SZ string that contains the list of hardware IDs for a device. For information about hardware IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
      <h5>- Property.SPDRP_INSTALL_STATE</h5>
      <para>(Windows XP and later) The function retrieves a DWORD value that indicates the installation state of a device. The installation state is represented by one of the CM_INSTALL_STATE_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>. The CM_INSTALL_STATE_<i>Xxx</i> values correspond to the <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ne-wdm-_device_install_state">DEVICE_INSTALL_STATE</a> enumeration values.</para>
      <h5>- Property.SPDRP_LEGACYBUSTYPE</h5>
      <para>The function retrieves the device's legacy bus type as an INTERFACE_TYPE value (defined in <i>Wdm.h</i> and <i>Ntddk.h</i>).</para>
      <h5>- Property.SPDRP_LOCATION_INFORMATION</h5>
      <para>The function retrieves a REG_SZ string that contains the hardware location of a device.</para>
      <h5>- Property.SPDRP_LOCATION_PATHS</h5>
      <para>(Windows Server 2003 and later) The function retrieves a REG_MULTI_SZ string that represents the location of the device in the device tree.</para>
      <h5>- Property.SPDRP_LOWERFILTERS</h5>
      <para>The function retrieves a REG_MULTI_SZ string that contains the names of a device's lower-filter drivers.</para>
      <h5>- Property.SPDRP_MFG</h5>
      <para>The function retrieves a REG_SZ string that contains the name of the device manufacturer.</para>
      <h5>- Property.SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</h5>
      <para>The function retrieves a REG_SZ string that contains the name that is associated with the device's PDO. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>.</para>
      <h5>- Property.SPDRP_REMOVAL_POLICY</h5>
      <para>(Windows XP and later) The function retrieves the device's current removal policy as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h5>- Property.SPDRP_REMOVAL_POLICY_HW_DEFAULT</h5>
      <para>(Windows XP and later) The function retrieves the device's hardware-specified default removal policy as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h5>- Property.SPDRP_REMOVAL_POLICY_OVERRIDE</h5>
      <para>(Windows XP and later) The function retrieves the device's override removal policy (if it exists) from the registry, as a DWORD that contains one of the CM_REMOVAL_POLICY_<i>Xxx</i> values that are defined in <i>Cfgmgr32.h</i>.</para>
      <h5>- Property.SPDRP_SECURITY</h5>
      <para>The function retrieves a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/ntifs/ns-ntifs-_security_descriptor">SECURITY_DESCRIPTOR</a> structure for a device.</para>
      <h5>- Property.SPDRP_SECURITY_SDS</h5>
      <para>The function retrieves a REG_SZ string that contains the device's security descriptor. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h5>- Property.SPDRP_SERVICE</h5>
      <para>The function retrieves a REG_SZ string that contains the service name for a device.</para>
      <h5>- Property.SPDRP_UI_NUMBER</h5>
      <para>The function retrieves a DWORD value set to the value of the <b>UINumber</b> member of the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/ns-wdm-_device_capabilities">DEVICE_CAPABILITIES</a> structure.</para>
      <h5>- Property.SPDRP_UI_NUMBER_DESC_FORMAT</h5>
      <para>The function retrieves a format string (REG_SZ) used to display the <b>UINumber</b> value.</para>
      <h5>- Property.SPDRP_UPPERFILTERS</h5>
      <para>The function retrieves a REG_MULTI_SZ string that contains the names of a device's upper filter drivers.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiGetDeviceRegistryProperty</b> returns <b>TRUE</b> if the call was successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />. <b>SetupDiGetDeviceRegistryProperty</b> returns the ERROR_INVALID_DATA error code if the requested property does not exist for a device or if the property data is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDeviceRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iogetdeviceproperty">IoGetDeviceProperty</seealso>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiGetDriverInfoDetail - SetupDiGetDriverInfoDetailA">
    <summary>
      <para>The <b>SetupDiGetDriverInfoDetail</b> function retrieves driver information detail for a device information set or a particular device information element in the device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a driver information element for which to retrieve driver information.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element that represents the device for which to retrieve driver information. This parameter is optional and can be  <b>NULL</b>. If this parameter is specified, <b>SetupDiGetDriverInfoDetail</b> retrieves information about a driver in a driver list for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetDriverInfoDetail</b> retrieves information about a driver that is a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver information element that represents the driver for which to retrieve details. If <i>DeviceInfoData</i> is specified, the driver must be a member of the driver list for the device that is specified by <i>DeviceInfoData</i>. Otherwise, the driver must be a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoDetailData">
      <para>A pointer to an <see cref="SP_DRVINFO_DETAIL_DATA" /> structure that receives detailed information about the specified driver. If this parameter is not specified, <i>DriverInfoDetailDataSize</i> must be zero. If this parameter is specified, <i>DriverInfoDetailData.</i><b>cbSize</b> must be set to the value of <b>sizeof(</b>SP_DRVINFO_DETAIL_DATA<b>)</b> before it calls <b>SetupDiGetDriverInfoDetail</b>.</para>
      <para>
        <b>Note</b>  <i>DriverInfoDetailData.</i><b>cbSize</b> must not be set to the value of the <i>DriverInfoDetailDataSize </i> parameter<i>.</i></para>
    </param>
    <param name="DriverInfoDetailDataSize">
      <para>The size, in bytes, of the <i>DriverInfoDetailData</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of bytes required to store the detailed driver information. This value includes both the size of the structure and the additional bytes required for the variable-length character buffer at the end that holds the hardware ID list and the compatible ID list. The lists are in REG_MULTI_SZ format. For information about hardware and compatible IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the specified driver information member and the caller-supplied buffer are both valid, this function is guaranteed to fill in all static fields in the SP_DRVINFO_DETAIL_DATA structure and as many IDs as possible in the variable-length buffer at the end while still maintaining REG_MULTI_SZ format. In this case, the function returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER. If specified, <i>RequiredSize</i> contains the total number of bytes required for the structure with all IDs.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDriverInfoDetail as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiEnumDriverInfo" />
    <seealso cref="SetupDiGetSelectedDriver" />
  </member>
  <member name="Windows.SetupDiGetDriverInfoDetail - SetupDiGetDriverInfoDetailW">
    <summary>
      <para>The <b>SetupDiGetDriverInfoDetail</b> function retrieves driver information detail for a device information set or a particular device information element in the device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a driver information element for which to retrieve driver information.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element that represents the device for which to retrieve driver information. This parameter is optional and can be  <b>NULL</b>. If this parameter is specified, <b>SetupDiGetDriverInfoDetail</b> retrieves information about a driver in a driver list for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetDriverInfoDetail</b> retrieves information about a driver that is a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver information element that represents the driver for which to retrieve details. If <i>DeviceInfoData</i> is specified, the driver must be a member of the driver list for the device that is specified by <i>DeviceInfoData</i>. Otherwise, the driver must be a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoDetailData">
      <para>A pointer to an <see cref="SP_DRVINFO_DETAIL_DATA" /> structure that receives detailed information about the specified driver. If this parameter is not specified, <i>DriverInfoDetailDataSize</i> must be zero. If this parameter is specified, <i>DriverInfoDetailData.</i><b>cbSize</b> must be set to the value of <b>sizeof(</b>SP_DRVINFO_DETAIL_DATA<b>)</b> before it calls <b>SetupDiGetDriverInfoDetail</b>.</para>
      <para>
        <b>Note</b>  <i>DriverInfoDetailData.</i><b>cbSize</b> must not be set to the value of the <i>DriverInfoDetailDataSize </i> parameter<i>.</i></para>
    </param>
    <param name="DriverInfoDetailDataSize">
      <para>The size, in bytes, of the <i>DriverInfoDetailData</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable that receives the number of bytes required to store the detailed driver information. This value includes both the size of the structure and the additional bytes required for the variable-length character buffer at the end that holds the hardware ID list and the compatible ID list. The lists are in REG_MULTI_SZ format. For information about hardware and compatible IDs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-identification-strings">Device Identification Strings</a>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the specified driver information member and the caller-supplied buffer are both valid, this function is guaranteed to fill in all static fields in the SP_DRVINFO_DETAIL_DATA structure and as many IDs as possible in the variable-length buffer at the end while still maintaining REG_MULTI_SZ format. In this case, the function returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER. If specified, <i>RequiredSize</i> contains the total number of bytes required for the structure with all IDs.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDriverInfoDetail as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiEnumDriverInfo" />
    <seealso cref="SetupDiGetSelectedDriver" />
  </member>
  <member name="Windows.SetupDiGetDriverInstallParams - SetupDiGetDriverInstallParamsA">
    <summary>
      <para>The <b>SetupDiGetDriverInstallParams</b> function retrieves driver installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a driver information element that represents the driver for which to retrieve installation parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that contains a device information element that represents the device for which to retrieve installation parameters. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetDriverInstallParams</b> retrieves information about a driver that is a member of a driver list for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetDriverInstallParams</b> retrieves information about a driver  that is a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver information element that represents the driver for which to retrieve installation parameters. If <i>DeviceInfoData</i> is supplied, the driver must be a member of the driver list for the device that is specified by <i>DeviceInfoData</i>. Otherwise, the driver must be a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInstallParams">
      <para>A pointer to an <see cref="SP_DRVINSTALL_PARAMS" /> structure to receive the installation parameters for this driver.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDriverInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiSetDriverInstallParams" />
  </member>
  <member name="Windows.SetupDiGetDriverInstallParams - SetupDiGetDriverInstallParamsW">
    <summary>
      <para>The <b>SetupDiGetDriverInstallParams</b> function retrieves driver installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a driver information element that represents the driver for which to retrieve installation parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that contains a device information element that represents the device for which to retrieve installation parameters. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetDriverInstallParams</b> retrieves information about a driver that is a member of a driver list for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetDriverInstallParams</b> retrieves information about a driver  that is a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver information element that represents the driver for which to retrieve installation parameters. If <i>DeviceInfoData</i> is supplied, the driver must be a member of the driver list for the device that is specified by <i>DeviceInfoData</i>. Otherwise, the driver must be a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInstallParams">
      <para>A pointer to an <see cref="SP_DRVINSTALL_PARAMS" /> structure to receive the installation parameters for this driver.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetDriverInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiSetDriverInstallParams" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyName">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyName</b> function retrieves the friendly name associated with a hardware profile ID.</para>
    </summary>
    <param name="HwProfile">
      <para>The hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a string buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of characters required to retrieve the friendly name (including a NULL terminator).</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <see cref="SetupDiGetHwProfileFriendlyNameEx" /> to get the friendly name of a hardware profile ID on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
    <seealso cref="SetupDiGetHwProfileList" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyNameA">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyName</b> function retrieves the friendly name associated with a hardware profile ID.</para>
    </summary>
    <param name="HwProfile">
      <para>The hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a string buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of characters required to retrieve the friendly name (including a NULL terminator).</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <see cref="SetupDiGetHwProfileFriendlyNameEx" /> to get the friendly name of a hardware profile ID on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
    <seealso cref="SetupDiGetHwProfileList" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyNameEx">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyNameEx</b> function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.</para>
    </summary>
    <param name="HwProfile">
      <para>Supplies the hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a character buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable to receive the number of characters required to store the friendly name (including a NULL terminator). This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to NULL-terminated string that contains the name of a remote computer on which the hardware profile ID resides. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the hardware profile ID is on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyName" />
    <seealso cref="SetupDiGetHwProfileListEx" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyNameExA">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyNameEx</b> function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.</para>
    </summary>
    <param name="HwProfile">
      <para>Supplies the hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a character buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable to receive the number of characters required to store the friendly name (including a NULL terminator). This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to NULL-terminated string that contains the name of a remote computer on which the hardware profile ID resides. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the hardware profile ID is on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyName" />
    <seealso cref="SetupDiGetHwProfileListEx" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyNameEx">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyNameEx</b> function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.</para>
    </summary>
    <param name="HwProfile">
      <para>Supplies the hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a character buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable to receive the number of characters required to store the friendly name (including a NULL terminator). This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to NULL-terminated string that contains the name of a remote computer on which the hardware profile ID resides. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the hardware profile ID is on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyName" />
    <seealso cref="SetupDiGetHwProfileListEx" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyNameExW">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyNameEx</b> function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.</para>
    </summary>
    <param name="HwProfile">
      <para>Supplies the hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a character buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable to receive the number of characters required to store the friendly name (including a NULL terminator). This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to NULL-terminated string that contains the name of a remote computer on which the hardware profile ID resides. This parameter is optional and can be <b>NULL</b>. If <i>MachineName</i> is <b>NULL</b>, the hardware profile ID is on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyNameEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyName" />
    <seealso cref="SetupDiGetHwProfileListEx" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyName">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyName</b> function retrieves the friendly name associated with a hardware profile ID.</para>
    </summary>
    <param name="HwProfile">
      <para>The hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a string buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of characters required to retrieve the friendly name (including a NULL terminator).</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <see cref="SetupDiGetHwProfileFriendlyNameEx" /> to get the friendly name of a hardware profile ID on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
    <seealso cref="SetupDiGetHwProfileList" />
  </member>
  <member name="Windows.SetupDiGetHwProfileFriendlyNameW">
    <summary>
      <para>The <b>SetupDiGetHwProfileFriendlyName</b> function retrieves the friendly name associated with a hardware profile ID.</para>
    </summary>
    <param name="HwProfile">
      <para>The hardware profile ID associated with the friendly name to retrieve. If this parameter is 0, the friendly name for the current hardware profile is retrieved.</para>
    </param>
    <param name="FriendlyName">
      <para>A pointer to a string buffer to receive the friendly name.</para>
    </param>
    <param name="FriendlyNameSize">
      <para>The size, in characters, of the <i>FriendlyName</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of characters required to retrieve the friendly name (including a NULL terminator).</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <see cref="SetupDiGetHwProfileFriendlyNameEx" /> to get the friendly name of a hardware profile ID on a remote computer.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileFriendlyName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
    <seealso cref="SetupDiGetHwProfileList" />
  </member>
  <member name="Windows.SetupDiGetHwProfileList">
    <summary>
      <para>The <b>SetupDiGetHwProfileList</b> function retrieves a list of all currently defined hardware profile IDs.</para>
    </summary>
    <param name="HwProfileList">
      <para>A pointer to an array to receive the list of currently defined hardware profile IDs.</para>
    </param>
    <param name="HwProfileListSize">
      <para>The number of DWORDs in the <i>HwProfileList</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of hardware profiles currently defined. If the number is larger than <i>HwProfileListSize</i>, the list is truncated to fit the array size. The value returned in <i>RequiredSize</i> indicates the array size required to store the entire list of hardware profiles. In this case, the function fails and a call to <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER.</para>
    </param>
    <param name="CurrentlyActiveIndex">
      <para>A pointer to a variable of type DWORD that receives the index of the currently active hardware profile in the retrieved hardware profile list. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Call <see cref="SetupDiGetHwProfileListEx" /> to retrieve the hardware profile IDs for a remote computer.</para>
    </remarks>
    <seealso cref="SetupDiCreateDevRegKey" />
    <seealso cref="SetupDiOpenDevRegKey" />
  </member>
  <member name="Windows.SetupDiGetHwProfileListEx">
    <summary>
      <para>The <b>SetupDiGetHwProfileListEx</b> function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.</para>
    </summary>
    <param name="HwProfileList">
      <para>A pointer to an array to receive the list of currently defined hardware profile IDs.</para>
    </param>
    <param name="HwProfileListSize">
      <para>The number of DWORDs in the <i>HwProfileList</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of hardware profiles that are currently defined. If the number is larger than <i>HwProfileListSize</i>, the list is truncated to fit the array size. The value returned in <i>RequiredSize</i> indicates the array size required to store the entire list of hardware profiles.</para>
    </param>
    <param name="CurrentlyActiveIndex">
      <para>A pointer to a variable that receives the index of the currently active hardware profile in the retrieved hardware profile list. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system for which to retrieve the list of hardware profile IDs. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the list is retrieved for the local system.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />. If the required size is larger than <i>HwProfileListSize</i>, <b>SetupDiGetHwProfileListEx</b> returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
  </member>
  <member name="Windows.SetupDiGetHwProfileListExA">
    <summary>
      <para>The <b>SetupDiGetHwProfileListEx</b> function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.</para>
    </summary>
    <param name="HwProfileList">
      <para>A pointer to an array to receive the list of currently defined hardware profile IDs.</para>
    </param>
    <param name="HwProfileListSize">
      <para>The number of DWORDs in the <i>HwProfileList</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of hardware profiles that are currently defined. If the number is larger than <i>HwProfileListSize</i>, the list is truncated to fit the array size. The value returned in <i>RequiredSize</i> indicates the array size required to store the entire list of hardware profiles.</para>
    </param>
    <param name="CurrentlyActiveIndex">
      <para>A pointer to a variable that receives the index of the currently active hardware profile in the retrieved hardware profile list. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system for which to retrieve the list of hardware profile IDs. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the list is retrieved for the local system.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />. If the required size is larger than <i>HwProfileListSize</i>, <b>SetupDiGetHwProfileListEx</b> returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
  </member>
  <member name="Windows.SetupDiGetHwProfileListEx">
    <summary>
      <para>The <b>SetupDiGetHwProfileListEx</b> function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.</para>
    </summary>
    <param name="HwProfileList">
      <para>A pointer to an array to receive the list of currently defined hardware profile IDs.</para>
    </param>
    <param name="HwProfileListSize">
      <para>The number of DWORDs in the <i>HwProfileList</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of hardware profiles that are currently defined. If the number is larger than <i>HwProfileListSize</i>, the list is truncated to fit the array size. The value returned in <i>RequiredSize</i> indicates the array size required to store the entire list of hardware profiles.</para>
    </param>
    <param name="CurrentlyActiveIndex">
      <para>A pointer to a variable that receives the index of the currently active hardware profile in the retrieved hardware profile list. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system for which to retrieve the list of hardware profile IDs. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the list is retrieved for the local system.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />. If the required size is larger than <i>HwProfileListSize</i>, <b>SetupDiGetHwProfileListEx</b> returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
  </member>
  <member name="Windows.SetupDiGetHwProfileListExW">
    <summary>
      <para>The <b>SetupDiGetHwProfileListEx</b> function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.</para>
    </summary>
    <param name="HwProfileList">
      <para>A pointer to an array to receive the list of currently defined hardware profile IDs.</para>
    </param>
    <param name="HwProfileListSize">
      <para>The number of DWORDs in the <i>HwProfileList</i> buffer.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a variable of type DWORD that receives the number of hardware profiles that are currently defined. If the number is larger than <i>HwProfileListSize</i>, the list is truncated to fit the array size. The value returned in <i>RequiredSize</i> indicates the array size required to store the entire list of hardware profiles.</para>
    </param>
    <param name="CurrentlyActiveIndex">
      <para>A pointer to a variable that receives the index of the currently active hardware profile in the retrieved hardware profile list. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system for which to retrieve the list of hardware profile IDs. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the list is retrieved for the local system.</para>
    </param>
    <param name="Reserved">
      <para>Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by making a call to <see cref="GetLastError" />. If the required size is larger than <i>HwProfileListSize</i>, <b>SetupDiGetHwProfileListEx</b> returns <b>FALSE</b> and a call to <see cref="GetLastError" /> returns ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetHwProfileListEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetHwProfileFriendlyNameEx" />
  </member>
  <member name="Windows.SetupDiGetINFClass">
    <summary>
      <para>The <b>SetupDiGetINFClass</b> function returns the class of a specified device INF file.</para>
    </summary>
    <param name="InfName">
      <para>A pointer to a NULL-terminated string that supplies the name of a device INF file. This name can include a path. However, if just the file name is specified, the file is searched for in each directory that is listed in the <b>DevicePath</b> entry under the <b>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion</b> subkey of the registry. The maximum length in characters, including a NULL terminator, of a NULL-terminated INF file name is MAX_PATH.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to a variable of type GUID that receives the class GUID for the specified INF file. If the INF file does not specify a class name, the function returns a GUID_NULL structure. Call <see cref="SetupDiClassGuidsFromName" /> to determine whether one or more classes with this name are already installed.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives a NULL-terminated string that contains the name of the class for the specified INF file. If the INF file does not specify a class name but does specify a GUID, this buffer receives the name that is retrieved by calling <see cref="SetupDiClassNameFromGuid" />. However, if <b>SetupDiClassNameFromGuid</b> cannot retrieve a class name (for example, the class is not installed), it returns an empty string.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum length of a NULL-terminated class name, in characters, is MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the number of characters that are required to store the class name, including a terminating <b>NULL</b>. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Do not use this function with INF files for Windows 9x or Millennium Edition.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetINFClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuid" />
    <seealso cref="SetupDiGetClassDescription" />
  </member>
  <member name="Windows.SetupDiGetINFClassA">
    <summary>
      <para>The <b>SetupDiGetINFClass</b> function returns the class of a specified device INF file.</para>
    </summary>
    <param name="InfName">
      <para>A pointer to a NULL-terminated string that supplies the name of a device INF file. This name can include a path. However, if just the file name is specified, the file is searched for in each directory that is listed in the <b>DevicePath</b> entry under the <b>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion</b> subkey of the registry. The maximum length in characters, including a NULL terminator, of a NULL-terminated INF file name is MAX_PATH.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to a variable of type GUID that receives the class GUID for the specified INF file. If the INF file does not specify a class name, the function returns a GUID_NULL structure. Call <see cref="SetupDiClassGuidsFromName" /> to determine whether one or more classes with this name are already installed.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives a NULL-terminated string that contains the name of the class for the specified INF file. If the INF file does not specify a class name but does specify a GUID, this buffer receives the name that is retrieved by calling <see cref="SetupDiClassNameFromGuid" />. However, if <b>SetupDiClassNameFromGuid</b> cannot retrieve a class name (for example, the class is not installed), it returns an empty string.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum length of a NULL-terminated class name, in characters, is MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the number of characters that are required to store the class name, including a terminating <b>NULL</b>. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Do not use this function with INF files for Windows 9x or Millennium Edition.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetINFClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuid" />
    <seealso cref="SetupDiGetClassDescription" />
  </member>
  <member name="Windows.SetupDiGetINFClass">
    <summary>
      <para>The <b>SetupDiGetINFClass</b> function returns the class of a specified device INF file.</para>
    </summary>
    <param name="InfName">
      <para>A pointer to a NULL-terminated string that supplies the name of a device INF file. This name can include a path. However, if just the file name is specified, the file is searched for in each directory that is listed in the <b>DevicePath</b> entry under the <b>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion</b> subkey of the registry. The maximum length in characters, including a NULL terminator, of a NULL-terminated INF file name is MAX_PATH.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to a variable of type GUID that receives the class GUID for the specified INF file. If the INF file does not specify a class name, the function returns a GUID_NULL structure. Call <see cref="SetupDiClassGuidsFromName" /> to determine whether one or more classes with this name are already installed.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives a NULL-terminated string that contains the name of the class for the specified INF file. If the INF file does not specify a class name but does specify a GUID, this buffer receives the name that is retrieved by calling <see cref="SetupDiClassNameFromGuid" />. However, if <b>SetupDiClassNameFromGuid</b> cannot retrieve a class name (for example, the class is not installed), it returns an empty string.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum length of a NULL-terminated class name, in characters, is MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the number of characters that are required to store the class name, including a terminating <b>NULL</b>. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Do not use this function with INF files for Windows 9x or Millennium Edition.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetINFClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuid" />
    <seealso cref="SetupDiGetClassDescription" />
  </member>
  <member name="Windows.SetupDiGetINFClassW">
    <summary>
      <para>The <b>SetupDiGetINFClass</b> function returns the class of a specified device INF file.</para>
    </summary>
    <param name="InfName">
      <para>A pointer to a NULL-terminated string that supplies the name of a device INF file. This name can include a path. However, if just the file name is specified, the file is searched for in each directory that is listed in the <b>DevicePath</b> entry under the <b>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion</b> subkey of the registry. The maximum length in characters, including a NULL terminator, of a NULL-terminated INF file name is MAX_PATH.</para>
    </param>
    <param name="ClassGuid">
      <para>A pointer to a variable of type GUID that receives the class GUID for the specified INF file. If the INF file does not specify a class name, the function returns a GUID_NULL structure. Call <see cref="SetupDiClassGuidsFromName" /> to determine whether one or more classes with this name are already installed.</para>
    </param>
    <param name="ClassName">
      <para>A pointer to a buffer that receives a NULL-terminated string that contains the name of the class for the specified INF file. If the INF file does not specify a class name but does specify a GUID, this buffer receives the name that is retrieved by calling <see cref="SetupDiClassNameFromGuid" />. However, if <b>SetupDiClassNameFromGuid</b> cannot retrieve a class name (for example, the class is not installed), it returns an empty string.</para>
    </param>
    <param name="ClassNameSize">
      <para>The size, in characters, of the buffer that is pointed to by the <i>ClassName</i> parameter. The maximum length of a NULL-terminated class name, in characters, is MAX_CLASS_NAME_LEN.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the number of characters that are required to store the class name, including a terminating <b>NULL</b>. This pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Do not use this function with INF files for Windows 9x or Millennium Edition.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetINFClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiBuildClassInfoList" />
    <seealso cref="SetupDiClassGuidsFromName" />
    <seealso cref="SetupDiClassNameFromGuid" />
    <seealso cref="SetupDiGetClassDescription" />
  </member>
  <member name="Windows.SetupDiGetSelectedDevice">
    <summary>
      <para>The <b>SetupDiGetSelectedDevice</b> function retrieves the selected device information element in a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to retrieve the selected device information element.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that receives information about the selected device information element for <i>DeviceInfoSet</i>. The caller must set <i>DeviceInfoData.</i><b>cbSize</b> to <b>sizeof</b>(SP_DEVINFO_DATA). If a device is currently not selected, the function fails and a call to <see cref="GetLastError" /> returns ERROR_NO_DEVICE_SELECTED.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiGetSelectedDevice</b> is usually used by an installation wizard.</para>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiSetSelectedDevice" />
  </member>
  <member name="Windows.SetupDiGetSelectedDriver - SetupDiGetSelectedDriverA">
    <summary>
      <para>The <b>SetupDiGetSelectedDriver</b> function retrieves the selected driver for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to retrieve a selected driver.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element that represents the device in <i>DeviceInfoSet</i> for which to retrieve the selected driver. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetSelectedDriver</b> retrieves the selected driver for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetSelectedDriver</b> retrieves the selected class driver in the global class driver list that is associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that receives information about the selected driver.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If a driver has not been selected for the specified device instance, the logged error is ERROR_NO_DRIVER_SELECTED.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetSelectedDriver as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiSetSelectedDriver" />
  </member>
  <member name="Windows.SetupDiGetSelectedDriver - SetupDiGetSelectedDriverW">
    <summary>
      <para>The <b>SetupDiGetSelectedDriver</b> function retrieves the selected driver for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to retrieve a selected driver.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element that represents the device in <i>DeviceInfoSet</i> for which to retrieve the selected driver. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiGetSelectedDriver</b> retrieves the selected driver for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiGetSelectedDriver</b> retrieves the selected class driver in the global class driver list that is associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that receives information about the selected driver.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />. If a driver has not been selected for the specified device instance, the logged error is ERROR_NO_DRIVER_SELECTED.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiGetSelectedDriver as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiSetSelectedDriver" />
  </member>
  <member name="Windows.SetupDiInstallClass">
    <summary>
      <para>The <b>SetupDiInstallClass</b> function installs the <b>ClassInstall32</b> section of the specified INF file.</para>
    </summary>
    <param name="hwndParent">
      <para>The handle to the parent window for any user interface that is used to install this class. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="InfFileName">
      <para>A pointer to a NULL-terminated string that contains the name of the INF file that contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 section</a>.</para>
    </param>
    <param name="Flags">
      <para>These flags control the installation process. Can be a combination of the following:</para>
      <h4>DI_NOVCP</h4>
      <para>Set this flag if <i>FileQueue</i> is supplied. DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function (described in Microsoft Windows SDK documentation) not to create a queue of its own and to use the caller-supplied queue instead. If this flag is set, files are not copied just queued.</para>
      <h4>DI_NOBROWSE</h4>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_FORCECOPY</h4>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_QUIETINSTALL</h4>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <param name="FileQueue">
      <para>If the DI_NOVCP flag is set, this parameter supplies a handle to a file queue where file operations should be queued but not committed.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>This function is called by a class installer when it installs a device of a new device class.</para>
      <para>To install an interface class or a device class, use <see cref="SetupDiInstallClassEx" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiInstallClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallClassEx" />
  </member>
  <member name="Windows.SetupDiInstallClassA">
    <summary>
      <para>The <b>SetupDiInstallClass</b> function installs the <b>ClassInstall32</b> section of the specified INF file.</para>
    </summary>
    <param name="hwndParent">
      <para>The handle to the parent window for any user interface that is used to install this class. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="InfFileName">
      <para>A pointer to a NULL-terminated string that contains the name of the INF file that contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 section</a>.</para>
    </param>
    <param name="Flags">
      <para>These flags control the installation process. Can be a combination of the following:</para>
      <h4>DI_NOVCP</h4>
      <para>Set this flag if <i>FileQueue</i> is supplied. DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function (described in Microsoft Windows SDK documentation) not to create a queue of its own and to use the caller-supplied queue instead. If this flag is set, files are not copied just queued.</para>
      <h4>DI_NOBROWSE</h4>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_FORCECOPY</h4>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_QUIETINSTALL</h4>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <param name="FileQueue">
      <para>If the DI_NOVCP flag is set, this parameter supplies a handle to a file queue where file operations should be queued but not committed.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>This function is called by a class installer when it installs a device of a new device class.</para>
      <para>To install an interface class or a device class, use <see cref="SetupDiInstallClassEx" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiInstallClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallClassEx" />
  </member>
  <member name="Windows.SetupDiInstallClassEx - SetupDiInstallClassExA">
    <summary>
      <para>The <b>SetupDiInstallClassEx</b> function installs a class installer or an interface class.</para>
    </summary>
    <param name="hwndParent">
      <para>The handle to the parent window for any user interface that is used to install this class. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="InfFileName">
      <para>A pointer to a NULL-terminated string that contains the name of an INF file. This parameter is optional and can be <b>NULL</b>. If this function is being used to install a class installer, the INF file contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 section</a> and this parameter must not be <b>NULL</b>.</para>
      <para>If this function is being used to install an interface class, the INF file contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-interfaceinstall32-section">INF InterfaceInstall32 section</a>.</para>
    </param>
    <param name="Flags">
      <para>A value of type DWORD that controls the installation process. <i>Flags</i> can be zero or a bitwise OR of the following values:</para>
      <h4>DI_NOVCP</h4>
      <para>Set this flag if <i>FileQueue</i> is supplied.</para>
      <para>DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function not to create a queue of its own and to use the caller-supplied queue instead.</para>
      <para>If this flag is set, files are not copied just queued.</para>
      <para>For more information about the <b>SetupInstallFromInfSection</b> function, see the Microsoft Windows SDK documentation.</para>
      <h4>DI_NOBROWSE</h4>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_FORCECOPY</h4>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_QUIETINSTALL</h4>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <param name="FileQueue">
      <para>If the DI_NOVCP flag is set, this parameter supplies a handle to a file queue where file operations should be queued but not committed.</para>
    </param>
    <param name="InterfaceClassGuid">
      <para>A pointer to a GUID that identifies the interface class to be installed. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, this function is being used to install the interface class represented by the GUID. If this parameter is <b>NULL</b>, this function is being used to install a class installer.</para>
    </param>
    <param name="Reserved1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="Reserved2">
      <para>Reserved. Must be zero.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiInstallClassEx</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>
        <b>SetupDiInstallClassEx</b> is typically called by a class installer to install a new <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a new <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
      <para>
        <b>Note</b>  An interface class can also be installed automatically by calling <see cref="SetupDiInstallDeviceInterfaces" /> to install the device interfaces for a device.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiInstallClassEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallDeviceInterfaces" />
  </member>
  <member name="Windows.SetupDiInstallClassEx - SetupDiInstallClassExW">
    <summary>
      <para>The <b>SetupDiInstallClassEx</b> function installs a class installer or an interface class.</para>
    </summary>
    <param name="hwndParent">
      <para>The handle to the parent window for any user interface that is used to install this class. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="InfFileName">
      <para>A pointer to a NULL-terminated string that contains the name of an INF file. This parameter is optional and can be <b>NULL</b>. If this function is being used to install a class installer, the INF file contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 section</a> and this parameter must not be <b>NULL</b>.</para>
      <para>If this function is being used to install an interface class, the INF file contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-interfaceinstall32-section">INF InterfaceInstall32 section</a>.</para>
    </param>
    <param name="Flags">
      <para>A value of type DWORD that controls the installation process. <i>Flags</i> can be zero or a bitwise OR of the following values:</para>
      <h4>DI_NOVCP</h4>
      <para>Set this flag if <i>FileQueue</i> is supplied.</para>
      <para>DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function not to create a queue of its own and to use the caller-supplied queue instead.</para>
      <para>If this flag is set, files are not copied just queued.</para>
      <para>For more information about the <b>SetupInstallFromInfSection</b> function, see the Microsoft Windows SDK documentation.</para>
      <h4>DI_NOBROWSE</h4>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_FORCECOPY</h4>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_QUIETINSTALL</h4>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <param name="FileQueue">
      <para>If the DI_NOVCP flag is set, this parameter supplies a handle to a file queue where file operations should be queued but not committed.</para>
    </param>
    <param name="InterfaceClassGuid">
      <para>A pointer to a GUID that identifies the interface class to be installed. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, this function is being used to install the interface class represented by the GUID. If this parameter is <b>NULL</b>, this function is being used to install a class installer.</para>
    </param>
    <param name="Reserved1">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="Reserved2">
      <para>Reserved. Must be zero.</para>
      <h5>- Flags.DI_FORCECOPY</h5>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h5>- Flags.DI_NOBROWSE</h5>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h5>- Flags.DI_NOVCP</h5>
      <para>Set this flag if <i>FileQueue</i> is supplied.</para>
      <para>DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function not to create a queue of its own and to use the caller-supplied queue instead.</para>
      <para>If this flag is set, files are not copied just queued.</para>
      <para>For more information about the <b>SetupInstallFromInfSection</b> function, see the Microsoft Windows SDK documentation.</para>
      <h5>- Flags.DI_QUIETINSTALL</h5>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiInstallClassEx</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>
        <b>SetupDiInstallClassEx</b> is typically called by a class installer to install a new <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a new <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
      <para>
        <b>Note</b>  An interface class can also be installed automatically by calling <see cref="SetupDiInstallDeviceInterfaces" /> to install the device interfaces for a device.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiInstallClassEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallDeviceInterfaces" />
  </member>
  <member name="Windows.SetupDiInstallClass">
    <summary>
      <para>The <b>SetupDiInstallClass</b> function installs the <b>ClassInstall32</b> section of the specified INF file.</para>
    </summary>
    <param name="hwndParent">
      <para>The handle to the parent window for any user interface that is used to install this class. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="InfFileName">
      <para>A pointer to a NULL-terminated string that contains the name of the INF file that contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 section</a>.</para>
    </param>
    <param name="Flags">
      <para>These flags control the installation process. Can be a combination of the following:</para>
      <h4>DI_NOVCP</h4>
      <para>Set this flag if <i>FileQueue</i> is supplied. DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function (described in Microsoft Windows SDK documentation) not to create a queue of its own and to use the caller-supplied queue instead. If this flag is set, files are not copied just queued.</para>
      <h4>DI_NOBROWSE</h4>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_FORCECOPY</h4>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_QUIETINSTALL</h4>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <param name="FileQueue">
      <para>If the DI_NOVCP flag is set, this parameter supplies a handle to a file queue where file operations should be queued but not committed.</para>
      <h5>- Flags.DI_FORCECOPY</h5>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h5>- Flags.DI_NOBROWSE</h5>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h5>- Flags.DI_NOVCP</h5>
      <para>Set this flag if <i>FileQueue</i> is supplied. DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function (described in Microsoft Windows SDK documentation) not to create a queue of its own and to use the caller-supplied queue instead. If this flag is set, files are not copied just queued.</para>
      <h5>- Flags.DI_QUIETINSTALL</h5>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>This function is called by a class installer when it installs a device of a new device class.</para>
      <para>To install an interface class or a device class, use <see cref="SetupDiInstallClassEx" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiInstallClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallClassEx" />
  </member>
  <member name="Windows.SetupDiInstallClassW">
    <summary>
      <para>The <b>SetupDiInstallClass</b> function installs the <b>ClassInstall32</b> section of the specified INF file.</para>
    </summary>
    <param name="hwndParent">
      <para>The handle to the parent window for any user interface that is used to install this class. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="InfFileName">
      <para>A pointer to a NULL-terminated string that contains the name of the INF file that contains an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 section</a>.</para>
    </param>
    <param name="Flags">
      <para>These flags control the installation process. Can be a combination of the following:</para>
      <h4>DI_NOVCP</h4>
      <para>Set this flag if <i>FileQueue</i> is supplied. DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function (described in Microsoft Windows SDK documentation) not to create a queue of its own and to use the caller-supplied queue instead. If this flag is set, files are not copied just queued.</para>
      <h4>DI_NOBROWSE</h4>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_FORCECOPY</h4>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h4>DI_QUIETINSTALL</h4>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <param name="FileQueue">
      <para>If the DI_NOVCP flag is set, this parameter supplies a handle to a file queue where file operations should be queued but not committed.</para>
      <h5>- Flags.DI_FORCECOPY</h5>
      <para>Set this flag to always copy files, even if they are already present on the user's computer. If the caller supplies a file queue, this flag is ignored.</para>
      <h5>- Flags.DI_NOBROWSE</h5>
      <para>Set this flag to disable browsing if a copy operation cannot find a specified file. If the caller supplies a file queue, this flag is ignored.</para>
      <h5>- Flags.DI_NOVCP</h5>
      <para>Set this flag if <i>FileQueue</i> is supplied. DI_NOVCP instructs the <b>SetupInstallFromInfSection</b> function (described in Microsoft Windows SDK documentation) not to create a queue of its own and to use the caller-supplied queue instead. If this flag is set, files are not copied just queued.</para>
      <h5>- Flags.DI_QUIETINSTALL</h5>
      <para>Set this flag to suppress the user interface unless absolutely necessary. For example, do not display the progress dialog. If the caller supplies a file queue, this flag is ignored.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>This function is called by a class installer when it installs a device of a new device class.</para>
      <para>To install an interface class or a device class, use <see cref="SetupDiInstallClassEx" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiInstallClass as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallClassEx" />
  </member>
  <member name="Windows.SetupDiInstallDevice">
    <summary>
      <para>The <b>SetupDiInstallDevice</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevice">DIF_INSTALLDEVICE</a> installation request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local system that contains a device information element that represents the device to install.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This is an IN-OUT parameter because <i>DeviceInfoData.</i><b>DevInst</b> might be updated with a new handle value upon return.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiInstallDevice</b> installs a driver from the INF file. SetupAPI's definition of the "<i>driver</i>" is really a "<a href="https://docs.microsoft.com//windows-hardware/drivers/">driver node</a>." Therefore, when this function installs a driver, it also installs the items in the following list:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The service(s) for the device.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The driver files.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Device-specific co-installers (if any).</para>
          </description>
        </item>
        <item>
          <description>
            <para>Property-page providers (if any).</para>
          </description>
        </item>
        <item>
          <description>
            <para>Control-panel applets (if any).</para>
          </description>
        </item>
      </list>
      <para>This function also registers any required device interfaces.</para>
      <para>A successful installation includes, but is not limited to, the following steps:</para>
      <list type="bullet">
        <item>
          <description>
            <para>Create a <a href="https://docs.microsoft.com//windows-hardware/drivers/">driver key</a> in the registry and write appropriate entries (such as <b>InfPath</b> and <b>ProviderName</b>).</para>
          </description>
        </item>
        <item>
          <description>
            <para>Locate and process the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-section">INF DDInstall section</a> for the device. The section might be OS/architecture-specific. The <i>DDInstall</i> section's <b>AddReg</b> and <b>DelReg</b> entries are directed at the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a>. Locate and process the <i>DDInstall</i><b>.HW</b> section whose <b>AddReg</b> and <b>DelReg</b> entries are directed at the device's <a href="https://docs.microsoft.com//windows-hardware/drivers/">hardware key</a>. Locate and process the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-logconfigoverride-section">INF DDInstall.LogConfigOverride section</a>, if present, to supply an <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/hardware-resources">override configuration</a> for the device. Locate and process the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-services-section">INF DDInstall.Services section</a> to add services for the device (and potentially remove any old services that are no longer necessary).</para>
          </description>
        </item>
        <item>
          <description>
            <para>Copy the INF file to the system INF directory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Possibly perform the other file operations, based on flag settings in the device installation parameters.</para>
            <para>If the DI_NOFILECOPY flag and the DI_NOVCP flag are <i>clear</i>, perform any file operations specified in the <i>DDInstall </i> section. If the DI_NOVCP flag is set, queue any file operations.</para>
            <para>If the DI_NOFILECOPY flag is set, do not copy the files. This flag might be set if, for example, a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevicefiles">DIF_INSTALLDEVICEFILES</a> operation was already performed for this device installation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Load the drivers for the device. This includes the function driver and any upper or lower-filter drivers.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Call the drivers' <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nc-wdm-driver_add_device">AddDevice</a> routines.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Start the device by sending an  <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/irp-mn-start-device">IRP_MN_START_DEVICE</a> I/O request packet (IRP).</para>
          </description>
        </item>
      </list>
      <para>Windows does not start the device if the DI_NEEDRESTART, DI_NEEDREBOOT, or DI_DONOTCALLCONFIGMG flag is set in the <see cref="SP_DEVINSTALL_PARAMS" /> structure.</para>
      <para>A class installer should return ERROR_DI_DO_DEFAULT or call this function when handling a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevice">DIF_INSTALLDEVICE</a> request. This function performs many tasks for device installation and that list of tasks might be expanded in future releases. If a class installer performs device installation without calling this function, the class installer might not work correctly on future versions of the operating system.</para>
      <para>If Windows cannot locate an INF file for the device, it will send DIF_INSTALLDEVICE in an attempt to install a <a href="https://docs.microsoft.com//windows-hardware/drivers/">null driver</a>. <b>SetupDiInstallDevice</b> installs a null driver only if the device supports <a href="https://docs.microsoft.com//windows-hardware/drivers/">raw mode</a> or is a non-PnP device (reported by <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/ntddk/nf-ntddk-ioreportdetecteddevice">IoReportDetectedDevice</a>). For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevice">DIF_INSTALLDEVICE</a>.</para>
      <para>If the DI_FLAGSEX_SETFAILEDINSTALL flag is set in the <see cref="SP_DEVINSTALL_PARAMS" /> structure, <b>SetupDiInstallDevice</b> just sets the FAILEDINSTALL flag in the device's <b>ConfigFlags</b> registry value.</para>
      <para>
        <b>Note</b>  Only a <a href="https://docs.microsoft.com//windows-hardware/drivers/">class installer</a> should call <b>SetupDiInstallDevice</b> and only in those situations where the class installer must perform device installation operations after <b>SetupDiInstallDevice</b> completes the default device installation operation. In such situations, the class installer must directly call <b>SetupDiInstallDevice</b> when the installer processes a DIF_INSTALLDEVICE request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>The caller of <b>SetupDiInstallDevice</b> must be a member of the Administrators group.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevice">DIF_INSTALLDEVICE</seealso>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallDriverFiles" />
  </member>
  <member name="Windows.SetupDiInstallDeviceInterfaces">
    <summary>
      <para>The <b>SetupDiInstallDeviceInterfaces</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installinterfaces">DIF_INSTALLINTERFACES</a> installation request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to install interfaces. The device information set must contain only elements for the local system.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiInstallDeviceInterfaces</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, <b>FALSE</b> is returned and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiInstallDeviceInterfaces</b> processes each <b>AddInterface</b> entry in the <i>DDInstall</i>.<b>Interfaces</b> section of a device INF file and creates each interface by calling <see cref="SetupDiCreateDeviceInterface" />.</para>
      <para>The caller of <b>SetupDiInstallDeviceInterfaces</b> must be a member of the Administrators group.</para>
      <para>
        <b>Note</b>  Only a <a href="https://docs.microsoft.com//windows-hardware/drivers/">class installer</a> should call <b>SetupDiInstallDeviceInterfaces</b> and only in those situations where the class installer must perform device interface installation operations after <b>SetupDiInstallDeviceInterfaces</b> completes the default device interface installation operation. In such situations, the class installer must directly call <b>SetupDiInstallDeviceInterfaces</b> when the installer processes a DIF_INSTALLINTERFACES request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>For information about INF file format, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-file-sections-and-directives">INF File Sections and Directives</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installinterfaces">DIF_INSTALLINTERFACES</seealso>
    <seealso cref="SetupDiCreateDeviceInterface" />
  </member>
  <member name="Windows.SetupDiInstallDriverFiles">
    <summary>
      <para>The <b>SetupDiInstallDriverFiles</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevicefiles">DIF_INSTALLDEVICEFILES</a> installation request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device information element that represents the device for which to install files. The device information set must not contain remote elements.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiInstallDriverFiles</b> must be a member of the Administrators group if this function is being used to install files. However, if this function is being used to build up a file queue, membership in the Administrators group is not required.</para>
      <para>
        <b>Note</b>  Only a class installer should call <b>SetupDiInstallDriverFiles</b> and only in those situations where the class installer must perform driver file installation operations after <b>SetupDiInstallDriverFiles</b> completes the default driver file installation operation. In such situations, the class installer must directly call <b>SetupDiInstallDriverFiles</b> when the installer processes a DIF_INSTALLDEVICEFILES request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>The operation of <b>SetupDiInstallDriverFiles</b> is similar to the <see cref="SetupDiInstallDevice" /> function. However, this function performs only the file copy operations that are performed by <b>SetupDiInstallDevice</b>.</para>
      <para>A driver must be selected for the specified device information set or element before this function is called.</para>
      <para>This function processes the <b>CopyFiles</b>, <b>Delfiles</b>, and <b>Renfiles</b> entries in the selected INF file.</para>
      <para>The <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
    </remarks>
    <seealso cref="SetupDiCallClassInstaller" />
    <seealso cref="SetupDiInstallDevice" />
  </member>
  <member name="Windows.SetupDiLoadClassIcon">
    <summary>
      <para>The <b>SetupDiLoadClassIcon</b> function loads both the large and mini-icon for the specified class.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the class for which the icon(s) should be loaded.</para>
    </param>
    <param name="LargeIcon">
      <para>A pointer to an icon handle that receives the handle value for the loaded large icon for the specified class. This pointer is optional and can be <b>NULL</b>. If the pointer is <b>NULL</b>, the large icon is not loaded.</para>
    </param>
    <param name="MiniIconIndex">
      <para>A pointer to an INT-typed variable that receives the index of the mini-icon for the specified class. The mini-icon is stored in the device installer's mini-icon cache. The pointer is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The icons of the class are either predefined and loaded from the device installer's internal cache, or they are loaded directly from the class installer's executable. This function queries the registry value <b>ICON</b> in the specified class's section. If the <b>ICON</b> value is specified, it indicates which mini-icon to load.</para>
      <para>If the <b>ICON</b> value is negative, the absolute value represents a predefined icon in the class's registry. See <see cref="SetupDiDrawMiniIcon" /> for a list of the predefined mini-icons.</para>
      <para>If the <b>ICON</b> value is positive, it represents an icon in the class installer's executable image that will be extracted. The value 1 is reserved. This function also uses the <b>INSTALLER32</b> registry value and then the <b>ENUMPROPPAGES32</b> registry value to determine which executable image to extract the icons from. For more information about these registry values, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 Section</a>.</para>
      <para>When a caller is finished using the icon, the caller must call <b>DestroyIcon</b> (which is described in the Microsoft Windows SDK documentation).</para>
      <para>If the <i>LargeIcon </i> parameter is specified, but the <i>ClassGuid</i> parameter does not supply a valid class GUID or the <b>Icon</b> registry value of the class is not valid, <b>SetupDiLoadClassIcon</b> loads the default large icon, returns the handle for the large icon, and, if the <i>MiniIconIndex</i> parameter is specified, returns the index of the default mini-icon.</para>
    </remarks>
    <seealso cref="SetupDiDrawMiniIcon" />
    <seealso cref="SetupDiGetClassBitmapIndex" />
  </member>
  <member name="Windows.SetupDiLoadDeviceIcon">
    <summary>
      <para>The <b>SetupDiLoadDeviceIcon</b> function retrieves an icon for a specified device.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device information element that represents the device for which to retrieve an icon.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="cxIcon">
      <para>The width, in pixels, of the icon to be retrieved. Use the system metric index SM_CXICON to specify a default-sized icon or use the system metric index SM_CXSMICON to specify a small icon. The system metric indexes are defined in <i>Winuser.h</i>, and their associated values can be retrieved by a call to the <see cref="GetSystemMetrics" /> function. (The <b>GetSystemMetrics</b> function is documented in the Microsoft Windows SDK.)</para>
    </param>
    <param name="cyIcon">
      <para>The height, in pixels, of the icon to be retrieved. Use SM_CXICON to specify a default-sized icon or use SM_CXSMICON to specify a small icon.</para>
    </param>
    <param name="Flags">
      <para>Not used. Must set to zero.</para>
    </param>
    <param name="hIcon">
      <para>A pointer to a handle to an icon that receives a handle to the icon that this function retrieves. After the application that calls this function is finished using the icon, the application must call <see cref="DestroyIcon" /> to delete the icon. (<b>DestroyIcon</b> is documented in the Microsoft Windows SDK.)</para>
    </param>
    <returns>
      <para>
        <b>SetupDiLoadDeviceIcon</b> returns <b>TRUE</b> if the function succeeds in retrieving the icon for the specified device. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiLoadDeviceIcon</b> attempts to retrieve an icon for the device as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <para>If the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpkey-drvpkg-icon">DEVPKEY_DrvPkg_Icon</a> device property of the device includes a list of resource-identifier strings, the function attempts to retrieve the icon that is specified by the first resource-identifier string in the list.</para>
            <para>The <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">device property data type</a> of the DEVPKEY_DrvPkg_Icon device property is <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devprop-type-string-list">DEVPROP_TYPE_STRING_LIST</a>.</para>
            <para>The format of a resource-identifier string is</para>
            <code>[filepath\]filename,-resourceID
</code>
            <para>Where:</para>
            <list type="bullet">
              <item>
                <description>
                  <i>filepath,</i> followed by the backslash character ("\")<i>,</i> is optional and specifies a path of the file that contains the icon.</description>
              </item>
              <item>
                <description>
                  <i>FileName</i>, followed by the comma character (",") specifies the name of the file that contains the icon.</description>
              </item>
              <item>
                <description>
                  <i>ResourceID</i>, preceded by a dash character ("-"), specifies the resource ID of the icon.</description>
              </item>
            </list>
          </description>
        </item>
        <item>
          <description>
            <para>If the function cannot retrieve a device-specific icon, it will then attempt to retrieve the class icon for the device. For information about class icons, see <see cref="SetupDiLoadClassIcon" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If the function cannot retrieve the class icon for the device, it will then attempt to retrieve the icon for the Unknown <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a>, where the icon for the Unknown device setup class includes the image of a question mark (?).</para>
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/devprop-type-string-list">DEVPROP_TYPE_STRING_LIST</seealso>
    <seealso cref="SetupDiLoadClassIcon" />
  </member>
  <member name="Windows.SetupDiOpenClassRegKey">
    <summary>
      <para>The <b>SetupDiOpenClassRegKey</b> function opens the setup class registry key or a specific class's subkey.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the setup class whose key is to be opened. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the root of the setup class tree (<b>HKLM\SYSTEM\CurrentControlSet\Control\Class</b>) is opened.</para>
    </param>
    <param name="samDesired">
      <para>The registry security access for the key to be opened. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</para>
    </param>
    <returns>
      <para>If the function is successful, it returns a handle to an opened registry key where information about this setup class can be stored/retrieved.</para>
      <para>If the function fails, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Depending on the value that is passed in the <i>samDesired</i> parameter, it might be necessary for the caller of this function to be a member of the Administrators group.</para>
      <para>This function does not create a registry key if it does not already exist.</para>
      <para>The handle returned from this function must be closed by calling <see cref="RegCloseKey" />.</para>
      <para>To open the interface class registry key or a specific interface class subkey, call <see cref="SetupDiOpenClassRegKeyEx" />.</para>
    </remarks>
    <seealso cref="SetupDiOpenClassRegKeyEx" />
    <seealso cref="SetupDiOpenDevRegKey" />
  </member>
  <member name="Windows.SetupDiOpenClassRegKeyEx - SetupDiOpenClassRegKeyExA">
    <summary>
      <para>The <b>SetupDiOpenClassRegKeyEx</b> function opens the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> registry key, the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a> registry key, or a specific class's subkey. This function opens the specified key on the local computer or on a remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the class whose registry key is to be opened. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the root of the class tree (<b>HKLM\SYSTEM\CurrentControlSet\Control\Class</b>) is opened.</para>
    </param>
    <param name="samDesired">
      <para>The registry security access for the key to be opened. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</para>
    </param>
    <param name="Flags">
      <para>The type of registry key to be opened, which is specified by one of the following:</para>
      <h4>DIOCR_INSTALLER</h4>
      <para>Open a setup class key. If <i>ClassGuid</i> is <b>NULL</b>, open the root key of the class installer branch.</para>
      <h4>DIOCR_INTERFACE</h4>
      <para>Open an interface class key. If <i>ClassGuid</i> is <b>NULL</b>, open the root key of the interface class branch.</para>
    </param>
    <param name="MachineName">
      <para>Optionally points to a string that contains the name of a remote computer on which to open the specified key.</para>
    </param>
    <param name="Reserved">
      <para>Reserved. Must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenClassRegKeyEx</b> returns a handle to an opened registry key where information about this setup class can be stored/retrieved.</para>
      <para>If the function fails, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Depending on the value that is passed in the <i>samDesired</i> parameter, it might be necessary for the caller of this function to be a member of the Administrators group.</para>
      <para>
        <b>SetupDiOpenClassRegKeyEx</b> does not create a registry key if it does not already exist.</para>
      <para>Callers of this function must close the handle returned from this function by calling <see cref="RegCloseKey" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenClassRegKeyEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInterfaceRegKey" />
    <seealso cref="SetupDiOpenDevRegKey" />
  </member>
  <member name="Windows.SetupDiOpenClassRegKeyEx - SetupDiOpenClassRegKeyExW">
    <summary>
      <para>The <b>SetupDiOpenClassRegKeyEx</b> function opens the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> registry key, the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a> registry key, or a specific class's subkey. This function opens the specified key on the local computer or on a remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID of the class whose registry key is to be opened. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the root of the class tree (<b>HKLM\SYSTEM\CurrentControlSet\Control\Class</b>) is opened.</para>
    </param>
    <param name="samDesired">
      <para>The registry security access for the key to be opened. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</para>
    </param>
    <param name="Flags">
      <para>The type of registry key to be opened, which is specified by one of the following:</para>
      <h4>DIOCR_INSTALLER</h4>
      <para>Open a setup class key. If <i>ClassGuid</i> is <b>NULL</b>, open the root key of the class installer branch.</para>
      <h4>DIOCR_INTERFACE</h4>
      <para>Open an interface class key. If <i>ClassGuid</i> is <b>NULL</b>, open the root key of the interface class branch.</para>
    </param>
    <param name="MachineName">
      <para>Optionally points to a string that contains the name of a remote computer on which to open the specified key.</para>
    </param>
    <param name="Reserved">
      <para>Reserved. Must be <b>NULL</b>.</para>
      <h5>- Flags.DIOCR_INSTALLER</h5>
      <para>Open a setup class key. If <i>ClassGuid</i> is <b>NULL</b>, open the root key of the class installer branch.</para>
      <h5>- Flags.DIOCR_INTERFACE</h5>
      <para>Open an interface class key. If <i>ClassGuid</i> is <b>NULL</b>, open the root key of the interface class branch.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenClassRegKeyEx</b> returns a handle to an opened registry key where information about this setup class can be stored/retrieved.</para>
      <para>If the function fails, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Depending on the value that is passed in the <i>samDesired</i> parameter, it might be necessary for the caller of this function to be a member of the Administrators group.</para>
      <para>
        <b>SetupDiOpenClassRegKeyEx</b> does not create a registry key if it does not already exist.</para>
      <para>Callers of this function must close the handle returned from this function by calling <see cref="RegCloseKey" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenClassRegKeyEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInterfaceRegKey" />
    <seealso cref="SetupDiOpenDevRegKey" />
  </member>
  <member name="Windows.SetupDiOpenDeviceInfo">
    <summary>
      <para>The <b>SetupDiOpenDeviceInfo</b> function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to which <b>SetupDiOpenDeviceInfo</b> adds a device information element, if one does not already exist, for the device instance that is specified by <i>DeviceInstanceId</i>.</para>
    </param>
    <param name="DeviceInstanceId">
      <para>A pointer to a NULL-terminated string that supplies the device instance identifier of a device (for example, "Root*PNP0500\0000"). If <i>DeviceInstanceId</i> is <b>NULL</b> or references a zero-length string, <b>SetupDiOpenDeviceInfo</b> adds a device information element to the supplied device information set, if one does not already exist, for the root device in the device tree.</para>
    </param>
    <param name="hwndParent">
      <para>The handle to the top-level window to use for any user interface related to installing the device.</para>
    </param>
    <param name="OpenFlags">
      <para>A variable of DWORD type that controls how the device information element is opened. The value of this parameter can be one or more of the following:</para>
      <h4>DIOD_CANCEL_REMOVE</h4>
      <para>If this flag is specified and the device had been marked for pending removal, the operating system cancels the pending removal.</para>
      <h4>DIOD_INHERIT_CLASSDRVS</h4>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
      <para>If the device information element was already present, its class driver list, if any, is replaced with the inherited list.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a caller-supplied <see cref="SP_DEVINFO_DATA" /> structure that receives information about the device information element for the device instance that is specified by <i>DeviceInstanceId</i>. The caller must set <b>cbSize</b> to <b>sizeof(</b>SP_DEVINFO_DATA<b>)</b>. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenDeviceInfo</b> returns <b>TRUE</b> if it is successful. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If this device instance is being added to a set that has an associated class, the device class must be the same or the call will fail. In this case, a call to <see cref="GetLastError" /> returns ERROR_CLASS_MISMATCH.</para>
      <para>If the new device information element is successfully opened but the caller-supplied <i>DeviceInfoData</i> buffer is invalid, this function returns <b>FALSE</b>. In this case, a call to <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. However, the device information element is added as a new member of the set anyway.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenDeviceInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiDeleteDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInfo" />
  </member>
  <member name="Windows.SetupDiOpenDeviceInfoA">
    <summary>
      <para>The <b>SetupDiOpenDeviceInfo</b> function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to which <b>SetupDiOpenDeviceInfo</b> adds a device information element, if one does not already exist, for the device instance that is specified by <i>DeviceInstanceId</i>.</para>
    </param>
    <param name="DeviceInstanceId">
      <para>A pointer to a NULL-terminated string that supplies the device instance identifier of a device (for example, "Root*PNP0500\0000"). If <i>DeviceInstanceId</i> is <b>NULL</b> or references a zero-length string, <b>SetupDiOpenDeviceInfo</b> adds a device information element to the supplied device information set, if one does not already exist, for the root device in the device tree.</para>
    </param>
    <param name="hwndParent">
      <para>The handle to the top-level window to use for any user interface related to installing the device.</para>
    </param>
    <param name="OpenFlags">
      <para>A variable of DWORD type that controls how the device information element is opened. The value of this parameter can be one or more of the following:</para>
      <h4>DIOD_CANCEL_REMOVE</h4>
      <para>If this flag is specified and the device had been marked for pending removal, the operating system cancels the pending removal.</para>
      <h4>DIOD_INHERIT_CLASSDRVS</h4>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
      <para>If the device information element was already present, its class driver list, if any, is replaced with the inherited list.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a caller-supplied <see cref="SP_DEVINFO_DATA" /> structure that receives information about the device information element for the device instance that is specified by <i>DeviceInstanceId</i>. The caller must set <b>cbSize</b> to <b>sizeof(</b>SP_DEVINFO_DATA<b>)</b>. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenDeviceInfo</b> returns <b>TRUE</b> if it is successful. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If this device instance is being added to a set that has an associated class, the device class must be the same or the call will fail. In this case, a call to <see cref="GetLastError" /> returns ERROR_CLASS_MISMATCH.</para>
      <para>If the new device information element is successfully opened but the caller-supplied <i>DeviceInfoData</i> buffer is invalid, this function returns <b>FALSE</b>. In this case, a call to <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. However, the device information element is added as a new member of the set anyway.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenDeviceInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiDeleteDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInfo" />
  </member>
  <member name="Windows.SetupDiOpenDeviceInfo">
    <summary>
      <para>The <b>SetupDiOpenDeviceInfo</b> function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to which <b>SetupDiOpenDeviceInfo</b> adds a device information element, if one does not already exist, for the device instance that is specified by <i>DeviceInstanceId</i>.</para>
    </param>
    <param name="DeviceInstanceId">
      <para>A pointer to a NULL-terminated string that supplies the device instance identifier of a device (for example, "Root*PNP0500\0000"). If <i>DeviceInstanceId</i> is <b>NULL</b> or references a zero-length string, <b>SetupDiOpenDeviceInfo</b> adds a device information element to the supplied device information set, if one does not already exist, for the root device in the device tree.</para>
    </param>
    <param name="hwndParent">
      <para>The handle to the top-level window to use for any user interface related to installing the device.</para>
    </param>
    <param name="OpenFlags">
      <para>A variable of DWORD type that controls how the device information element is opened. The value of this parameter can be one or more of the following:</para>
      <h4>DIOD_CANCEL_REMOVE</h4>
      <para>If this flag is specified and the device had been marked for pending removal, the operating system cancels the pending removal.</para>
      <h4>DIOD_INHERIT_CLASSDRVS</h4>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
      <para>If the device information element was already present, its class driver list, if any, is replaced with the inherited list.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a caller-supplied <see cref="SP_DEVINFO_DATA" /> structure that receives information about the device information element for the device instance that is specified by <i>DeviceInstanceId</i>. The caller must set <b>cbSize</b> to <b>sizeof(</b>SP_DEVINFO_DATA<b>)</b>. This parameter is optional and can be <b>NULL</b>.</para>
      <h5>- OpenFlags.DIOD_CANCEL_REMOVE</h5>
      <para>If this flag is specified and the device had been marked for pending removal, the operating system cancels the pending removal.</para>
      <h5>- OpenFlags.DIOD_INHERIT_CLASSDRVS</h5>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
      <para>If the device information element was already present, its class driver list, if any, is replaced with the inherited list.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenDeviceInfo</b> returns <b>TRUE</b> if it is successful. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If this device instance is being added to a set that has an associated class, the device class must be the same or the call will fail. In this case, a call to <see cref="GetLastError" /> returns ERROR_CLASS_MISMATCH.</para>
      <para>If the new device information element is successfully opened but the caller-supplied <i>DeviceInfoData</i> buffer is invalid, this function returns <b>FALSE</b>. In this case, a call to <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. However, the device information element is added as a new member of the set anyway.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenDeviceInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiDeleteDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInfo" />
  </member>
  <member name="Windows.SetupDiOpenDeviceInfoW">
    <summary>
      <para>The <b>SetupDiOpenDeviceInfo</b> function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> to which <b>SetupDiOpenDeviceInfo</b> adds a device information element, if one does not already exist, for the device instance that is specified by <i>DeviceInstanceId</i>.</para>
    </param>
    <param name="DeviceInstanceId">
      <para>A pointer to a NULL-terminated string that supplies the device instance identifier of a device (for example, "Root*PNP0500\0000"). If <i>DeviceInstanceId</i> is <b>NULL</b> or references a zero-length string, <b>SetupDiOpenDeviceInfo</b> adds a device information element to the supplied device information set, if one does not already exist, for the root device in the device tree.</para>
    </param>
    <param name="hwndParent">
      <para>The handle to the top-level window to use for any user interface related to installing the device.</para>
    </param>
    <param name="OpenFlags">
      <para>A variable of DWORD type that controls how the device information element is opened. The value of this parameter can be one or more of the following:</para>
      <h4>DIOD_CANCEL_REMOVE</h4>
      <para>If this flag is specified and the device had been marked for pending removal, the operating system cancels the pending removal.</para>
      <h4>DIOD_INHERIT_CLASSDRVS</h4>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
      <para>If the device information element was already present, its class driver list, if any, is replaced with the inherited list.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to a caller-supplied <see cref="SP_DEVINFO_DATA" /> structure that receives information about the device information element for the device instance that is specified by <i>DeviceInstanceId</i>. The caller must set <b>cbSize</b> to <b>sizeof(</b>SP_DEVINFO_DATA<b>)</b>. This parameter is optional and can be <b>NULL</b>.</para>
      <h5>- OpenFlags.DIOD_CANCEL_REMOVE</h5>
      <para>If this flag is specified and the device had been marked for pending removal, the operating system cancels the pending removal.</para>
      <h5>- OpenFlags.DIOD_INHERIT_CLASSDRVS</h5>
      <para>If this flag is specified, the resulting device information element inherits the class driver list, if any, associated with the device information set. In addition, if there is a selected driver for the device information set, that same driver is selected for the new device information element.</para>
      <para>If the device information element was already present, its class driver list, if any, is replaced with the inherited list.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenDeviceInfo</b> returns <b>TRUE</b> if it is successful. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If this device instance is being added to a set that has an associated class, the device class must be the same or the call will fail. In this case, a call to <see cref="GetLastError" /> returns ERROR_CLASS_MISMATCH.</para>
      <para>If the new device information element is successfully opened but the caller-supplied <i>DeviceInfoData</i> buffer is invalid, this function returns <b>FALSE</b>. In this case, a call to <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. However, the device information element is added as a new member of the set anyway.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenDeviceInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiDeleteDeviceInfo" />
    <seealso cref="SetupDiEnumDeviceInfo" />
  </member>
  <member name="Windows.SetupDiOpenDeviceInterface - SetupDiOpenDeviceInterfaceA">
    <summary>
      <para>The <b>SetupDiOpenDeviceInterface</b> function retrieves information about a device interface and adds the interface to the specified device information set for a local system or a remote system.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains, or will contain, a device information element that represents the device that supports the interface to open.</para>
    </param>
    <param name="DevicePath">
      <para>A pointer to a NULL-terminated string that supplies the name of the device interface to be opened. This name is a Win32 device path that is typically received in a PnP notification structure or obtained by a previous call to <see cref="SetupDiEnumDeviceInterfaces" /> and its related functions.</para>
    </param>
    <param name="OpenFlags">
      <para>Flags that determine how the device interface element is to be opened. The only valid flag is as follows:</para>
      <h4>DIODI_NO_ADD</h4>
      <para>Specifies that the device information element for the underlying device will not be created if that element is not already present in the specified <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to a caller-initialized  <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that receives the requested interface data. This pointer is optional and can be <b>NULL</b>. If a buffer is supplied, the caller must set the <b>cbSize</b> member of the structure to <b>sizeof(</b>SP_DEVICE_INTERFACE_DATA<b>)</b> before calling <b>SetupDiOpenDeviceInterface</b>. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenDeviceInterface</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, it returns <b>FALSE</b> and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If a device interface element for the interface already exists in <i>DeviceInfoSet</i>, <b>SetupDiOpenDeviceInterface</b> updates the flags. Therefore, this function can be used to update the flags for a device interface. For example, an interface might have been inactive when it was first opened, but has subsequently become active. If the device information element for the underlying device is not already present in <i>DeviceInfoSet</i>, this function creates one and adds it to <i>DeviceInfoSet</i>.</para>
      <para>If the function successfully opens the new device interface but the caller did not supply a valid structure in the <i>DeviceInterfaceData</i> parameter, the function will return <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INVALID_USER_BUFFER. However, in this situation, <b>SetupDiOpenDeviceInterface</b> does add the requested interface to the device information set.</para>
      <para>If the new device interface is successfully opened, but the caller-supplied <i>DeviceInterfaceData</i> buffer is invalid, this function returns <b>FALSE</b> and <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. The caller's buffer error does not prevent the interface from being opened.</para>
      <para>If the DIODI_NO_ADD flag is specified for the <i>OpenFlags</i> parameter, and a device information element for the underlying device is not already present in the specified <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>, this function returns <b>FALSE</b> and <see cref="GetLastError" /> returns ERROR_NO_SUCH_DEVICE_INTERFACE.</para>
      <para>When the application has finished using the information that <b>SetupDiOpenDeviceInterface</b> retrieved<b>,</b> the application must call <see cref="SetupDiDeleteDeviceInterfaceData" />.</para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-symbolic-link">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK</a> attribute can be passed in as the value of the <i>DevicePath</i> argument of the <b>SetupDiOpenDeviceInterface</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenDeviceInterface as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiDeleteDeviceInterfaceData" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
  </member>
  <member name="Windows.SetupDiOpenDeviceInterfaceRegKey">
    <summary>
      <para>The <b>SetupDiOpenDeviceInterfaceRegKey</b> function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device interface for which to open a registry subkey.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the device interface. This pointer can be returned by <see cref="SetupDiCreateDeviceInterface" /> or <see cref="SetupDiEnumDeviceInterfaces" />.</para>
    </param>
    <param name="Reserved">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="samDesired">
      <para>The requested registry security access to the registry subkey. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenDeviceInterfaceRegKey</b> returns a handle to the opened registry key. If the function fails, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Depending on the value that is passed in the <i>samDesired</i> parameter, it might be necessary for the caller of this function to be a member of the Administrators group.</para>
      <para>Close the handle returned from by function by calling <see cref="RegCloseKey" />.</para>
    </remarks>
    <seealso cref="SetupDiCreateDeviceInterface" />
    <seealso cref="SetupDiCreateDeviceInterfaceRegKey" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
  </member>
  <member name="Windows.SetupDiOpenDeviceInterface - SetupDiOpenDeviceInterfaceW">
    <summary>
      <para>The <b>SetupDiOpenDeviceInterface</b> function retrieves information about a device interface and adds the interface to the specified device information set for a local system or a remote system.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains, or will contain, a device information element that represents the device that supports the interface to open.</para>
    </param>
    <param name="DevicePath">
      <para>A pointer to a NULL-terminated string that supplies the name of the device interface to be opened. This name is a Win32 device path that is typically received in a PnP notification structure or obtained by a previous call to <see cref="SetupDiEnumDeviceInterfaces" /> and its related functions.</para>
    </param>
    <param name="OpenFlags">
      <para>Flags that determine how the device interface element is to be opened. The only valid flag is as follows:</para>
      <h4>DIODI_NO_ADD</h4>
      <para>Specifies that the device information element for the underlying device will not be created if that element is not already present in the specified <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to a caller-initialized  <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that receives the requested interface data. This pointer is optional and can be <b>NULL</b>. If a buffer is supplied, the caller must set the <b>cbSize</b> member of the structure to <b>sizeof(</b>SP_DEVICE_INTERFACE_DATA<b>)</b> before calling <b>SetupDiOpenDeviceInterface</b>. For more information, see the following <b>Remarks</b> section.</para>
      <h5>- OpenFlags.DIODI_NO_ADD</h5>
      <para>Specifies that the device information element for the underlying device will not be created if that element is not already present in the specified <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. For more information, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiOpenDeviceInterface</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, it returns <b>FALSE</b> and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If a device interface element for the interface already exists in <i>DeviceInfoSet</i>, <b>SetupDiOpenDeviceInterface</b> updates the flags. Therefore, this function can be used to update the flags for a device interface. For example, an interface might have been inactive when it was first opened, but has subsequently become active. If the device information element for the underlying device is not already present in <i>DeviceInfoSet</i>, this function creates one and adds it to <i>DeviceInfoSet</i>.</para>
      <para>If the function successfully opens the new device interface but the caller did not supply a valid structure in the <i>DeviceInterfaceData</i> parameter, the function will return <b>FALSE</b> and a subsequent call to <see cref="GetLastError" /> will return ERROR_INVALID_USER_BUFFER. However, in this situation, <b>SetupDiOpenDeviceInterface</b> does add the requested interface to the device information set.</para>
      <para>If the new device interface is successfully opened, but the caller-supplied <i>DeviceInterfaceData</i> buffer is invalid, this function returns <b>FALSE</b> and <see cref="GetLastError" /> returns ERROR_INVALID_USER_BUFFER. The caller's buffer error does not prevent the interface from being opened.</para>
      <para>If the DIODI_NO_ADD flag is specified for the <i>OpenFlags</i> parameter, and a device information element for the underlying device is not already present in the specified <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>, this function returns <b>FALSE</b> and <see cref="GetLastError" /> returns ERROR_NO_SUCH_DEVICE_INTERFACE.</para>
      <para>When the application has finished using the information that <b>SetupDiOpenDeviceInterface</b> retrieved<b>,</b> the application must call <see cref="SetupDiDeleteDeviceInterfaceData" />.</para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-devsource-attribute-source-type-vidcap-symbolic-link">MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK</a> attribute can be passed in as the value of the <i>DevicePath</i> argument of the <b>SetupDiOpenDeviceInterface</b> function.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiOpenDeviceInterface as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiDeleteDeviceInterfaceData" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
  </member>
  <member name="Windows.SetupDiOpenDevRegKey">
    <summary>
      <para>The <b>SetupDiOpenDevRegKey</b> function opens a registry key for device-specific configuration information.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to open a registry key.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="Scope">
      <para>The scope of the registry key to open. The scope determines where the information is stored. The scope can be global or specific to a hardware profile. The scope is specified by one of the following values:</para>
      <h4>DICS_FLAG_GLOBAL</h4>
      <para>Open a key to store global configuration information. This information is not specific to a particular hardware profile. This opens a key that is rooted at <b>HKEY_LOCAL_MACHINE.</b> The exact key opened depends on the value of the <i>KeyType</i> parameter.</para>
      <h4>DICS_FLAG_CONFIGSPECIFIC</h4>
      <para>Open a key to store hardware profile-specific configuration information. This key is rooted at one of the hardware-profile specific branches, instead of <b>HKEY_LOCAL_MACHINE</b>. The exact key opened depends on the value of the <i>KeyType</i> parameter.</para>
    </param>
    <param name="HwProfile">
      <para>A hardware profile value, which is set as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <para>If <i>Scope</i> is set to DICS_FLAG_CONFIGSPECIFIC, <i>HwProfile</i> specifies the hardware profile of the key that is to be opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If <i>HwProfile</i> is 0, the key for the current hardware profile is opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If <i>Scope</i> is DICS_FLAG_GLOBAL, <i>HwProfile</i> is ignored.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="KeyType">
      <para>The type of registry storage key to open, which can be one of the following values:</para>
      <h4>DIREG_DEV</h4>
      <para>Open a <a href="https://docs.microsoft.com//windows-hardware/drivers/">hardware key</a> for the device.</para>
      <h4>DIREG_DRV</h4>
      <para>Open a <a href="https://docs.microsoft.com//windows-hardware/drivers/">software key</a> for the device.</para>
      <para>For more information about a device's hardware and software keys, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/registry-trees-and-keys">Registry Trees and Keys for Devices and Drivers</a>.</para>
    </param>
    <param name="samDesired">
      <para>The registry security access that is required for the requested key. For information about registry security access values of type REGSAM, see the Microsoft Windows SDK documentation.</para>
    </param>
    <returns>
      <para>If the function is successful, it returns a handle to an opened registry key where private configuration data about this device instance can be stored/retrieved.</para>
      <para>If the function fails, it returns INVALID_HANDLE_VALUE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Depending on the value that is passed in the <i>samDesired</i> parameter, it might be necessary for the caller of this function to be a member of the Administrators group.</para>
      <para>Close the handle returned from this function by calling <see cref="RegCloseKey" />.</para>
      <para>The specified device instance must be registered before this function is called. However, be aware that the operating system automatically registers PnP device instances. For information about how to register non-PnP device instances, see <see cref="SetupDiRegisterDeviceInfo" />.</para>
    </remarks>
    <seealso cref="SetupDiCreateDevRegKey" />
    <seealso cref="SetupDiCreateDeviceInfo" />
    <seealso cref="SetupDiGetHwProfileList" />
    <seealso cref="SetupDiRegisterDeviceInfo" />
  </member>
  <member name="Windows.SetupDiRegisterCoDeviceInstallers">
    <summary>
      <para>The <b>SetupDiRegisterCoDeviceInstallers</b> function is the default handler for <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-register-coinstallers">DIF_REGISTER_COINSTALLERS</a>.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to register co-installers. The device information set must not contain any remote elements.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiRegisterCoDeviceInstallers</b> returns <b>TRUE</b> if the function succeeds. If the function returns <b>FALSE</b>, call <see cref="GetLastError" /> for extended error information.</para>
    </returns>
    <remarks>
      <para>The caller of <b>SetupDiRegisterCoDeviceInstallers</b> must be a member of the Administrators group.</para>
      <para>
        <b>Note</b>  Only a class installer should call <b>SetupDiRegisterCoDeviceInstallers</b> and only in those situations where the class installer must perform co-installer registration operations after <b>SetupDiRegisterCoDeviceInstallers</b> completes the default co-installer registration operation. In such situations, the class installer must directly call <b>SetupDiRegisterCoDeviceInstallers</b> when the installer processes a DIF_REGISTER_COINSTALLERS request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>
        <b>SetupDiRegisterCoDeviceInstallers</b> reads the INF file for the device specified by <i>DeviceInfoData</i> and creates registry entries to register any device-specific co-installers listed in the INF file. Co-installers are listed in an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-ddinstall-coinstallers-section">INF DDInstall.CoInstallers section</a>. This function also copies the files for the co-installers, unless the DI_NOFILECOPY flag is set.</para>
      <para>If there is no driver selected, or the device has an INF file for Windows 9x or Millennium Edition, this function does not register any co-installers.</para>
      <para>Registering a new device-specific co-installer invalidates the Device Installer's current list of co-installers. After a successful registration, the Device Installer updates its list of co-installers.</para>
      <para>This function only registers device-specific co-installers, not class co-installers.</para>
      <para>For more information about how to write and register device-specific co-installers, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/writing-a-co-installer">Writing a Co-installer</a>.</para>
      <para>The device information set specified by <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-register-coinstallers">DIF_REGISTER_COINSTALLERS</seealso>
    <seealso cref="SetupDiCallClassInstaller" />
  </member>
  <member name="Windows.SetupDiRegisterDeviceInfo">
    <summary>
      <para>The
<b>SetupDiRegisterDeviceInfo</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-registerdevice">DIF_REGISTERDEVICE</a> request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device to register. The device information set must not contain any remote elements.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This is an IN-OUT parameter because <i>DeviceInfoData.</i><b>DevInst</b> might be updated with a new handle value upon return.</para>
    </param>
    <param name="Flags">
      <para>A flag value that controls how the device is registered, which can be zero or the following value:</para>
      <h4>SPRDI_FIND_DUPS</h4>
      <para>Search for a previously-existing <a href="https://docs.microsoft.com//windows-hardware/drivers/">device instance</a> that corresponds to the device that is represented by <i>DeviceInfoData</i>. If this flag is not specified, the device instance is registered regardless of whether a device instance already exists for it.</para>
      <para>If the caller supplies <i>CompareProc</i>, the caller must also set this flag.</para>
    </param>
    <param name="CompareProc">
      <para>A pointer to a comparison callback function to use in duplicate detection. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, the callback function is called for each device instance that is of the same class as the device instance that is being registered. The prototype of the callback function is as follows:</para>
      <code>typedef  DWORD (CALLBACK* PSP_DETSIG_CMPPROC) (
    IN HDEVINFO  DeviceInfoSet,
    IN PSP_DEVINFO_DATA  NewDeviceData,
    IN PSP_DEVINFO_DATA  ExistingDeviceData,
    IN PVOID  CompareContextOPTIONAL
    );
</code>
      <para>The compare function must return ERROR_DUPLICATE_FOUND if it finds that the two devices are duplicates. Otherwise, it should return NO_ERROR. If some other error is encountered, the callback function should return the appropriate ERROR_* code to indicate the failure.</para>
      <para>If <i>CompareProc</i> is not specified and duplication detection is requested, a default comparison behavior is used. The default is to compare the new device's detect signature with the detect signature of all other devices in the class. The detect signature is contained in the class-specific resource descriptor of the device's boot log configuration.</para>
    </param>
    <param name="CompareContext">
      <para>A pointer to a caller-supplied context buffer that is passed into the callback function. This parameter is ignored if <i>CompareProc</i> is not specified.</para>
    </param>
    <param name="DupDeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure to receive information about a duplicate device instance, if any, discovered as a result of attempting to register this device. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, the caller must set <i>DupDeviceInfoData.</i><b>cbSize</b> to <b>sizeof</b>(SP_DEVINFO_DATA). This will be filled in if the function returns <b>FALSE</b>, and <see cref="GetLastError" /> returns ERROR_DUPLICATE_FOUND. This device information element is added as a member of the specified <i>DeviceInfoSet</i>, if not already a member. If <i>DupDeviceInfoData</i> is not specified, the duplicate is not added to the device information set.</para>
      <para>If you call this function when handling a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-registerdevice">DIF_REGISTERDEVICE</a> request, the <i>DupDeviceInfoData</i> parameter must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiRegisterDeviceInfo</b> is primarily designed to register a non-PnP device with the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/pnp-manager">Plug and Play (PnP) manager</a> on a local computer. Although <b>SetupDiRegisterDeviceInfo</b> will not fail if the device information set is for a remote computer, the result is of limited use because the device information set cannot subsequently be used with DIF_<i>Xxx</i> installation requests or <b>SetupDi</b><i>Xxx</i> functions that do not support operations on a remote computer. For example, calling <b>SetupDiCreateDevRegKey</b> to execute an INF section for a newly registered device on a remote computer will fail.</para>
      <para>
        <b>Note</b>  Only a class installer should call <b>SetupDiRegisterDeviceInfo</b> and only in those situations where the class installer must perform device registration operations after <b>SetupDiRegisterDeviceInfo</b> completes the default device registration operation. In such situations, the class installer must directly call <b>SetupDiRegisterDeviceInfo</b> when the installer processes a DIF_REGISTERDEVICE request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>After registering a device information element, the caller should update any stored copies of the <b>DevInst</b> handle associated with this device. This is necessary because the handle value might have changed during registration. The caller does not have to retrieve the SP_DEVINFO_DATA structure again because the <b>DevInst</b> field of the structure is updated to reflect the current value of the handle.</para>
      <para>Do not directly call this function for PnP device instances. PnP device instances are automatically registered by the operating system. However, you must register non-PnP device instances in one of the following ways:</para>
      <list type="number">
        <item>
          <description>
            <para>If your installation application uses a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-detect">DIF_DETECT</a> request to successfully detect a device, it should also use a DIF_REGISTERDEVICE request to register the device instance. The request should be handled in the default manner. (By default, <see cref="SetupDiCallClassInstaller" /> first calls the class installer and class co-installers to do duplicate detection and register the device instance. If these installers do not register the device instance, <b>SetupDiCallClassInstaller</b> calls <b>SetupDiRegisterDeviceInfo</b> to do duplicate detection and register the device instance.)</para>
          </description>
        </item>
        <item>
          <description>
            <para>If your installation application creates a device instance (for example, by calling <see cref="SetupDiCreateDeviceInfo" />) but does not do duplicate detection, your installation application should use a DIF_REGISTERDEVICE request to register the device instance. The request should be handled in the default manner as described earlier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If your installation application creates a new device and does duplicate detection, your installation application should use a DIF_REGISTERDEVICE request but should prevent <b>SetupDiCallClassInstaller</b> from calling <b>SetupDiRegisterDeviceInfo</b>. To prevent <b>SetupDiCallClassInstaller</b> from calling <b>SetupDiRegisterDeviceInfo</b>, set the DI_NODI_DEFAULTACTION flag in the <b>Flags</b> member of the SP_DEVINSTALL_PARAMS structure for the device instance.</para>
            <para>If <b>SetupDiCallClassInstaller</b> returns <b>TRUE</b> for the DIF_REGISTERDEVICE request, the class installer or class co-installers registered the device instance. In this case, the installation application can continue to install the device.</para>
            <para>If <b>SetupDiCallClassInstaller</b> returns <b>FALSE</b> for the DIF_REGISTERDEVICE request, the class installer or class co-installers did not register the device instance. In this case, the installation application should do one of the following, depending on the last error that <see cref="GetLastError" /> returns for the request:</para>
            <list type="bullet">
              <item>
                <description>If the last error is ERROR_DI_DO_DEFAULT, the installation application can directly call <b>SetupDiRegisterDeviceInfo</b> and supply a <i>CompareProc</i> to do duplicate detection. If this call is successful and no duplicates are found, device installation can continue. If a duplicate is found, <b>SetupDiRegisterDeviceInfo</b> returns <b>FALSE</b>, and the installation application must terminate device installation.</description>
              </item>
              <item>
                <description>If the last error is not ERROR_DI_DO_DEFAULT, the installation application must terminate device installation.</description>
              </item>
            </list>
            <para>The caller of <b>SetupDiRegisterDeviceInfo</b> must be a member of the Administrators group.</para>
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-registerdevice">DIF_REGISTERDEVICE</seealso>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SP_DEVINSTALL_PARAMS" />
  </member>
  <member name="Windows.SetupDiRemoveDevice">
    <summary>
      <para>The <b>SetupDiRemoveDevice</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-remove">DIF_REMOVE</a> installation request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local system that contains a device information element that represents the device to remove.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This is an IN-OUT parameter because <i>DeviceInfoSet</i>.<b>DevInst</b> might be updated with a new handle value upon return. If this is a global removal or the last hardware profile-specific removal, all traces of the device instance are deleted from the registry and the handle will be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <b>GetLastError</b>.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiRemoveDevice</b> removes the device from the system. It deletes the device's hardware and software registry keys and any hardware-profile-specific registry keys (configuration-specific registry keys). This function dynamically stops the device if its <b>DevInst</b> is active and this is a global removal or the last configuration-specific removal. If the device cannot be dynamically stopped, flags are set in the Install Parameter block of the device information set that eventually cause the user to be prompted to restart the computer.</para>
      <para>Device removal is either global to all hardware profiles or specific to one hardware profile as specified by the <b>Scope</b> member of the <see cref="SP_REMOVEDEVICE_PARAMS" /> structure that supplies the class installation parameters for the DIF_REMOVE request. Configuration-specific removal is only appropriate for root-enumerated devices and should only be requested by system code.</para>
      <para>The caller of <b>SetupDiRemoveDevice</b> must be a member of the Administrators group.</para>
      <para>
        <b>Note</b>  Only a <a href="https://docs.microsoft.com//windows-hardware/drivers/">class installer</a> should call <b>SetupDiRemoveDevice </b> and only in those situations where the class installer must perform device removal operations after <b>SetupDiRemoveDevice </b> completes the default device removal operation. In such situations, the class installer must directly call <b>SetupDiRemoveDevice</b> when the installer processes a DIF_REMOVE request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
    </remarks>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SP_REMOVEDEVICE_PARAMS" />
  </member>
  <member name="Windows.SetupDiRemoveDeviceInterface">
    <summary>
      <para>The <b>SetupDiRemoveDeviceInterface</b> function removes a registered device interface from the system.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device interface to remove. This handle is typically returned by <b>SetupDiGetClassDevs</b>.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the device interface in <i>DeviceInfoSet</i> to remove. This pointer is typically returned by <see cref="SetupDiEnumDeviceInterfaces" />.</para>
      <para>After the interface is removed, this function sets the SPINT_REMOVED flag in <i>DeviceInterfaceData</i><b>.Flags</b>. It also clears the SPINT_ACTIVE flag, but be aware that this flag should have already been cleared before this function was called.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiRemoveDeviceInterface</b> returns <b>TRUE</b> if the function completed without error. If the function completed with an error, it returns <b>FALSE</b> and the error code for the failure can be retrieved by calling <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>
        <b>SetupDiRemoveDeviceInterface</b> removes the specified device interface from the system. This includes deleting the associated registry key.</para>
      <para>Call <see cref="SetupDiDeleteDeviceInterfaceData" /> to delete the interface from a device information list.</para>
      <para>A device interface must be disabled to be removed. If the interface is enabled, this function fails and <see cref="GetLastError" /> returns ERROR_DEVICE_INTERFACE_ACTIVE. Disable an interface by using whatever interface-specific mechanism is provided (for example, an IOCTL). If the caller has no way to disable an interface and the interface must be removed, the caller must stop the underlying device by using <see cref="SetupDiChangeState" />. Stopping the device disables all the interfaces exposed by the device.</para>
    </remarks>
    <seealso cref="SetupDiChangeState" />
    <seealso cref="SetupDiCreateDeviceInterface" />
    <seealso cref="SetupDiDeleteDeviceInterfaceData" />
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
  </member>
  <member name="Windows.SetupDiRestartDevices">
    <summary>
      <para>The <b>SetupDiRestartDevices</b> function restarts a specified device or, if necessary, restarts all devices that are operated by the same function and filter drivers that operate the specified device.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-classes">device information set</a> that contains the device information element that represents the device to restart.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure for the device information member that represents the device to restart. This parameter is also an output parameter because <b>SetupDiRestartDevices</b> updates the device installation parameters for this device information member and the status and problem code of the corresponding device instance. For more information about these updates, see the following <b>Remarks</b> section.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiRestartDevices</b> returns <b>TRUE</b>; otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiRestartDevices</b> should be called only by a class installer when a class installer is handling a DIF_INSTALLDEVICE request and only in rare situations where the class installer must perform operations after all default installation operations, except for starting a device, have completed . For more information about calling <b>SetupDiRestartDevices</b> in these situations, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevice">DIF_INSTALLDEVICE</a>.</para>
      <para>
        <b>SetupDiRestartDevices</b> restarts only the specified device if the restart can be performed without affecting the installation of other devices that are operated by the same function driver or filter drivers that operate the device. Specifically, if the restart of the specified device does not copy new files or modify any files that were previously installed for the device, <b>SetupDiRestartDevices</b> restarts only the specified device. Otherwise, the function restarts all devices that are operated by the same function and filter drivers that operate the specified device.</para>
      <para>
        <b>SetupDiRestartDevices</b> updates the device installation parameters and device status to reflect the result of the attempted restart operation. For example:</para>
      <list type="bullet">
        <item>
          <description>
            <para>If the device is started, <b>SetupDiRestartDevices</b> sets the device status to DN_STARTED.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If a system restart is necessary to start a device, <b>SetupDiRestartDevices</b> sets the DI_NEEDREBOOT flag in the <b>Flags</b> member of the SP_DEVINSTALL_PARAMETER structure that is associated with the device information element and sets the problem code for the device to CM_PROB_NEED_RESTART.</para>
          </description>
        </item>
      </list>
      <para>The <see cref="CM_Get_DevNode_Status" /> function retrieves the status and problem code for a device instance and the <see cref="SetupDiGetDeviceInstallParams" /> function retrieves the device installation parameters for the device information element that represents the device instance.</para>
    </remarks>
    <seealso cref="CM_Get_DevNode_Status" />
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-installdevice">DIF_INSTALLDEVICE</seealso>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiGetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiSelectBestCompatDrv">
    <summary>
      <para>The <b>SetupDiSelectBestCompatDrv</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-selectbestcompatdrv">DIF_SELECTBESTCOMPATDRV</a> installation request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to select the best compatible driver.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. <b>SetupDiSelectBestCompatDrv</b> selects the best driver for a device information element from the compatible driver list for the specified device.</para>
    </param>
    <returns>
      <para>If the operation succeeds, <b>SetupDiSelectBestCompatDrv</b> returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the caller of <b>SetupDiSelectBestCompatDrv</b> is a member of the Administrators group and the class of the device is different that the class of the selected driver, <b>SetupDiSelectBestCompatDrv</b> sets the class of the device to the class of the driver. If this behavior is not desired, call this function at a lower privilege level.</para>
      <para>
        <b>Note</b>  Only a class installer should call <b>SetupDiSelectBestCompatDrv</b> and only in those situations where the class installer must perform driver selection operations after <b>SetupDiSelectBestCompatDrv</b> completes the default driver selection operation. In such situations, the class installer must directly call <b>SetupDiSelectBestCompatDrv</b> when the installer processes a DIF_SELECTBESTCOMPATDRV request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>
        <b>SetupDiSelectBestCompatDrv </b> is primarily designed to select the best compatible driver for a device information element on a local computer. Although <b>SetupDiSelectBestCompatDrv </b> will not fail if the device information set is for a remote computer, the result is of limited use because the device information set cannot subsequently be used as input with DIF_<i>Xxx</i> installation requests or <b>SetupDi</b><i>Xxx</i> functions that do not support operations for a remote computer. In particular, the device information set cannot subsequently be used as input with a DIF_INSTALLDEVICE installation request to install a device on a remote computer.</para>
      <para>For information about how the best driver is selected, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/how-setup-selects-drivers">How Windows Selects Drivers</a>.</para>
      <para>To get the selected driver for a device, call <see cref="SetupDiGetSelectedDriver" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-selectbestcompatdrv">DIF_SELECTBESTCOMPATDRV</seealso>
    <seealso cref="SP_DEVINFO_DATA" />
  </member>
  <member name="Windows.SetupDiSelectDevice">
    <summary>
      <para>The <b>SetupDiSelectDevice</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-selectdevice">DIF_SELECTDEVICE</a> request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to select a driver.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiSelectDevice</b> selects the driver for the specified device and sets <i>DeviceInfoData.</i><b>ClassGuid</b> to the GUID of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> for the selected driver. If this parameter is <b>NULL</b>, <b>SetupDiSelectDevice</b> sets the selected driver in the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSelectDevice</b> handles the user interface that allows the user to select a driver for the specified device, or a device information set if a device is not specified. By setting the <b>Flags</b> field of the <see cref="SP_DEVINSTALL_PARAMS" /> structure for the device, or the device information set if a device is not specified, the caller can specify special handling of the user interface, for example, to allow users to select a driver from an OEM installation disk.</para>
      <para>
        <b>Note</b>  Only a class installer should call <b>SetupDiSelectDevice</b> and only in those situations where the class installer must perform driver selection operations after <b>SetupDiSelectDevice</b> completes the default driver selection operation. In such situations, the class installer must directly call <b>SetupDiSelectDevice</b> when the installer processes a DIF_SELECTDEVICE request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>
        <b>SetupDiSelectDevice</b> is primarily designed to select a driver for a device on a local computer before installing the device. Although <b>SetupDiSelectDevice</b> will not fail if the device information set is for a remote computer, the result is of limited use because the device information set cannot subsequently be used with DIF_<i>Xxx</i> installation requests or <b>SetupDi</b><i>Xxx</i> functions that do not support operations on a remote computer. In particular, the device information set cannot be used as input with a DIF_INSTALLDEVICE installation request to install a device on a remote computer.</para>
    </remarks>
    <seealso cref="SP_DEVINSTALL_PARAMS" />
    <seealso cref="SetupDiCallClassInstaller" />
  </member>
  <member name="Windows.SetupDiSelectOEMDrv">
    <summary>
      <para>The <b>SetupDiSelectOEMDrv</b> function selects a driver for a device information set or a particular device information element that uses an OEM path supplied by the user.</para>
    </summary>
    <param name="hwndParent">
      <para>A window handle that will be the parent of any dialogs created during the processing of this function. This parameter can be used to override the <b>hwndParent</b> field in the installation parameters block of the specified device information set or element.</para>
    </param>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to select a driver.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiSelectOEMDrv</b> associates the selected driver with the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSelectOEMDrv</b> associates the selected driver with the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSelectOEMDrv </b> is primarily designed to select an OEM driver for a device on a local computer before installing the device on that computer. Although <b>SetupDiSelectOEMDrv</b> will not fail if the device information set is for a remote computer, the result is of limited use because the device information set cannot subsequently be used with DIF_<i>Xxx</i> installation requests or <b>SetupDi</b><i>Xxx</i> functions that do not support operations on a remote computer. In particular, the device information set cannot be used as input with a DIF_INSTALLDEVICE installation request to install a device on a remote computer.</para>
      <para>
        <b>SetupDiSelectOEMDrv</b> prompts the user for the OEM path and then calls the class installer to select a driver from the OEM path.</para>
    </remarks>
    <seealso cref="SetupDiAskForOEMDisk" />
  </member>
  <member name="Windows.SetupDiSetClassInstallParams - SetupDiSetClassInstallParamsA">
    <summary>
      <para>The <b>SetupDiSetClassInstallParams</b> function sets or clears class install parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to set class install parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that represents the device for which to set class install parameters. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiSetClassInstallParams</b> sets the class installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetClassInstallParams</b> sets the class install parameters that are associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="ClassInstallParams">
      <para>A pointer to a buffer that contains the new class install parameters to use. The <see cref="SP_CLASSINSTALL_HEADER" /> structure at the beginning of this buffer must have its <b>cbSize</b> field set to <b>sizeof(</b>SP_CLASSINSTALL_HEADER<b>)</b> and the <b>InstallFunction</b> field must be set to the DI_FUNCTION code that reflects the type of parameters contained in the rest of the buffer.</para>
      <para>If <i>ClassInstallParams</i> is not specified, the current class install parameters, if any, are cleared for the specified device information set or element.</para>
    </param>
    <param name="ClassInstallParamsSize">
      <para>The size, in bytes, of the <i>ClassInstallParams</i> buffer. If the buffer is not supplied (that is, the class install parameters are being cleared), <i>ClassInstallParamsSize</i> must be 0<i>.</i></para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All parameters are validated before any changes are made. Therefore, a return value of <b>FALSE</b> indicates that no parameters were modified.</para>
      <para>A side effect of setting class install parameters is that the DI_CLASSINSTALLPARAMS flag is set. If the caller wants to set the parameters, but disable their use, this flag must be cleared by a call to <b>SetupDiSetDeviceInstallParams</b>.</para>
      <para>If the class install parameters are cleared, the DI_CLASSINSTALLPARAMS flag is reset.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetClassInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassInstallParams" />
    <seealso cref="SetupDiSetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiSetClassInstallParams">
    <summary>
      <para>The <b>SetupDiSetClassInstallParams</b> function sets or clears class install parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to set class install parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that represents the device for which to set class install parameters. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiSetClassInstallParams</b> sets the class installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetClassInstallParams</b> sets the class install parameters that are associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="ClassInstallParams">
      <para>A pointer to a buffer that contains the new class install parameters to use. The <see cref="SP_CLASSINSTALL_HEADER" /> structure at the beginning of this buffer must have its <b>cbSize</b> field set to <b>sizeof(</b>SP_CLASSINSTALL_HEADER<b>)</b> and the <b>InstallFunction</b> field must be set to the DI_FUNCTION code that reflects the type of parameters contained in the rest of the buffer.</para>
      <para>If <i>ClassInstallParams</i> is not specified, the current class install parameters, if any, are cleared for the specified device information set or element.</para>
    </param>
    <param name="ClassInstallParamsSize">
      <para>The size, in bytes, of the <i>ClassInstallParams</i> buffer. If the buffer is not supplied (that is, the class install parameters are being cleared), <i>ClassInstallParamsSize</i> must be 0<i>.</i></para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All parameters are validated before any changes are made. Therefore, a return value of <b>FALSE</b> indicates that no parameters were modified.</para>
      <para>A side effect of setting class install parameters is that the DI_CLASSINSTALLPARAMS flag is set. If the caller wants to set the parameters, but disable their use, this flag must be cleared by a call to <b>SetupDiSetDeviceInstallParams</b>.</para>
      <para>If the class install parameters are cleared, the DI_CLASSINSTALLPARAMS flag is reset.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetClassInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassInstallParams" />
    <seealso cref="SetupDiSetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiSetClassInstallParamsW">
    <summary>
      <para>The <b>SetupDiSetClassInstallParams</b> function sets or clears class install parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to set class install parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that represents the device for which to set class install parameters. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiSetClassInstallParams</b> sets the class installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetClassInstallParams</b> sets the class install parameters that are associated with <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="ClassInstallParams">
      <para>A pointer to a buffer that contains the new class install parameters to use. The <see cref="SP_CLASSINSTALL_HEADER" /> structure at the beginning of this buffer must have its <b>cbSize</b> field set to <b>sizeof(</b>SP_CLASSINSTALL_HEADER<b>)</b> and the <b>InstallFunction</b> field must be set to the DI_FUNCTION code that reflects the type of parameters contained in the rest of the buffer.</para>
      <para>If <i>ClassInstallParams</i> is not specified, the current class install parameters, if any, are cleared for the specified device information set or element.</para>
    </param>
    <param name="ClassInstallParamsSize">
      <para>The size, in bytes, of the <i>ClassInstallParams</i> buffer. If the buffer is not supplied (that is, the class install parameters are being cleared), <i>ClassInstallParamsSize</i> must be 0<i>.</i></para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All parameters are validated before any changes are made. Therefore, a return value of <b>FALSE</b> indicates that no parameters were modified.</para>
      <para>A side effect of setting class install parameters is that the DI_CLASSINSTALLPARAMS flag is set. If the caller wants to set the parameters, but disable their use, this flag must be cleared by a call to <b>SetupDiSetDeviceInstallParams</b>.</para>
      <para>If the class install parameters are cleared, the DI_CLASSINSTALLPARAMS flag is reset.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetClassInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassInstallParams" />
    <seealso cref="SetupDiSetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiSetClassPropertyEx">
    <summary>
      <para>The <b>SetupDiSetClassPropertyEx</b> function sets a device property for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a> on a local or remote computer.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that identifies the device setup class or device interface class for which to set a device property. For information about how to specify the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the device class property to set.</para>
    </param>
    <param name="PropertyType">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed value that represents the property-data-type identifier for the class property. For more information about the property-data-type identifier, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the class property value. If either the property or the property value is being deleted, this pointer must be set to <b>NULL</b>, and <i>PropertyBufferSize</i> must be set to zero. For more information about property value requirements, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. The property buffer size must be consistent with the property-data-type identifier that is supplied by <i>PropertyType</i>. If <i>PropertyBuffer </i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether the class is a device setup class or a device interface class:</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated Unicode string that contains the UNC name, including the "\" prefix, of a computer. This pointer can be set to <b>NULL</b>. If the pointer is <b>NULL</b>, <b>SetupDiSetClassPropertyEx</b> sets the class property for a class that is installed on the local computer.</para>
    </param>
    <param name="Reserved">
      <para>This parameter must be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiSetClassPropertyEx</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device setup class that is specified by <i>ClassGuid</i> is not valid. This error can occur only if the DICLASSPROP_INSTALLER flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The device interface reference string is not valid. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid. This error could be logged if either the <i>ClassGuid</i> value is not a valid GUID or the property value does not match the property type specified by <i>PropertyType</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_MACHINENAME</b>
            </para>
          </description>
          <description>
            <para>The computer name that is specified by <i>MachineName</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device interface class that is specified by <i>ClassGuid</i> does not exist. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>An unspecified item was not found. One possibility is that the property to be deleted does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSetClassPropertyEx</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiSetClassPropertyEx</b>.</para>
      <para>A caller of <b>SetupDiSetClassPropertyEx</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>
        <b>SetupDiSetClassPropertyEx</b> enforces requirements on the property-data-type identifier and the property value.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device class on a remote computer, call <see cref="SetupDiGetClassPropertyKeysEx" />.</para>
      <para>To retrieve a device class property on a local computer, call <see cref="SetupDiGetClassProperty" /><b>,</b> and to retrieve a device class property on a remote computer, call <see cref="SetupDiGetClassPropertyEx" />.</para>
      <para>To set a device class property on a local computer, call <see cref="SetupDiSetClassProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassProperty" />
    <seealso cref="SetupDiGetClassPropertyEx" />
    <seealso cref="SetupDiGetClassPropertyKeysEx" />
    <seealso cref="SetupDiSetClassProperty" />
  </member>
  <member name="Windows.SetupDiSetClassProperty">
    <summary>
      <para>The <b>SetupDiSetClassProperty</b> function sets a class property for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that identifies the device setup class or device interface class for which to set a device property. For information about how to specify the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the device class property to set.</para>
    </param>
    <param name="PropertyType">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed value that represents the property-data-type identifier for the device class property. For more information about the property-data-type identifier, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the property value of the device class. If either the property or the data is being deleted, this pointer must be set to <b>NULL</b>, and <i>PropertyBufferSize</i> must be set to zero. For more information about property data, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer </i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether the class is a device setup class or a device interface class:</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiSetClassProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device setup class that is specified by <i>ClassGuid</i> is not valid. This error can occur only if the DICLASSPROP_INSTALLER flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The device interface reference string is not valid. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid. This error could be logged if the <i>ClassGuid</i> value is not a valid GUID or the property value is not consistent with the property type specified by <i>PropertyType.</i></para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device interface class that is specified by <i>ClassGuid</i> does not exist. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>An unspecified item was not found. One possibility is that the property to be deleted does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSetClassProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiSetClassProperty</b>.</para>
      <para>A caller of <b>SetupDiSetClassProperty</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>
        <b>SetupDiSetClassProperty</b> enforces requirements on the property-data-type identifier and the property value.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device class on a local computer, call <see cref="SetupDiGetClassPropertyKeys" />.</para>
      <para>To retrieve a device class property on a local computer, call <see cref="SetupDiGetClassProperty" />, and to retrieve a device class property on a remote computer, call <see cref="SetupDiGetClassPropertyEx" />.</para>
      <para>To set a device class property on a remote computer, call <see cref="SetupDiSetClassPropertyEx" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassProperty" />
    <seealso cref="SetupDiGetClassPropertyEx" />
    <seealso cref="SetupDiGetClassPropertyKeys" />
    <seealso cref="SetupDiSetClassPropertyEx" />
  </member>
  <member name="Windows.SetupDiSetClassPropertyA">
    <summary>
      <para>The <b>SetupDiSetClassProperty</b> function sets a class property for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that identifies the device setup class or device interface class for which to set a device property. For information about how to specify the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the device class property to set.</para>
    </param>
    <param name="PropertyType">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed value that represents the property-data-type identifier for the device class property. For more information about the property-data-type identifier, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the property value of the device class. If either the property or the data is being deleted, this pointer must be set to <b>NULL</b>, and <i>PropertyBufferSize</i> must be set to zero. For more information about property data, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer </i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether the class is a device setup class or a device interface class:</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiSetClassProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device setup class that is specified by <i>ClassGuid</i> is not valid. This error can occur only if the DICLASSPROP_INSTALLER flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The device interface reference string is not valid. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid. This error could be logged if the <i>ClassGuid</i> value is not a valid GUID or the property value is not consistent with the property type specified by <i>PropertyType.</i></para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device interface class that is specified by <i>ClassGuid</i> does not exist. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>An unspecified item was not found. One possibility is that the property to be deleted does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSetClassProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiSetClassProperty</b>.</para>
      <para>A caller of <b>SetupDiSetClassProperty</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>
        <b>SetupDiSetClassProperty</b> enforces requirements on the property-data-type identifier and the property value.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device class on a local computer, call <see cref="SetupDiGetClassPropertyKeys" />.</para>
      <para>To retrieve a device class property on a local computer, call <see cref="SetupDiGetClassProperty" />, and to retrieve a device class property on a remote computer, call <see cref="SetupDiGetClassPropertyEx" />.</para>
      <para>To set a device class property on a remote computer, call <see cref="SetupDiSetClassPropertyEx" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassProperty" />
    <seealso cref="SetupDiGetClassPropertyEx" />
    <seealso cref="SetupDiGetClassPropertyKeys" />
    <seealso cref="SetupDiSetClassPropertyEx" />
  </member>
  <member name="Windows.SetupDiSetClassPropertyW">
    <summary>
      <para>The <b>SetupDiSetClassProperty</b> function sets a class property for a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a> or a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-interface-classes">device interface class</a>.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to a GUID that identifies the device setup class or device interface class for which to set a device property. For information about how to specify the class type, see the <i>Flags</i> parameter.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the device class property to set.</para>
    </param>
    <param name="PropertyType">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed value that represents the property-data-type identifier for the device class property. For more information about the property-data-type identifier, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the property value of the device class. If either the property or the data is being deleted, this pointer must be set to <b>NULL</b>, and <i>PropertyBufferSize</i> must be set to zero. For more information about property data, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer </i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="Flags">
      <para>One of the following values, which specifies whether the class is a device setup class or a device interface class:</para>
      <h4>DICLASSPROP_INSTALLER</h4>
      <para>
        <i>ClassGuid</i> specifies a device setup class. This flag cannot be used with DICLASSPROP_INTERFACE.</para>
      <h4>DICLASSPROP_INTERFACE</h4>
      <para>
        <i>ClassGuid</i> specifies a device interface class. This flag cannot be used with DICLASSPROP_INSTALLER.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiSetClassProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device setup class that is specified by <i>ClassGuid</i> is not valid. This error can occur only if the DICLASSPROP_INSTALLER flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REFERENCE_STRING</b>
            </para>
          </description>
          <description>
            <para>The device interface reference string is not valid. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal data value was not valid. This error could be logged if the <i>ClassGuid</i> value is not a valid GUID or the property value is not consistent with the property type specified by <i>PropertyType.</i></para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_INTERFACE_CLASS</b>
            </para>
          </description>
          <description>
            <para>The device interface class that is specified by <i>ClassGuid</i> does not exist. This error can occur only if the DICLASSPROP_INTERFACE flag is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>An unspecified item was not found. One possibility is that the property to be deleted does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSetClassProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiSetClassProperty</b>.</para>
      <para>A caller of <b>SetupDiSetClassProperty</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>
        <b>SetupDiSetClassProperty</b> enforces requirements on the property-data-type identifier and the property value.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device class on a local computer, call <see cref="SetupDiGetClassPropertyKeys" />.</para>
      <para>To retrieve a device class property on a local computer, call <see cref="SetupDiGetClassProperty" />, and to retrieve a device class property on a remote computer, call <see cref="SetupDiGetClassPropertyEx" />.</para>
      <para>To set a device class property on a remote computer, call <see cref="SetupDiSetClassPropertyEx" />.</para>
    </remarks>
    <seealso cref="SetupDiGetClassProperty" />
    <seealso cref="SetupDiGetClassPropertyEx" />
    <seealso cref="SetupDiGetClassPropertyKeys" />
    <seealso cref="SetupDiSetClassPropertyEx" />
  </member>
  <member name="Windows.SetupDiSetClassRegistryProperty - SetupDiSetClassRegistryPropertyA">
    <summary>
      <para>The <b>SetupDiSetClassRegistryProperty</b> function sets a specified device class property in the registry.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID that identifies the device class for which a property is to be set.</para>
    </param>
    <param name="Property">
      <para>A value that identifies the property to be set, which must be one of the following:</para>
      <h4>SPCRP_CHARACTERISTICS</h4>
      <para>The caller supplies flags  that specify the device characteristics for the class. For a list of characteristics flags, see the <i>DeviceCharacteristics</i> parameter of <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>. Device characteristics should be set when the device class is installed and should not be changed after the device class is installed.</para>
      <h4>SPCRP_DEVTYPE</h4>
      <para>The caller supplies the device type for the class. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>. Device type should be set when a device class is installed and should not be changed after the device class is installed.</para>
      <h4>SPCRP_EXCLUSIVE</h4>
      <para>The caller supplies a DWORD value  that specifies whether users can obtain exclusive access to devices for this class. The supplied value is 1 if exclusive access is allowed, or zero otherwise. The exclusive setting for a device should be set when a device class is installed and should not be changed after the device class is installed.</para>
      <h4>SPCRP_LOWERFILTERS</h4>
      <para>(Windows Vista and later) The caller supplies a REG_MULTI_SZ list of the service names of the lower filter drivers that are installed for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a>. For more information about how to install a class filter driver, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/installing-a-filter-driver">Installing a Filter Driver</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 Section</a>.</para>
      <h4>SPCRP_SECURITY</h4>
      <para>The caller supplies the device's security descriptor as a SECURITY_DESCRIPTOR structure in self-relative format (described in the Microsoft Windows SDK documentation).</para>
      <h4>SPCRP_SECURITY_SDS</h4>
      <para>The caller supplies the device's security descriptor as a text string. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h4>SPCRP_UPPERFILTERS</h4>
      <para>(Windows Vista and later) The caller supplies a REG_MULTI_SZ list of the service names of the upper filter drivers that are installed for the device setup class. For more information about how to install a class filter driver, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/installing-a-filter-driver">Installing a Filter Driver</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 Section</a>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that supplies the specified property. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system on which to set the specified device class property. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the property is set on the name of the local system.</para>
    </param>
    <param name="Reserved">
      <para>Reserved, must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>To determine the data type for a device class property, call <see cref="SetupDiGetClassRegistryProperty" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetClassRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiSetClassRegistryProperty - SetupDiSetClassRegistryPropertyW">
    <summary>
      <para>The <b>SetupDiSetClassRegistryProperty</b> function sets a specified device class property in the registry.</para>
    </summary>
    <param name="ClassGuid">
      <para>A pointer to the GUID that identifies the device class for which a property is to be set.</para>
    </param>
    <param name="Property">
      <para>A value that identifies the property to be set, which must be one of the following:</para>
      <h4>SPCRP_CHARACTERISTICS</h4>
      <para>The caller supplies flags  that specify the device characteristics for the class. For a list of characteristics flags, see the <i>DeviceCharacteristics</i> parameter of <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>. Device characteristics should be set when the device class is installed and should not be changed after the device class is installed.</para>
      <h4>SPCRP_DEVTYPE</h4>
      <para>The caller supplies the device type for the class. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>. Device type should be set when a device class is installed and should not be changed after the device class is installed.</para>
      <h4>SPCRP_EXCLUSIVE</h4>
      <para>The caller supplies a DWORD value  that specifies whether users can obtain exclusive access to devices for this class. The supplied value is 1 if exclusive access is allowed, or zero otherwise. The exclusive setting for a device should be set when a device class is installed and should not be changed after the device class is installed.</para>
      <h4>SPCRP_LOWERFILTERS</h4>
      <para>(Windows Vista and later) The caller supplies a REG_MULTI_SZ list of the service names of the lower filter drivers that are installed for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a>. For more information about how to install a class filter driver, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/installing-a-filter-driver">Installing a Filter Driver</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 Section</a>.</para>
      <h4>SPCRP_SECURITY</h4>
      <para>The caller supplies the device's security descriptor as a SECURITY_DESCRIPTOR structure in self-relative format (described in the Microsoft Windows SDK documentation).</para>
      <h4>SPCRP_SECURITY_SDS</h4>
      <para>The caller supplies the device's security descriptor as a text string. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h4>SPCRP_UPPERFILTERS</h4>
      <para>(Windows Vista and later) The caller supplies a REG_MULTI_SZ list of the service names of the upper filter drivers that are installed for the device setup class. For more information about how to install a class filter driver, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/installing-a-filter-driver">Installing a Filter Driver</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 Section</a>.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that supplies the specified property. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer </i> buffer.</para>
    </param>
    <param name="MachineName">
      <para>A pointer to a NULL-terminated string that contains the name of a remote system on which to set the specified device class property. This parameter is optional and can be <b>NULL</b>. If this parameter is <b>NULL</b>, the property is set on the name of the local system.</para>
    </param>
    <param name="Reserved">
      <para>Reserved, must be <b>NULL</b>.</para>
      <h5>- Property.SPCRP_CHARACTERISTICS</h5>
      <para>The caller supplies flags  that specify the device characteristics for the class. For a list of characteristics flags, see the <i>DeviceCharacteristics</i> parameter of <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/wdm/nf-wdm-iocreatedevice">IoCreateDevice</a>. Device characteristics should be set when the device class is installed and should not be changed after the device class is installed.</para>
      <h5>- Property.SPCRP_DEVTYPE</h5>
      <para>The caller supplies the device type for the class. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/specifying-device-types">Specifying Device Types</a>. Device type should be set when a device class is installed and should not be changed after the device class is installed.</para>
      <h5>- Property.SPCRP_EXCLUSIVE</h5>
      <para>The caller supplies a DWORD value  that specifies whether users can obtain exclusive access to devices for this class. The supplied value is 1 if exclusive access is allowed, or zero otherwise. The exclusive setting for a device should be set when a device class is installed and should not be changed after the device class is installed.</para>
      <h5>- Property.SPCRP_LOWERFILTERS</h5>
      <para>(Windows Vista and later) The caller supplies a REG_MULTI_SZ list of the service names of the lower filter drivers that are installed for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-device-setup-classes">device setup class</a>. For more information about how to install a class filter driver, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/installing-a-filter-driver">Installing a Filter Driver</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 Section</a>.</para>
      <h5>- Property.SPCRP_SECURITY</h5>
      <para>The caller supplies the device's security descriptor as a SECURITY_DESCRIPTOR structure in self-relative format (described in the Microsoft Windows SDK documentation).</para>
      <h5>- Property.SPCRP_SECURITY_SDS</h5>
      <para>The caller supplies the device's security descriptor as a text string. For information about security descriptor strings, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">Security Descriptor Definition Language (Windows)</a>. For information about the format of security descriptor strings, see Security Descriptor Definition Language (Windows).</para>
      <h5>- Property.SPCRP_UPPERFILTERS</h5>
      <para>(Windows Vista and later) The caller supplies a REG_MULTI_SZ list of the service names of the upper filter drivers that are installed for the device setup class. For more information about how to install a class filter driver, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/installing-a-filter-driver">Installing a Filter Driver</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/inf-classinstall32-section">INF ClassInstall32 Section</a>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>To determine the data type for a device class property, call <see cref="SetupDiGetClassRegistryProperty" />.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetClassRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiSetDeviceRegistryProperty" />
  </member>
  <member name="Windows.SetupDiSetDeviceInstallParams - SetupDiSetDeviceInstallParamsA">
    <summary>
      <para>The <b>SetupDiSetDeviceInstallParams</b> function sets device installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to set device installation parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be set to <b>NULL</b>. If this parameter is specified, <b>SetupDiSetDeviceInstallParams</b> sets the installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetDeviceInstallParams</b> sets the installation parameters that are associated with the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DeviceInstallParams">
      <para>A pointer to an <see cref="SP_DEVINSTALL_PARAMS" /> structure that contains the new values of the parameters. The <i>DeviceInstallParams.</i><b>cbSize</b> must be set to the size, in bytes, of the structure before this function is called.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All parameters are validated before any changes are made. Therefore, a return value of <b>FALSE</b> indicates that no parameters were modified.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetDeviceInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiSetDeviceInstallParams - SetupDiSetDeviceInstallParamsW">
    <summary>
      <para>The <b>SetupDiSetDeviceInstallParams</b> function sets device installation parameters for a device information set or a particular device information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for which to set device installation parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be set to <b>NULL</b>. If this parameter is specified, <b>SetupDiSetDeviceInstallParams</b> sets the installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetDeviceInstallParams</b> sets the installation parameters that are associated with the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DeviceInstallParams">
      <para>A pointer to an <see cref="SP_DEVINSTALL_PARAMS" /> structure that contains the new values of the parameters. The <i>DeviceInstallParams.</i><b>cbSize</b> must be set to the size, in bytes, of the structure before this function is called.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All parameters are validated before any changes are made. Therefore, a return value of <b>FALSE</b> indicates that no parameters were modified.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetDeviceInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetDeviceInstallParams" />
  </member>
  <member name="Windows.SetupDiSetDeviceInterfaceDefault">
    <summary>
      <para>The <b>SetupDiSetDeviceInterfaceDefault</b> function sets a device interface as the default interface for a device interface class.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device interface to set as the default for a device interface class.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that specifies the device interface in <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="Flags">
      <para>Not used, must be zero.</para>
    </param>
    <param name="Reserved">
      <para>Reserved for future use, must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>A caller must have Administrator privileges to set the default interface for a device interface class. However, if the requested default interface is the same as the currently set default interface, the function returns <b>TRUE</b> regardless of whether the caller has Administrator privileges.</para>
      <para>If the function successfully sets the specified device interface as the default for the device class, it updates the Flags member of the supplied SP_DEVICE_INTERFACE_DATA structure.</para>
      <para>Call <see cref="SetupDiGetClassDevs" /> to obtain a <i>DevInfoSet</i> handle to a device information set that contains the device interface to set as the default for a device interface class. To obtain the <i>DeviceInterfaceData </i> pointer to the device interface element, call <see cref="SetupDiEnumDeviceInterfaces" /> to enumerate the interfaces in the device information set. To retrieve information about an enumerated interface, call <see cref="SetupDiGetDeviceInterfaceDetail" />.</para>
    </remarks>
    <seealso cref="SetupDiEnumDeviceInterfaces" />
    <seealso cref="SetupDiGetClassDevs" />
    <seealso cref="SetupDiGetDeviceInterfaceDetail" />
  </member>
  <member name="Windows.SetupDiSetDeviceInterfaceProperty">
    <summary>
      <para>The <b>SetupDiSetDeviceInterfaceProperty</b> function sets a device property of a device interface.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device interface for which to set a device interface property.</para>
    </param>
    <param name="DeviceInterfaceData">
      <para>A pointer to an <see cref="SP_DEVICE_INTERFACE_DATA" /> structure that represents the device interface for which to set a device interface property.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the device interface property to set.</para>
    </param>
    <param name="PropertyType">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed value that represents the property-data-type identifier of the device interface property to set. For more information about the property-data-type identifier, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the device interface property value. If either the property or the interface value is being deleted, this pointer must be set to <b>NULL</b>, and <i>PropertyBufferSize</i> must be set to zero. For more information about property value data, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. The property buffer size must be consistent with the property-data-type identifier that is supplied by <i>PropertyType</i>. If <i>PropertyBuffer </i> is set to <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="Flags">
      <para>Must be set to zero.</para>
    </param>
    <returns>
      <para>
        <b>SetupDiSetDeviceInterfaceProperty</b> returns <b>TRUE</b> if it is successful. Otherwise, this function returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A supplied parameter is not valid. One possibility is that the device interface specified by <i>DeviceInterfaceData</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>An unspecified data value was not valid. This error could be logged if either the symbolic link name of the device interface is not valid or the property-data-type identifier is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVICE_INTERFACE</b>
            </para>
          </description>
          <description>
            <para>The device interface that is specified by <i>DeviceInterfaceData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal element was not found. One possibility is that a property to be deleted does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSetDeviceInterfaceProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiSetDeviceInterfaceProperty</b>.</para>
      <para>A caller of <b>SetupDiSetDeviceInterfaceProperty</b> must be a member of the Administrators group to set a device interface property.</para>
      <para>
        <b>SetupDiSetDeviceInterfaceProperty</b> enforces requirements on the property-data-type identifier and the property value.</para>
      <para>To obtain the device property keys that represent the device properties that are set for a device interface, call <see cref="SetupDiGetDeviceInterfacePropertyKeys" />.</para>
      <para>To retrieve a device interface property, call <see cref="SetupDiGetDeviceInterfaceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDeviceInterfaceProperty" />
    <seealso cref="SetupDiGetDeviceInterfacePropertyKeys" />
  </member>
  <member name="Windows.SetupDiSetDeviceProperty">
    <summary>
      <para>The <b>SetupDiSetDeviceProperty</b> function sets a device instance property.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. This device information set contains a device information element that represents the device instance for which to set a device instance property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to the <see cref="SP_DEVINFO_DATA" /> structure that identifies the device instance for which to set a device instance property.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the device instance property to set.</para>
    </param>
    <param name="PropertyType">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed value that represents the property-data-type identifier for the device instance property. For more information, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the device instance property value. If the property is being deleted or set to a <b>NULL</b> value, this pointer must be <b>NULL</b>, and <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer </i> is <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="Flags">
      <para>This parameter must be set to zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A supplied parameter is not valid. One possibility is that the device information element is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid or the property is not writable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The property-data-type identifier that is supplied by <i>PropertyType</i>, or the property value that is supplied by <i>PropertyBuffer,</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVINST</b>
            </para>
          </description>
          <description>
            <para>The device instance that is specified by <i>DevInfoData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal element was not found. One possibility is that the property to be deleted does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSetDeviceProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiSetDeviceProperty</b>.</para>
      <para>A caller of <b>SetupDiSetDeviceProperty</b> must be a member of the Administrators group to set a device instance property.</para>
      <para>
        <b>SetupDiSetDeviceProperty</b> enforces requirements on the property-data-type identifier and the property value.</para>
      <para>To obtain the device property keys for the instance device properties that are set for a device, call <see cref="SetupDiGetDevicePropertyKeys" />.</para>
      <para>To retrieve a device instance property, call <see cref="SetupDiGetDeviceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDeviceProperty" />
    <seealso cref="SetupDiGetDevicePropertyKeys" />
  </member>
  <member name="Windows.SetupDiSetDevicePropertyW">
    <summary>
      <para>The <b>SetupDiSetDeviceProperty</b> function sets a device instance property.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a>. This device information set contains a device information element that represents the device instance for which to set a device instance property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to the <see cref="SP_DEVINFO_DATA" /> structure that identifies the device instance for which to set a device instance property.</para>
    </param>
    <param name="PropertyKey">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/devpropkey">DEVPROPKEY</a> structure that represents the device property key of the device instance property to set.</para>
    </param>
    <param name="PropertyType">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/property-data-type-identifiers">DEVPROPTYPE</a>-typed value that represents the property-data-type identifier for the device instance property. For more information, see the <b>Remarks</b> section later in this topic.</para>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the device instance property value. If the property is being deleted or set to a <b>NULL</b> value, this pointer must be <b>NULL</b>, and <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of the <i>PropertyBuffer</i> buffer. If <i>PropertyBuffer </i> is <b>NULL</b>, <i>PropertyBufferSize</i> must be set to zero.</para>
    </param>
    <param name="Flags">
      <para>This parameter must be set to zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b>, and the logged error can be retrieved by calling <see cref="GetLastError" />.</para>
      <para>The following table includes some of the more common error codes that this function might log.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The value of<i> Flags</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The device information set that is specified by <i>DevInfoSet</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>A supplied parameter is not valid. One possibility is that the device information element is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_REG_PROPERTY</b>
            </para>
          </description>
          <description>
            <para>The property key that is supplied by <i>PropertyKey</i> is not valid or the property is not writable.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The property-data-type identifier that is supplied by <i>PropertyType</i>, or the property value that is supplied by <i>PropertyBuffer,</i> is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_USER_BUFFER</b>
            </para>
          </description>
          <description>
            <para>A user buffer is not valid. One possibility is that <i>PropertyBuffer</i> is <b>NULL</b>, and <i>PropertyBufferSize</i> is not zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_DEVINST</b>
            </para>
          </description>
          <description>
            <para>The device instance that is specified by <i>DevInfoData</i> does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>An internal data buffer that was passed to a system call was too small.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>There was not enough system memory available to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>An unspecified internal element was not found. One possibility is that the property to be deleted does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ACCESS_DENIED</b>
            </para>
          </description>
          <description>
            <para>The caller does not have Administrator privileges.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>SetupDiSetDeviceProperty</b> is part of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">unified device property model</a>.</para>
      <para>SetupAPI supports only a Unicode version of <b>SetupDiSetDeviceProperty</b>.</para>
      <para>A caller of <b>SetupDiSetDeviceProperty</b> must be a member of the Administrators group to set a device instance property.</para>
      <para>
        <b>SetupDiSetDeviceProperty</b> enforces requirements on the property-data-type identifier and the property value.</para>
      <para>To obtain the device property keys for the instance device properties that are set for a device, call <see cref="SetupDiGetDevicePropertyKeys" />.</para>
      <para>To retrieve a device instance property, call <see cref="SetupDiGetDeviceProperty" />.</para>
    </remarks>
    <seealso cref="SetupDiGetDeviceProperty" />
    <seealso cref="SetupDiGetDevicePropertyKeys" />
  </member>
  <member name="Windows.SetupDiSetDeviceRegistryProperty - SetupDiSetDeviceRegistryPropertyA">
    <summary>
      <para>The <b>SetupDiSetDeviceRegistryProperty</b> function sets a Plug and Play device property for a device.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to set a Plug and Play device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. If the <b>ClassGuid</b> property is set, <i>DeviceInfoData.</i><b>ClassGuid</b> is set upon return to the new class for the device.</para>
    </param>
    <param name="Property">
      <para>One of the following values, which identifies the property to be set. For descriptions of these values, see <see cref="SetupDiGetDeviceRegistryProperty" />.</para>
      <list type="bullet">
        <item>
          <description>SPDRP_CONFIGFLAGS</description>
        </item>
        <item>
          <description>SPDRP_EXCLUSIVE</description>
        </item>
        <item>
          <description>SPDRP_FRIENDLYNAME</description>
        </item>
        <item>
          <description>SPDRP_LOCATION_INFORMATION</description>
        </item>
        <item>
          <description>SPDRP_LOWERFILTERS</description>
        </item>
        <item>
          <description>SPDRP_REMOVAL_POLICY_OVERRIDE</description>
        </item>
        <item>
          <description>SPDRP_SECURITY</description>
        </item>
        <item>
          <description>SPDRP_SECURITY_SDS</description>
        </item>
        <item>
          <description>SPDRP_UI_NUMBER_DESC_FORMAT</description>
        </item>
        <item>
          <description>SPDRP_UPPERFILTERS</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
SPDRP_HARDWAREID or SPDRP_COMPATIBLEIDS can only be used when <i>DeviceInfoData</i> represents a root-enumerated device. For other devices, the bus driver reports hardware and compatible IDs when enumerating a child device after receiving <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/irp-mn-query-id">IRP_MN_QUERY_ID</a>.</para>
      </blockquote>
      <para>The following values are reserved for use by the operating system and cannot be used in the <i>Property</i> parameter:</para>
      <list type="bullet">
        <item>
          <description>SPDRP_ADDRESS</description>
        </item>
        <item>
          <description>SPDRP_BUSNUMBER</description>
        </item>
        <item>
          <description>SPDRP_BUSTYPEGUID</description>
        </item>
        <item>
          <description>SPDRP_CHARACTERISTICS</description>
        </item>
        <item>
          <description>SPDRP_CAPABILITIES</description>
        </item>
        <item>
          <description>SPDRP_CLASS</description>
        </item>
        <item>
          <description>SPDRP_CLASSGUID</description>
        </item>
        <item>
          <description>SPDRP_DEVICE_POWER_DATA</description>
        </item>
        <item>
          <description>SPDRP_DEVICEDESC</description>
        </item>
        <item>
          <description>SPDRP_DEVTYPE</description>
        </item>
        <item>
          <description>SPDRP_DRIVER</description>
        </item>
        <item>
          <description>SPDRP_ENUMERATOR_NAME</description>
        </item>
        <item>
          <description>SPDRP_INSTALL_STATE</description>
        </item>
        <item>
          <description>SPDRP_LEGACYBUSTYPE</description>
        </item>
        <item>
          <description>SPDRP_LOCATION_PATHS</description>
        </item>
        <item>
          <description>SPDRP_MFG</description>
        </item>
        <item>
          <description>SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</description>
        </item>
        <item>
          <description>SPDRP_REMOVAL_POLICY</description>
        </item>
        <item>
          <description>SPDRP_REMOVAL_POLICY_HW_DEFAULT</description>
        </item>
        <item>
          <description>SPDRP_SERVICE</description>
        </item>
        <item>
          <description>SPDRP_UI_NUMBER</description>
        </item>
      </list>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the new data for the property. If the property is being cleared, then this pointer should be <b>NULL</b> and <i>PropertyBufferSize</i> must be zero.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of <i>PropertyBuffer</i>. If <i>PropertyBuffer</i> is <b>NULL</b>, then this field must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>The class name property cannot be set because it is based on the corresponding class GUID and is automatically updated when that property is changed. When the ClassGUID property changes, <b>SetupDiSetDeviceRegistryProperty</b> automatically cleans up any software keys associated with the device.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetDeviceRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
  </member>
  <member name="Windows.SetupDiSetDeviceRegistryProperty - SetupDiSetDeviceRegistryPropertyW">
    <summary>
      <para>The <b>SetupDiSetDeviceRegistryProperty</b> function sets a Plug and Play device property for a device.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a device information element that represents the device for which to set a Plug and Play device property.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. If the <b>ClassGuid</b> property is set, <i>DeviceInfoData.</i><b>ClassGuid</b> is set upon return to the new class for the device.</para>
    </param>
    <param name="Property">
      <para>One of the following values, which identifies the property to be set. For descriptions of these values, see <see cref="SetupDiGetDeviceRegistryProperty" />.</para>
      <list type="bullet">
        <item>
          <description>SPDRP_CONFIGFLAGS</description>
        </item>
        <item>
          <description>SPDRP_EXCLUSIVE</description>
        </item>
        <item>
          <description>SPDRP_FRIENDLYNAME</description>
        </item>
        <item>
          <description>SPDRP_LOCATION_INFORMATION</description>
        </item>
        <item>
          <description>SPDRP_LOWERFILTERS</description>
        </item>
        <item>
          <description>SPDRP_REMOVAL_POLICY_OVERRIDE</description>
        </item>
        <item>
          <description>SPDRP_SECURITY</description>
        </item>
        <item>
          <description>SPDRP_SECURITY_SDS</description>
        </item>
        <item>
          <description>SPDRP_UI_NUMBER_DESC_FORMAT</description>
        </item>
        <item>
          <description>SPDRP_UPPERFILTERS</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
SPDRP_HARDWAREID or SPDRP_COMPATIBLEIDS can only be used when <i>DeviceInfoData</i> represents a root-enumerated device. For other devices, the bus driver reports hardware and compatible IDs when enumerating a child device after receiving <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/irp-mn-query-id">IRP_MN_QUERY_ID</a>.</para>
      </blockquote>
      <para>The following values are reserved for use by the operating system and cannot be used in the <i>Property</i> parameter:</para>
      <list type="bullet">
        <item>
          <description>SPDRP_ADDRESS</description>
        </item>
        <item>
          <description>SPDRP_BUSNUMBER</description>
        </item>
        <item>
          <description>SPDRP_BUSTYPEGUID</description>
        </item>
        <item>
          <description>SPDRP_CHARACTERISTICS</description>
        </item>
        <item>
          <description>SPDRP_CAPABILITIES</description>
        </item>
        <item>
          <description>SPDRP_CLASS</description>
        </item>
        <item>
          <description>SPDRP_CLASSGUID</description>
        </item>
        <item>
          <description>SPDRP_DEVICE_POWER_DATA</description>
        </item>
        <item>
          <description>SPDRP_DEVICEDESC</description>
        </item>
        <item>
          <description>SPDRP_DEVTYPE</description>
        </item>
        <item>
          <description>SPDRP_DRIVER</description>
        </item>
        <item>
          <description>SPDRP_ENUMERATOR_NAME</description>
        </item>
        <item>
          <description>SPDRP_INSTALL_STATE</description>
        </item>
        <item>
          <description>SPDRP_LEGACYBUSTYPE</description>
        </item>
        <item>
          <description>SPDRP_LOCATION_PATHS</description>
        </item>
        <item>
          <description>SPDRP_MFG</description>
        </item>
        <item>
          <description>SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</description>
        </item>
        <item>
          <description>SPDRP_REMOVAL_POLICY</description>
        </item>
        <item>
          <description>SPDRP_REMOVAL_POLICY_HW_DEFAULT</description>
        </item>
        <item>
          <description>SPDRP_SERVICE</description>
        </item>
        <item>
          <description>SPDRP_UI_NUMBER</description>
        </item>
      </list>
    </param>
    <param name="PropertyBuffer">
      <para>A pointer to a buffer that contains the new data for the property. If the property is being cleared, then this pointer should be <b>NULL</b> and <i>PropertyBufferSize</i> must be zero.</para>
    </param>
    <param name="PropertyBufferSize">
      <para>The size, in bytes, of <i>PropertyBuffer</i>. If <i>PropertyBuffer</i> is <b>NULL</b>, then this field must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller of this function must be a member of the Administrators group.</para>
      <para>The class name property cannot be set because it is based on the corresponding class GUID and is automatically updated when that property is changed. When the ClassGUID property changes, <b>SetupDiSetDeviceRegistryProperty</b> automatically cleans up any software keys associated with the device.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetDeviceRegistryProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetClassRegistryProperty" />
    <seealso cref="SetupDiGetDeviceRegistryProperty" />
    <seealso cref="SetupDiSetClassRegistryProperty" />
  </member>
  <member name="Windows.SetupDiSetDriverInstallParams - SetupDiSetDriverInstallParamsA">
    <summary>
      <para>The <b>SetupDiSetDriverInstallParams</b> function sets driver installation parameters for a driver information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a driver information element that represents the driver for which to set installation parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be set to <b>NULL</b>. If this parameter is specified, <b>SetupDiSetDriverInstallParams</b> sets the driver installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetDriverInstallParams</b> sets driver installation parameters for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver for which installation parameters are set. If <i>DeviceInfoData</i> is specified, this driver must be a member of a driver list that is associated with <i>DeviceInfoData</i>. If <i>DeviceInfoData</i> is <b>NULL</b>, this driver must be a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInstallParams">
      <para>A pointer to an <see cref="SP_DRVINSTALL_PARAMS" /> structure that specifies the new driver install parameters.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetDriverInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetDriverInstallParams" />
  </member>
  <member name="Windows.SetupDiSetDriverInstallParams - SetupDiSetDriverInstallParamsW">
    <summary>
      <para>The <b>SetupDiSetDriverInstallParams</b> function sets driver installation parameters for a driver information element.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains a driver information element that represents the driver for which to set installation parameters.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies a device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be set to <b>NULL</b>. If this parameter is specified, <b>SetupDiSetDriverInstallParams</b> sets the driver installation parameters for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetDriverInstallParams</b> sets driver installation parameters for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver for which installation parameters are set. If <i>DeviceInfoData</i> is specified, this driver must be a member of a driver list that is associated with <i>DeviceInfoData</i>. If <i>DeviceInfoData</i> is <b>NULL</b>, this driver must be a member of the global class driver list for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInstallParams">
      <para>A pointer to an <see cref="SP_DRVINSTALL_PARAMS" /> structure that specifies the new driver install parameters.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetDriverInstallParams as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetDriverInstallParams" />
  </member>
  <member name="Windows.SetupDiSetSelectedDevice">
    <summary>
      <para>The <b>SetupDiSetSelectedDevice</b> function sets a device information element as the selected member of a device information set. This function is typically used by an installation wizard.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the device information element to set as the selected member of the device information set.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i> to set as the selected member of <i>DeviceInfoSet</i>.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="SetupDiGetSelectedDevice" />
  </member>
  <member name="Windows.SetupDiSetSelectedDriver - SetupDiSetSelectedDriverA">
    <summary>
      <para>The <b>SetupDiSetSelectedDriver</b> function sets, or resets, the selected driver for a device information element or the selected class driver for a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the driver list from which to select a driver for a device information element or for the device information set.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiSetSelectedDriver</b> sets, or resets, the selected driver for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetSelectedDriver</b> sets, or resets, the selected class driver for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver to be selected. This parameter is optional and can be <b>NULL</b>. If this parameter and <i>DeviceInfoData</i> are supplied, the specified driver must be a member of a driver list that is associated with <i>DeviceInfoData</i>. If this parameter is specified and <i>DeviceInfoData</i> is <b>NULL</b>, the driver must be a member of the global class driver list for <i>DeviceInfoSet</i>. If this parameter is <b>NULL</b>, the selected driver is reset for the device information element, if <i>DeviceInfoData</i> is specified, or the device information set, if <i>DeviceInfoData</i> is <b>NULL</b>.</para>
      <para>If the <i>DriverInfoData.</i><b>Reserved</b> is <b>NULL</b>, the caller is requesting a search for a driver node with the specified parameters (<b>DriverType</b>, <b>Description</b>, and <b>ProviderName</b>). If a match is found, that driver node is selected. The <b>Reserved</b> field is updated on output to reflect the actual driver node where the match was found. If a match is not found, the function fails and a call to <see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the caller of <b>SetupDiSetSelectedDriver</b> is a member of the Administrators group, the class of the device is set to the class of the selected driver, provided that the two classes are different.</para>
      <para>If <i>DriverInfoData</i> is <b>NULL</b>, <b>SetupDiSetSelectedDriver</b> resets the selected driver. As a result, there is no selected driver.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetSelectedDriver as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetSelectedDriver" />
  </member>
  <member name="Windows.SetupDiSetSelectedDriver - SetupDiSetSelectedDriverW">
    <summary>
      <para>The <b>SetupDiSetSelectedDriver</b> function sets, or resets, the selected driver for a device information element or the selected class driver for a device information set.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> that contains the driver list from which to select a driver for a device information element or for the device information set.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This parameter is optional and can be <b>NULL</b>. If this parameter is specified, <b>SetupDiSetSelectedDriver</b> sets, or resets, the selected driver for the specified device. If this parameter is <b>NULL</b>, <b>SetupDiSetSelectedDriver</b> sets, or resets, the selected class driver for <i>DeviceInfoSet</i>.</para>
    </param>
    <param name="DriverInfoData">
      <para>A pointer to an <see cref="SP_DRVINFO_DATA" /> structure that specifies the driver to be selected. This parameter is optional and can be <b>NULL</b>. If this parameter and <i>DeviceInfoData</i> are supplied, the specified driver must be a member of a driver list that is associated with <i>DeviceInfoData</i>. If this parameter is specified and <i>DeviceInfoData</i> is <b>NULL</b>, the driver must be a member of the global class driver list for <i>DeviceInfoSet</i>. If this parameter is <b>NULL</b>, the selected driver is reset for the device information element, if <i>DeviceInfoData</i> is specified, or the device information set, if <i>DeviceInfoData</i> is <b>NULL</b>.</para>
      <para>If the <i>DriverInfoData.</i><b>Reserved</b> is <b>NULL</b>, the caller is requesting a search for a driver node with the specified parameters (<b>DriverType</b>, <b>Description</b>, and <b>ProviderName</b>). If a match is found, that driver node is selected. The <b>Reserved</b> field is updated on output to reflect the actual driver node where the match was found. If a match is not found, the function fails and a call to <see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved with a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the caller of <b>SetupDiSetSelectedDriver</b> is a member of the Administrators group, the class of the device is set to the class of the selected driver, provided that the two classes are different.</para>
      <para>If <i>DriverInfoData</i> is <b>NULL</b>, <b>SetupDiSetSelectedDriver</b> resets the selected driver. As a result, there is no selected driver.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupDiSetSelectedDriver as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupDiGetSelectedDriver" />
  </member>
  <member name="Windows.SetupDiUnremoveDevice">
    <summary>
      <para>The <b>SetupDiUnremoveDevice</b> function is the default handler for the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-unremove">DIF_UNREMOVE</a> installation request.</para>
    </summary>
    <param name="DeviceInfoSet">
      <para>A handle to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/device-information-sets">device information set</a> for the local system that contains a device information element that represents a device to restore and to restart.</para>
    </param>
    <param name="DeviceInfoData">
      <para>A pointer to an <see cref="SP_DEVINFO_DATA" /> structure that specifies the device information element in <i>DeviceInfoSet</i>. This is an IN-OUT parameter because <i>DeviceInfoData.</i><b>DevInst</b> might be updated with a new handle value on return.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> if it is successful. Otherwise, it returns <b>FALSE</b> and the logged error can be retrieved by a call to <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SetupDiUnremoveDevice</b> restores a device to a hardware profile. This function starts the device, if possible, or it sets a flag in the device install parameters that eventually causes the user to be prompted to shut down the system.</para>
      <para>
        <b>Note</b>  Only a class installer should call <b>SetupDiUnremoveDevice</b> and only in those situations where the class installer must perform device unremove operations after <b>SetupDiUnremoveDevice</b> completes the default device unremove operation. In such situations, the class installer must directly call <b>SetupDiUnremoveDevice</b> when the installer processes a DIF_UNREMOVE request. For more information about calling the default handler, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-the-default-dif-code-handlers">Calling Default DIF Code Handlers</a>.</para>
      <para>The device being restored must have class install parameters for <a href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-unremove">DIF_UNREMOVE</a> or the function fails and <see cref="GetLastError" /> returns ERROR_NO_CLASSINSTALL_PARAMS.</para>
      <para>The <i>DeviceInfoSet</i> must only contain elements on the local computer.</para>
      <para>The caller of <b>SetupDiUnremoveDevice</b> must be a member of the Administrators group.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/dif-unremove">DIF_UNREMOVE</seealso>
    <seealso cref="SP_DEVINFO_DATA" />
    <seealso cref="SetupDiRemoveDevice" />
  </member>
  <member name="Windows.SetupGetInfDriverStoreLocation - SetupGetInfDriverStoreLocationA">
    <summary>
      <para>The <b>SetupGetInfDriverStoreLocation</b> function retrieves the fully qualified file name (directory path and file name) of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the driver store that corresponds to a specified INF file in the system INF file directory or a specified INF file in the driver store.</para>
    </summary>
    <param name="FileName">
      <para>A pointer to a NULL-terminated string that contains the name, and optionally the full directory path, of an INF file in the system INF file directory. Alternatively, this parameter is a pointer to a NULL-terminated string that contains the fully qualified file name (directory path and file name) of an INF file in the driver store.</para>
      <para>For more information about how to specify the INF file, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="AlternatePlatformInfo">
      <para>Reserved for system use.</para>
    </param>
    <param name="LocaleName">
      <para>Reserved for system use.</para>
    </param>
    <param name="ReturnBuffer">
      <para>A pointer to a buffer in which the function returns a NULL-terminated string that contains the fully qualified file name of the specified INF file. This parameter can be set to <b>NULL</b>. The maximum supported path size is MAX_PATH. For information about how to determine the required size of the buffer, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBufferSize">
      <para>The size, in characters, of the buffer supplied by <i>ReturnBuffer</i>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, of the <i>ReturnBuffer</i> buffer. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If <b>SetupGetInfDriverStoreLocation</b> succeeds, the function returns <b>TRUE</b>; otherwise, the function returns <b>FALSE</b>. To obtain extended error information, call <see cref="GetLastError" />.</para>
      <para>If the size, in characters, of the fully qualified file name of the requested INF file, including a null-terminator, is greater than <i>ReturnBufferSize</i>, the function will fail, and a call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>To determine the size of the return buffer that is required to contain the fully qualified file name of the specified INF file in the driver store, call <b>SetupGetInfDriverStoreLocation</b> and set <i>ReturnBuffer</i> to <b>NULL</b>, <i>ReturnBufferSize</i> to zero, and supply <i>RequiredSize</i>. <b>SetupGetInfDriverStoreLocation</b> will return the required buffer size in <i>RequiredSize</i>.</para>
      <para>When device installation preinstalls a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> in the driver store, it creates two copies of the driver package INF file. Device installation installs one copy in the system INF directory and assigns that copy of the INF file a unique <i>published file name</i> of the form <i>OEMnnn.inf</i>. Device installation installs a second copy of the INF file in the driver store and assigns that copy the original INF file name.</para>
      <para>
        <b>SetupGetInfDriverStoreLocation</b> returns the fully qualified file name of the INF file in the driver store that matches the INF file, if any, that is supplied by <i>FileName</i>. <i>Filename</i> must specify the file name, and optionally the directory path, of an INF file in the system INF directory. Alternatively, <i>Filename</i> must specify the fully qualified file name of an INF file in the driver store.</para>
      <para>For example, assume that the INF file for a driver package is <i>Myinf.inf</i>, and that for this driver package, device installation installs the INF file <i>OEM1.inf</i> in the system INF directory C:<i>\Windows\inf.</i> Further assume that device installation installs the corresponding INF file copy C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> in the driver store. In this case, the function returns C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> if <i>FileName</i> supplies one of the following strings: <i>OEM1.inf</i>, C:<i>\Windows\inf\OEM1.inf</i>, or C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf.</i></para>
      <para>
        <a href="https://docs.microsoft.com//windows-hardware/drivers/">Class installers</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/">co-installers</a> can use <b>SetupGetInfDriverStoreLocation</b> to access files in a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> that is preinstalled in the driver store. To determine the path of the driver package in the driver store, the installer does the following:</para>
      <list type="number">
        <item>
          <description>
            <para>Call <see cref="SetupDiGetDriverInfoDetail" /> to retrieve a <see cref="SP_DRVINFO_DETAIL_DATA" /> structure for a driver. The <b>InfFileName</b> member of this structure contains the fully qualified file name of the driver INF file in the system INF directory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Call <b>SetupGetInfDriverStoreLocation</b> and supply the fully qualified file name of the driver INF file that was retrieved by calling <b>SetupDiGetDriverInfoDetail</b>. <b>SetupGetInfDriverStoreLocation</b> will return the fully qualified file name of the driver INF file in the driver store. The directory path part of the fully qualified file name of the INF file is the path of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> files.</para>
          </description>
        </item>
      </list>
      <b>Note</b>  <b>SetupGetInfDriverStoreLocation</b> does not process the contents of the INF file that is specified in <i>FileName</i>. You cannot use this function to perform a content-specific search for an INF file in the driver store.
<para>Call the <see cref="SetupGetInfPublishedName" /> function to retrieve the fully qualified file name of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the system INF file directory that corresponds to a specified INF file in the system INF file directory or a specified file in the driver store.</para><blockquote><para>[!NOTE]
The setupapi.h header defines SetupGetInfDriverStoreLocation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
    <seealso cref="SP_ALTPLATFORM_INFO" />
    <seealso cref="SP_DRVINFO_DETAIL_DATA" />
    <seealso cref="SetupDiGetDriverInfoDetail" />
    <seealso cref="SetupGetInfPublishedName" />
  </member>
  <member name="Windows.SetupGetInfDriverStoreLocation - SetupGetInfDriverStoreLocationW">
    <summary>
      <para>The <b>SetupGetInfDriverStoreLocation</b> function retrieves the fully qualified file name (directory path and file name) of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the driver store that corresponds to a specified INF file in the system INF file directory or a specified INF file in the driver store.</para>
    </summary>
    <param name="FileName">
      <para>A pointer to a NULL-terminated string that contains the name, and optionally the full directory path, of an INF file in the system INF file directory. Alternatively, this parameter is a pointer to a NULL-terminated string that contains the fully qualified file name (directory path and file name) of an INF file in the driver store.</para>
      <para>For more information about how to specify the INF file, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="AlternatePlatformInfo">
      <para>Reserved for system use.</para>
    </param>
    <param name="LocaleName">
      <para>Reserved for system use.</para>
    </param>
    <param name="ReturnBuffer">
      <para>A pointer to a buffer in which the function returns a NULL-terminated string that contains the fully qualified file name of the specified INF file. This parameter can be set to <b>NULL</b>. The maximum supported path size is MAX_PATH. For information about how to determine the required size of the buffer, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBufferSize">
      <para>The size, in characters, of the buffer supplied by <i>ReturnBuffer</i>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, of the <i>ReturnBuffer</i> buffer. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If <b>SetupGetInfDriverStoreLocation</b> succeeds, the function returns <b>TRUE</b>; otherwise, the function returns <b>FALSE</b>. To obtain extended error information, call <see cref="GetLastError" />.</para>
      <para>If the size, in characters, of the fully qualified file name of the requested INF file, including a null-terminator, is greater than <i>ReturnBufferSize</i>, the function will fail, and a call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>To determine the size of the return buffer that is required to contain the fully qualified file name of the specified INF file in the driver store, call <b>SetupGetInfDriverStoreLocation</b> and set <i>ReturnBuffer</i> to <b>NULL</b>, <i>ReturnBufferSize</i> to zero, and supply <i>RequiredSize</i>. <b>SetupGetInfDriverStoreLocation</b> will return the required buffer size in <i>RequiredSize</i>.</para>
      <para>When device installation preinstalls a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> in the driver store, it creates two copies of the driver package INF file. Device installation installs one copy in the system INF directory and assigns that copy of the INF file a unique <i>published file name</i> of the form <i>OEMnnn.inf</i>. Device installation installs a second copy of the INF file in the driver store and assigns that copy the original INF file name.</para>
      <para>
        <b>SetupGetInfDriverStoreLocation</b> returns the fully qualified file name of the INF file in the driver store that matches the INF file, if any, that is supplied by <i>FileName</i>. <i>Filename</i> must specify the file name, and optionally the directory path, of an INF file in the system INF directory. Alternatively, <i>Filename</i> must specify the fully qualified file name of an INF file in the driver store.</para>
      <para>For example, assume that the INF file for a driver package is <i>Myinf.inf</i>, and that for this driver package, device installation installs the INF file <i>OEM1.inf</i> in the system INF directory C:<i>\Windows\inf.</i> Further assume that device installation installs the corresponding INF file copy C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> in the driver store. In this case, the function returns C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> if <i>FileName</i> supplies one of the following strings: <i>OEM1.inf</i>, C:<i>\Windows\inf\OEM1.inf</i>, or C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf.</i></para>
      <para>
        <a href="https://docs.microsoft.com//windows-hardware/drivers/">Class installers</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/">co-installers</a> can use <b>SetupGetInfDriverStoreLocation</b> to access files in a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> that is preinstalled in the driver store. To determine the path of the driver package in the driver store, the installer does the following:</para>
      <list type="number">
        <item>
          <description>
            <para>Call <see cref="SetupDiGetDriverInfoDetail" /> to retrieve a <see cref="SP_DRVINFO_DETAIL_DATA" /> structure for a driver. The <b>InfFileName</b> member of this structure contains the fully qualified file name of the driver INF file in the system INF directory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Call <b>SetupGetInfDriverStoreLocation</b> and supply the fully qualified file name of the driver INF file that was retrieved by calling <b>SetupDiGetDriverInfoDetail</b>. <b>SetupGetInfDriverStoreLocation</b> will return the fully qualified file name of the driver INF file in the driver store. The directory path part of the fully qualified file name of the INF file is the path of the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> files.</para>
          </description>
        </item>
      </list>
      <b>Note</b>  <b>SetupGetInfDriverStoreLocation</b> does not process the contents of the INF file that is specified in <i>FileName</i>. You cannot use this function to perform a content-specific search for an INF file in the driver store.
<para>Call the <see cref="SetupGetInfPublishedName" /> function to retrieve the fully qualified file name of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the system INF file directory that corresponds to a specified INF file in the system INF file directory or a specified file in the driver store.</para><blockquote><para>[!NOTE]
The setupapi.h header defines SetupGetInfDriverStoreLocation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
    <seealso cref="SP_ALTPLATFORM_INFO" />
    <seealso cref="SP_DRVINFO_DETAIL_DATA" />
    <seealso cref="SetupDiGetDriverInfoDetail" />
    <seealso cref="SetupGetInfPublishedName" />
  </member>
  <member name="Windows.SetupGetInfPublishedName">
    <summary>
      <para>The <b>SetupGetInfPublishedName</b> function retrieves the fully qualified file name (directory path and file name) of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.</para>
    </summary>
    <param name="DriverStoreLocation">
      <para>A pointer to a NULL-terminated string that contains the fully qualified file name (directory path and file name) of an INF file in the driver store. Alternatively, this parameter is a pointer to a NULL-terminated string that contains the name, and optionally the full directory path, of an INF file in the system INF file directory. For more information about how to specify the INF file, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBuffer">
      <para>A pointer to the buffer in which <b>SetupGetInfPublishedName</b> returns a NULL-terminated string that contains the fully qualified file name of the specified INF file in the system INF directory. The maximum path size is MAX_PATH. This pointer can be set to <b>NULL</b>. For information about how to determine the required size of the return buffer, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBufferSize">
      <para>The size, in characters, of the buffer supplied by <i>ReturnBuffer</i>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, of the <i>ReturnBuffer</i> buffer. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If <b>SetupGetInfPublishedName</b> succeeds, the function returns <b>TRUE</b>; otherwise, the function returns <b>FALSE</b>. To obtain extended error information, call <see cref="GetLastError" />.</para>
      <para>If the size, in characters, of the fully qualified file name of the requested INF file, including a null-terminator, is greater than <i>ReturnBufferSize</i>, the function will fail, and a call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>To determine the size of the return buffer that is required to contain the fully qualified file name of the specified INF file in the system INF directory, call <b>SetupGetInfPublishedName</b> and set <i>ReturnBuffer</i> to <b>NULL</b>, <i>ReturnBufferSize</i> to zero, and supply <i>RequiredSize</i>. <b>SetupGetInfPublishedName</b> will return the required buffer size in <i>RequiredSize</i>.</para>
      <para>When device installation preinstalls a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> in the driver store, it creates two copies of the driver package INF file. Device installation adds one copy to the system INF directory and assigns that copy of the INF file a unique <i>published file name</i> of the form <i>OEMnnn.inf</i>. Device installation adds a second copy of the INF file to the driver store and assigns that copy the original INF file name.</para>
      <para>
        <b>SetupGetInfPublishedName</b> returns the fully qualified file name of the INF file in the system INF file directory that matches the INF file, if any, that is supplied by <i>DriverStoreLocation</i>. <i>DriverStoreLocation </i> must specify the fully qualified file name of an INF file in the driver store or must specify the file name, and optionally the directory path, of an INF file in the system INF directory. For example, assume that the INF file for a driver package is <i>myinf.inf</i>, and that for this driver package, device installation installs the INF file <i>OEM1.inf</i> in the system INF directory C:<i>\Windows\inf</i>. Further assume that device installation installs the corresponding INF file copy C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> in the driver store. In this case, the function returns C:<i>\Windows\inf\OEM1.inf</i> if <i>DriverStoreLocation</i> supplies one of the following strings: C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf, OEM1.inf</i>, or C:<i>\Windows\inf\OEM1.inf.</i></para>
      <para>Call the <see cref="SetupGetInfDriverStoreLocation" /> function to retrieve the fully qualified file name of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified file in the driver store.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupGetInfPublishedName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupGetInfDriverStoreLocation" />
  </member>
  <member name="Windows.SetupGetInfPublishedNameA">
    <summary>
      <para>The <b>SetupGetInfPublishedName</b> function retrieves the fully qualified file name (directory path and file name) of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.</para>
    </summary>
    <param name="DriverStoreLocation">
      <para>A pointer to a NULL-terminated string that contains the fully qualified file name (directory path and file name) of an INF file in the driver store. Alternatively, this parameter is a pointer to a NULL-terminated string that contains the name, and optionally the full directory path, of an INF file in the system INF file directory. For more information about how to specify the INF file, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBuffer">
      <para>A pointer to the buffer in which <b>SetupGetInfPublishedName</b> returns a NULL-terminated string that contains the fully qualified file name of the specified INF file in the system INF directory. The maximum path size is MAX_PATH. This pointer can be set to <b>NULL</b>. For information about how to determine the required size of the return buffer, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBufferSize">
      <para>The size, in characters, of the buffer supplied by <i>ReturnBuffer</i>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, of the <i>ReturnBuffer</i> buffer. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If <b>SetupGetInfPublishedName</b> succeeds, the function returns <b>TRUE</b>; otherwise, the function returns <b>FALSE</b>. To obtain extended error information, call <see cref="GetLastError" />.</para>
      <para>If the size, in characters, of the fully qualified file name of the requested INF file, including a null-terminator, is greater than <i>ReturnBufferSize</i>, the function will fail, and a call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>To determine the size of the return buffer that is required to contain the fully qualified file name of the specified INF file in the system INF directory, call <b>SetupGetInfPublishedName</b> and set <i>ReturnBuffer</i> to <b>NULL</b>, <i>ReturnBufferSize</i> to zero, and supply <i>RequiredSize</i>. <b>SetupGetInfPublishedName</b> will return the required buffer size in <i>RequiredSize</i>.</para>
      <para>When device installation preinstalls a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> in the driver store, it creates two copies of the driver package INF file. Device installation adds one copy to the system INF directory and assigns that copy of the INF file a unique <i>published file name</i> of the form <i>OEMnnn.inf</i>. Device installation adds a second copy of the INF file to the driver store and assigns that copy the original INF file name.</para>
      <para>
        <b>SetupGetInfPublishedName</b> returns the fully qualified file name of the INF file in the system INF file directory that matches the INF file, if any, that is supplied by <i>DriverStoreLocation</i>. <i>DriverStoreLocation </i> must specify the fully qualified file name of an INF file in the driver store or must specify the file name, and optionally the directory path, of an INF file in the system INF directory. For example, assume that the INF file for a driver package is <i>myinf.inf</i>, and that for this driver package, device installation installs the INF file <i>OEM1.inf</i> in the system INF directory C:<i>\Windows\inf</i>. Further assume that device installation installs the corresponding INF file copy C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> in the driver store. In this case, the function returns C:<i>\Windows\inf\OEM1.inf</i> if <i>DriverStoreLocation</i> supplies one of the following strings: C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf, OEM1.inf</i>, or C:<i>\Windows\inf\OEM1.inf.</i></para>
      <para>Call the <see cref="SetupGetInfDriverStoreLocation" /> function to retrieve the fully qualified file name of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified file in the driver store.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupGetInfPublishedName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupGetInfDriverStoreLocation" />
  </member>
  <member name="Windows.SetupGetInfPublishedName">
    <summary>
      <para>The <b>SetupGetInfPublishedName</b> function retrieves the fully qualified file name (directory path and file name) of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.</para>
    </summary>
    <param name="DriverStoreLocation">
      <para>A pointer to a NULL-terminated string that contains the fully qualified file name (directory path and file name) of an INF file in the driver store. Alternatively, this parameter is a pointer to a NULL-terminated string that contains the name, and optionally the full directory path, of an INF file in the system INF file directory. For more information about how to specify the INF file, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBuffer">
      <para>A pointer to the buffer in which <b>SetupGetInfPublishedName</b> returns a NULL-terminated string that contains the fully qualified file name of the specified INF file in the system INF directory. The maximum path size is MAX_PATH. This pointer can be set to <b>NULL</b>. For information about how to determine the required size of the return buffer, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBufferSize">
      <para>The size, in characters, of the buffer supplied by <i>ReturnBuffer</i>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, of the <i>ReturnBuffer</i> buffer. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If <b>SetupGetInfPublishedName</b> succeeds, the function returns <b>TRUE</b>; otherwise, the function returns <b>FALSE</b>. To obtain extended error information, call <see cref="GetLastError" />.</para>
      <para>If the size, in characters, of the fully qualified file name of the requested INF file, including a null-terminator, is greater than <i>ReturnBufferSize</i>, the function will fail, and a call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>To determine the size of the return buffer that is required to contain the fully qualified file name of the specified INF file in the system INF directory, call <b>SetupGetInfPublishedName</b> and set <i>ReturnBuffer</i> to <b>NULL</b>, <i>ReturnBufferSize</i> to zero, and supply <i>RequiredSize</i>. <b>SetupGetInfPublishedName</b> will return the required buffer size in <i>RequiredSize</i>.</para>
      <para>When device installation preinstalls a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> in the driver store, it creates two copies of the driver package INF file. Device installation adds one copy to the system INF directory and assigns that copy of the INF file a unique <i>published file name</i> of the form <i>OEMnnn.inf</i>. Device installation adds a second copy of the INF file to the driver store and assigns that copy the original INF file name.</para>
      <para>
        <b>SetupGetInfPublishedName</b> returns the fully qualified file name of the INF file in the system INF file directory that matches the INF file, if any, that is supplied by <i>DriverStoreLocation</i>. <i>DriverStoreLocation </i> must specify the fully qualified file name of an INF file in the driver store or must specify the file name, and optionally the directory path, of an INF file in the system INF directory. For example, assume that the INF file for a driver package is <i>myinf.inf</i>, and that for this driver package, device installation installs the INF file <i>OEM1.inf</i> in the system INF directory C:<i>\Windows\inf</i>. Further assume that device installation installs the corresponding INF file copy C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> in the driver store. In this case, the function returns C:<i>\Windows\inf\OEM1.inf</i> if <i>DriverStoreLocation</i> supplies one of the following strings: C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf, OEM1.inf</i>, or C:<i>\Windows\inf\OEM1.inf.</i></para>
      <para>Call the <see cref="SetupGetInfDriverStoreLocation" /> function to retrieve the fully qualified file name of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified file in the driver store.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupGetInfPublishedName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupGetInfDriverStoreLocation" />
  </member>
  <member name="Windows.SetupGetInfPublishedNameW">
    <summary>
      <para>The <b>SetupGetInfPublishedName</b> function retrieves the fully qualified file name (directory path and file name) of an <a href="https://docs.microsoft.com//windows-hardware/drivers/install/overview-of-inf-files">INF file</a> in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.</para>
    </summary>
    <param name="DriverStoreLocation">
      <para>A pointer to a NULL-terminated string that contains the fully qualified file name (directory path and file name) of an INF file in the driver store. Alternatively, this parameter is a pointer to a NULL-terminated string that contains the name, and optionally the full directory path, of an INF file in the system INF file directory. For more information about how to specify the INF file, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBuffer">
      <para>A pointer to the buffer in which <b>SetupGetInfPublishedName</b> returns a NULL-terminated string that contains the fully qualified file name of the specified INF file in the system INF directory. The maximum path size is MAX_PATH. This pointer can be set to <b>NULL</b>. For information about how to determine the required size of the return buffer, see the following <b>Remarks</b> section.</para>
    </param>
    <param name="ReturnBufferSize">
      <para>The size, in characters, of the buffer supplied by <i>ReturnBuffer</i>.</para>
    </param>
    <param name="RequiredSize">
      <para>A pointer to a DWORD-typed variable that receives the size, in characters, of the <i>ReturnBuffer</i> buffer. This parameter is optional and can be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If <b>SetupGetInfPublishedName</b> succeeds, the function returns <b>TRUE</b>; otherwise, the function returns <b>FALSE</b>. To obtain extended error information, call <see cref="GetLastError" />.</para>
      <para>If the size, in characters, of the fully qualified file name of the requested INF file, including a null-terminator, is greater than <i>ReturnBufferSize</i>, the function will fail, and a call to <see cref="GetLastError" /> will return ERROR_INSUFFICIENT_BUFFER.</para>
    </returns>
    <remarks>
      <para>To determine the size of the return buffer that is required to contain the fully qualified file name of the specified INF file in the system INF directory, call <b>SetupGetInfPublishedName</b> and set <i>ReturnBuffer</i> to <b>NULL</b>, <i>ReturnBufferSize</i> to zero, and supply <i>RequiredSize</i>. <b>SetupGetInfPublishedName</b> will return the required buffer size in <i>RequiredSize</i>.</para>
      <para>When device installation preinstalls a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/difx-guidelines">driver package</a> in the driver store, it creates two copies of the driver package INF file. Device installation adds one copy to the system INF directory and assigns that copy of the INF file a unique <i>published file name</i> of the form <i>OEMnnn.inf</i>. Device installation adds a second copy of the INF file to the driver store and assigns that copy the original INF file name.</para>
      <para>
        <b>SetupGetInfPublishedName</b> returns the fully qualified file name of the INF file in the system INF file directory that matches the INF file, if any, that is supplied by <i>DriverStoreLocation</i>. <i>DriverStoreLocation </i> must specify the fully qualified file name of an INF file in the driver store or must specify the file name, and optionally the directory path, of an INF file in the system INF directory. For example, assume that the INF file for a driver package is <i>myinf.inf</i>, and that for this driver package, device installation installs the INF file <i>OEM1.inf</i> in the system INF directory C:<i>\Windows\inf</i>. Further assume that device installation installs the corresponding INF file copy C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf</i> in the driver store. In this case, the function returns C:<i>\Windows\inf\OEM1.inf</i> if <i>DriverStoreLocation</i> supplies one of the following strings: C:<i>\windows\system32\driverstore\filerepository\myinf_12345678\myinf.inf, OEM1.inf</i>, or C:<i>\Windows\inf\OEM1.inf.</i></para>
      <para>Call the <see cref="SetupGetInfDriverStoreLocation" /> function to retrieve the fully qualified file name of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified file in the driver store.</para>
      <blockquote>
        <para>[!NOTE]
The setupapi.h header defines SetupGetInfPublishedName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="SetupGetInfDriverStoreLocation" />
  </member>
  <member name="Windows.SetupGetNonInteractiveMode">
    <summary>
      <para>The <b>SetupGetNonInteractiveMode</b> function returns the value of a SetupAPI non-interactive flag  that indicates whether the caller's process can interact with a user through user interface components, such as dialog boxes.</para>
    </summary>
    <returns>
      <para>
        <b>SetupGetNonInteractiveMode</b> returns <b>TRUE</b> if the caller's process cannot display interactive user interface elements, such as dialog boxes. Otherwise, the function returns <b>FALSE</b>, which indicates that the process can display interactive user interface elements.</para>
    </returns>
    <remarks>
      <para>Installation applications and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/writing-a-co-installer">co-installers</a> can use this function to determine whether the current process can display interactive user interface elements such as dialog boxes. <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi">SetupAPI</a> runs a class installer or a co-installer either in an interactive or in a non-interactive process, depending on which <a href="https://docs.microsoft.com//windows-hardware/drivers/install/handling-dif-codes">DIF code</a> SetupAPI is processing.</para>
      <para>An installation application can call <see cref="SetupSetNonInteractiveMode" /> to set the SetupAPI non-interactive flag that controls whether SetupAPI can display interactive user interface elements in the caller's context.</para>
    </remarks>
    <seealso cref="SetupSetNonInteractiveMode" />
  </member>
  <member name="Windows.SetupGetThreadLogToken">
    <summary>
      <para>The <b>SetupGetThreadLogToken</b> function retrieves the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">log token</a> for the thread from which this function was called.</para>
    </summary>
    <returns>
      <para>
        <b>SetupGetThreadLogToken</b> returns the log token for the thread from which the function was called. If a log token is not set for the thread, <b>SetupGetThreadLogToken</b> returns the system-defined log token LOGTOKEN_UNSPECIFIED.</para>
    </returns>
    <remarks>
      <para>To set a log token for a thread, call <see cref="SetupSetThreadLogToken" />.</para>
      <para>For more information about log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">Log Tokens</a>.</para>
      <para>For more information about using log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-and-getting-a-log-token-for-a-thread">Setting and Getting a Log Token for a Thread</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">Log Tokens</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-and-getting-a-log-token-for-a-thread">Setting and Getting a Log Token for a Thread</seealso>
    <seealso cref="SetupSetThreadLogToken" />
  </member>
  <member name="Windows.SetupSetNonInteractiveMode">
    <summary>
      <para>The <b>SetupSetNonInteractiveMode</b> function sets a non-interactive SetupAPI flag that determines whether SetupAPI can interact with a user in the caller's context.</para>
    </summary>
    <param name="NonInteractiveFlag">
      <para>The Boolean value of the non-interactive flag. If <i>NonInteractive</i> is set to <b>TRUE</b>, SetupAPI runs in a non-interactive user mode and if <i>NonInteractive</i> is set to <b>FALSE</b>, SetupAPI runs in an interactive user mode.</para>
    </param>
    <returns>
      <para>
        <b>SetupSetNonInteractiveMode</b> returns the previous setting of the non-interactive flag.</para>
    </returns>
    <remarks>
      <para>Installation applications and <a href="https://docs.microsoft.com//windows-hardware/drivers/install/writing-a-co-installer">co-installers</a> can use this function to control whether SetupAPI can display interactive user interface elements, such as dialog boxes, in the caller's context.</para>
      <para>An installation application or an installer can call <see cref="SetupGetNonInteractiveMode" /> to retrieve the current value of the non-interactive flag.</para>
    </remarks>
    <seealso cref="SetupGetNonInteractiveMode" />
  </member>
  <member name="Windows.SetupSetThreadLogToken">
    <summary>
      <para>The <b>SetupSetThreadLogToken</b> function sets the log context, as represented by a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">log token</a><u>,</u> for the thread from which this function was called. A subsequent call to <see cref="SetupGetThreadLogToken" /> made within the same thread retrieves the log token that was most recently set for the thread.</para>
    </summary>
    <param name="LogToken">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">log token</a> that is either a system-defined log token or was returned by <see cref="SetupGetThreadLogToken" />.</para>
    </param>
    <returns>
      <para>None</para>
    </returns>
    <remarks>
      <para>
        <b>SetupSetThreadLogToken</b> establishes a log context for the thread from which the function was called. The log context is represented by a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">log token</a>, which can be retrieved by calling <see cref="SetupGetThreadLogToken" />.</para>
      <para>For more information about log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">Log Tokens</a>.</para>
      <para>For more information about using log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-and-getting-a-log-token-for-a-thread">Setting and Getting a Log Token for a Thread</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">Log Tokens</seealso>
    <seealso href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-and-getting-a-log-token-for-a-thread">Setting and Getting a Log Token for a Thread</seealso>
    <seealso cref="SetupGetThreadLogToken" />
  </member>
  <member name="Windows.SetupWriteTextLog">
    <summary>
      <para>The <b>SetupWriteTextLog</b> function writes a log entry in a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi-text-logs">SetupAPI text log</a>.</para>
    </summary>
    <param name="LogToken">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">log token</a> that is either a system-defined log token or was returned by <see cref="SetupGetThreadLogToken" />.</para>
    </param>
    <param name="Category">
      <para>A DWORD-typed value that indicates the event category for the log entry. The event categories that can be specified for a log entry are the same as those that can be enabled for a text log. For a list of event categories, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/enabling-event-categories-for-a-text-log">Enabling Event Categories for a SetupAPI Text Log</a>.</para>
    </param>
    <param name="Flags">
      <para>A DWORD-typed value that is a bitwise OR of flag values, which specify the following:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The event level for the log entry. The event levels that can be specified for a log entry are the same as those that can be enabled for a text log. For a list of event level flags, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-the-event-level-for-a-text-log">Setting the Event Level for a SetupAPI Text Log</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Whether to include a time stamp in the log entry. The time stamp flag value is TXTLOG_TIMESTAMP.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The change, if any, to the indentation depth of the section and the current log entry. For information about how to use the indentation flags, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/writing-indented-log-entries">Writing Indented Log Entries</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="MessageStr">
      <para>A pointer to a NULL-terminated constant string that contains a <b>printf</b>-compatible format string, which specifies the formatted message to include in the log entry. The comma-separated parameter list that follows <i>MessageStr</i> must match the format specifiers in the format string.</para>
    </param>
    <param name="...">
      <para>A comma-separated parameter list that matches the format specifiers in the format string that is supplied by <i>MessageStr</i>.</para>
    </param>
    <returns>
      <para>None</para>
    </returns>
    <remarks>
      <para>If the value of <i>LogToken</i> was returned by a call to <see cref="SetupGetThreadLogToken" /> and the corresponding text log section can be found, <b>SetupWriteTextLog</b> writes the log entry in that text log section. If <b>SetupWriteTextLog</b> cannot locate the section, <b>SetupWriteTextLog</b> writes the log entry in the corresponding text log, but does not include the log entry in a section.</para>
      <para>If the value of <i>LogToken</i> is one of the system-defined log tokens listed in the following table, <b>SetupWriteTextLog</b> performs the write operation that is indicated for that log token.</para>
      <list type="table">
        <listheader>
          <description>System-defined log token </description>
          <description>Write operation</description>
        </listheader>
        <item>
          <description>
            <para>LOGTOKEN_NOLOG</para>
          </description>
          <description>
            <para>The log entry is not written to any text log.</para>
          </description>
        </item>
        <item>
          <description>
            <para>LOG_TOKEN_UNSPECIFIED</para>
          </description>
          <description>
            <para>The log entry is written to the application installation text log. The log entry is not included in a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/format-of-a-text-log-section">text log section</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>LOGTOKEN_SETUPAPI_APPLOG</para>
          </description>
          <description>
            <para>The log entry is written to the application installation text log. The log entry is not included in a text log section.</para>
          </description>
        </item>
        <item>
          <description>
            <para>LOGTOKEN_SETUPAPI_DEVLOG</para>
          </description>
          <description>
            <para>The log entry is written to the device installation text log. The log entry is not included in a text log section.</para>
          </description>
        </item>
      </list>
      <para>
        <b>Note</b>  Setting the value of <i>LogToken</i> to one of the system-defined log tokens does not change the value of the current log token for the thread.</para>
      <para>In addition, <b>SetupWriteTextLog</b> does not write a log entry when any of the following are true:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-the-event-level-for-a-text-log">event level set for the text log</a> is less than the event level that is specified for the log entry.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The event category for the log entry is not enabled for the text log. For more information about event categories, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/enabling-event-categories-for-a-text-log">Enabling Event Categories for a Text Log</a>.</para>
          </description>
        </item>
      </list>
      <para>The maximum length, in characters, of a log entry is 336.</para>
      <para>To write information about a SetupAPI-specific error or a Win32 error in a text log, an application can use <see cref="SetupWriteTextLogError" />.</para>
      <para>For general information about writing log entries in the SetupAPI text logs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi-logging--windows-vista-and-later-">SetupAPI Logging (Windows Vista and Later)</a>.</para>
      <para>For more information about the operation of <b>SetupWriteTextLog</b>, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-setupwritetextlog">Calling SetupWriteTextLog</a>.</para>
      <para>For more information about log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">Log Tokens</a>.</para>
      <para>For more information about using log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-and-getting-a-log-token-for-a-thread">Setting and Getting a Log Token for a Thread</a>.</para>
    </remarks>
    <seealso cref="SetupGetThreadLogToken" />
    <seealso cref="SetupWriteTextLogError" />
  </member>
  <member name="Windows.SetupWriteTextLogError">
    <summary>
      <para>The <b>SetupWriteTextLogError</b> function writes information about a SetupAPI-specific error or a Win32 system error to a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi-text-logs">SetupAPI text log</a>.</para>
    </summary>
    <param name="LogToken">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">log token</a> that is either a system-defined log token or was returned by <see cref="SetupGetThreadLogToken" />.</para>
    </param>
    <param name="Category">
      <para>A value of type DWORD that indicates the event category for the log entry. The event categories that can be specified for a log entry are the same as those that can be enabled for a text log. For a list of event categories, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/enabling-event-categories-for-a-text-log">Enabling Event Categories for a SetupAPI Text Log</a>.</para>
    </param>
    <param name="LogFlags">
      <para>A value of type DWORD that is a bitwise OR of flag values, which specify the following:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The event level for the log entry. The event levels that can be specified for a log entry are the same as those that can be enabled for a text log. For a list of event level flags, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-the-event-level-for-a-text-log">Setting the Event Level for a Text Log</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Whether to include a time stamp in the log entry. The time stamp flag value is TXTLOG_TIMESTAMP.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The change, if any, to the indentation depth of the section and the current log entry. For information about how to use the indentation flags, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/writing-indented-log-entries">Writing Indented Log Entries</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Error">
      <para>A SetupAPI-specific error code or a Win32 error code. The SetupAPI-specific error codes are listed in <i>Setupapi.h</i>. The Win32 error codes are listed in <i>Winerror.h</i>.</para>
    </param>
    <param name="MessageStr">
      <para>A pointer to a NULL-terminated constant string that contains a <b>printf</b>-compatible format string, which specifies the formatted message to include in the log entry.</para>
    </param>
    <param name="...">
      <para>A comma-separated parameter list that matches the format specifiers in the format string that is supplied by <i>MessageStr</i>.</para>
    </param>
    <returns>
      <para>None</para>
    </returns>
    <remarks>
      <para>If an installation application has a SetupAPI-specific error code or a Win32 error code that is associated with an installation error, the application can call <b>SetupWriteTextLogError</b> instead of <see cref="SetupWriteTextLog" /> to write two entries into a text log. The first entry will be the same as that written by <b>SetupWriteTextLog</b> and the second entry will log the error code and a user-friendly description of the error.</para>
      <para>The log token, event category, and flags that a caller supplies affect the operation of <b>SetupWriteTextLogError</b> is the same manner as that described for <b>SetupWriteTextLog</b>.</para>
      <para>
        <b>SetupWriteTextLogError</b> writes the first log entry in the following format:</para>
      <para>
        <i>entry-prefix</i>  <i>time_stamp category</i><i>indentation</i>  <i>formatted-message</i></para>
      <para>
        <b>SetupWriteTextLogError</b> writes the second log entry in the following format:</para>
      <para>
        <i>entry-prefix</i>  <i>time_stamp</i>  <i>category</i></para>
      <para>
        <i>indentation</i>
      </para>
      <para>
        <b>Error:</b> <i>error-numbererror-description</i></para>
      <para>Where:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The <i>entry-prefix</i>, <i>time-stamp</i>, <i>category</i>, <i>indentation</i>, and <i>formatted-message</i> fields are the same as those described in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/format-of-a-text-log-section-body">Format of a Text Log Section Body</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The <i>error-number</i> field contains the error number.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The <i>error-description</i> field contains a user-friendly description of the error.</para>
          </description>
        </item>
      </list>
      <para>For general information about writing log entries in the SetupAPI text logs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi-logging--windows-vista-and-later-">SetupAPI Logging (Windows Vista)</a>.</para>
      <para>For more information about the operation of <b>SetupWriteTextLogError</b>, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-setupwritetextlogerror">Calling SetupWriteTextLogError</a>.</para>
      <para>For more information about log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">Log Tokens</a>.</para>
      <para>For more information about using log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-and-getting-a-log-token-for-a-thread">Setting and Getting a Log Token for a Thread</a>.</para>
    </remarks>
    <seealso cref="SetupGetThreadLogToken" />
    <seealso cref="SetupWriteTextLog" />
  </member>
  <member name="Windows.SetupWriteTextLogInfLine">
    <summary>
      <para>The <b>SetupWriteTextLogInfLine</b> function writes a log entry in a <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi-text-logs">SetupAPI text log</a> that contains the text of a specified INF file line.</para>
    </summary>
    <param name="LogToken">
      <para>A <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">log token</a> that is either a system-defined log token or was returned by <see cref="SetupGetThreadLogToken" />.</para>
    </param>
    <param name="Flags">
      <para>A value of type DWORD that is a bitwise OR of flag values, which specify the following:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The event level for the log entry. The event levels that can be specified for a log entry are the same as those that can be enabled for a text log. For a list of event level flags, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-the-event-level-for-a-text-log">Setting the Event Level for a SetupAPI Text Log</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Whether to include a time stamp in the log entry. The time stamp flag value is TXTLOG_TIMESTAMP.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The change, if any, to the indentation depth of the section and the current log entry. For information about how to use the indentation flags, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/writing-indented-log-entries">Writing Indented Log Entries</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="InfHandle">
      <para>A handle to the INF file that includes the line of text to be written to the text log. A handle to an INF file is obtained by calling <b>SetupOpenInfFile</b>, which is documented in the Platform SDK.</para>
    </param>
    <param name="Context">
      <para>A pointer to an INF file context that specifies the  line of text to be written to the text log. An INF file context for a line is obtained by calling the <b>SetupFind</b><i>Xxx</i><b>Line</b> functions. For information about INF files and an INF file context, see the information that is provided in the Platform SDK about using INF files, obtaining an INF file context, and the INFCONTEXT structure.</para>
    </param>
    <returns>
      <para>None</para>
    </returns>
    <remarks>
      <para>
        <b>SetupWriteTextLogInfLine</b> writes a log entry in the following format:</para>
      <para>
        <i>entry-prefix</i>  <i>time-stamp</i> <b>inf:</b><i>indentation</i> <i>inf-line-text</i> <b>(</b><i>inf-file-name</i> <b>line</b> <i>line-number</i><b>)</b></para>
      <para>Where:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The <i>entry-prefix</i> and <i>time-stamp</i> fields are the same as those described in <a href="https://docs.microsoft.com//windows-hardware/drivers/install/format-of-a-text-log-section-body">Format of a Text Log Section Body</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The <i>inf-line-text</i> field contains the text of the specified INF file line.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The <i>inf-file-name</i> field contains the name of the INF file that contains the specified INF file line.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The <i>line-number</i> field contains the line number of the specified line in the INF file.</para>
          </description>
        </item>
      </list>
      <para>The log token and flags that a caller supplies affect the operation of <b>SetupWriteTextLogInfLine</b> in the same manner as that described for <see cref="SetupWriteTextLog" /> and <see cref="SetupWriteTextLogError" />. In addition, <b>SetupWriteTextLogInfLine</b> uses the <a href="https://docs.microsoft.com//windows-hardware/drivers/install/enabling-event-categories-for-a-text-log">event category</a> TXTLOG_INF.</para>
      <para>For general information about writing log entries in the SetupAPI text logs, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi-logging--windows-vista-and-later-">SetupAPI Logging (Windows Vista)</a>.</para>
      <para>For more information about the operation of <b>SetupWriteTextLogInfLine</b>, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/calling-setupwritetextloginfline">Calling SetupWriteTextLogInfLine</a>.</para>
      <para>For more information about the various types of log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/log-tokens">Log Tokens</a>.</para>
      <para>For more information about using log tokens, see <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setting-and-getting-a-log-token-for-a-thread">Setting and Getting a Log Token for a Thread</a>.</para>
    </remarks>
    <seealso cref="SetupGetThreadLogToken" />
    <seealso cref="SetupWriteTextLog" />
    <seealso cref="SetupWriteTextLogError" />
  </member>
</doc>