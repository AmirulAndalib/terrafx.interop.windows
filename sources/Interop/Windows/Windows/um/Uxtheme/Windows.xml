<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.BeginBufferedAnimation">
    <summary>
      <para>Begins a buffered animation operation. The animation consists of a cross-fade between the contents of two buffers over a specified period of time.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window in which the animations play.</para>
    </param>
    <param name="hdcTarget">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>A handle of the target DC on which the buffer is animated.</para>
    </param>
    <param name="prcTarget">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>A pointer to a structure that specifies the area of the target DC in which to draw.</para>
    </param>
    <param name="dwFormat">
      <para>Type: <b><see cref="BP_BUFFERFORMAT" /></b></para>
      <para>The format of the buffer.</para>
    </param>
    <param name="pPaintParams">
      <para>Type: <b><see cref="BP_PAINTPARAMS" />*</b></para>
      <para>A pointer to a structure that defines the paint operation parameters. This value can be <b>NULL</b>.</para>
    </param>
    <param name="pAnimationParams">
      <para>Type: <b><see cref="BP_ANIMATIONPARAMS" />*</b></para>
      <para>A pointer to a structure that defines the animation operation parameters.</para>
    </param>
    <param name="phdcFrom">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a>*</b></para>
      <para>When this function returns, this value points to the handle of the DC where the application should paint the initial state of the animation, if not <b>NULL</b>.</para>
    </param>
    <param name="phdcTo">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a>*</b></para>
      <para>When this function returns, this value points to the handle of the DC where the application should paint the final state of the animation, if not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b>HANIMATIONBUFFER</b></para>
      <para>A handle to the buffered paint animation.</para>
    </returns>
    <remarks>
      <para>
        <b>BeginBufferedAnimation</b> will take care of drawing the intermediate frames between those two states by generating multiple <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> messages.</para>
      <para>
        <b>BeginBufferedAnimation</b> starts a timer that generates <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> messages on which <see cref="BufferedPaintRenderAnimation" /> should be called.  During these messages, <b>BufferedPaintRenderAnimation</b> will return <b>TRUE</b> when it paints an intermediate frame, to signify that the application has no further painting to do.</para>
      <para>If the animation duration is zero, then only <i>phdcTo</i> is returned and <i>phdcFrom</i>  is set to <b>NULL</b>.  In this case, the application should paint the final state using <i>phdcTo</i> to get the behavior similar to <see cref="BeginBufferedPaint" />.</para>
      <h4>Examples</h4>
      <para>The following code example shows how to use this function.</para>
      <code>#include &lt;windows.h&gt;
#include &lt;tchar.h&gt;
#include &lt;uxtheme.h&gt;

#pragma comment(lib, "uxtheme.lib")

#define WNDCLASSNAME L"BufferedPaintSample_WndClass"
#define ANIMATION_DURATION 500

bool g_fCurrentState = true;
bool g_fNewState = true;

void StartAnimation(HWND hWnd)
{
    g_fNewState = !g_fCurrentState;
    InvalidateRect(hWnd, NULL, TRUE);
}

void Paint(HWND hWnd, HDC hdc, bool state)
{
    RECT rc;
    GetClientRect(hWnd, &amp;amp;amp;amp;amp;amp;rc);
    FillRect(hdc, &amp;amp;amp;amp;amp;amp;rc, (HBRUSH)GetStockObject(WHITE_BRUSH));
    LPCTSTR pszIconId = state ? IDI_APPLICATION : IDI_ERROR;
    HICON hIcon = LoadIcon(NULL, pszIconId);
    if (hIcon)
    {
        DrawIcon(hdc, 10, 10, hIcon);
        DestroyIcon(hIcon);
    }
}

void OnPaint(HWND hWnd)
{
    PAINTSTRUCT ps;
    HDC hdc = BeginPaint(hWnd, &amp;amp;amp;amp;amp;amp;ps);
    if (hdc)
    {
        // See if this paint was generated by a soft-fade animation
        if (!BufferedPaintRenderAnimation(hWnd, hdc))
        {
            BP_ANIMATIONPARAMS animParams;
            ZeroMemory(&amp;amp;amp;amp;amp;amp;animParams, sizeof(animParams));
            animParams.cbSize = sizeof(BP_ANIMATIONPARAMS);
            animParams.style = BPAS_LINEAR;

            // Check if animation is needed. If not set dwDuration to 0
            animParams.dwDuration = (g_fCurrentState != g_fNewState ? ANIMATION_DURATION : 0);

            RECT rc;
            GetClientRect(hWnd, &amp;amp;amp;amp;amp;amp;rc);

            HDC hdcFrom, hdcTo;
            HANIMATIONBUFFER hbpAnimation = BeginBufferedAnimation(hWnd, hdc, &amp;amp;amp;amp;amp;amp;rc,
                BPBF_COMPATIBLEBITMAP, NULL, &amp;amp;amp;amp;amp;amp;animParams, &amp;amp;amp;amp;amp;amp;hdcFrom, &amp;amp;amp;amp;amp;amp;hdcTo);
            if (hbpAnimation)
            {
                if (hdcFrom)
                {
                    Paint(hWnd, hdcFrom, g_fCurrentState);
                }
                if (hdcTo)
                {
                    Paint(hWnd, hdcTo, g_fNewState);
                }

                g_fCurrentState = g_fNewState;
                EndBufferedAnimation(hbpAnimation, TRUE);
            }
            else
            {
                Paint(hWnd, hdc, g_fCurrentState);
            }
        }

        EndPaint(hWnd, &amp;amp;amp;amp;amp;amp;ps);
    }
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_LBUTTONDOWN:
        StartAnimation(hWnd);
        break;
    case WM_PAINT:
        OnPaint(hWnd);
        break;
    case WM_SIZE:
        BufferedPaintStopAllAnimations(hWnd);
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

int WINAPI _tWinMain(HINSTANCE hInstance,
     HINSTANCE hPrevInstance,
     LPSTR     lpCmdLine,
     int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    if (SUCCEEDED(BufferedPaintInit()))
    {
        WNDCLASSEX wcex;
        ZeroMemory(&amp;amp;amp;amp;amp;amp;wcex, sizeof(wcex));
        wcex.cbSize = sizeof(WNDCLASSEX);
        wcex.style = CS_HREDRAW|CS_VREDRAW;
        wcex.lpfnWndProc = WndProc;
        wcex.hInstance = hInstance;
        wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
        wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
        wcex.lpszClassName = WNDCLASSNAME;
        RegisterClassEx(&amp;amp;amp;amp;amp;amp;wcex);

        HWND hWnd = CreateWindow(WNDCLASSNAME, L"Buffered Paint Sample",
            WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0,
            CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);

        if (hWnd)
        {
            ShowWindow(hWnd, nCmdShow);
            UpdateWindow(hWnd);

            MSG msg;
            while (GetMessage(&amp;amp;amp;amp;amp;amp;msg, NULL, 0, 0))
            {
                TranslateMessage(&amp;amp;amp;amp;amp;amp;msg);
                DispatchMessage(&amp;amp;amp;amp;amp;amp;msg);
            }
        }

        BufferedPaintUnInit();
    }

    return 0;
}

</code>
      <code>void BufferedPaint(HDC hdc, const RECT *prcPaint)
{
    BP_PAINTPARAMS paintParams = {0};
    paintParams.cbSize = sizeof(paintParams);

    HDC hdcBuffer;
    HPAINTBUFFER hBufferedPaint = BeginBufferedPaint(hdc, prcPaint,
        BPBF_COMPATIBLEBITMAP, &amp;amp;amp;amp;amp;amp;paintParams, &amp;amp;amp;amp;amp;amp;hdcBuffer);

    if (hBufferedPaint)
    {
        // Application specific painting code
        AppPaint(hdcBuffer, prcPaint);
        EndBufferedPaint(hBufferedPaint, TRUE);
    }
    else
    {
        // Error occurred, default to unbuffered painting
        AppPaint(hdc, prcPaint);
    }
}

</code>
    </remarks>
  </member>
  <member name="Windows.BeginBufferedPaint">
    <summary>
      <para>Begins a buffered paint operation.</para>
    </summary>
    <param name="hdcTarget">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>The handle of the target DC on which the buffer will be painted.</para>
    </param>
    <param name="prcTarget">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that specifies the area of the target DC in which to paint.</para>
    </param>
    <param name="dwFormat">
      <para>Type: <b><see cref="BP_BUFFERFORMAT" /></b></para>
      <para>A member of the <see cref="BP_BUFFERFORMAT" /> enumeration that specifies the format of the buffer.</para>
    </param>
    <param name="pPaintParams">
      <para>Type: <b><see cref="BP_PAINTPARAMS" />*</b></para>
      <para>A pointer to a <see cref="BP_PAINTPARAMS" /> structure that defines the paint operation parameters. This value can be <b>NULL</b>.</para>
    </param>
    <param name="phdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a>*</b></para>
      <para>When this function returns, points to the handle of the new device context.</para>
    </param>
    <returns>
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>A handle to the buffered paint context. If this function fails, the return value is <b>NULL</b>, and <i>phdc</i> is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>The returned handle is freed when <see cref="EndBufferedPaint" /> is called.</para>
      <para>An application should call <see cref="BufferedPaintInit" /> on the calling thread before calling <b>BeginBufferedPaint</b>, and <see cref="BufferedPaintUnInit" /> before the thread is terminated.  Failure to call <b>BufferedPaintInit</b> may result in degraded performance due to internal data being initialized and destroyed for each buffered paint operation.</para>
    </returns>
  </member>
  <member name="Windows.BeginPanningFeedback">
    <summary>
      <para>Notifies the system to send feedback about a target window affected by panning gestures.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The handle to the target window that will receive feedback.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>TRUE, if successful.</para>
    </returns>
    <remarks>
      <para>This function must be called before either the <see cref="UpdatePanningFeedback" /> or <see cref="EndPanningFeedback" /> functions can be called.</para>
    </remarks>
  </member>
  <member name="Windows.BufferedPaintClear">
    <summary>
      <para>Clears a specified rectangle in the buffer to ARGB = {0,0,0,0}.</para>
    </summary>
    <param name="hBufferedPaint">
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>The handle of the buffered paint context, obtained through <see cref="BeginBufferedPaint" />.</para>
    </param>
    <param name="prc">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that specifies the rectangle to clear. Set this parameter to <b>NULL</b> to specify the entire buffer.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function accesses the buffer bits directly and is therefore faster than calling a GDI function to erase the buffer.</para>
    </remarks>
  </member>
  <member name="Windows.BufferedPaintInit">
    <summary>
      <para>Initialize buffered painting for the current thread.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>BufferedPaintInit</b> is called before <see cref="BeginBufferedPaint" /> or <see cref="BeginBufferedAnimation" /> for each thread that uses these functions.</para>
      <para>Each call to <b>BufferedPaintInit</b> should be matched with a call to <see cref="BufferedPaintUnInit" /> when calls to buffered paint APIs are no longer needed.
An application may call this API multiple times, as long as each call to <b>BufferedPaintInit</b> is balanced with a call to <b>BufferedPaintUnInit</b>.</para>
      <para>This function only needs to be called once in the lifetime of a thread. Typically, this function is called before creating the main application window, or during <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a>. Call <see cref="BufferedPaintUnInit" /> after destroying the window, or during <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-ncdestroy">WM_NCDESTROY</a>.</para>
    </remarks>
  </member>
  <member name="Windows.BufferedPaintRenderAnimation">
    <summary>
      <para>Paints the next frame of a buffered paint animation.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the window in which the animations play.</para>
    </param>
    <param name="hdcTarget">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle of the target DC on which the buffer is animated.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns <b>TRUE</b> if the frame has been painted, or <b>FALSE</b> otherwise.</para>
    </returns>
    <remarks>
      <para>If this function returns <b>TRUE</b>, the application should do no further painting. If this function returns <b>FALSE</b>, the application should paint normally.</para>
      <para>An application calls this function within its <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> handler.  After <b>BufferedPaintRenderAnimation</b> paints an animation frame, an application will typically continue without performing its usual painting operations.  If appropriate, an application may choose to render additional user interface (UI) over the top of the animation. The following code example, to be included as part of a larger body of code, shows how to use the animation painting functions.</para>
      <code>    if (!_fBufferedPaintInit)
    {
        BufferedPaintInit();
        _fBufferedPaintInit = TRUE;
    }

    // Determine whether the paint message was generated by a softfade animation.
    if (!BufferedPaintRenderAnimation(hWnd, hdc))
    {
        // Initialize buffered paint parameters.
        BP_ANIMATIONPARAMS animParams = {sizeof(BP_ANIMATIONPARAMS)};
        animParams.style = BPAS_LINEAR;
        animParams.dwDuration = 0;
        GetThemeTransitionDuration(hTheme, iPartId, iStateIdFrom,
                iStateIdTo, TMT_TRANSITIONDURATIONS, &amp;amp;amp;amp;amp;amp;animParams.dwDuration);

        HDC hdcFrom, hdcTo;
        HANIMATIONBUFFER hbpAnimation = BeginBufferedAnimation(hWnd, hdc, &amp;amp;amp;amp;amp;amp;rc,
                BPBF_COMPATIBLEBITMAP, NULL, &amp;amp;amp;amp;amp;amp;animParams, &amp;amp;amp;amp;amp;amp;hdcFrom, &amp;amp;amp;amp;amp;amp;hdcTo);
        if (hbpAnimation)
        {
            if (hdcFrom)
            {
                PaintImpl(hdcFrom, iPartId, iStateIdFrom /*, ...*/);
            }
            if (hdcTo)
            {
                PaintImpl(hdcTo, iPartId, iStateIdTo/*, ...*/);
            }

            EndBufferedAnimation(hbpAnimation, TRUE);
        }
        else
        {
            // Default to unbuffered paint
            PaintImpl(hdc, iPartId, iStateIdTo/*, ...*/);

        }
    }
    // Else do not paint because the BufferedPaintRenderAnimation function
    // already did.
}

</code>
    </remarks>
  </member>
  <member name="Windows.BufferedPaintSetAlpha">
    <summary>
      <para>Sets the alpha to a specified value in a given rectangle. The alpha controls the amount of transparency applied when blending with the buffer onto the destination target device context (DC).</para>
    </summary>
    <param name="hBufferedPaint">
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>The handle of the buffered paint context, obtained through <see cref="BeginBufferedPaint" />.</para>
    </param>
    <param name="prc">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that specifies the rectangle in which to set the alpha. Set this parameter to <b>NULL</b> to specify the entire buffer.</para>
    </param>
    <param name="alpha">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>The alpha value to set. The alpha value can range from zero (fully transparent) to 255 (fully opaque).</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function sets the alpha value for each pixel in the target rectangle. Passing an alpha value of 255 makes pixels fully opaque. The <b>BufferedPaintMakeOpaque</b> macro, which is  defined in uxtheme.h, sets alpha values to 255.  It is typically used to call GDI to draw into a memory buffer and then to make it opaque in order to draw it on glass.</para>
    </remarks>
  </member>
  <member name="Windows.BufferedPaintStopAllAnimations">
    <summary>
      <para>Stops all buffered animations for the given window.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The handle of the window in which to stop all animations.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.BufferedPaintUnInit">
    <summary>
      <para>Closes down buffered painting for the current thread. Called once for each call to <see cref="BufferedPaintInit" /> after calls to <see cref="BeginBufferedPaint" /> are no longer needed.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.CloseThemeData">
    <summary>
      <para>Closes the theme data handle.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an <b>HTHEME</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The <b>CloseThemeData</b> function should be called when a window that has a visual style applied is destroyed. This function should also be called whenever a window receives a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-themechanged">WM_THEMECHANGED</a> message. This call should be followed by an attempt to create a new theme data handle if a call to the <see cref="IsThemeActive" /> function returns <b>TRUE</b>.</para>
    </remarks>
    <seealso cref="OpenThemeData" />
  </member>
  <member name="Windows.DrawThemeBackground">
    <summary>
      <para>Draws the border and fill defined by the visual style for the specified control part.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC used for drawing the theme-defined background image.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part to draw. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part to draw. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pRect">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the background image is drawn.</para>
    </param>
    <param name="pClipRect">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains a clipping rectangle. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Drawing operations are scaled to fit and not exceed the rectangle specified in <i>pRect</i>. Your application should not draw outside the rectangle specified by <i>pClipRect</i>.</para>
      <h4>Examples</h4>
      <para>Prior to calling <b>DrawThemeBackground</b> to draw the background image for a window, you may call <see cref="IsThemeBackgroundPartiallyTransparent" />. This method determines whether <see cref="DrawThemeParentBackground" /> should be called to draw in backgrounds behind partially-transparent or alpha-blended child controls, and is demonstrated in the following example.</para>
      <code>if (_hTheme)
{
  if (IsThemeBackgroundPartiallyTransparent(_hTheme, BP_PUSHBUTTON, _iStateId))
  {
    DrawThemeParentBackground(_hwnd, hdcPaint, prcPaint);
  }

  DrawThemeBackground(_hTheme,
                    hdcPaint,
                    BP_PUSHBUTTON,
                    _iStateId,
                    &amp;amp;amp;amp;amp;amp;rcClient,
                    prcPaint);
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.DrawThemeEdge">
    <summary>
      <para>Draws one or more edges defined by the visual style of a rectangle.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the rectangle. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pDestRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains, in logical coordinates, the rectangle.</para>
    </param>
    <param name="uEdge">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>
        <b>UINT</b> that specifies the type of inner and outer edges to draw. This parameter must be a combination of one inner-border flag and one outer-border flag, or one of the combination flags. The border flags are:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BDR_RAISEDINNER</description>
              </item>
            </list>
          </description>
          <description>
            <para>Raised inner edge</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BDR_SUNKENINNER</description>
              </item>
            </list>
          </description>
          <description>
            <para>Sunken inner edge</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BDR_RAISEDOUTER</description>
              </item>
            </list>
          </description>
          <description>
            <para>Raised outer edge</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BDR_SUNKENOUTER</description>
              </item>
            </list>
          </description>
          <description>
            <para>Sunken outer edge</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>EDGE_BUMP</description>
              </item>
            </list>
          </description>
          <description>
            <para>Combination of BDR_RAISEDOUTER and BDR_SUNKENINNER</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>EDGE_ETCHED</description>
              </item>
            </list>
          </description>
          <description>
            <para>Combination of BDR_SUNKENOUTER and BDR_RAISEDINNER</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>EDGE_RAISED</description>
              </item>
            </list>
          </description>
          <description>
            <para>Combination of BDR_RAISEDOUTER and BDR_RAISEDINNER</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>EDGE_SUNKEN</description>
              </item>
            </list>
          </description>
          <description>
            <para>Combination of BDR_SUNKENOUTER and BDR_SUNKENINNER</para>
          </description>
        </item>
      </list>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>
        <b>UINT</b> that specifies the type of border to draw. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_ADJUST</description>
              </item>
            </list>
          </description>
          <description>
            <para>The rectangle pointed to by the <i>pDestRect</i> parameter is shrunk to exclude the edges that were drawn; otherwise the rectangle does not change.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_BOTTOM</description>
              </item>
            </list>
          </description>
          <description>
            <para>Bottom of border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_BOTTOMLEFT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Bottom and left side of border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_BOTTOMRIGHT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Bottom and right side of border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_DIAGONAL</description>
              </item>
            </list>
          </description>
          <description>
            <para>Diagonal border.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_DIAGONAL_ENDBOTTOMLEFT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Diagonal border. The end point is the lower-left corner of the rectangle; the origin is the upper-right corner.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_DIAGONAL_ENDBOTTOMRIGHT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Diagonal border. The end point is the lower-right corner of the rectangle; the origin is the upper-left corner.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_DIAGONAL_ENDTOPLEFT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Diagonal border. The end point is the upper-left corner of the rectangle; the origin is the lower-right corner.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_DIAGONAL_ENDTOPRIGHT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Diagonal border. The end point is the upper-right corner of the rectangle; the origin is the lower-left corner.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_FLAT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Flat border.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_LEFT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Left side of border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_MIDDLE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Interior of the rectangle is to be filled.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_MONO</description>
              </item>
            </list>
          </description>
          <description>
            <para>One-dimensional border.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_RECT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Entire border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_RIGHT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Right side of border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_SOFT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Soft buttons instead of tiles.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_TOP</description>
              </item>
            </list>
          </description>
          <description>
            <para>Top of border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_TOPLEFT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Top and left side of border rectangle.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>BF_TOPRIGHT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Top and right side of border rectangle.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pContentRect">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains, in logical coordinates, the rectangle that receives the interior rectangle, if <i>uFlags</i> is set to BF_ADJUST. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.DrawThemeIcon">
    <summary>
      <para>Draws an image from an image list with the icon effect defined by the visual style.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part in which the image is drawn. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains, in logical coordinates, the rectangle in which the image is drawn.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Handle to an <see cref="image list" /> that contains the image to draw.</para>
    </param>
    <param name="iImageIndex">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the index of the image to draw.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IImageList" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.DrawThemeParentBackground">
    <summary>
      <para>Draws the part of a parent control that is covered by a partially-transparent or alpha-blended child control.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The child control.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>The child control's DC.</para>
    </param>
    <param name="prc">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>The area to be drawn. The rectangle is in the child window's coordinates. If this parameter is NULL, the area to be drawn includes the entire area occupied by the child control.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.DrawThemeParentBackgroundEx">
    <summary>
      <para>Used by partially-transparent or alpha-blended child controls to draw the part of their parent in front of which they appear. Sends a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a> message followed by a <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-printclient">WM_PRINTCLIENT</a>.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle of the child control.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC of the child control.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Zero or more of the following values. If this value is zero, this function returns S_OK only if the parent handled <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-printclient">WM_PRINTCLIENT</a>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>DTPB_WINDOWDC</b>
          </description>
          <description>
            <para>If set, <i>hdc</i> is assumed to be a window DC, not a client DC.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DTPB_USECTLCOLORSTATIC</b>
          </description>
          <description>
            <para>If set, this function sends a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-ctlcolorstatic">WM_CTLCOLORSTATIC</a> message to the parent and uses the brush if one is provided. Otherwise, it uses COLOR_BTNFACE.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DTPB_USEERASEBKGND</b>
          </description>
          <description>
            <para>If set, this function returns S_OK without sending a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-ctlcolorstatic">WM_CTLCOLORSTATIC</a> message if the parent actually painted on <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="prc">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>Optional. The area to be drawn, in child coordinates. If this parameter is NULL, the area to be drawn includes the entire area occupied by the child control.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>S_OK if successful; otherwise, S_FALSE.</para>
    </returns>
  </member>
  <member name="Windows.DrawThemeText">
    <summary>
      <para>Draws text using the color and font defined by the visual style.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to use for drawing.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>The control part that has the desired text appearance. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>. If this value is 0, the text is drawn in the default font, or a font selected into the device context.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>The control state that has the desired text appearance. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains the text to draw.</para>
    </param>
    <param name="cchText">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the number of characters to draw. If the parameter is set to -1, all the characters in the string are drawn.</para>
    </param>
    <param name="dwTextFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>
        <b>DWORD</b> that contains one or more values that specify the string's formatting. See <a href="https://docs.microsoft.com//windows/desktop/Controls/theme-format-values">Format Values</a> for possible parameter values.</para>
      <para>
        <b>Note</b>  DrawThemeText does not support DT_CALCRECT.  However, <see cref="DrawThemeTextEx" /> does support DT_CALCRECT.</para>
    </param>
    <param name="dwTextFlags2">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Not used. Set to zero.</para>
    </param>
    <param name="pRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be drawn.  It is recommended to use <b>pExtentRect</b> from <see cref="GetThemeTextExtent" /> to retrieve the correct coordinates.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The function always uses the themed font for the specified part and state if one is defined. Otherwise it uses the font currently selected into the device context. To find out if a themed font is defined, you can call <see cref="GetThemeFont" /> or <see cref="GetThemePropertyOrigin" /> with TMT_FONT as the property identifier.</para>
      <h4>Examples</h4>
      <para>
        <b>DrawThemeText</b> uses parameters similar to the Win32 <see cref="DrawText" /> function, but with a few differences. One of the most notable is support for wide-character strings. Therefore, non-wide strings must be converted to wide strings, as in the following example.</para>
      <para>
        <b>Security Warning:  </b>Using <see cref="MultiByteToWideChar" /> incorrectly can compromise the security of your application. Ensure that when creating wide-character buffers they are large enough to accommodate the size of the string in wide characters, not in bytes.</para>
      <code>INT cchText = GetWindowTextLength(_hwnd);
if (cchText &gt; 0)
{
    TCHAR *pszText = new TCHAR[cchText+1];
    if (pszText)
    {
        if (GetWindowText(_hwnd, pszText, cchText+1))
        {
            int widelen = MultiByteToWideChar(CP_ACP, 0, reinterpret_cast&lt;LPCSTR&gt;(pszText),
                    cchText+1, NULL, 0);
            WCHAR *pszWideText = new WCHAR[widelen+1];
            MultiByteToWideChar(CP_ACP, 0, reinterpret_cast&lt;LPCSTR&gt;(pszText), cchText,
                    pszWideText, widelen);

            SetBkMode(hdcPaint, TRANSPARENT);
            DrawThemeText(_hTheme,
                    hdcPaint,
                    BP_PUSHBUTTON,
                    _iStateId,
                    pszWideText,
                    cchText,
                    DT_CENTER | DT_VCENTER | DT_SINGLELINE,
                    NULL,
                    &amp;amp;amp;amp;amp;amp;rcContent);

            delete [] pszWideText;
        }

        delete [] pszText;
    }
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.DrawThemeTextEx">
    <summary>
      <para>Draws text using the color and font defined by the visual style. Extends <see cref="DrawThemeText" /> by allowing additional text format options.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to use for drawing.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>The control part that has the desired text appearance. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>. If this value is 0, the text is drawn in the default font, or a font selected into the device context.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>The control state that has the desired text appearance. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains the text to draw.</para>
    </param>
    <param name="cchText">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the number of characters to draw. If the parameter is set to -1, all the characters in the string are drawn.</para>
    </param>
    <param name="dwTextFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>
        <b>DWORD</b> that contains one or more values that specify the string's formatting. See <a href="https://docs.microsoft.com//windows/desktop/Controls/theme-format-values">Format Values</a> for possible parameter values.</para>
    </param>
    <param name="pRect">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be drawn.</para>
    </param>
    <param name="pOptions">
      <para>Type: <b>const <see cref="DTTOPTS" />*</b></para>
      <para>A <see cref="DTTOPTS" /> structure that defines additional formatting options that will be applied to the text being drawn.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The function always uses the themed font for the specified part and state if one is defined. Otherwise it uses the font currently selected into the device context. To find out if a themed font is defined, you can call <see cref="GetThemeFont" /> or <see cref="GetThemePropertyOrigin" /> with TMT_FONT as the property identifier.</para>
    </remarks>
  </member>
  <member name="Windows.EnableThemeDialogTexture">
    <summary>
      <para>Enables or disables the visual style of the background of a dialog window.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Window handle of the target dialog box.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>One of the following option flag values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>ETDT_DISABLE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disables background texturing.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>ETDT_ENABLE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enables dialog window background texturing. The texturing is defined by a visual style.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>ETDT_USETABTEXTURE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Uses the Tab control texture for the background texture of a dialog window.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>ETDT_USEAEROWIZARDTABTEXTURE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Uses the Aero wizard texture for the background texture of a dialog window.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>ETDT_ENABLETAB</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enables dialog window background texturing. The texture is the Tab control texture defined by the visual style. This flag is equivalent to (ETDT_ENABLE | ETDT_USETABTEXTURE).</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>ETDT_ENABLEAEROWIZARDTAB</description>
              </item>
            </list>
          </description>
          <description>
            <para>ETDT_ENABLE | ETDT_USEAEROWIZARDTABTEXTURE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>ETDT_VALIDBITS</description>
              </item>
            </list>
          </description>
          <description>
            <para>ETDT_DISABLE | ETDT_ENABLE | ETDT_USETABTEXTURE | ETDT_USEAEROWIZARDTABTEXTURE.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>EnableThemeDialogTexture</b> can be used to tailor dialog box compatibility with child windows and controls that may or may not coordinate rendering their client area backgrounds with that of their parent dialog box.</para>
    </remarks>
  </member>
  <member name="Windows.EnableTheming">
    <summary>
      <para>
        <b>Windows Vista through Windows 7</b>: Enables or disables visual styles for the current user in the current and later sessions.</para>
      <para>
        <b>Windows 8 and later</b>: This function does nothing. Visual styles are always enabled in Windows 8 and later.</para>
    </summary>
    <param name="fEnable">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Receives one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>TRUE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enables visual styles. If the user previously had an active visual style, it becomes active again.</para>
            <para>
              <b>Note</b>  Only clients with trusted computing base (TCB) privileges, where the client acts as part of the operating system, can load or change a global theme.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>FALSE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disables visual styles and turns visual styles off.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.EndBufferedAnimation">
    <summary>
      <para>Renders the first frame of a buffered animation operation and starts the animation timer.</para>
    </summary>
    <param name="hbpAnimation">
      <para>Type: <b>HANIMATIONBUFFER</b></para>
      <para>The handle to the buffered animation context that was returned by <see cref="BeginBufferedAnimation" />.</para>
    </param>
    <param name="fUpdateTarget">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>If <b>TRUE</b>, updates the target DC with the animation.  If <b>FALSE</b>, the animation is not started, the target DC is not updated, and the <i>hbpAnimation</i> parameter is freed.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.EndBufferedPaint">
    <summary>
      <para>Completes a buffered paint operation and frees the associated buffered paint handle.</para>
    </summary>
    <param name="hBufferedPaint">
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>The handle of the buffered paint context, obtained through <see cref="BeginBufferedPaint" />.</para>
    </param>
    <param name="fUpdateTarget">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>TRUE</b> to copy the buffer to the target DC.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.EndPanningFeedback">
    <summary>
      <para>Terminates any existing animation that was in process or set up by <see cref="BeginPanningFeedback" /> and <see cref="UpdatePanningFeedback" />.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The handle to the target window that will receive feedback.</para>
    </param>
    <param name="fAnimateBack">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Flag that indicates whether the displaced window should return to the original position using animation. If <b>FALSE</b>, the method restore the moved window using a direct jump.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>TRUE</b> if successful.</para>
    </returns>
    <remarks>
      <para>This function can only be called after a <see cref="BeginPanningFeedback" /> call.</para>
    </remarks>
  </member>
  <member name="Windows.GetBufferedPaintBits">
    <summary>
      <para>Retrieves a pointer to the buffer bitmap if the buffer is a device-independent bitmap (DIB).</para>
    </summary>
    <param name="hBufferedPaint">
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>The handle of the buffered paint context, obtained through <see cref="BeginBufferedPaint" />.</para>
    </param>
    <param name="ppbBuffer">
      <para>Type: <b><see cref="RGBQUAD" />**</b></para>
      <para>When this function returns, contains a pointer to the address of the buffer bitmap pixels.</para>
    </param>
    <param name="pcxRow">
      <para>Type: <b>int*</b></para>
      <para>When this function returns, contains a pointer to the width, in pixels, of the buffer bitmap. This value is not necessarily equal to the buffer width. It may be larger.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>Returns S_OK if successful, or an error value otherwise. If an error occurs, <i>ppbBuffer</i>  is set to <b>NULL</b> and <i>pcxRow</i> is set to zero.</para>
    </returns>
    <remarks>
      <para>The number of bits per pixel depends on the pixel format passed to <see cref="BeginBufferedPaint" />.</para>
    </remarks>
    <seealso cref="BP_BUFFERFORMAT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/gdi/device-independent-bitmaps">Device-Independent Bitmaps</seealso>
  </member>
  <member name="Windows.GetBufferedPaintDC">
    <summary>
      <para>Gets the paint device context (DC). This is the same value retrieved by <see cref="BeginBufferedPaint" />.</para>
    </summary>
    <param name="hBufferedPaint">
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>Handle of the buffered paint context, obtained through <see cref="BeginBufferedPaint" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle of the requested DC. This is the same DC that is returned by <see cref="BeginBufferedPaint" />. Returns <b>NULL</b> upon failure.</para>
    </returns>
  </member>
  <member name="Windows.GetBufferedPaintTargetDC">
    <summary>
      <para>Retrieves the target device context (DC).</para>
    </summary>
    <param name="hBufferedPaint">
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>A handle to the buffered paint context obtained through <see cref="BeginBufferedPaint" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>A handle to the requested DC, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>If successful, this function returns the target DC that was passed by the application to <see cref="BeginBufferedPaint" />.</para>
    </remarks>
  </member>
  <member name="Windows.GetBufferedPaintTargetRect">
    <summary>
      <para>Retrieves the target rectangle specified by BeginBufferedPaint.</para>
    </summary>
    <param name="hBufferedPaint">
      <para>Type: <b>HPAINTBUFFER</b></para>
      <para>Handle to the buffered paint context obtained through <see cref="BeginBufferedPaint" />.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>When this function returns, contains the requested rectangle.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If this function fails, the <see cref="RECT" /> structure at <i>prc</i> is set to empty.</para>
    </remarks>
  </member>
  <member name="Windows.GetCurrentThemeName">
    <summary>
      <para>Retrieves the name of the current visual style, and optionally retrieves the color scheme name and size name.</para>
    </summary>
    <param name="pszThemeFileName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>Pointer to a string that receives the theme path and file name.</para>
    </param>
    <param name="cchMaxNameChars">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the maximum number of characters allowed in the theme file name.</para>
    </param>
    <param name="pszColorBuff">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>Pointer to a string that receives the color scheme name. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="cchMaxColorChars">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the maximum number of characters allowed in the color scheme name.</para>
    </param>
    <param name="pszSizeBuff">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>Pointer to a string that receives the size name. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="cchMaxSizeChars">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the maximum number of characters allowed in the size name.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>Returns S_OK if successful, otherwise an error code.</para>
    </returns>
  </member>
  <member name="Windows.GetThemeAnimationProperty">
    <summary>
      <para>Gets a theme animation property based
on the storyboard id and the target id.</para>
    </summary>
    <param name="hTheme">
      <para>An opened theme handle.</para>
    </param>
    <param name="iStoryboardId">
      <para>A predefined storyboard identifier.</para>
    </param>
    <param name="iTargetId">
      <para>A predefined target identifier.</para>
    </param>
    <param name="eProperty">
      <para>The property that is associated with the animation storyboard and target.</para>
    </param>
    <param name="pvProperty">
      <para>The buffer to receive the returned property value.</para>
    </param>
    <param name="cbSize">
      <para>The byte size of a buffer that is pointed by <i>pvProperty</i>.</para>
    </param>
    <param name="pcbSizeOut">
      <para>The                                    byte  size of the returned
property.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.GetThemeAnimationTransform">
    <summary>
      <para>Gets an animation transform operation
based on storyboard id, target id and transform
index.</para>
    </summary>
    <param name="hTheme">
      <para>An opened theme handle.</para>
    </param>
    <param name="iStoryboardId">
      <para>A predefined storyboard identifier.</para>
    </param>
    <param name="iTargetId">
      <para>A predefined target identifier.</para>
    </param>
    <param name="dwTransformIndex">
      <para>The zero-based index of a transform operation.</para>
    </param>
    <param name="pTransform">
      <para>A pointer to a buffer to receive a transform structure.</para>
    </param>
    <param name="cbSize">
      <para>The byte size of the buffer pointed by <i>pTransform</i>.</para>
    </param>
    <param name="pcbSizeOut">
      <para>The                                    byte  size of a transform operation structure.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.GetThemeAppProperties">
    <summary>
      <para>Retrieves the property flags that control how visual styles are applied in the current application.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>The following return values are bit flags combined with a logical OR operator.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>STAP_ALLOW_NONCLIENT</b>
            </para>
          </description>
          <description>
            <para>Specifies that the nonclient areas of application windows have visual styles applied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>STAP_ALLOW_CONTROLS</b>
            </para>
          </description>
          <description>
            <para>Specifies that controls in application windows have visual styles applied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>STAP_ALLOW_WEBCONTENT</b>
            </para>
          </description>
          <description>
            <para>Specifies that all web content displayed in an application is rendered using visual styles.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Individual flags can be extracted from the result by combining the result with the logical AND of the desired flag.</para>
      <para>Do not call this function during <a href="https://docs.microsoft.com//windows/desktop/Dlls/dllmain">DllMain</a> or global objects constructors. This may cause invalid return values.</para>
      <h4>Examples</h4>
      <para>The example extracts a single flag's state from the function result.</para>
      <code>DWORD resultFlags = GetThemeAppProperties();
bool ctrlsAreThemed = ((resultFlags &amp;amp;amp;amp;amp;amp; STAP_ALLOW_CONTROLS) != 0);

</code>
    </remarks>
    <seealso cref="SetThemeAppProperties" />
  </member>
  <member name="Windows.GetThemeBackgroundContentRect">
    <summary>
      <para>Retrieves the size of the content area for the background defined by the visual style.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to use when drawing. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the content area. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part that contains the content area. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pBoundingRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the total background rectangle, in logical coordinates. This is the area inside the borders or margins.</para>
    </param>
    <param name="pContentRect">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that receives the content area background rectangle, in logical coordinates.  This rectangle is calculated to fit the content area.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>A visual style can define a content area within each background image. This is the area where content such as text and icons can be placed without overwriting background borders.</para>
      <h4>Examples</h4>
      <para>When applying a theme to an entire client area of a window, you can call <see cref="GetClientRect" /> to retrieve this area in a <b>RECT</b>, which can be passed via pointer as the <i>pContentRect</i> parameter to <b>GetThemeBackgroundContentRect</b> as in the following example.</para>
      <code>DWORD resultFlags = GetThemeAppProperties();
bool ctrlsAreThemed = ((resultFlags &amp;amp;amp;amp;amp;amp; STAP_ALLOW_CONTROLS) != 0);

</code>
    </remarks>
    <seealso cref="GetThemeBackgroundExtent" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeBackgroundExtent">
    <summary>
      <para>Calculates the size and location of the background, defined by the visual style, given the content area.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to use when drawing. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the content. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part that contains the content. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pContentRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the content background rectangle, in logical coordinates. This rectangle is returned from <see cref="GetThemeBackgroundContentRect" />.</para>
    </param>
    <param name="pExtentRect">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that receives the background rectangle, in logical coordinates. This rectangle is based on the <i>pContentRect</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>A theme can define a content area within each background image. This is the area where content such as text and icons can be placed without overwriting background borders.</para>
    </remarks>
    <seealso cref="GetThemeBackgroundContentRect" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeBackgroundRegion">
    <summary>
      <para>Computes the region for a regular or partially transparent background that is bounded by a specified rectangle.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to draw into. The DC uses dots per inch (DPI) scaling. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the region. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains, in logical coordinates, the specified rectangle used to compute the region.</para>
    </param>
    <param name="pRegion">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRGN</a>*</b></para>
      <para>Pointer to the handle to the computed <a href="https://docs.microsoft.com//windows/desktop/gdi/regions">region</a>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The region handle that is returned by this function should be released when it is no longer needed, using <see cref="DeleteObject" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/gdi/regions">Regions</seealso>
  </member>
  <member name="Windows.GetThemeBitmap">
    <summary>
      <para>Retrieves the bitmap associated with a particular theme, part, state, and property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>A handle to theme data.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>The part that contains the bitmap. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>The state of the part.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>The property to retrieve. Pass zero to automatically select the first available bitmap for this part and state,
or use one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_DIBDATA</b>
          </description>
          <description>
            <para>The background image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GLYPHDIBDATA</b>
          </description>
          <description>
            <para>The glyph image drawn on top of the background, if present.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_HBITMAP</b>
          </description>
          <description>
            <para>Not currently supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">ULONG</a></b></para>
      <para>The flags that specify how the bitmap is to be retrieved. Can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GBF_DIRECT</b>
          </description>
          <description>
            <para>Retrieves a handle to the existing bitmap.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GBF_COPY</b>
          </description>
          <description>
            <para>Retrieves a copy of the bitmap.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GBF_VALIDBITS</b>
          </description>
          <description>
            <b>GBF_DIRECT</b> | <b>GBF_COPY</b></description>
        </item>
      </list>
    </param>
    <param name="phBitmap">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBITMAP</a>*</b></para>
      <para>A pointer that receives a handle to the requested bitmap.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If <i>dwFlags</i> is set to <b>GBF_COPY</b>, release the bitmap stored in <i>phBitmap</i> when no longer needed by calling <see cref="DeleteObject" />.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeBool">
    <summary>
      <para>Retrieves the value of a <b>BOOL</b> property from the SysMetrics section of theme data.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part containing the BOOL property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. May be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_TRANSPARENT</b>
          </description>
          <description>
            <b>TRUE</b> if the image associated with the part and state have transparent areas. See <see cref="GetThemeColor" /> for the definition of the TMT_TRANSPARENTCOLOR value that defines the transparent color.
</description>
        </item>
        <item>
          <description>
            <b>TMT_AUTOSIZE</b>
          </description>
          <description>
            <b>TRUE</b> if the nonclient caption area associated with the part and state vary with text width.
</description>
        </item>
        <item>
          <description>
            <b>TMT_BORDERONLY</b>
          </description>
          <description>
            <b>TRUE</b> if the image associated with the part and state should only have its border drawn.
</description>
        </item>
        <item>
          <description>
            <b>TMT_COMPOSITED</b>
          </description>
          <description>
            <b>TRUE</b> if the control associated with the part and state will handle its own compositing of images.
</description>
        </item>
        <item>
          <description>
            <b>TMT_BGFILL</b>
          </description>
          <description>
            <b>TRUE</b> if true-sized images associated with this part and state are to be drawn on the background fill.
</description>
        </item>
        <item>
          <description>
            <b>TMT_GLYPHTRANSPARENT</b>
          </description>
          <description>
            <b>TRUE</b> if the glyph associated with this part and state have transparent areas. See <see cref="GetThemeColor" /> for the definition of the TMT_GLYPHCOLOR value that defines the transparent color.
</description>
        </item>
        <item>
          <description>
            <b>TMT_GLYPHONLY</b>
          </description>
          <description>
            <b>TRUE</b> if the glyph associated with this part and state should be drawn without a background.
</description>
        </item>
        <item>
          <description>
            <b>TMT_ALWAYSSHOWSIZINGBAR</b>
          </description>
          <description>
            <b>TRUE</b> if the sizing bar associated with this part and state should always be shown.
</description>
        </item>
        <item>
          <description>
            <b>TMT_MIRRORIMAGE</b>
          </description>
          <description>
            <b>TRUE</b> if the image associated with this part and state should be flipped if the window is being viewed in right-to-left reading mode.
</description>
        </item>
        <item>
          <description>
            <b>TMT_UNIFORMSIZING</b>
          </description>
          <description>
            <b>TRUE</b> if the image associated with this part and state must have equal height and width.
</description>
        </item>
        <item>
          <description>
            <b>TMT_INTEGRALSIZING</b>
          </description>
          <description>
            <b>TRUE</b> if the truesize image or border associated with this part and state must be sized to a factor of 2.
</description>
        </item>
        <item>
          <description>
            <b>TMT_SOURCEGROW</b>
          </description>
          <description>
            <b>TRUE</b> if the image associated with this part and state will scale larger in size if necessary.
</description>
        </item>
        <item>
          <description>
            <b>TMT_SOURCESHRINK</b>
          </description>
          <description>
            <b>TRUE</b> if the image associated with this part and state will scale smaller in size if necessary.
</description>
        </item>
        <item>
          <description>
            <b>TMT_USERPICTURE</b>
          </description>
          <description>
            <b>TRUE</b> if the image associated with this part and state is based on the current user.
</description>
        </item>
      </list>
    </param>
    <param name="pfVal">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a>*</b></para>
      <para>Pointer to a <b>BOOL</b> that receives the retrieved property value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeColor">
    <summary>
      <para>Retrieves the value of a color property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the color property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="pColor">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a>*</b></para>
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> structure that receives the color value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeDocumentationProperty">
    <summary>
      <para>Retrieves the value for a theme property from the documentation section of the specified theme file.</para>
    </summary>
    <param name="pszThemeName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains the name of the theme file that will be opened to query for the property.</para>
    </param>
    <param name="pszPropertyName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains the name of the theme property to query. Can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SZ_THDOCPROP_DISPLAYNAME</b>
          </description>
          <description>
            <para>Retrieves the display name of the theme.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SZ_THDOCPROP_TOOLTIP</b>
          </description>
          <description>
            <para>Retrieves the tooltip associated with this theme.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SZ_THDOCPROP_AUTHOR</b>
          </description>
          <description>
            <para>Retrieves the name of the author of the theme.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SZ_THDOCPROP_CANONICALNAME</b>
          </description>
          <description>
            <para>Retrieves the name of the theme.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszValueBuff">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>Pointer to a string buffer that receives the property string value.</para>
    </param>
    <param name="cchMaxValChars">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the maximum number of characters that <i>pszValueBuff</i> can contain.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If the theme property has been localized in the theme files string table, this function returns the localized version.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeEnumValue">
    <summary>
      <para>Retrieves the value of an enumerated type property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the enumerated type property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="piVal">
      <para>Type: <b>int*</b></para>
      <para>Pointer to an <b>int</b> that receives the enumerated type value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeFilename">
    <summary>
      <para>Retrieves the value of a filename property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the filename property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="pszThemeFileName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>Pointer to a buffer that receives the retrieved file name.</para>
    </param>
    <param name="cchMaxBuffChars">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that receives the maximum number of characters in the file name</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeFont">
    <summary>
      <para>Retrieves the value of a font property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the font property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="pFont">
      <para>Type: <b>LOGFONTW*</b></para>
      <para>Pointer to a <see cref="LOGFONT" /> structure that receives the font property value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The font is scaled in dots per inch (DPI)  for the current logical screen.</para>
      <para>If the property is not supported for the specified part and state, E_PROP_ID_UNSUPPORTED may be returned.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeInt">
    <summary>
      <para>Retrieves the value of an <b>int</b> property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the <b>int</b> property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="piVal">
      <para>Type: <b>int*</b></para>
      <para>Pointer to an <b>int</b> that receives the retrieved value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeIntList">
    <summary>
      <para>Retrieves a list of <b>int</b> data from a visual style.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the list of data to return. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. See <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="pIntList">
      <para>Type: <b><see cref="INTLIST" />*</b></para>
      <para>Pointer to an <see cref="INTLIST" /> structure that receives the <b>int</b> data.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>Returns S_OK if successful, otherwise an error code.</para>
    </returns>
    <seealso cref="INTLIST" />
  </member>
  <member name="Windows.GetThemeMargins">
    <summary>
      <para>Retrieves the value of a <see cref="MARGINS" /> property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to select fonts into. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the <see cref="MARGINS" /> property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="prc">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the rectangle that specifies the area to be drawn into. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="pMargins">
      <para>Type: <b><see cref="MARGINS" />*</b></para>
      <para>Pointer to a <see cref="MARGINS" /> structure that receives the retrieved value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeMetric">
    <summary>
      <para>Retrieves the value of a metric property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the metric property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. Can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_ALPHALEVEL</b>
          </description>
          <description>
            <para>The alpha value (0-255) used for <see cref="DrawThemeIcon" />.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_ALPHATHRESHOLD</b>
          </description>
          <description>
            <para>The minimum alpha value (0-255) that a pixel must be to be considered opaque.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_BORDERSIZE</b>
          </description>
          <description>
            <para>The thickness of the border drawn if this part uses a border fill.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GLYPHINDEX</b>
          </description>
          <description>
            <para>The character index into the selected font that will be used for the glyph, if the part uses a font-based glyph.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRADIENTRATIO1</b>
          </description>
          <description>
            <para>The amount of the first gradient color to use in drawing the part. This value can be from 0 to 255, but this value plus the values of each of the GRADIENTRATIO values must add up to 255. See the TMT_GRADIENTCOLOR1 value of <see cref="GetThemeColor" />.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRADIENTRATIO2</b>
          </description>
          <description>
            <para>The amount of the second gradient color to use in drawing the part.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRADIENTRATIO3</b>
          </description>
          <description>
            <para>The amount of the third gradient color to use in drawing the part.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRADIENTRATIO4</b>
          </description>
          <description>
            <para>The amount of the fourth gradient color to use in drawing the part.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRADIENTRATIO5</b>
          </description>
          <description>
            <para>The amount of the fifth gradient color to use in drawing the part.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_HEIGHT</b>
          </description>
          <description>
            <para>The height of the part.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_IMAGECOUNT</b>
          </description>
          <description>
            <para>The number of state images present in an image file.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MINDPI1</b>
          </description>
          <description>
            <para>The minimum dpi that the first image file was designed for. See <see cref="GetThemeFilename" />.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MINDPI2</b>
          </description>
          <description>
            <para>The minimum dpi that the second image file was designed for.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MINDPI3</b>
          </description>
          <description>
            <para>The minimum dpi that the third image file was designed for.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MINDPI4</b>
          </description>
          <description>
            <para>The minimum dpi that the fourth image file was designed for.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MINDPI5</b>
          </description>
          <description>
            <para>The minimum dpi that the fifth image file was designed for.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_PROGRESSCHUNKSIZE</b>
          </description>
          <description>
            <para>The size of the progress control "chunk" shapes that define how far an operation has progressed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_PROGRESSSPACESIZE</b>
          </description>
          <description>
            <para>The total size of all of the progress control "chunks".</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_ROUNDCORNERWIDTH</b>
          </description>
          <description>
            <para>The roundness (0-100%) of the part's corners.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_ROUNDCORNERHEIGHT</b>
          </description>
          <description>
            <para>The roundness (0-100%) of the part's corners.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_SATURATION</b>
          </description>
          <description>
            <para>The amount of saturation (0-255) to apply to an icon drawn using <see cref="DrawThemeIcon" />.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_TEXTBORDERSIZE</b>
          </description>
          <description>
            <para>The thickness of the border drawn around text characters.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_TRUESIZESTRETCHMARK</b>
          </description>
          <description>
            <para>The percentage of a true-size image's original size at which the image will be stretched.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_WIDTH</b>
          </description>
          <description>
            <para>The width of the part.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piVal">
      <para>Type: <b>int*</b></para>
      <para>Pointer to an <b>int</b> that receives the metric property value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemePartSize">
    <summary>
      <para>Calculates the original size of the part defined by a visual style.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to select fonts into.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part to calculate the size of. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="prc">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the rectangle used for the part drawing destination. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="unnamedParam6">
      <para>Type: <b>THEMESIZE</b></para>
      <para>Enumerated type that specifies the type of size to retrieve. See <see cref="THEMESIZE" /> for a list of type values.</para>
    </param>
    <param name="psz">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd145106(v=vs.85)">SIZE</a>*</b></para>
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145106(v=vs.85)">SIZE</a> structure that receives the dimensions of the specified part.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemePosition">
    <summary>
      <para>Retrieves the value of a position property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the position property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="pPoint">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a>*</b></para>
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the position value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The part in which the position is located determines the possible state values. For example, if the position is in a check box, the state could be checked or unchecked, but in a caption the possible states are active, inactive, or disabled.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemePropertyOrigin">
    <summary>
      <para>Retrieves the location of the theme property definition for a property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part that contains the theme. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. You may use any of the property values from Vssym32.h. These values are described in the reference pages for the functions that use them. For instance, the <see cref="GetThemeInt" /> function uses the TMT_BORDERSIZE value. See the <a href="https://docs.microsoft.com//windows/desktop/Controls/uxctl-ref">Visual Styles Reference</a> for a list of functions.</para>
    </param>
    <param name="unnamedParam5">
      <para>Type: <b><see cref="PROPERTYORIGIN" />*</b></para>
      <para>Pointer to a <see cref="PROPERTYORIGIN" /> enumerated type that indicates where the property was or was not found.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeRect">
    <summary>
      <para>Retrieves the value of a <see cref="RECT" /> property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part containing the <see cref="RECT" /> property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="pRect">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that receives a  rectangle.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeStream">
    <summary>
      <para>Retrieves a data stream corresponding to a specified theme, starting from a specified part, state, and property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to the theme from which the stream will be retrieved.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Specifies the part to retrieve a stream from. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Specifies the state of the part.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Specifies the property to retrieve.</para>
    </param>
    <param name="ppvStream">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">VOID</a>**</b></para>
      <para>Address of a pointer that receives the stream.</para>
    </param>
    <param name="pcbStream">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a>*</b></para>
      <para>Pointer that receives the length, in bytes, of the stream received by <i>ppvStream</i>.</para>
    </param>
    <param name="hInst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>If <i>iPropId</i> is TMT_STREAM, this value is <b>NULL</b>. If <i>iPropId</i> is TMT_DISKSTREAM, this value is the HINSTANCE of a loaded styles file.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>Windows 8:</b> In high contrast mode, the data stream retrieved by this function is not valid after the <i>hTheme</i> theme handle is closed.</para>
      <para>The data stream retrieved by this function is not a copy; do not delete or close the data stream after using it.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</seealso>
  </member>
  <member name="Windows.GetThemeString">
    <summary>
      <para>Retrieves the value of a string property.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part containing the string property. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the property to retrieve. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</a>.</para>
    </param>
    <param name="pszBuff">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>Pointer to a buffer that receives the string value.</para>
    </param>
    <param name="cchMaxBuffChars">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the maximum number of characters <i>pszBuff</i> can contain.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeSysBool">
    <summary>
      <para>Retrieves the Boolean value of a system metric.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to theme data.</para>
    </param>
    <param name="iBoolId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the system Boolean metric desired. May be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_FLATMENUS</b>
          </description>
          <description>
            <para>Describes how menus are drawn. If <b>TRUE</b>, menus are drawn without shadows. If <b>FALSE</b>, menus have shadows underneath them.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Value of desired system metric.</para>
    </returns>
    <remarks>
      <para>If the theme data handle is not a <b>NULL</b> handle, this function returns the desired <b>BOOL</b> from the SysMetrics section of the visual style. If the theme data handle is <b>NULL</b>, this function returns the value of the specified system Boolean.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeSysColor">
    <summary>
      <para>Retrieves the value of a system color.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to theme data.</para>
    </param>
    <param name="iColorId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the color number. May be one of the values listed in <see cref="GetSysColor" /> for the <i>nIndex</i> parameter.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The value of the specified system color.</para>
    </returns>
    <remarks>
      <para>If the theme data handle is not a <b>NULL</b> handle, this function returns the color from the SysMetrics section of the current visual style. If the theme data handle is <b>NULL</b>, this function returns the color matching the global system color.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeSysColorBrush">
    <summary>
      <para>Retrieves a system color brush.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to theme data.</para>
    </param>
    <param name="iColorId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the number of the desired system color.  May be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_SCROLLBAR</b>
          </description>
          <description>
            <para>The color of scroll bars.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_BACKGROUND</b>
          </description>
          <description>
            <para>The color of the background.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_ACTIVECAPTION</b>
          </description>
          <description>
            <para>The color of the caption area on an active window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_INACTIVECAPTION</b>
          </description>
          <description>
            <para>The color of the caption area on an inactive window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_WINDOW</b>
          </description>
          <description>
            <para>The color of a window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_WINDOWFRAME</b>
          </description>
          <description>
            <para>The color of the frame around a window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MENUTEXT</b>
          </description>
          <description>
            <para>The color of text drawn on a menu.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_WINDOWTEXT</b>
          </description>
          <description>
            <para>The color of text drawn in a window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_CAPTIONTEXT</b>
          </description>
          <description>
            <para>The color of text drawn in the caption area of an active window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_ACTIVEBORDER</b>
          </description>
          <description>
            <para>The color of the border around an active window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_INACTIVEBORDER</b>
          </description>
          <description>
            <para>The color of the border around an inactive window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_APPWORKSPACE</b>
          </description>
          <description>
            <para>The color of the application workspace.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_HIGHLIGHT</b>
          </description>
          <description>
            <para>The color of a highlight.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_HIGHLIGHTTEXT</b>
          </description>
          <description>
            <para>The color of highlighted text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_BTNFACE</b>
          </description>
          <description>
            <para>The color of a button face.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_BTNSHADOW</b>
          </description>
          <description>
            <para>The color of the shadow underneath a button.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRAYTEXT</b>
          </description>
          <description>
            <para>The color of dimmed text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_BTNTEXT</b>
          </description>
          <description>
            <para>The color of text contained within a button.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_INACTIVECAPTIONTEXT</b>
          </description>
          <description>
            <para>The color of the text in the caption area of an inactive window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_BTNHIGHLIGHT</b>
          </description>
          <description>
            <para>The color of the highlight around a button.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_DKSHADOW3D</b>
          </description>
          <description>
            <para>The color of three-dimensional dark shadows.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_LIGHT3D</b>
          </description>
          <description>
            <para>The color of three-dimensional light areas.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_INFOTEXT</b>
          </description>
          <description>
            <para>The color of informational text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_INFOBK</b>
          </description>
          <description>
            <para>The color of the background behind informational text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_BUTTONALTERNATEFACE</b>
          </description>
          <description>
            <para>The color of the alternate face of a button.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_HOTTRACKING</b>
          </description>
          <description>
            <para>The color of highlight applied when a user moves the mouse over a control.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRADIENTACTIVECAPTION</b>
          </description>
          <description>
            <para>The gradient color applied to the caption area of an active window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_GRADIENTINACTIVECAPTION</b>
          </description>
          <description>
            <para>The gradient color applied to the caption area of an inactive window.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MENUHILIGHT</b>
          </description>
          <description>
            <para>The color of highlight drawn on a menu item when the user moves the mouse over it.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MENUBAR</b>
          </description>
          <description>
            <para>The color of the menu bar.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBRUSH</a></b></para>
      <para>Handle to brush data.</para>
    </returns>
    <remarks>
      <para>If the theme data handle is not a <b>NULL</b> handle, <b>GetThemeSysColorBrush</b> returns the brush that matches the specified color from the SysMetrics section of the visual style. If the theme data handle is <b>NULL</b>, the function returns the brush matching the global system color.</para>
      <para>The brush handle that is returned by this function should be released when it is no longer needed using <see cref="DeleteObject" />.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeSysFont">
    <summary>
      <para>Retrieves the <see cref="LOGFONT" /> of a system font.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to theme data.</para>
    </param>
    <param name="iFontId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies a system font. May be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_CAPTIONFONT</b>
          </description>
          <description>
            <para>The font used by window captions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_SMALLCAPTIONFONT</b>
          </description>
          <description>
            <para>The font used by window small captions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MENUFONT</b>
          </description>
          <description>
            <para>The font used by menus.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_STATUSFONT</b>
          </description>
          <description>
            <para>The font used in status messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_MSGBOXFONT</b>
          </description>
          <description>
            <para>The font used to display messages in a message box.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_ICONTITLEFONT</b>
          </description>
          <description>
            <para>The font used for icons.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="plf">
      <para>Type: <b>LOGFONTW*</b></para>
      <para>Pointer to a <see cref="LOGFONT" /> structure that receives the font information from this function.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function requires vssym32.h and uxtheme.h.</para>
      <para>If the theme data handle is not a <b>NULL</b> handle, this function returns the desired <see cref="LOGFONT" /> from the SysMetrics section of the visual style. If the theme data handle is <b>NULL</b>, the function returns the value of the global system metric of the same type.</para>
      <para>The font is scaled in dots per inch for the current logical screen.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeSysInt">
    <summary>
      <para>Retrieves the value of a system <b>int</b>.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to theme data.</para>
    </param>
    <param name="iIntId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the desired system <b>int</b>. May be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_MINCOLORDEPTH</b>
          </description>
          <description>
            <para>The minimum color depth, in bits, required to properly view this style.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piValue">
      <para>Type: <b>int*</b></para>
      <para>Pointer to an <b>int</b> that receives the system integer value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.GetThemeSysSize">
    <summary>
      <para>Retrieves the value of a system size metric from theme data.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to theme data.</para>
    </param>
    <param name="iSizeId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the system size metric desired. The following values are valid:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SM_CXBORDER</b>
          </description>
          <description>
            <para>Specifies the width of a border.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CXVSCROLL</b>
          </description>
          <description>
            <para>Specifies the width of a scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CXHSCROLL</b>
          </description>
          <description>
            <para>Specifies the height of a scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CXSIZE</b>
          </description>
          <description>
            <para>Specifies the width of a caption.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CYSIZE</b>
          </description>
          <description>
            <para>Specifies the height of a caption.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CXSMSIZE</b>
          </description>
          <description>
            <para>Specifies the width of a small caption.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CYSMSIZE</b>
          </description>
          <description>
            <para>Specifies the height of a small caption.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CXMENUSIZE</b>
          </description>
          <description>
            <para>Specifies the width of a menu bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CYMENUSIZE</b>
          </description>
          <description>
            <para>Specifies the height of a menu bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SM_CXPADDEDBORDER</b>
          </description>
          <description>
            <para>Specifies the amount of border padding for captioned windows.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the size in pixels.</para>
    </returns>
    <remarks>
      <para>If <i>hTheme</i> is <b> not </b>  <b>NULL</b>, this function returns the size stored in the current visual style (SysMetrics section of the visual style) scaled to the current screen dpi.  If <i>hTheme</i> is <b>NULL</b>, this function returns the global system metric in pixels that is scaled to the current dpi only if the application is marked as dpi-aware; otherwise, the pixels returned are unscaled.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeSysString">
    <summary>
      <para>Retrieves the value of a system string.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to theme data.</para>
    </param>
    <param name="iStringId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies a system string. May be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TMT_CSSNAME</b>
          </description>
          <description>
            <para>The name of the CSS file associated with the theme specified by <i>hTheme</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TMT_XMLNAME</b>
          </description>
          <description>
            <para>The name of the XML file associated with the theme specified by <i>hTheme</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszStringBuff">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>Pointer to the buffer that receives the string value from this function.</para>
    </param>
    <param name="cchMaxStringChars">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the maximum number of characters the string buffer can hold.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>If the theme data handle is not a <b>NULL</b> handle, this function returns the desired string from the SysMetrics section of the visual style. If the theme data handle is <b>NULL</b>, this function returns the value of the global system metric of the same type.</para>
    </remarks>
  </member>
  <member name="Windows.GetThemeTextExtent">
    <summary>
      <para>Calculates the size and location of the specified text when rendered in the visual style font.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to select the font into.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part in which the text will be drawn. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains the text to draw.</para>
    </param>
    <param name="cchCharCount">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the number of characters to draw. If the parameter is set to -1, all the characters in the string are drawn.</para>
    </param>
    <param name="dwTextFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>
        <b>DWORD</b> that contains one or more values that specify the string's formatting. See <a href="https://docs.microsoft.com//windows/desktop/Controls/theme-format-values">Format Values</a> for possible parameter values.</para>
    </param>
    <param name="pBoundingRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the rectangle used to control layout of the text. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="pExtentRect">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains, in logical coordinates, the rectangle required to fit the rendered text.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeTextMetrics">
    <summary>
      <para>Retrieves information about the font specified by a visual style for a particular part.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to use for screen context. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part to retrieve font information about. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="ptm">
      <para>Type: <b><see cref="TEXTMETRIC" />*</b></para>
      <para>Receives the font information.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.GetThemeTimingFunction">
    <summary>
      <para>Gets a predefined timing function based on
a timing function identifier.</para>
    </summary>
    <param name="hTheme">
      <para>An opened theme handle.</para>
    </param>
    <param name="iTimingFunctionId">
      <para>A timing function identifier.</para>
    </param>
    <param name="pTimingFunction">
      <para>A buffer to receive a predefined timing function pointer.</para>
    </param>
    <param name="cbSize">
      <para>The byte size of the buffer pointed by <i>pTimingFunction</i>.</para>
    </param>
    <param name="pcbSizeOut">
      <para>The byte size of
the timing function structure.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.GetThemeTransitionDuration">
    <summary>
      <para>Gets the duration for the specified transition.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle of the theme data.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>ID of the part.</para>
    </param>
    <param name="iStateIdFrom">
      <para>Type: <b>int</b></para>
      <para>State ID of the part before the transition.</para>
    </param>
    <param name="iStateIdTo">
      <para>Type: <b>int</b></para>
      <para>State ID of the part after the transition.</para>
    </param>
    <param name="iPropId">
      <para>Type: <b>int</b></para>
      <para>Property ID.</para>
    </param>
    <param name="pdwDuration">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a>*</b></para>
      <para>Address of a variable that receives the transition duration, in milliseconds.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowTheme">
    <summary>
      <para>Retrieves a theme handle to a window that has visual styles applied.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle of the window.</para>
    </param>
    <returns>
      <para>Type: <b>HTHEME</b></para>
      <para>The most recent theme handle from <see cref="OpenThemeData" />.</para>
    </returns>
    <remarks>
      <para>If a window has a visual style applied, the <b>GetWindowTheme</b> function returns the most recent theme handle from <see cref="OpenThemeData" />. If no visual style is applied, <b>GetWindowTheme</b> returns <b>NULL</b>.</para>
    </remarks>
  </member>
  <member name="Windows.HitTestThemeBackground">
    <summary>
      <para>Retrieves a hit test code for a point in the background specified by a visual style.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC to use when drawing. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="dwOptions">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>
        <b>DWORD</b> that specifies the hit test options. See <a href="https://docs.microsoft.com//windows/desktop/Controls/theme-hit-test-options">Hit Test Options</a> for a list of options.</para>
    </param>
    <param name="pRect">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains, in logical coordinates, the rectangle that bounds the background.</para>
    </param>
    <param name="hrgn">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRGN</a></b></para>
      <para>Handle to a region that can be used to specify the bounds of a hit test area. This parameter may be set to <b>NULL</b>.</para>
    </param>
    <param name="ptTest">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a></b></para>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure that contains the coordinates of the point.</para>
    </param>
    <param name="pwHitTestCode">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">WORD</a>*</b></para>
      <para>
        <b>WORD</b> that receives the hit test code that indicates whether the point in <i>ptTest</i> is in the background area bounded by <i>pRect</i> or <i>hrgn</i>. See <a href="https://docs.microsoft.com//windows/desktop/Controls/theme-hit-test-retval">Hit Test Return Values</a> for a list of values returned.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The values in <i>ptTest</i> and <i>pRect</i> should be in the same coordinate system, such as client or screen. If the <i>hrgn</i> parameter is used, it must be specified in the same coordinates as <i>pRect</i> and <i>ptTest</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/property-typedefs">Property Identifiers</seealso>
  </member>
  <member name="Windows.IsAppThemed">
    <summary>
      <para>Reports whether the current application's user interface displays using visual styles.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>TRUE</b>
            </para>
          </description>
          <description>
            <para>The application has a visual style applied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>FALSE</b>
            </para>
          </description>
          <description>
            <para>The application does not have a visual style applied.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Prior to Windows 8, a visual style can be turned off in Control Panel, so that an application can support visual styles but not have a visual style applied at a given time.</para>
      <para>In Windows 8, it is not possible to turn off visual styles.</para>
      <para>Do not call this function during <a href="https://docs.microsoft.com//windows/desktop/Dlls/dllmain">DllMain</a> or global objects constructors. This may cause invalid return values.</para>
    </remarks>
  </member>
  <member name="Windows.IsCompositionActive">
    <summary>
      <para>Determines whether Desktop Window Manager (DWM) composition effects are available to the theme.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>TRUE</b> if composition effects are available; otherwise, <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>Composition effects are provided through the DWM. This function first determines whether DWM is active, then checks whether it has composition effects enabled.</para>
    </remarks>
  </member>
  <member name="Windows.IsThemeActive">
    <summary>
      <para>Tests if a visual style for the current application is active.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>TRUE</b>
            </para>
          </description>
          <description>
            <para>A visual style is enabled, and windows with visual styles applied should call <see cref="OpenThemeData" /> to start using theme drawing services.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>FALSE</b>
            </para>
          </description>
          <description>
            <para>A visual style is not enabled, and the window message handler does not need to make another call to <see cref="IsThemeActive" /> until it receives a WM_THEMECHANGED message.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Do not call this function during <a href="https://docs.microsoft.com//windows/desktop/Dlls/dllmain">DllMain</a> or global objects constructors. This may cause invalid return values.</para>
    </remarks>
  </member>
  <member name="Windows.IsThemeBackgroundPartiallyTransparent">
    <summary>
      <para>Retrieves whether the background specified by the visual style has transparent pieces or alpha-blended pieces.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the state of the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>TRUE</b>
            </para>
          </description>
          <description>
            <para>The theme-specified background for a particular <i>iPartId</i> and <i>iStateId</i> has transparent pieces or alpha-blended pieces.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>FALSE</b>
            </para>
          </description>
          <description>
            <para>The theme-specified background for a particular <i>iPartId</i> and <i>iStateId</i> does not have transparent pieces or alpha-blended pieces.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.IsThemeDialogTextureEnabled">
    <summary>
      <para>Reports whether a specified dialog window supports background texturing.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>
        <b>HWND</b> value that specifies a dialog window.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>TRUE</b>
            </para>
          </description>
          <description>
            <para>Background texturing is supported on the dialog window specified by the <i>hwnd</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>FALSE</b>
            </para>
          </description>
          <description>
            <para>Background texturing is not supported on the dialog window specified by the <i>hwnd</i> parameter.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.IsThemePartDefined">
    <summary>
      <para>Retrieves whether a visual style has defined parameters for the specified part and state.</para>
    </summary>
    <param name="hTheme">
      <para>Type: <b>HTHEME</b></para>
      <para>Handle to a window's specified theme data. Use <see cref="OpenThemeData" /> to create an HTHEME.</para>
    </param>
    <param name="iPartId">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that specifies the part. See <a href="https://docs.microsoft.com//windows/desktop/Controls/parts-and-states">Parts and States</a>.</para>
    </param>
    <param name="iStateId">
      <para>Type: <b>int</b></para>
      <para>Currently unused. The value should be 0.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>TRUE</b>
            </para>
          </description>
          <description>
            <para>The theme has defined parameters for the specified <i>iPartId</i> and <i>iStateId</i></para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>FALSE</b>
            </para>
          </description>
          <description>
            <para>The theme does not have defined parameters for the specified <i>iPartId</i> and <i>iStateId</i></para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.OpenThemeData">
    <summary>
      <para>Opens the theme data for a window and its associated class.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle of the window for which theme data is required.</para>
    </param>
    <param name="pszClassList">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains a semicolon-separated list of classes.</para>
    </param>
    <returns>
      <para>Type: <b>HTHEME</b></para>
      <para>
        <b>OpenThemeData</b> tries to match each class, one at a time, to a class data section in the active theme. If a match is found, an associated HTHEME handle is returned. If no match is found <b>NULL</b> is returned.</para>
    </returns>
    <remarks>
      <para>The <i>pszClassList</i> parameter contains a list, not just a single name, to provide the class an opportunity to get the best match between the class and the current visual style. For example, a button might pass L"OkButton;Button"
if its ID is ID_OK. If the current visual style has an entry for OkButton, that is used; otherwise no visual style is applied.</para>
      <para>Class names for the Aero theme are defined in AeroStyle.xml.</para>
    </remarks>
    <seealso cref="CloseThemeData" />
  </member>
  <member name="Windows.OpenThemeDataEx">
    <summary>
      <para>Opens the theme data associated with a window for specified theme classes.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a window or control that the theme is to be retrieved from.</para>
    </param>
    <param name="pszClassList">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>A semicolon-separated list of class names to match.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Optional flags that control how to return the theme data. May be set to a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>OTD_FORCE_RECT_SIZING</b>
          </description>
          <description>
            <para>Forces drawn images from this theme to stretch to fit the rectangles specified by drawing functions.</para>
          </description>
        </item>
        <item>
          <description>
            <b>OTD_NONCLIENT</b>
          </description>
          <description>
            <para>Allows theme elements to be drawn in the non-client area of the window.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>HTHEME</b></para>
      <para>If a match is found, a valid handle to a theme is returned. Otherwise, a <b>NULL</b> value will be returned.</para>
    </returns>
    <remarks>
      <para>The string specified by <i>pszClassIdList</i> will be tokenized using semicolons as a delimiter. The names are matched against class names one token at a time. If no match is found for a particular token, the next token will be matched. If a match is found, the return value of the function will be the theme handle associated with the matched class.</para>
      <para>Class names for the Aero theme are defined in AeroStyle.xml.</para>
    </remarks>
    <seealso cref="OpenThemeData" />
  </member>
  <member name="Windows.OpenThemeDataForDpi">
    <summary>
      <para>A variant of <see cref="OpenThemeData" /> that opens a theme handle associated with a specific DPI.</para>
    </summary>
    <param name="hwnd">
      <para>The handle of the window for which theme data is required.</para>
    </param>
    <param name="pszClassList">
      <para>A pointer to a string that contains a semicolon-separated list of classes.</para>
    </param>
    <param name="dpi">
      <para>The specified DPI value with which to associate the theme handle. The function will return an error if this value is outside of those that correspond to the set of connected monitors.</para>
    </param>
    <returns>
      <para>See <see cref="OpenThemeData" />.</para>
    </returns>
    <remarks>
      <para>
        <see cref="OpenThemeData" /> will create theme handles associated with the DPI of a window when used with Per Monitor v2 windows. OpenThemeDataForDpi allows you to open a theme handle for a specific DPI when you do not have a window at that DPI.</para>
      <para>The behavior of the returned theme handle will be undermined if the requested DPI value does not correspond to a currently connected display. The theming system only loads theme assets for the set of DPI values corresponding to the <i>currently</i> connected displays.</para>
      <para>The theme handle will become invalid anytime the system reloads the theme data. Applications are required to monitor <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-themechanged">WM_THEMECHANGED</a> and close and reopen all theme handles in response. This behavior is the same regardless of whether the handles were opened via OpenThemeData or OpenThemeDataForDpi.</para>
    </remarks>
    <seealso cref="OpenThemeData" />
  </member>
  <member name="Windows.SetThemeAppProperties">
    <summary>
      <para>Sets the flags that determine how visual styles are implemented in the calling application.</para>
    </summary>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>
        <b>DWORD</b> that specifies one or more of the following bit flags, which can be combined with a logical OR.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>STAP_ALLOW_NONCLIENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the nonclient areas of application windows will have visual styles applied.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>STAP_ALLOW_CONTROLS</description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the common controls used in an application will have visual styles applied.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>STAP_ALLOW_WEBCONTENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that web content displayed in an application will have visual styles applied.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>After you set the flags, send a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-themechanged">WM_THEMECHANGED</a> message to your application's main window for the changes to take effect.</para>
      <h4>Examples</h4>
      <para>This example combines flags and calls this function as shown.</para>
      <code>DWORD dwFlags = (STAP_ALLOW_NONCLIENT |
        STAP_ALLOW_CONTROLS | STAP_ALLOW_WEBCONTENT);
SetThemeAppProperties(dwFlags);

</code>
    </remarks>
    <seealso cref="GetThemeAppProperties" />
  </member>
  <member name="Windows.SetWindowTheme">
    <summary>
      <para>Causes a window to use a different set of visual style information than its class normally uses.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the window whose visual style information is to be changed.</para>
    </param>
    <param name="pszSubAppName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains the application name to use in place of the calling application's name. If this parameter is <b>NULL</b>, the calling application's name is used.</para>
    </param>
    <param name="pszSubIdList">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>Pointer to a string that contains a semicolon-separated list of CLSID names to use in place of the actual list passed by the window's class. If this parameter is <b>NULL</b>, the ID list from the calling class is used.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The theme manager retains the <i>pszSubAppName</i> and the <i>pszSubIdList</i> associations through the lifetime of the window, even if visual styles subsequently change. The window is sent a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-themechanged">WM_THEMECHANGED</a> message at the end of a <b>SetWindowTheme</b> call, so that the new visual style can be found and applied.</para>
      <para>When <i>pszSubAppName</i> and <i>pszSubIdList</i> are <b>NULL</b>, the theme manager removes the previously applied associations. You can prevent visual styles from being applied to a specified window by specifying an empty string, (L" "), which does not match any section entries.</para>
      <h4>Examples</h4>
      <para>The following example code gives a list-view control the appearance of a Windows Explorer list:</para>
      <code>SetWindowTheme(hwndList, L"Explorer", NULL);

</code>
    </remarks>
  </member>
  <member name="Windows.SetWindowThemeAttribute">
    <summary>
      <para>Sets attributes to control how visual styles are applied to a specified window.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a window to apply changes to.</para>
    </param>
    <param name="unnamedParam2">
      <para>Type: <b>enum WINDOWTHEMEATTRIBUTETYPE</b></para>
      <para>Value of type <see cref="WINDOWTHEMEATTRIBUTETYPE" /> that specifies the type of attribute to set. The value of this parameter determines the type of data that should be passed in the <i>pvAttribute</i> parameter. Can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>WTA_NONCLIENT</b>
          </description>
          <description>
            <para>Specifies non-client related attributes. <i>pvAttribute</i> must be a pointer of type <see cref="WTA_OPTIONS" />.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pvAttribute">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PVOID</a></b></para>
      <para>A pointer that specifies attributes to set. Type is determined by the value of the <i>eAttribute</i> value.</para>
    </param>
    <param name="cbAttribute">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Specifies the size, in bytes, of the data pointed to by <i>pvAttribute</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="WINDOWTHEMEATTRIBUTETYPE" />
  </member>
  <member name="Windows.SetWindowThemeNonClientAttributes">
    <summary>
      <para>Sets non-client attributes to control how visual styles are applied to a specified window.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window in which to apply changes.</para>
    </param>
    <param name="dwMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A bitmask that describes which values are to be modified. Can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wtnca">WTNCA</a> constants.</para>
    </param>
    <param name="dwAttributes">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A combination of flags that modify window visual style attributes based on <i>dwMask</i>. Can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wtnca">WTNCA</a> constants.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.UpdatePanningFeedback">
    <summary>
      <para>Updates clients about state of a window resulting from a panning gesture. This function can only be called after a <see cref="BeginPanningFeedback" /> call.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The handle to the target window that will receive feedback. For the method to succeed, this must be the same HWND as provided in <see cref="BeginPanningFeedback" />.</para>
    </param>
    <param name="lTotalOverpanOffsetX">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>The total displacement that the window has moved in the horizontal direction since the end of scrollable region was reached. A maximum displacement of 30 pixels is allowed.</para>
    </param>
    <param name="lTotalOverpanOffsetY">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>The total displacement that the window has moved in the vertical direction since the end of scrollable region was reached. A maximum displacement of 30 pixels is allowed.</para>
    </param>
    <param name="fInInertia">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Flag indicating whether the application is handling a WM_GESTURE message with the GF_INERTIA FLAG set.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>TRUE</b> if successful.</para>
    </returns>
    <remarks>
      <para>Incremental calls to this function should always pass the sum of the increments and not just the latest increment itself.</para>
    </remarks>
  </member>
</doc>