<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IClassFactory2.CreateInstanceLic">
    <summary>Creates an instance of the licensed object for the specified license key. This method is the only possible means to create an object on an otherwise unlicensed machine.</summary>
    <param name="pUnkOuter">A pointer to the controlling <see cref="IUnknown" /> interface on the outer unknown if this object is being created as part of an aggregate. If the object is not part of an aggregate, this parameter must be <b>NULL</b>.</param>
    <param name="pUnkReserved">This parameter is unused and must be <b>NULL</b>.</param>
    <param name="riid">A reference to the identifier of the interface to be used to communicate with the newly created object.</param>
    <param name="bstrKey">Run-time license key previously obtained from <see cref="IClassFactory2.RequestLicKey" /> that is required to create an object.</param>
    <param name="ppvObj">Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer. If an error occurs, the implementation must set *<i>ppvObj</i> to <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The license was successfully created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTIMPL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This method is not implemented because objects can only be created on fully licensed machines through <see cref="IClassFactory.CreateInstance" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A pointer passed in <i>bstrKey</i> or <i>ppvObj</i> is not valid. For example, it may be <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object can be created (and the license key is valid) except the object does not support the interface specified by <i>riid</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLASS_E_NOAGGREGATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pUnkOuter</i> parameter is non-<b>NULL</b>, but this object class does not support aggregation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLASS_E_NOTLICENSED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The key provided in <i>bstrKey</i> is not a valid license key.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IClassFactory2.GetLicInfo">
    <summary>Retrieves information about the licensing capabilities of this class factory.</summary>
    <param name="pLicInfo">A pointer to the caller-allocated <see cref="LICINFO" /> structure to be filled on output.</param>
    <returns>
      <para>This method can return the standard return values E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="LICINFO" /> structure was successfully filled in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The address in <i>pLicInfo</i> is not valid. For example, it may be <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IClassFactory2.RequestLicKey">
    <summary>Creates a license key that the caller can save and use later to create an instance of the licensed object.</summary>
    <param name="dwReserved">This parameter is reserved and must be zero.</param>
    <param name="pBstrKey">A pointer to the caller-allocated variable that receives the callee-allocated license key on successful return from this method. This parameter is set to <b>NULL</b> on any failure.</param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The license key was successfully created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTIMPL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This class factory does not support run-time license keys.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The address passed in <i>pbstrKey</i> is not valid. For example, it may be <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLASS_E_NOTLICENSED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This class factory supports run-time licensing, but the current machine itself is not licensed. Thus, a run-time key is not available on this machine.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IClassFactory2">
    <summary>
      <para>Enables a class factory object, in any sort of object server, to control object creation through licensing.</para>
      <para>This interface is an extension to <see cref="IClassFactory" />. This extension enables a class factory executing on a licensed machine to provide a license key that can be used later to create an object instance on an unlicensed machine. Such considerations are important for objects like controls that are used to build applications on a licensed machine. Subsequently, the application built must be able to run on an unlicensed machine. The license key gives only that one client application the right to instantiate objects through <b>IClassFactory2</b> when a full machine license does not exist.</para>
    </summary>
  </member>
</doc>