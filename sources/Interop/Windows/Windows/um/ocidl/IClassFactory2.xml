<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IClassFactory2.CreateInstanceLic">
    <summary>
      <para>Creates an instance of the licensed object for the specified license key. This method is the only possible means to create an object on an otherwise unlicensed machine.</para>
    </summary>
    <param name="pUnkOuter">
      <para>A pointer to the controlling <see cref="IUnknown" /> interface on the outer unknown if this object is being created as part of an aggregate. If the object is not part of an aggregate, this parameter must be <b>NULL</b>.</para>
    </param>
    <param name="pUnkReserved">
      <para>This parameter is unused and must be <b>NULL</b>.</para>
    </param>
    <param name="riid">
      <para>A reference to the identifier of the interface to be used to communicate with the newly created object.</para>
    </param>
    <param name="bstrKey">
      <para>Run-time license key previously obtained from <see cref="IClassFactory2.RequestLicKey" /> that is required to create an object.</para>
    </param>
    <param name="ppvObj">
      <para>Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer. If an error occurs, the implementation must set *<i>ppvObj</i> to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The license was successfully created.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>This method is not implemented because objects can only be created on fully licensed machines through <see cref="IClassFactory.CreateInstance" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>A pointer passed in <i>bstrKey</i> or <i>ppvObj</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOINTERFACE</b>
            </para>
          </description>
          <description>
            <para>The object can be created (and the license key is valid) except the object does not support the interface specified by <i>riid</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CLASS_E_NOAGGREGATION</b>
            </para>
          </description>
          <description>
            <para>The <i>pUnkOuter</i> parameter is non-<b>NULL</b>, but this object class does not support aggregation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CLASS_E_NOTLICENSED</b>
            </para>
          </description>
          <description>
            <para>The key provided in <i>bstrKey</i> is not a valid license key.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Implementers</h3>
      <para>If the class factory does not provide a license key (that is, <see cref="IClassFactory2.RequestLicKey" /> returns E_NOTIMPL and the <b>fRuntimeKeyAvail</b> member in <see cref="LICINFO" /> is set to <b>FALSE</b> in <see cref="IClassFactory2.GetLicInfo" />), then this method can also return E_NOTIMPL. In such cases, the class factory is implementing <see cref="IClassFactory2" /> simply to specify whether the machine is licensed at all through the <b>fLicVerified</b> member of <b>LICINFO</b>.</para>
    </remarks>
    <seealso cref="IClassFactory2" />
    <seealso cref="LICINFO" />
  </member>
  <member name="IClassFactory2.GetLicInfo">
    <summary>
      <para>Retrieves information about the licensing capabilities of this class factory.</para>
    </summary>
    <param name="pLicInfo">
      <para>A pointer to the caller-allocated <see cref="LICINFO" /> structure to be filled on output.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The <see cref="LICINFO" /> structure was successfully filled in.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>pLicInfo</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Implementers</h3>
      <para>E_NOTIMPL is not allowed as a return value because this method provides critical information for the client of a licensed class factory.</para>
    </remarks>
    <seealso cref="IClassFactory2" />
    <seealso cref="LICINFO" />
  </member>
  <member name="IClassFactory2.RequestLicKey">
    <summary>
      <para>Creates a license key that the caller can save and use later to create an instance of the licensed object.</para>
    </summary>
    <param name="dwReserved">
      <para>This parameter is reserved and must be zero.</para>
    </param>
    <param name="pBstrKey">
      <para>A pointer to the caller-allocated variable that receives the callee-allocated license key on successful return from this method. This parameter is set to <b>NULL</b> on any failure.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The license key was successfully created.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>This class factory does not support run-time license keys.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address passed in <i>pbstrKey</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CLASS_E_NOTLICENSED</b>
            </para>
          </description>
          <description>
            <para>This class factory supports run-time licensing, but the current machine itself is not licensed. Thus, a run-time key is not available on this machine.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The caller can save the license key for subsequent calls to <see cref="IClassFactory2.CreateInstanceLic" /> to create objects on an otherwise unlicensed machine.</para>
      <h3>Notes to Callers</h3>
      <para>The caller must free the <b>BSTR</b> with the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a> function when the key is no longer needed. The value of <i>fRuntimeKeyAvail</i> is returned through a previous call to <see cref="IClassFactory2.GetLicInfo" />.</para>
      <h3>Notes to Implementers</h3>
      <para>This method allocates the <b>BSTR</b> key with <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysallocstring">SysAllocString</a> or <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysallocstringlen">SysAllocStringLen</a>, and the caller becomes responsible for this <b>BSTR</b> after this method returns successfully.</para>
      <para>This method need not be implemented when a class factory does not support run-time license keys.</para>
    </remarks>
    <seealso cref="IClassFactory2" />
  </member>
  <member name="IClassFactory2">
    <summary>
      <para>Enables a class factory object, in any sort of object server, to control object creation through licensing.</para>
      <para>This interface is an extension to <see cref="IClassFactory" />. This extension enables a class factory executing on a licensed machine to provide a license key that can be used later to create an object instance on an unlicensed machine. Such considerations are important for objects like controls that are used to build applications on a licensed machine. Subsequently, the application built must be able to run on an unlicensed machine. The license key gives only that one client application the right to instantiate objects through <b>IClassFactory2</b> when a full machine license does not exist.</para>
    </summary>
    <seealso cref="IClassFactory" />
  </member>
</doc>