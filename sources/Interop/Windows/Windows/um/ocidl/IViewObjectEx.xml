<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IViewObjectEx.GetNaturalExtent">
    <summary>
      <para>Provides sizing hints from the container for the object to use as the user resizes it.</para>
    </summary>
    <param name="dwAspect">
      <para>The requested drawing aspect. It can be any of the following values, which are defined by the <see cref="DVASPECT" /> enumeration.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>DVASPECT_CONTENT</b>
          </description>
          <description>
            <para>Provide a representation of the control so it can be displayed as an embedded object inside of a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DVASPECT_DOCPRINT</b>
          </description>
          <description>
            <para>Provide a representation of the control on the screen as though it were printed to a printer using the <b>Print</b> command from the <b>File</b> menu. The described data may represent a sequence of pages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DVASPECT_ICON</b>
          </description>
          <description>
            <para>Provide an iconic representation of the control.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DVASPECT_THUMBNAIL</b>
          </description>
          <description>
            <para>Provide a thumbnail representation of an object so it can be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended) device-independent bitmap potentially wrapped in a metafile.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lindex">
      <para>Indicates the portion of the object that is of interest for the draw operation. Its interpretation varies depending on the value in the <i>dwAspect</i> parameter. See the <see cref="DVASPECT" /> enumeration for more information.</para>
    </param>
    <param name="ptd">
      <para>Pointer to the target device structure that describes the device for which the object is to be rendered. If <b>NULL</b>, the view should be rendered for the default target device (typically the display). A value other than <b>NULL</b> is interpreted in conjunction with <i>hicTargetDev</i> and <b>hdcDraw</b>. For example, if <b>hdcDraw</b> specifies a printer as the device context, the <i>ptd</i> parameter points to a structure describing that printer device. The data may actually be printed if <i>hicTargetDev</i> is a valid value or it may be displayed in print preview mode if <i>hicTargetDev</i> is <b>NULL</b>.</para>
    </param>
    <param name="hicTargetDev">
      <para>Specifies the information context for the target device indicated by the ptd parameter from which the object can extract device metrics and test the device's capabilities. If <i>ptd</i> is <b>NULL</b>; the object should ignore the value in the <i>hicTargetDev</i> parameter.</para>
    </param>
    <param name="pExtentInfo">
      <para>Pointer to <see cref="DVEXTENTINFO" /> structure that specifies the sizing data.</para>
    </param>
    <param name="pSizel">
      <para>Pointer to sizing data returned by the object. The returned sizing data is set to -1 for any dimension that was not adjusted. That is if <b>cx</b> is -1 then the width was not adjusted, if <b>cy</b> is -1 then the height was not adjusted. If E_FAIL is returned indicating no size was adjusted then <i>pSizel</i> may be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>This method is not implemented for the specified <i>dwAspect</i>, or the size was not adjusted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>This method was not implemented.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>There are two general approaches to sizing a control. The first approach gives the control responsibility for sizing itself; the second approach gives the container responsibility for sizing the control. The first approach is called autosizing. There are two alternatives involved in the second approach: content sizing and integral sizing.</para>
      <para>The <b>IViewObjectEx.GetNaturalExtent</b> method supports both content and integral sizing. In content sizing, the container passes the <see cref="DVEXTENTINFO" /> structure to the object into which the object returns a suggested size. In integral sizing, the container passes a preferred size to the object in <b>DVEXTENTINFO</b>, and the object actually adjusts its height. Integral sizing is used when the user rubberbands a new size in design mode.</para>
      <para>Autosizing typically occurs with objects such as the Label control which resizes if the autosize property was enabled and the associated text changed. Autosizing is handled differently depending on the state of the object.</para>
      <para>If the object is inactive, the following occurs:</para>
      <list type="number">
        <item>
          <description>The object calls <see cref="IOleClientSite.RequestNewObjectLayout" />.</description>
        </item>
        <item>
          <description>The container calls <see cref="IOleObject.GetExtent" /> and retrieves the new extents.</description>
        </item>
        <item>
          <description>The container calls <see cref="IOleObject.SetExtent" /> and adjusts the new extents.</description>
        </item>
      </list>
      <para>If the object is active, the following occurs:</para>
      <list type="number">
        <item>
          <description>The object calls <see cref="IOleInPlaceSite.OnPosRectChange" /> to specify that it requires resizing.</description>
        </item>
        <item>
          <description>The container calls <see cref="IOleInPlaceObject.SetObjectRects" /> and specifies the new size.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="IOleClientSite.RequestNewObjectLayout" />
    <seealso cref="IOleInPlaceObject.SetObjectRects" />
    <seealso cref="IOleInPlaceSite.OnPosRectChange" />
    <seealso cref="IOleObject.GetExtent" />
    <seealso cref="IOleObject.SetExtent" />
    <seealso cref="IViewObjectEx" />
  </member>
  <member name="IViewObjectEx.GetRect">
    <summary>
      <para>Retrieves a rectangle describing a requested drawing aspect.</para>
    </summary>
    <param name="dwAspect">
      <para>The drawing aspect requested.</para>
    </param>
    <param name="pRect">
      <para>A pointer to the rectangle describing the requested drawing aspect.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>DV_E_DVASPECT</b>
            </para>
          </description>
          <description>
            <para>The method does not support the specified aspect. Either the object does not support the aspect requested or the aspect is not rectangular.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method returns a rectangle describing the specified drawing aspect. The returned rectangle is in <b>HIMETRIC</b> units, relative to the object's origin. The rectangle returned depends on the drawing aspect as follows.</para>
      <list type="table">
        <listheader>
          <description>Drawing Aspect</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>DVASPECT_CONTENT</para>
          </description>
          <description>
            <para>Objects should return the bounding rectangle of the whole object. The top-left corner is at the object's origin and the size is equal to the extent returned by <see cref="IViewObject2.GetExtent" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>DVASPECT_OPAQUE</para>
          </description>
          <description>
            <para>Objects with a rectangular opaque region should return that rectangle. Others should fail and return error code DV_E_DVASPECT.</para>
            <para>If a rectangle is returned, it is guaranteed to be completely obscured by calling <see cref="IViewObject.Draw" /> for that aspect. The container should use that rectangle to clip out the object's opaque parts before drawing any object behind it during the back to front pass. If this method fails on an object with a non-rectangular opaque region, the container should draw the entire object in the back to front part using the DVASPECT_CONTENT aspect.</para>
          </description>
        </item>
        <item>
          <description>
            <para>DVASPECT_TRANSPARENT</para>
          </description>
          <description>
            <para>Objects should return the rectangle covering all transparent or irregular parts. If the object does not have any transparent or irregular parts, it may return DV_E_ASPECT. A container may use this rectangle to determine whether there are other objects overlapping the transparent parts of a given object.</para>
          </description>
        </item>
      </list>
    </remarks>
    <seealso cref="IViewObjectEx" />
  </member>
  <member name="IViewObjectEx.GetViewStatus">
    <summary>
      <para>Retrieves information about the opacity of the object, and what drawing aspects are supported.</para>
    </summary>
    <param name="pdwStatus">
      <para>A pointer to the view status. This information is returned as a combination of the <see cref="VIEWSTATUS" /> enumeration values.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success.</para>
    </returns>
    <remarks>
      <para>In order to optimize the drawing process, the container needs to be able to determine whether an object is opaque and whether it has a solid background. It is not necessary to redraw objects that are entirely covered by a completely opaque object. Other operations, such as scrolling for example, can also be highly optimized if an object is opaque and has a solid background.</para>
      <para>The <b>IViewObjectEx.GetViewStatus</b> method returns whether the object is entirely opaque or not (VIEWSTATUS_OPAQUE bit) and whether its background is solid (VIEWSTATUS_SOLIDBKGND bit). This information may change in time. An object may be opaque at a given time and become totally or partially transparent later on, for example, because of a change of the BackStyle property. An object should notify its sites when it changes using <see cref="IAdviseSinkEx.OnViewStatusChange" /> so the sites can cache this information for high speed access.</para>
      <para>Objects not supporting <see cref="IViewObjectEx" /> are considered to be always transparent.</para>
      <para>The <b>IViewObjectEx.GetViewStatus</b> method also returns a combination of bits indicating which aspects are supported.</para>
      <para>If a given drawing aspect is not supported, all <see cref="IViewObjectEx" /> methods taking a drawing aspect as an input parameter should fail and return E_INVALIDARG. The <b>IViewObjectEx.GetViewStatus</b> method allows the container to get back information about all drawing aspects in one quick call. Normally the set of supported drawing aspects should not change with time. However, if this was not the case, an object should notify its container using <see cref="IAdviseSinkEx.OnViewStatusChange" />.</para>
      <para>Which drawing aspects are supported is independent of whether the object is opaque, partially transparent, or totally transparent. In particular, a transparent object that does not support DVASPECT_TRANSPARENT should be drawn correctly during the back to front pass using DVASPECT_CONTENT. However, this is likely to result in more flicker.</para>
    </remarks>
    <seealso cref="IAdviseSinkEx.OnViewStatusChange" />
    <seealso cref="IViewObjectEx" />
    <seealso cref="VIEWSTATUS" />
  </member>
  <member name="IViewObjectEx.QueryHitPoint">
    <summary>
      <para>Indicates whether a point is within a given aspect of an object.</para>
    </summary>
    <param name="dwAspect">
      <para>The requested drawing aspect.</para>
    </param>
    <param name="pRectBounds">
      <para>An object bounding rectangle in client coordinates of the containing window. This rectangle is computed and
passed by the container so that the object can meaningfully interpret the hit location.</para>
    </param>
    <param name="ptlLoc">
      <para>The hit location in client coordinates of the containing window.</para>
    </param>
    <param name="lCloseHint">
      <para>Suggested distance in <b>HIMETRIC</b> units that the container considers close. This
value is a hint, and objects can interpret it in their own way. Objects can also use this hint to roughly infer
output resolution to choose expansiveness of hit test implementation.</para>
    </param>
    <param name="pHitResult">
      <para>A pointer to returned information about the hit expressed as the
<see cref="HITRESULT" /> enumeration values.</para>
    </param>
    <returns>
      <para>This method returns <b>S_OK</b> on success. Other possible return values include the
following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>This method is not implemented for the requested aspect. Use
<see cref="DVASPECT_CONTENT" /> instead.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To support hit detection on non-rectangular objects, the container needs a reliable way to ask an object
whether a given location is inside one of its drawing aspects. This function is provided by
<b>IViewObjectEx.QueryHitPoint</b>.</para>
      <para>
        <b>Note</b>  Because this method is part of the <see cref="IViewObjectEx" /></para>
      <para>interface, the container can figure whether a mouse hit is over an object without having to necessarily launch
the server. If the hit happens to be inside the object, then it is likely that the object will be in-place
activated and the server started.</para>
      <para>Typically, the container first quickly determines whether a given location is within the rectangular extent of
an object. If the location is within the rectangular extent of an object, the container calls
<b>IViewObjectEx.QueryHitPoint</b> to get
confirmation that the location is actually inside the object. The hit location is passed in client coordinates of
the container window. Since the object may be inactive when this method is called, the bounding rectangle of the
object in the same coordinate system is also passed to this method, similarly to what happens in
<see cref="IPointerInactive.OnInactiveSetCursor" />.</para>
      <para>Possible returned values include:</para>
      <list type="bullet">
        <item>
          <description>Outside, on a transparent region</description>
        </item>
        <item>
          <description>Close enough to be considered a hit (may be used by small or thin objects)</description>
        </item>
        <item>
          <description>Hit</description>
        </item>
      </list>
      <b>IViewObjectEx.QueryHitPoint</b> is not
concerned by the sub-objects of the object it is called for. It merely indicates whether the mouse hit was within
the object or not.
<para><b>IViewObjectEx.QueryHitPoint</b> can be called
for any of the drawing aspects an object supports. It should fail if the it is not supported for the requested
drawing aspect.</para><para>Transparent objects may wish to implement a complex hit-detection mechanism where the user can select either
the transparent object or an object behind it, depending on where exactly the click happens inside the object.
For example, a transparent text box showing big enough text may let the user select the object behind, for
example, a bitmap, when the user clicks between the characters. For this reason, the information returned by
<b>IViewObjectEx.QueryHitPoint</b> includes
indication about whether the hit happens on an opaque or transparent region.</para><para>An example of non-rectangular and transparent hit detection is a transparent circle control with an object
behind it (a line in the example below):</para><para>.:image type="content" source="./images/a7c7fe0d-f171-4823-ba4c-b51cb90d8733.png" border="false" alt-text="Diagram of a circle with a diagonal line through it, showing the hit detection values for the areas inside and outside the circle and near the line.".:</para><para>The values shown are for hit tests against the circle; gray regions are not part of the control, but are shown
here to indicate an area around the image considered close. Each object implements its own definition of close
but is assisted by a hint provided by the container so that closeness can be adjusted as images zoom larger or
smaller.</para><para>In the picture above, the points marked Hit, Close, and Transparent would all be hits of varying strength on
the circle, with the exception of the one marked Transparent, (but for the line, close). This illustrates the
effect of the different strength of hits. Because the circle responds transparent while the line claims close,
and transparent is weaker than close, the line takes the hit.</para><h3>Notes to Implementers</h3><para>An object supporting <see cref="IViewObjectEx" /> is required to
implement this method at least for the <b>DVASPECT_CONTENT</b> aspect. The object should
not take any other action in response to this method other than to return the information; there should be no
side-effects.</para></remarks>
    <seealso cref="HITRESULT" />
    <seealso cref="IPointerInactive.OnInactiveSetCursor" />
    <seealso cref="IViewObjectEx" />
  </member>
  <member name="IViewObjectEx.QueryHitRect">
    <summary>
      <para>Indicates whether any point in a rectangle is within a given drawing aspect of an object.</para>
    </summary>
    <param name="dwAspect">
      <para>The requested drawing aspect.</para>
    </param>
    <param name="pRectBounds">
      <para>An object bounding rectangle in client coordinates of the containing window. This rectangle is computed and passed by the container so that the object can meaningfully interpret the hit location.</para>
    </param>
    <param name="pRectLoc">
      <para>The hit test rectangle, specified in <b>HIMETRIC</b> units, relative to the top-left corner of the object.</para>
    </param>
    <param name="lCloseHint">
      <para>The suggested distance, in <b>HIMETRIC</b> units, that the container considers close. This value is a hint, and objects can interpret it in their own way. Objects can also use this hint to roughly infer output resolution to choose expansiveness of hit test implementation.</para>
    </param>
    <param name="pHitResult">
      <para>A pointer to returned information about the hit expressed as the <see cref="HITRESULT" /> enumeration values.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>This method is not implemented for the requested aspect. Use DVASPECT_CONTENT instead.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Containers may need to test whether an object overlaps a given drawing aspect of another object. They can determine whether the objects overlap by requesting a region or at least a bounding rectangle of the aspect in question. However, a quicker way to do this is to call <b>IViewObjectEx.QueryHitRect</b> to ask the object whether a given rectangle intersects one of its drawing aspects.</para>
      <para>
        <b>Note</b>  Unlike <see cref="IViewObjectEx.QueryHitPoint" />, this method does not return HITRESULT_TRANSPARENT or HITRESULT_CLOSE. It is strictly hit or miss, returning HITRESULT_OUTSIDE if no point in the rectangle is hit and HITRESULT_HIT if at least one point in the rectangle is a hit.</para>
      <h3>Notes to Implementers</h3>
      <para>An object supporting <see cref="IViewObjectEx" /> is required to implement this method at least for the DVASPECT_CONTENT aspect. The object should not take any other action in response to this method other than to return the information; there should be no side-effects. If there is any ambiguity about whether a point is a hit, for instance due to coordinates not converting exactly, the object should return HITRESULT_HIT whenever any point in the rectangle might be a hit on the object. That is, it is permissible to claim a hit for a point that is not actually rendered, but never correct to claim a miss for any point that is in the rendered image of the object.</para>
    </remarks>
    <seealso cref="HITRESULT" />
    <seealso cref="IViewObjectEx" />
  </member>
  <member name="IViewObjectEx">
    <summary>
      <para>An extension derived from <see cref="IViewObject2" /> to provide support for:</para>
      <list type="bullet">
        <item>
          <description>Enhanced, flicker-free drawing for non-rectangular objects and transparent objects</description>
        </item>
        <item>
          <description>Hit testing for non-rectangular objects</description>
        </item>
        <item>
          <description>Control sizing</description>
        </item>
      </list>
    </summary>
    <seealso cref="IViewObject2" />
  </member>
</doc>