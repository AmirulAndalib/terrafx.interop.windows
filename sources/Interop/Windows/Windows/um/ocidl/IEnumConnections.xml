<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IEnumConnections.Clone">
    <summary>
      <para>Creates a new enumerator that contains the same enumeration state as the current one.</para>
      <para>This method makes it possible to record a point in the enumeration sequence in order to return to that point at a later time. The caller must release this new enumerator separately from the first enumerator.</para>
    </summary>
    <param name="ppEnum">
      <para>A pointer to the cloned enumerator object.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</para>
    </returns>
    <seealso cref="IEnumConnections" />
  </member>
  <member name="IEnumConnections.Next">
    <summary>
      <para>Retrieves the specified number of items in the enumeration sequence.</para>
    </summary>
    <param name="cConnections">
      <para>The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</para>
    </param>
    <param name="rgcd">
      <para>An array of enumerated items.</para>
      <para>The enumerator is responsible for allocating any memory, and the caller is responsible for freeing it. If <i>celt</i> is greater than 1, the caller must also pass a non-NULL pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
    </param>
    <param name="pcFetched">
      <para>The number of items that were retrieved. This parameter is always less than or equal to the number of items requested.</para>
    </param>
    <returns>
      <para>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</para>
    </returns>
    <remarks>
      <para>After this method returns successfully, the caller is responsible for calling <see cref="Release" /> (see the <b>pUnk</b> member of <see cref="CONNECTDATA" />) for each element in the array. If <i>cConnections</i> is greater than one, the caller must also pass a non-NULL pointer to <i>lpcFetched</i> to get the number of pointers it has to be released.</para>
      <para>E_NOTIMPL is not allowed as a return value. If an error value is returned, no entries in the array are valid on exit, and therefore no release is required.</para>
    </remarks>
    <seealso cref="CONNECTDATA" />
    <seealso cref="IEnumConnections" />
  </member>
  <member name="IEnumConnections.Reset">
    <summary>
      <para>Resets the enumeration sequence to the beginning.</para>
    </summary>
    <returns>
      <para>The return value is S_OK.</para>
    </returns>
    <remarks>
      <para>There is no guarantee that the same set of objects will be enumerated after the reset operation has completed. A static collection is reset to the beginning, but it can be too expensive for some collections, such as files in a directory, to guarantee this condition.</para>
    </remarks>
    <seealso cref="IEnumConnections" />
  </member>
  <member name="IEnumConnections.Skip">
    <summary>
      <para>Skips over the specified number of items in the enumeration sequence.</para>
    </summary>
    <param name="cConnections">
      <para>The number of items to be skipped.</para>
    </param>
    <returns>
      <para>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</para>
    </returns>
    <seealso cref="IEnumConnections" />
  </member>
  <member name="IEnumConnections">
    <summary>
      <para>Enumerates the current connections for a connectable object.</para>
    </summary>
    <remarks>
      <para>Connectable objects support the following features:</para>
      <list type="bullet">
        <item>
          <description>Outgoing interfaces, such as event sets
</description>
        </item>
        <item>
          <description>The ability to enumerate the IIDs of the outgoing interfaces
</description>
        </item>
        <item>
          <description>The ability to connect and disconnect sinks to the object for those outgoing IIDs
</description>
        </item>
        <item>
          <description>The ability to enumerate the connections that exist to a particular outgoing interface
</description>
        </item>
      </list>
    </remarks>
    <seealso cref="IConnectionPoint" />
    <seealso cref="IConnectionPointContainer" />
    <seealso cref="IEnumConnectionPoints" />
  </member>
</doc>