<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleInPlaceSiteEx.OnInPlaceActivateEx">
    <summary>
      <para>Called by the embedded object to determine whether it needs to redraw itself upon activation.</para>
    </summary>
    <param name="pfNoRedraw">
      <para>A pointer to a variable that receives the current redraw status. The status is <b>TRUE</b> if the object need not redraw itself upon activation and <b>FALSE</b> otherwise. Windowless objects usually do not need the value returned by this parameter and may pass a <b>NULL</b> pointer to save the container the burden of computing this value.</para>
    </param>
    <param name="dwFlags">
      <para>Indicates whether the object is activated as a windowless object. This parameter takes values from the <see cref="ACTIVATEFLAGS" /> enumeration. See <see cref="IOleInPlaceSiteWindowless" /> for more information on windowless objects.</para>
    </param>
    <returns>
      <para>This method returns S_OK if the container allows the in-place activation.
Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method replaces <see cref="IOleInPlaceSite.OnInPlaceActivate" />. If the older method is used, the object must always redraw itself on activation.</para>
      <para>Windowless objects are required to use this method instead of <see cref="IOleInPlaceSite.OnInPlaceActivate" /> to notify the container of whether they are activating windowless or not.</para>
      <h3>Notes to Implementers</h3>
      <para>The container should carefully check the invalidation status of the object, its z-order, clipping and any other relevant parameters to determine the appropriate value to return in <i>pfNoRedraw</i>.</para>
      <para>A container can cache the value of the <see cref="ACTIVATEFLAGS" /> enumeration instead of calling the <see cref="GetWindow" /> method in the <see cref="IOleInPlaceObjectWindowless" /> interface repeatedly.</para>
    </remarks>
    <seealso cref="ACTIVATEFLAGS" />
    <seealso cref="IOleInPlaceObjectWindowless" />
    <seealso cref="IOleInPlaceSite.OnInPlaceActivate" />
    <seealso cref="IOleInPlaceSiteEx" />
    <seealso cref="IOleInPlaceSiteWindowless" />
  </member>
  <member name="IOleInPlaceSiteEx.OnInPlaceDeactivateEx">
    <summary>
      <para>Notifies the container if the object needs to be redrawn upon deactivation.</para>
    </summary>
    <param name="fNoRedraw">
      <para>If <b>TRUE</b>, the container need not redraw the object after completing the deactivation; if <b>FALSE</b> the object must be redrawn after deactivation.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method replaces <see cref="IOleInPlaceSite.OnInPlaceDeactivate" />. If the older method is used, the object must always be redrawn on deactivation.</para>
    </remarks>
    <seealso cref="IOleInPlaceSite.OnInPlaceDeactivate" />
    <seealso cref="IOleInPlaceSiteEx" />
  </member>
  <member name="IOleInPlaceSiteEx.RequestUIActivate">
    <summary>
      <para>Notifies the container that the object is about to enter the UI-active state.</para>
    </summary>
    <returns>
      <para>This method returns S_OK if the object can continue the activation process and call <see cref="IOleInPlaceSite.OnUIActivate" />. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The object cannot enter the UI-active state. The object must call <see cref="IOleInPlaceSite.OnUIDeactivate" /> so the container can perform its the necessary processing to restore the focus.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The operation failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An object calls this method to determine if it can enter the UI-active state and to notify the container that it is about to make this transition. The container can return S_FALSE to deny this request, for example, if the end user has canceled the operation or if the currently active object will not relinquish its active state.</para>
      <para>If the object does not call <b>IOleInPlaceSiteEx.RequestUIActivate</b>, the container handles data validation and fires Enter and Exit events from <see cref="IOleInPlaceSite.OnUIActivate" />.</para>
    </remarks>
    <seealso cref="IOleInPlaceSite.OnUIActivate" />
    <seealso cref="IOleInPlaceSite.OnUIDeactivate" />
    <seealso cref="IOleInPlaceSiteEx" />
  </member>
  <member name="IOleInPlaceSiteEx">
    <summary>
      <para>Provides an additional set of activation and deactivation notification methods that enable an object to avoid unnecessary flashing on the screen when the object is activated and deactivated.</para>
      <para>When an object is activated, it does not know if its visual display is already correct. When the object is deactivated, the container does not know if the visual display is correct. To avoid a redraw and the associated screen flicker in both cases, the container can provide this extension to <see cref="IOleInPlaceSite" />.</para>
    </summary>
    <seealso cref="IOleInPlaceSite" />
  </member>
</doc>