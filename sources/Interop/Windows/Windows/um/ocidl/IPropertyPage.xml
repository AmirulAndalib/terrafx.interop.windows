<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPropertyPage.Activate">
    <summary>
      <para>Creates the dialog box window for the property page.</para>
      <para>The dialog box is created without a frame, caption, or system menu/controls. The text in the dialog should match the locale obtained through <see cref="IPropertyPageSite.GetLocaleID" />.</para>
    </summary>
    <param name="hWndParent">
      <para>The window handle of the parent of the dialog box that is being created.</para>
    </param>
    <param name="pRect">
      <para>A pointer to the <see cref="RECT" /> structure containing the positioning information for the dialog box. This method must create its dialog box with the placement and dimensions described by this structure.</para>
    </param>
    <param name="bModal">
      <para>Indicates whether the dialog box frame is modal (<b>TRUE</b>) or modeless (<b>FALSE</b>).</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>prc</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The property page maintains the window handle created in this process, which it uses to destroy the dialog box within <see cref="IPropertyPage.Deactivate" />.</para>
      <h3>Notes to Implementers</h3>
      <para>E_NOTIMPL is not a valid return value.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.Apply">
    <summary>
      <para>Applies the current values to the underlying objects associated with the property page as previously passed to
<see cref="IPropertyPage.SetObjects" />.</para>
    </summary>
    <returns>
      <para>This method can return the standard return values <b>E_OUTOFMEMORY</b> and
<b>E_UNEXPECTED</b>, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Changes were successfully applied and the property page is current with the underlying objects.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>Changes were applied, but the property page cannot determine if its state is current with the
objects.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The objects to be changed are provided through a previous call to
<see cref="IPropertyPage.SetObjects" />. By calling
<b>IPropertyPage.SetObjects</b> prior to calling this
method, the caller ensures that all underlying objects have the correct interfaces through which to communicate
changes. Therefore, this method should not fail because of non-existent interfaces.</para>
      <para>After applying its values, the property page should determine if its state is now current with the objects in
order to properly implement
<see cref="IPropertyPage.IsPageDirty" /> and to provide both
<b>S_OK</b> and <b>S_FALSE</b> return values.</para>
      <h3>Notes to Implementers</h3>
      <para>E_NOTIMPL is not a valid return value.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.Deactivate">
    <summary>
      <para>Destroys the window created in <see cref="IPropertyPage.Activate" />.</para>
    </summary>
    <returns>
      <para>This method can return the standard return values E_UNEXPECTED and S_OK.</para>
    </returns>
    <remarks>
      <h3>Notes to Implementers</h3>
      <para>It is important that property pages not keep the dialog box around as an optimization. In a property sheet with many property pages, memory consumption would become excessive if all property pages kept their dialog boxes created at all times. Destroying the dialog box prevents excessive memory consumption due to a very large number of created controls in the dialog boxes. If the frame wishes to keep pages alive while they are not visible, it can use <see cref="IPropertyPage.Show" /> for that purpose. The decision is ultimately left to the frame.</para>
      <para>E_NOTIMPL is not a valid return value.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.GetPageInfo">
    <summary>
      <para>Retrieves information about the property page.</para>
    </summary>
    <param name="pPageInfo">
      <para>A pointer to the caller-allocated <see cref="PROPPAGEINFO" /> structure in which the property page stores its page information. All allocations stored in this structure become the responsibility of the caller.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The structure was successfully filled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>pPageInfo</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Implementers</h3>
      <para>E_NOTIMPL is not a valid return value.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.Help">
    <summary>
      <para>Invokes the property page help in response to an end-user request.</para>
    </summary>
    <param name="pszHelpDir">
      <para>A pointer to the string under the <b>HelpDir</b> key in the property page's CLSID information in the registry. If <b>HelpDir</b> does not exist, this will be the path found in the <b><a href="https://docs.microsoft.com//windows/desktop/com/inprocserver32">InprocServer32</a></b> entry minus the server file name. (Note that <b><a href="https://docs.microsoft.com//windows/desktop/com/localserver32">LocalServer32</a></b> is not checked, because local property pages are not supported).</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The page displayed its own help.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>Help is either not provided or is provided only through the information is <see cref="PROPPAGEINFO" />.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Callers</h3>
      <para>Calls to this method must occur between calls to <see cref="IPropertyPage.Activate" /> and <see cref="IPropertyPage.Deactivate" />.</para>
      <h3>Notes to Implementers</h3>
      <para>If the page fails this method (such as E_NOTIMPL), then the frame will attempt to use the <b>pszHelpFile</b> and <b>dwHelpContext</b> members of the <see cref="PROPPAGEINFO" /> structure obtained through <see cref="IPropertyPage.GetPageInfo" />. Therefore, the page should either implement <b>IPropertyPage.Help</b> or return help information through <b>IPropertyPage.GetPageInfo</b>.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
    <seealso cref="PROPPAGEINFO" />
  </member>
  <member name="IPropertyPage.IsPageDirty">
    <summary>
      <para>Indicates whether the property page has changed since it was activated or since the most recent call to <see cref="Apply" />.</para>
    </summary>
    <returns>
      <para>This method returns S_OK to indicate that the property page has changed. Otherwise, it returns S_FALSE.</para>
    </returns>
    <remarks>
      <para>The property sheet uses this information to enable or disable the <b>Apply</b> button in the dialog box. There is no need to apply the values on a property page if those values are already current with the underlying objects.</para>
      <h3>Notes to Implementers</h3>
      <para>This method has no reason to return an error code, since the inability to determine if the page is dirty should return S_OK as a default. In this way, the user has a chance to update the values. The page should not return an error code, since an error code is not the same as S_OK and would indicate that the page is not dirty. Then, the property frame could potentially disable the <b>Apply</b> button, not allowing the user to make sure that the property values are current.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.Move">
    <summary>
      <para>Positions and resizes the property page dialog box within the frame.</para>
    </summary>
    <param name="pRect">
      <para>A pointer to the <see cref="RECT" /> structure containing the positioning information for the property page dialog box.</para>
    </param>
    <returns>
      <para>This method can return the standard return value E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>prc</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The rectangle specified by <i>prc</i> is treated identically to that passed to <see cref="IPropertyPage.Activate" />.</para>
      <h3>Notes to Callers</h3>
      <para>Calls to this method must occur after a call to <see cref="IPropertyPage.Activate" /> and before a corresponding call to <see cref="IPropertyPage.Deactivate" />.</para>
      <h3>Notes to Implementers</h3>
      <para>The page must create its dialog box with the placement and dimensions described by this structure.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.SetObjects">
    <summary>
      <para>Provides the property page with an array of pointers to objects associated with this property page.</para>
      <para>When the property page receives a call to <see cref="IPropertyPage.Apply" />, it must send value changes to these objects through whatever interfaces are appropriate. The property page must query for those interfaces. This method can fail if the objects do not support the interfaces expected by the property page.</para>
    </summary>
    <param name="cObjects">
      <para>The number of pointers in the array pointed to by <i>ppUnk</i>. If this parameter is 0, the property page must release any pointers previously passed to this method.</para>
    </param>
    <param name="ppUnk">
      <para>A pointer to an array of <see cref="IUnknown" /> interface pointers where each pointer identifies a unique object affected by the property sheet in which this (and possibly other) property pages are displayed. The property page must cache these pointers calling <see cref="AddRef" /> for each pointer at that time. This array of pointers is the same one that was passed to <see cref="OleCreatePropertyFrame" /> or <see cref="OleCreatePropertyFrameIndirect" /> to invoke the property sheet.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The property page successfully saved the pointers it needed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOINTERFACE</b>
            </para>
          </description>
          <description>
            <para>One of the objects in <i>ppUnk</i> did not support the interface expected by this property page, and so this property page cannot communicate with it.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>ppUnk</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The property page is required to keep the pointers returned by this method or others queried through them. If these specific <see cref="IUnknown" /> pointers are held, the property page must call <see cref="AddRef" /> through each when caching them, until the time when <b>SetObjects</b> is called with <i>cObjects</i> equal to 0. At that time, the property page must call <see cref="Release" /> through each pointer, releasing any objects that it held.</para>
      <para>The caller must provide the property page with these objects before calling <see cref="IPropertyPage.Activate" />, and should call <b>SetObjects</b> with zero as the parameter when deactivating the page or when releasing the object entirely. Each call to <b>SetObjects</b> with a non-<b>NULL</b><i>ppUnk</i> parameter must be matched with a later call to <b>SetObjects</b> with 0 in the <i>cObjects</i> parameter.</para>
      <h3>Notes to Implementers</h3>
      <para>E_NOTIMPL is not a valid return value.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.SetPageSite">
    <summary>
      <para>Initializes a property page and provides the page with a pointer to the <see cref="IPropertyPageSite" /> interface through which the property page communicates with the property frame.</para>
    </summary>
    <param name="pPageSite">
      <para>A pointer to the <see cref="IPropertyPageSite" /> interface of the page site that manages and provides services to this property page within the entire property sheet.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</para>
    </returns>
    <remarks>
      <h3>Notes to Implementers</h3>
      <para>If the <i>pPageSite</i> parameter is <b>NULL</b>, this method must call <see cref="Release" /> on any <see cref="IPropertyPageSite" /> pointer passed during a previous call to this method. If non-<b>NULL</b>, this method must save the <b>IPropertyPageSite</b> pointer value and call <see cref="AddRef" />. Two consecutive calls to this method with a non-<b>NULL</b> site pointer are not allowed and should cause the property page to return E_UNEXPECTED.</para>
      <para>E_NOTIMPL is not a valid return value. All property pages must implement this method.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.Show">
    <summary>
      <para>Makes the property page dialog box visible or invisible. If the page is made visible, the page should set the focus to itself, specifically to the first property on the page.</para>
    </summary>
    <param name="nCmdShow">
      <para>A command describing whether to become visible (SW_SHOW or SW_SHOWNORMAL) or hidden (SW_HIDE). No other values are valid for this parameter.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_UNEXPECTED, and S_OK.</para>
    </returns>
    <remarks>
      <h3>Notes to Callers</h3>
      <para>Calls to this method must occur after a call to <see cref="IPropertyPage.Activate" /> and before a corresponding call to <see cref="IPropertyPage.Deactivate" />.</para>
      <h3>Notes to Implementers</h3>
      <para>E_NOTIMPL is not a valid return value. E_OUTOFMEMORY is not a valid return value, since no memory should be used in implementing this method.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage.TranslateAccelerator">
    <summary>
      <para>Passes a keystroke to the property page for processing.</para>
    </summary>
    <param name="pMsg">
      <para>A pointer to the <see cref="MSG" /> structure describing the keystroke to be processed.</para>
    </param>
    <returns>
      <para>This method can return the standard return value E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The property page handles the accelerator.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The property page handles accelerators, but this one was not useful to it.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The property page does not handle accelerators.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>pMsg</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Callers</h3>
      <para>Calls to this method must occur after a call to <see cref="IPropertyPage.Activate" /> and before the corresponding call to <see cref="IPropertyPage.Deactivate" />.</para>
    </remarks>
    <seealso cref="IPropertyPage" />
  </member>
  <member name="IPropertyPage">
    <summary>
      <para>Provides the main features of a property page object that manages a particular page within a property sheet. A property page implements at least <b>IPropertyPage</b> and can optionally implement <see cref="IPropertyPage2" /> if selection of a specific property is supported. See <see cref="IPerPropertyBrowsing.MapPropertyToPage" /> for more information on specific property browsing. The methods of <b>IPropertyPage2</b> enable the property sheet or property frame to instruct the page when to perform specific actions, mostly based on user input such as switching between pages or pressing various buttons that the frame itself manages in the dialog box.</para>
      <para>A property page manages a dialog box that contains only those controls that should be displayed for that one page within the property sheet itself. This means that the dialog box template used to define the page should only carry the WS_CHILD style and no others. It should not include any style related to a frame, caption, or system menus or controls.</para>
    </summary>
    <seealso cref="IPerPropertyBrowsing" />
    <seealso cref="IPropertyPage2" />
    <seealso cref="IPropertyPageSite" />
    <seealso cref="ISpecifyPropertyPage" />
    <seealso cref="OleCreatePropertyFrame" />
    <seealso cref="OleCreatePropertyFrameIndirect" />
  </member>
</doc>