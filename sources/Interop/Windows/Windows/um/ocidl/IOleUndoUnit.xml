<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleUndoUnit.Do">
    <summary>Instructs the undo unit to carry out its action. Note that if it contains child undo units, it must call their Do methods as well.</summary>
    <param name="pUndoManager">A pointer to the undo manager. See <see cref="IOleUndoManager" />.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IOleUndoUnit.GetDescription">
    <summary>Retrieves a description of the undo unit that can be used in the undo or redo user interface.</summary>
    <param name="pBstr">A pointer to string that describes this undo unit.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IOleUndoUnit.GetUnitType">
    <summary>Retrieves the CLSID and a type identifier for the undo unit.</summary>
    <param name="pClsid">A pointer to CLSID for the undo unit.</param>
    <param name="plID">A pointer to the type identifier for the undo unit.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IOleUndoUnit.OnNextAdd">
    <summary>Notifies the last undo unit in the collection that a new unit has been added.</summary>
    <returns>Implementations of this method always return S_OK. The <b>HRESULT</b> return type is used only for remotability.</returns>
  </member>
  <member name="IOleUndoUnit">
    <summary>
      <para>Serves as the main interface on an undo unit. An undo unit encapsulates the information necessary to undo or redo a single action.</para>
      <para>When an object's state changes and it needs to create an undo unit, it first needs to know what parent units are open. It calls the <see cref="IOleUndoManager.GetOpenParentState" /> method to determine this. If the call returns S_FALSE, then there is no enabling parent. If the call returns S_OK but the UAS_NOPARENTENABLE flag is set, then the open parent is a disabling parent. In either of these cases, the object calls <see cref="IOleUndoManager.DiscardFrom" />(NULL) on the undo manager and skips creating the undo unit.</para>
      <para>If the method returns S_OK, but the UAS_BLOCKED flag is set, then the open parent is a blocking parent. The object does not need to create an undo unit, since it would be immediately discarded. If the return value is S_OK and neither of the bit flags are set, then the object creates the undo unit and calls <see cref="IOleUndoManager.Add" /> on the undo manager.</para>
      <para>The object should retain a pointer to the undo manager.</para>
    </summary>
  </member>
</doc>