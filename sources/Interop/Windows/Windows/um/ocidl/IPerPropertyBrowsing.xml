<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPerPropertyBrowsing.GetDisplayString">
    <summary>
      <para>Retrieves a text string describing the specified property.</para>
    </summary>
    <param name="dispID">
      <para>The dispatch identifier of the property whose display name is requested.</para>
    </param>
    <param name="pBstr">
      <para>A pointer to a variable that receives the display name for the property identified in <i>dispID</i>. The string is allocated by this method using <b>SysAllocString</b>. Upon return, the string is the responsibility of the caller, which must free it with <b>SysFreeString</b> when it is no longer needed.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The display name was successfully returned.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The object does not provide display names for individual properties. The caller has the recourse to check the object's type information for the text name of the object in this case.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in pbstr is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IPerPropertyBrowsing" />
  </member>
  <member name="IPerPropertyBrowsing.GetPredefinedStrings">
    <summary>
      <para>Retrieves an array description strings for the allowable values that the specified property can accept.</para>
    </summary>
    <param name="dispID">
      <para>The dispatch identifier of the property.</para>
    </param>
    <param name="pCaStringsOut">
      <para>A pointer to a caller-allocated, counted array structure that contains the element count and address of a method-allocated array of string pointers. This method also allocates memory for the string values containing the predefined names, and it stores the string pointers in the array. If the method fails, no memory is allocated, and the contents of the structure are undefined.</para>
    </param>
    <param name="pCaCookiesOut">
      <para>A pointer to the caller-allocated, counted array structure that contains the element count and address of a method-allocated array of <b>DWORD</b> values. The values in the array can be passed to <see cref="IPerPropertyBrowsing.GetPredefinedValue" /> to retrieve the value associated with the name in the same array position inside <i>pCaStringsOut</i>. If the method fails, no memory is allocated, and the contents of the structure are undefined.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>This method is not implemented and predefined names are not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>pCaStringsOut</i> or <i>pCaCookiesOut</i> is not valid. For example, either parameter may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Each string returned in the array pointed to by <i>pCaStringsOut</i> has a matching token in the counted array pointed to by <i>pCaCookiesOut</i>, where the token can be passed to <see cref="IPerPropertyBrowsing.GetPredefinedValue" /> to get the actual value (a <b>VARIANT</b>) corresponding to the string.</para>
      <para>Using the predefined strings, a caller can obtain a list of strings for populating user interface elements, such as a drop-down listbox. When the end user selects one of these strings as a value to assign to a property, the caller can then obtain the corresponding value through <see cref="IPerPropertyBrowsing.GetPredefinedValue" />.</para>
      <h3>Notes to Callers</h3>
      <para>Both the <see cref="CALPOLESTR" /> and <see cref="CADWORD" /> structures passed to this method are caller-allocated. The caller is responsible for freeing each string pointed to from the <b>CALPOLESTR</b> array as well as the <b>CALPOLESTR</b> structure.</para>
      <para>All memory is allocated with <see cref="CoTaskMemAlloc" />. The caller is responsible for freeing the strings and the array with <see cref="CoTaskMemFree" />.</para>
      <para>Upon return from this method, the caller is responsible for all this memory and must free it when it is no longer needed. Code to achieve this appears as follows.</para>
      <code>CALPOLESTR     castr;
CWDWORD        cadw;
ULONG          i;

pIPerPropertyBrowsing-&gt;GetPredefinedStrings(dispID, &amp;amp;amp;amp;amp;amp;amp;castr, &amp;amp;amp;amp;amp;amp;amp;cadw);

//...Use the strings and the cookies

CoTaskMemFree((void *)cadw.pElems);

for (i=0; i &lt; castr.cElems; i++)
    CoTaskMemFree((void *)castr.pElems[i]);

CoTaskMemFree((void *)castr.pElems);

</code>
      <h3>Notes to Implementers</h3>
      <para>Support for predefined names and values is not required. If your object does not support these names, return E_NOTIMPL from this method. If this method is not implemented, <see cref="IPerPropertyBrowsing.GetPredefinedValue" /> must not be implemented either.</para>
      <para>This method fills the <b>cElems</b> and <b>pElems</b> members of the <see cref="CADWORD" /> and <see cref="CALPOLESTR" /> structures. It allocates the arrays pointed to by these structures with <see cref="CoTaskMemAlloc" /> and fills those arrays. In the <b>CALPOLESTR</b> case, this method also allocates each string with <b>CoTaskMemAlloc</b>, storing each string pointer in the array.</para>
    </remarks>
    <seealso cref="CADWORD" />
    <seealso cref="CALPOLESTR" />
    <seealso cref="IPerPropertyBrowsing" />
  </member>
  <member name="IPerPropertyBrowsing.GetPredefinedValue">
    <summary>
      <para>Retrieves the value of the specified property that is associated with a predefined string name. This property is associated with a predefined string name as returned from <see cref="IPerPropertyBrowsing.GetPredefinedStrings" />. The predefined string is identified by a token returned from <b>GetPredefinedStrings</b>.</para>
    </summary>
    <param name="dispID">
      <para>The dispatch identifier of the property for which a predefined value is requested.</para>
    </param>
    <param name="dwCookie">
      <para>A token identifying which value to return. The token was previously returned in the <i>pCaCookiesOut</i> array filled by <see cref="GetPredefinedStrings" />.</para>
    </param>
    <param name="pVarOut">
      <para>A pointer to the <b>VARIANT</b> value for the property.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>This object does not support predefined strings or predefined values.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>pVarOut</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Callers</h3>
      <para>The caller is responsible for freeing any allocations contained in the <b>VARIANT</b>. Unless the <b>vt</b> member of <b>VARIANT</b> is VT_VARIANT, the caller can free memory using a single call to <b>VariantClear</b>. Otherwise, the caller must recursively free the contained <b>VARIANT</b> values before freeing the outer <b>VARIANT</b>.</para>
      <h3>Notes to Implementers</h3>
      <para>Support for predefined names and values is not required. If your object does not support these names, return E_NOTIMPL from this method. If this method is not implemented, <see cref="IPerPropertyBrowsing.GetPredefinedStrings" /> must not be implemented either.</para>
      <para>This method allocates any memory needed inside the <b>VARIANT</b>.</para>
    </remarks>
    <seealso cref="IPerPropertyBrowsing" />
  </member>
  <member name="IPerPropertyBrowsing.MapPropertyToPage">
    <summary>
      <para>Retrieves the CLSID of the property page associated with the specified property.</para>
    </summary>
    <param name="dispID">
      <para>The dispatch identifier of the property.</para>
    </param>
    <param name="pClsid">
      <para>A pointer to the CLSID identifying the property page associated with the property specified by <i>dispID</i>. If this method fails, *<i>pClsid</i> is set to CLSID_NULL.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The object does not support property pages at all or does not support mapping properties to the page CLSID. In other words, this feature of specific property browsing is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>pClsid</i> is not valid. For example, it may be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CLSID returned from this method can be passed to <see cref="OleCreatePropertyFrameIndirect" /> to specify the initial page to display in the property sheet.</para>
    </remarks>
    <seealso cref="IPerPropertyBrowsing" />
  </member>
  <member name="IPerPropertyBrowsing">
    <summary>
      <para>Retrieves the information in the property pages offered by an object.</para>
    </summary>
    <seealso cref="IPropertyPage" />
    <seealso cref="IPropertyPage2" />
    <seealso cref="IPropertyPageSite" />
    <seealso cref="ISpecifyPropertyPage" />
  </member>
</doc>