<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPointerInactive.GetActivationPolicy">
    <summary>Retrieves the current activation policy for the object. This method is called by the container on receipt of a WM_SETCURSOR or WM_MOUSEMOVE message when an inactive object is under the mouse pointer.</summary>
    <param name="pdwPolicy">A pointer to a variable that receives the activation policy. Possible values come from the <see cref="POINTERINACTIVE" /> enumeration.</param>
    <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
  </member>
  <member name="IPointerInactive.OnInactiveMouseMove">
    <summary>Notifies the object that the mouse pointer has moved over it so the object can fire mouse events. This method is called by the container on receipt of a WM_MOUSEMOVE method when an inactive object is under the mouse pointer.</summary>
    <param name="pRectBounds">The object bounding rectangle, in client coordinates of the containing window. This parameter tells the object its exact position and size on the screen when the WM_MOUSEMOVE message was received. This value is specified in units of the client's coordinate system.</param>
    <param name="x">The horizontal coordinate of mouse location in units of the client's containing window.</param>
    <param name="y">The vertical coordinate of mouse location in units of the client's containing window.</param>
    <param name="grfKeyState">The current state of the keyboard modifier keys on the keyboard. Possible values can be a combination of any of the values MK_CONTROL, MK_SHIFT, MK_ALT, MK_BUTTON, MK_LBUTTON, MK_MBUTTON, and MK_RBUTTON.</param>
    <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
  </member>
  <member name="IPointerInactive.OnInactiveSetCursor">
    <summary>Sets the mouse pointer for an inactive object. This method is called by the container on receipt of a WM_SETCURSOR method when an inactive object is under the mouse pointer.</summary>
    <param name="pRectBounds">The object bounding rectangle specified in client coordinate units of the containing window. This parameter tells the object its exact position and size on the screen when the WM_SETCURSOR message was received. This value is specified in units of the client's coordinate system.</param>
    <param name="x">The horizontal coordinate of mouse location in units of the client's containing window.</param>
    <param name="y">The vertical coordinate of mouse location in units of the client's containing window.</param>
    <param name="dwMouseMsg">The identifier of the mouse message for which a WM_SETCURSOR occurred.</param>
    <param name="fSetAlways">If this value is <b>TRUE</b>, the object must set the cursor; if this value is <b>FALSE</b>, the object is not obligated to set the cursor, and should return S_FALSE in that case.</param>
    <returns>
      <para>This method can return the standard return value E_FAIL, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mouse pointer was successfully set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object did not set the cursor; the container should either set the cursor or call the object again with the parameter <i>fSetAlways</i> set to <b>TRUE</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPointerInactive">
    <summary>
      <para>Enables an object to remain inactive most of the time, yet still participate in interaction with the mouse, including drag and drop.</para>
      <para>Objects can be active (in-place or UI active) or they can be inactive (loaded or running). An active object creates a window and can receive Windows mouse and keyboard messages. An inactive object can render itself and provide a representation of its data in a given format. While they provide more functionality, active objects also consume more resources than inactive objects. Typically, they are larger and slower than inactive objects. Thus, keeping an object inactive can provide performance improvements.</para>
      <para>However, an object, such as a control, needs to be able to control the mouse pointer, fire mouse events, and act as a drop target so it can participate in the user interface of its container application.</para>
    </summary>
  </member>
</doc>