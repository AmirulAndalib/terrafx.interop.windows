<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleUndoManager.Add">
    <summary>Adds a simple undo unit to the collection. While a parent undo unit is open, the undo manager adds undo units to it by calling <see cref="IOleParentUndoUnit.Add" />.</summary>
    <param name="pUU">An <see cref="IOleUndoUnit" /> pointer to the undo unit to be added.</param>
    <returns>This method returns S_OK if the specified unit was successfully added, the parent unit was blocked, or the undo manager is disabled.</returns>
  </member>
  <member name="IOleUndoManager.Close">
    <summary>Closes the specified parent undo unit.</summary>
    <param name="pPUU">A pointer to an <see cref="IOleParentUndoUnit" /> interface for the currently open parent unit to be closed.</param>
    <param name="fCommit">Indicates whether to keep or discard the unit. If <b>TRUE</b>, the unit is kept in the collection. If <b>FALSE</b>, the unit is discarded. This parameter is used to allow the client to discard an undo unit under construction if an error or a cancellation occurs.</param>
    <returns>
      <para>This method returns S_OK if the undo manager had an open parent undo unit and it was successfully closed. If the undo manager is disabled, it should immediately return S_OK and do nothing else. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The parent undo unit did not have an open child and it was successfully closed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>pPUU</i> does not match the currently open parent undo unit, then implementations of this method should return E_INVALIDARG without changing any internal state unless the parent unit is blocked.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.DiscardFrom">
    <summary>Instructs the undo manager to discard the specified undo unit and all undo units below it on the undo or redo stack.</summary>
    <param name="pUU">An <see cref="IOleUndoUnit" /> pointer to the undo unit to be discarded. This parameter can be <b>NULL</b> to discard the entire undo or redo stack. If the parameter is not <b>NULL</b> then the stack will not be discarded.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified undo unit was not found in the stacks.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo manager is disabled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.Enable">
    <summary>Enables or disables the undo manager.</summary>
    <param name="fEnable">Indicates whether to enable or disable the undo manager. If <b>TRUE</b>, the undo manager should be enabled. If <b>FALSE</b>, the undo manager should be disabled.</param>
    <returns>
      <para>This method returns S_OK if the undo manager was successfully enabled or disabled. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is an open undo unit on the stack or the undo manager is currently performing an undo or a redo.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.EnumRedoable">
    <summary>Creates an enumerator object that the caller can use to iterate through a series of top-level undo units from the redo stack.</summary>
    <param name="ppEnum">Address of <see cref="IEnumOleUndoUnits" /> pointer variable that receives the interface pointer to the enumerator object.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo manager is disabled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.EnumUndoable">
    <summary>Creates an enumerator object that the caller can use to iterate through a series of top-level undo units from the undo stack.</summary>
    <param name="ppEnum">Address of <see cref="IEnumOleUndoUnits" /> pointer variable that receives the interface pointer to the enumerator object.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo manager is disabled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.GetLastRedoDescription">
    <summary>Retrieves the description for the top-level undo unit that is on top of the redo stack.</summary>
    <param name="pBstr">A pointer to a string that contains a description of the top-level undo unit on the redo stack.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo stack is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo manager is disabled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.GetLastUndoDescription">
    <summary>Retrieves the description for the top-level undo unit that is on top of the undo stack.</summary>
    <param name="pBstr">A pointer to a string that contains a description of the top-level undo unit on the undo stack.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo stack is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo manager is disabled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.GetOpenParentState">
    <summary>Retrieves state information about the innermost open parent undo unit.</summary>
    <param name="pdwState">A pointer to a variable that receives the state information. This information is a value taken from the <see cref="UASFLAGS" /> enumeration.</param>
    <returns>This method returns S_OK if there is an open parent unit and its state was successfully returned or the undo manager is disabled; otherwise, S_FALSE.</returns>
  </member>
  <member name="IOleUndoManager.Open">
    <summary>Opens a new parent undo unit, which becomes part of its containing unit's undo stack.</summary>
    <param name="pPUU">An <see cref="IOleParentUndoUnit" /> pointer to the parent undo unit to be opened.</param>
    <returns>This method returns S_OK if the parent undo unit was successfully opened or if a currently open unit is blocked. If the undo manager is currently disabled, it will return S_OK and do nothing else.</returns>
  </member>
  <member name="IOleUndoManager.RedoTo">
    <summary>Instructs the undo manager to invoke undo actions back through the redo stack, down to and including the specified undo unit.</summary>
    <param name="pUU">An <see cref="IOleUndoUnit" /> pointer to the top level unit to redo. If this parameter is <b>NULL</b>, the most recently added top level unit is used.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified undo unit is not on the redo stack.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ABORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both the undo attempt and the rollback attempt failed. The undo manager should never propagate the E_ABORT obtained from a contained undo unit. Instead, it should map any E_ABORT values returned from other undo units to E_FAIL.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo manager is disabled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager.UndoTo">
    <summary>Instructs the undo manager to invoke undo actions back through the undo stack, down to and including the specified undo unit.</summary>
    <param name="pUU">Pointer to the top level unit to undo. If this parameter is <b>NULL</b>, the most recently added top level unit is used.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified undo unit is not on the undo stack.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ABORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both the undo attempt and the rollback attempt failed. The undo manager should never propagate the E_ABORT obtained from a contained undo unit. Instead, it should map any E_ABORT values returned from other undo units to E_FAIL. The undo manager should map any E_ABORT value returned from other undo units to E_FAIL because the caller of <see cref="IOleUndoManager.UndoTo" /> knows that the undo attempt and the rollback attempt failed and this is the only reason for the return value of E_ABORT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The undo manager is disabled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleUndoManager">
    <summary>The <b>IOleUndoManager</b> interface enables containers to implement multi-level undo and redo operations for actions that occur within contained controls.</summary>
  </member>
</doc>